(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

function to_rep(x: positive) : int = positiveqtint(x)

logic of_rep : int -> positive

axiom inversion_axiom :
  (forall x:positive [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:positive [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,bool) farray
}

logic slide : (int,bool) farray, int, int -> (int,bool) farray

axiom slide_eq :
  (forall a:(int,bool) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,bool) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,bool) farray, a__first: int, a__last: int,
  b: (int,bool) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_int((a[temp___idx_154])) = to_int((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_int((a[temp___idx_154])) = to_int((b[((b__first - a__first) + temp___idx_154)]))))))))

logic partial_count_selected_locations : (int,bool) farray, int -> int

logic partial_count_selected_locations__function_guard : int,
  (int,bool) farray, int -> prop

type sum_type

logic sum_typeqtint : sum_type -> int

axiom sum_typeqtaxiom : (forall i:sum_type. (0 <= sum_typeqtint(i)))

axiom sum_typeqtaxiom1 : (forall i:sum_type. (sum_typeqtint(i) <= 100))

predicate in_range3(x: int) = ((0 <= x) and (x <= 100))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : sum_type, sum_type -> bool

logic dummy2 : sum_type

type sum_type__ref = { sum_type__content : sum_type
}

function sum_type__ref_sum_type__content__projection(a: sum_type__ref) : sum_type =
  (a).sum_type__content

predicate dynamic_invariant1(temp___expr_163: int, temp___is_init_159: bool,
  temp___skip_constant_160: bool, temp___do_toplevel_161: bool,
  temp___do_typ_inv_162: bool) = (((temp___is_init_159 = true) or
  (0 <= 100)) -> in_range3(temp___expr_163))

type index_type

logic index_typeqtint : index_type -> int

axiom index_typeqtaxiom : (forall i:index_type. (1 <= index_typeqtint(i)))

axiom index_typeqtaxiom1 : (forall i:index_type. (index_typeqtint(i) <= 100))

predicate in_range4(x: int) = ((1 <= x) and (x <= 100))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : index_type, index_type -> bool

logic dummy3 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref_index_type__content__projection(a: index_type__ref) : index_type =
  (a).index_type__content

predicate dynamic_invariant2(temp___expr_170: int, temp___is_init_166: bool,
  temp___skip_constant_167: bool, temp___do_toplevel_168: bool,
  temp___do_typ_inv_169: bool) = (((temp___is_init_166 = true) or
  (1 <= 100)) -> in_range4(temp___expr_170))

axiom partial_count_selected_locations__def_axiom :
  (forall sel:(int,bool) farray.
  (forall from:int [partial_count_selected_locations(sel, from)].
  ((dynamic_invariant2(from, true, true, true, true) and
  partial_count_selected_locations__function_guard(partial_count_selected_locations(sel,
  from), sel, from)) ->
  (forall sel1:(int,bool) farray. forall from1:int.
  partial_count_selected_locations__function_guard(partial_count_selected_locations(sel1,
  (from1 + 1)), sel1, (from1 + 1))))))

axiom partial_count_selected_locations__def_axiom1 :
  (forall sel:(int,bool) farray.
  (forall from:int [partial_count_selected_locations(sel, from)].
  ((dynamic_invariant2(from, true, true, true, true) and
  partial_count_selected_locations__function_guard(partial_count_selected_locations(sel,
  from), sel, from)) -> (partial_count_selected_locations(sel,
  from) = ((if ((sel[from]) = true) then 1 else 0) + (if (from <  100) then partial_count_selected_locations(sel,
  (from + 1)) else 0))))))

logic count_selected_locations : (int,bool) farray -> int

logic count_selected_locations__function_guard : int,
  (int,bool) farray -> prop

axiom count_selected_locations__post_axiom :
  (forall sel:(int,bool) farray [count_selected_locations(sel)].
  (let result = count_selected_locations(sel) : int in
  (count_selected_locations__function_guard(result, sel) ->
  dynamic_invariant1(result, true, false, true, true))))

axiom count_selected_locations__def_axiom :
  (forall sel:(int,bool) farray.
  partial_count_selected_locations__function_guard(partial_count_selected_locations(sel,
  1), sel, 1))

axiom count_selected_locations__def_axiom1 :
  (forall sel:(int,bool) farray [count_selected_locations(sel)].
  (count_selected_locations(sel) = partial_count_selected_locations(sel, 1)))

logic sel : (int,bool) farray

logic attr__ATTRIBUTE_ADDRESS : int

type map__ref1 = { map__content1 : (int,positive) farray
}

logic slide1 : (int,positive) farray, int, int -> (int,positive) farray

axiom slide_eq1 :
  (forall a:(int,positive) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,positive) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq6(a: (int,positive) farray, a__first: int, a__last: int,
  b: (int,positive) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)])))))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)]))))))))

logic max : (int,positive) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

predicate dynamic_invariant3(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range2(temp___expr_46))

axiom partial_count_selected_locations__post_axiom :
  (forall sel1:(int,bool) farray.
  (forall from:int [partial_count_selected_locations(sel1, from)].
  (dynamic_invariant2(from, true, true, true, true) -> (let result =
  partial_count_selected_locations(sel1, from) : int in
  (partial_count_selected_locations__function_guard(result, sel1, from) ->
  (result <= ((100 - from) + 1)))))))

axiom partial_count_selected_locations__post_axiom1 :
  (forall sel1:(int,bool) farray.
  (forall from:int [partial_count_selected_locations(sel1, from)].
  (dynamic_invariant2(from, true, true, true, true) -> (let result =
  partial_count_selected_locations(sel1, from) : int in
  (partial_count_selected_locations__function_guard(result, sel1, from) ->
  dynamic_invariant1(result, true, false, true, true))))))

 (* File "count_locations.ads", line 22, characters 0-0 *)
goal defqtvc :
  (forall st_count:int. ((st_count = 0) -> (dynamic_invariant1(st_count,
  true, false, true, true) ->
  (forall lowest_max:int. ((lowest_max = 2147483647) ->
  (dynamic_invariant(lowest_max, true, false, true, true) ->
  (forall st:int. ((st = 1) -> ((andb((if (1 <= st) then true else false),
  (if (st <= 100) then true else false)) = true) -> (let o = sel
  : (int,bool) farray in (let o1 = partial_count_selected_locations(o, st)
  : int in
  ((forall st1:int. forall o2:(int,bool) farray.
   partial_count_selected_locations__function_guard(partial_count_selected_locations(o2,
   (st1 + 1)), o2, (st1 + 1))) ->
  ((partial_count_selected_locations__function_guard(o1, o, st) and
  (dynamic_invariant1(o1, true, false, true, true) and
  ((o1 = ((if ((o[st]) = true) then 1 else 0) + (if (st <  100) then partial_count_selected_locations(o,
  (st + 1)) else 0))) and (o1 <= ((100 - st) + 1))))) -> (let o2 = sel
  : (int,bool) farray in (let o3 = count_selected_locations(o2) : int in
  ((forall o4:(int,bool) farray.
   partial_count_selected_locations__function_guard(partial_count_selected_locations(o4,
   1), o4, 1)) ->
  ((count_selected_locations__function_guard(o3, o2) and
  (dynamic_invariant1(o3, true, false, true, true) and
  (o3 = partial_count_selected_locations(o2, 1)))) ->
  (count_selected_locations__function_guard(count_selected_locations(sel),
  sel) ->
  ((forall st1:int.
   partial_count_selected_locations__function_guard(partial_count_selected_locations(sel,
   st1), sel, st1)) ->
  ((count_selected_locations(sel) = (st_count + partial_count_selected_locations(sel,
  st))) ->
  ((forall s:int. (((1 <= s) and (s <= (st - 1))) -> (((sel[s]) = true) ->
   (lowest_max <= to_rep((max[s])))))) ->
  (((forall s:int. (((1 <= s) and (s <= (st - 1))) ->
    (not ((sel[s]) = true)))) and
  (lowest_max = 2147483647)) or
  (exists s:int. (((1 <= s) and (s <= (st - 1))) and (((sel[s]) = true) and
  (to_rep((max[s])) = lowest_max))))))))))))))))))))))))))
