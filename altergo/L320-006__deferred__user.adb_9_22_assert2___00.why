(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic b : bool

logic attr__ATTRIBUTE_ADDRESS : int

type us_split_fields = { rec__pack__t1__x : bool
}

function us_split_fields_rec__pack__t1__x__projection(a: us_split_fields) : bool =
  (a).rec__pack__t1__x

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq1(a: us_rep, b1: us_rep) : bool =
  (if (to_int(((a).us_split_fields1).rec__pack__t1__x) = to_int(((b1).us_split_fields1).rec__pack__t1__x)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic pack__t1__x__first__bit : int

logic pack__t1__x__last__bit : int

logic pack__t1__x__position : int

axiom pack__t1__x__first__bit_axiom : (0 <= pack__t1__x__first__bit)

axiom pack__t1__x__last__bit_axiom :
  (pack__t1__x__first__bit <  pack__t1__x__last__bit)

axiom pack__t1__x__position_axiom : (0 <= pack__t1__x__position)

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type t1__ref = { t1__content : us_rep
}

function t1__ref_t1__content__projection(a: t1__ref) : us_rep =
  (a).t1__content

logic x1 : us_rep

logic attr__ATTRIBUTE_ADDRESS1 : int

logic query_x1 : unit -> bool

logic query_x1__function_guard : bool, unit -> prop

axiom query_x1__post_axiom :
  (forall us_void_param:unit [query_x1(us_void_param)]. (let result =
  query_x1(us_void_param) : bool in (query_x1__function_guard(result,
  us_void_param) -> (result = true))))

axiom query_x1__def_axiom :
  (forall us_void_param:unit [query_x1(us_void_param)].
  ((query_x1(us_void_param) = true) ->
  (((x1).us_split_fields1).rec__pack__t1__x = true)))

axiom query_x1__def_axiom1 :
  (forall us_void_param:unit [query_x1(us_void_param)].
  ((((x1).us_split_fields1).rec__pack__t1__x = true) ->
  (query_x1(us_void_param) = true)))

logic query_x2 : unit -> int

logic query_x2__function_guard : int, unit -> prop

type t2

logic t2qtint : t2 -> int

axiom t2qtaxiom : (forall i:t2. (1 <= t2qtint(i)))

axiom t2qtaxiom1 : (forall i:t2. (t2qtint(i) <= 10))

predicate in_range1(x: int) = ((1 <= x) and (x <= 10))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : t2, t2 -> bool

logic dummy1 : t2

type t2__ref = { t2__content : t2
}

function t2__ref_t2__content__projection(a: t2__ref) : t2 = (a).t2__content

predicate dynamic_invariant(temp___expr_168: int, temp___is_init_164: bool,
  temp___skip_constant_165: bool, temp___do_toplevel_166: bool,
  temp___do_typ_inv_167: bool) = (((temp___is_init_164 = true) or
  (1 <= 10)) -> in_range1(temp___expr_168))

axiom query_x2__post_axiom :
  (forall us_void_param:unit [query_x2(us_void_param)]. (let result =
  query_x2(us_void_param) : int in (query_x2__function_guard(result,
  us_void_param) -> (result = 3))))

axiom query_x2__post_axiom1 :
  (forall us_void_param:unit [query_x2(us_void_param)]. (let result =
  query_x2(us_void_param) : int in (query_x2__function_guard(result,
  us_void_param) -> dynamic_invariant(result, true, false, true, true))))

axiom x1__def_axiom : (x1 = { us_split_fields1 = { rec__pack__t1__x =
  of_int(1) } })

 (* File "user.adb", line 2, characters 0-0 *)
goal defqtvc : (({ us_split_fields1 = { rec__pack__t1__x = of_int(1) }
  } = x1) ->
  (forall spark__branch:bool. ((spark__branch = b) ->
  ((not (spark__branch = true)) -> (query_x1__function_guard(query_x1(void),
  void) -> ((query_x1(void) = true) ->
  (query_x2__function_guard(query_x2(void), void) ->
  (query_x2(void) = 3))))))))
