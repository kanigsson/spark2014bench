(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

logic addthree : int, int, int -> int

logic addthree__function_guard : int, int, int, int -> prop

type int200

logic int200qtint : int200 -> int

axiom int200qtaxiom : (forall i:int200. (0 <= int200qtint(i)))

axiom int200qtaxiom1 : (forall i:int200. (int200qtint(i) <= 200))

predicate in_range1(x: int) = ((0 <= x) and (x <= 200))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : int200, int200 -> bool

logic dummy1 : int200

type int200__ref = { int200__content : int200
}

function int200__ref_int200__content__projection(a: int200__ref) : int200 =
  (a).int200__content

predicate dynamic_invariant1(temp___expr_1009: int,
  temp___is_init_1005: bool, temp___skip_constant_1006: bool,
  temp___do_toplevel_1007: bool, temp___do_typ_inv_1008: bool) =
  (((temp___is_init_1005 = true) or (0 <= 200)) ->
  in_range1(temp___expr_1009))

axiom addthree__post_axiom :
  (forall a:int. forall b:int. forall c:int [addthree(a, b, c)].
  (((dynamic_invariant1(a, true, true, true, true) and dynamic_invariant1(b,
  true, true, true, true)) and dynamic_invariant1(c, true, true, true,
  true)) -> (let result = addthree(a, b, c) : int in
  (addthree__function_guard(result, a, b, c) -> dynamic_invariant(result,
  true, false, true, true)))))

axiom addthree__def_axiom :
  (forall a:int. forall b:int. forall c:int [addthree(a, b, c)].
  (((dynamic_invariant1(a, true, true, true, true) and dynamic_invariant1(b,
  true, true, true, true)) and dynamic_invariant1(c, true, true, true,
  true)) -> (addthree(a, b, c) = ((a + b) + c))))

logic i1 : int

logic attr__ATTRIBUTE_ADDRESS : int

logic i2 : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type int100

logic int100qtint : int100 -> int

axiom int100qtaxiom : (forall i:int100. (0 <= int100qtint(i)))

axiom int100qtaxiom1 : (forall i:int100. (int100qtint(i) <= 100))

predicate in_range2(x: int) = ((0 <= x) and (x <= 100))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : int100, int100 -> bool

logic dummy2 : int100

type int100__ref = { int100__content : int100
}

function int100__ref_int100__content__projection(a: int100__ref) : int100 =
  (a).int100__content

predicate dynamic_invariant2(temp___expr_1002: int, temp___is_init_998: bool,
  temp___skip_constant_999: bool, temp___do_toplevel_1000: bool,
  temp___do_typ_inv_1001: bool) = (((temp___is_init_998 = true) or
  (0 <= 100)) -> in_range2(temp___expr_1002))

 (* File "inst_ext_ax.ads", line 24, characters 0-0 *)
goal defqtvc : (dynamic_invariant2(i1, true, false, true, true) ->
  (dynamic_invariant2(i2, true, false, true, true) -> (let o = i1 : int in
  (let o1 = i2 : int in (let o2 = i1 : int in (let o3 = addthree(o2, o1, o)
  : int in ((addthree__function_guard(o3, o2, o1, o) and
  (dynamic_invariant(o3, true, false, true, true) and
  (o3 = ((o2 + o1) + o)))) -> in_range(((i1 + i2) + o3)))))))))
