(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range4(x: int) = ((0 <= x) and (x <= 255))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : character, character -> bool

logic dummy3 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep1 : character -> int

logic of_rep1 : int -> character

axiom inversion_axiom1 :
  (forall x:character [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:character [to_rep1(x)]. in_range4(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range4(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq5(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep1((a[temp___idx_91])) = to_rep1((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep1((a[temp___idx_91])) = to_rep1((b[((b__first - a__first) + temp___idx_91)]))))))))

function to_rep2(x: integer) : int = integerqtint(x)

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep2(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep2(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

logic line_length : us_private, us_private, us_private, us_private,
  us_private, us_private, us_private -> int

logic line_length__function_guard : int, us_private, us_private, us_private,
  us_private, us_private, us_private, us_private -> prop

logic page_length : us_private, us_private, us_private, us_private,
  us_private, us_private, us_private -> int

logic page_length__function_guard : int, us_private, us_private, us_private,
  us_private, us_private, us_private, us_private -> prop

type map__ref1 = { map__content1 : (int,natural) farray
}

logic slide1 : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq1 :
  (forall a:(int,natural) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq7(a: (int,natural) farray, a__first: int, a__last: int,
  b: (int,natural) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep((a[temp___idx_156])) = to_rep((b[((b__first - a__first) + temp___idx_156)])))))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep((a[temp___idx_156])) = to_rep((b[((b__first - a__first) + temp___idx_156)]))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type map

type map__ref2 = { map__content2 : map
}

logic get : map, int, int -> natural

logic set : map, int, int, natural -> map

axiom Select_eq :
  (forall m:map.
  (forall i:int.
  (forall j:int.
  (forall a:natural [set(m, i, j, a)]. (get(set(m, i, j, a), i, j) = a)))))

axiom Select_neq :
  (forall m:map.
  (forall i:int. forall i2:int.
  (forall j:int. forall j2:int.
  (forall a:natural [get(set(m, i, j, a), i2, j2)| set(m, i, j, a), get(m,
  i2, j2)]. ((not ((i = i2) and (j = j2))) -> (get(set(m, i, j, a), i2,
  j2) = get(m, i2, j2)))))))

logic slide2 : map, int, int, int, int -> map

axiom slide_def2 :
  (forall a:map.
  (forall new_first:int. forall old_first:int.
  (forall new_first_2:int. forall old_first_2:int.
  (forall i:int.
  (forall j:int [get(slide2(a, old_first, new_first, old_first_2,
  new_first_2), i, j)]. (get(slide2(a, old_first, new_first, old_first_2,
  new_first_2), i, j) = get(a, (i - (new_first - old_first)),
  (j - (new_first_2 - old_first_2)))))))))

function bool_eq8(a: map, a__first: int, a__last: int, a__first_2: int,
  a__last_2: int, b: map, b__first: int, b__last: int, b__first_2: int,
  b__last_2: int) : bool =
  (if (((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (if (a__first_2 <= a__last_2) then ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2))) else (b__last_2 <  b__first_2))) and
  (forall temp___idx_157:int. forall temp___idx_158:int.
  ((((a__first <= temp___idx_157) and (temp___idx_157 <= a__last)) and
  ((a__first_2 <= temp___idx_158) and (temp___idx_158 <= a__last_2))) ->
  (to_rep(get(a, temp___idx_157, temp___idx_158)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_157),
  ((b__first_2 - a__first_2) + temp___idx_158))))))) then true else false)

axiom bool_eq_rev8 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq8(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev9 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq8(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev10 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq8(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev11 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq8(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first_2 <= a__last_2) ->
  (b__first_2 <= b__last_2)))))

axiom bool_eq_rev12 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq8(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first_2 <= a__last_2) ->
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2))))))

axiom bool_eq_rev13 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq8(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((not (a__first_2 <= a__last_2)) ->
  (b__last_2 <  b__first_2)))))

axiom bool_eq_rev14 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq8(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) ->
  (forall temp___idx_157:int. forall temp___idx_158:int.
  ((((a__first <= temp___idx_157) and (temp___idx_157 <= a__last)) and
  ((a__first_2 <= temp___idx_158) and (temp___idx_158 <= a__last_2))) ->
  (to_rep(get(a, temp___idx_157, temp___idx_158)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_157),
  ((b__first_2 - a__first_2) + temp___idx_158)))))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

logic sum_of : int -> int

logic sum_of__function_guard : int, int -> prop

axiom sum_of__post_axiom :
  (forall val__:int [sum_of(val__)]. in_range1(sum_of(val__)))

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type tTtaSP1

logic tTtaSP1qtint : tTtaSP1 -> int

axiom tTtaSP1qtaxiom : (forall i:tTtaSP1. (1 <= tTtaSP1qtint(i)))

axiom tTtaSP1qtaxiom1 : (forall i:tTtaSP1. (tTtaSP1qtint(i) <= 5))

predicate in_range5(x: int) = ((1 <= x) and (x <= 5))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : tTtaSP1, tTtaSP1 -> bool

logic dummy5 : tTtaSP1

type tTtaSP1__ref = { tTtaSP1__content : tTtaSP1
}

function tTtaSP1__ref_tTtaSP1__content__projection(a: tTtaSP1__ref) : tTtaSP1 =
  (a).tTtaSP1__content

type t6b

logic t6bqtint : t6b -> int

axiom t6bqtaxiom : (forall i:t6b. (1 <= t6bqtint(i)))

axiom t6bqtaxiom1 : (forall i:t6b. (t6bqtint(i) <= 5))

predicate in_range6(x: int) = ((1 <= x) and (x <= 5))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : t6b, t6b -> bool

logic dummy6 : t6b

type t6b__ref = { t6b__content : t6b
}

function t6b__ref_t6b__content__projection(a: t6b__ref) : t6b =
  (a).t6b__content

type tTtaSP11

logic tTtaSP1qtint1 : tTtaSP11 -> int

axiom tTtaSP1qtaxiom2 : (forall i:tTtaSP11. (1 <= tTtaSP1qtint1(i)))

axiom tTtaSP1qtaxiom3 : (forall i:tTtaSP11. (tTtaSP1qtint1(i) <= 3))

predicate in_range7(x: int) = ((1 <= x) and (x <= 3))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : tTtaSP11, tTtaSP11 -> bool

logic dummy7 : tTtaSP11

type tTtaSP1__ref1 = { tTtaSP1__content1 : tTtaSP11
}

function tTtaSP1__ref_tTtaSP1__content__2__projection(a: tTtaSP1__ref1) : tTtaSP11 =
  (a).tTtaSP1__content1

type t11b

logic t11bqtint : t11b -> int

axiom t11bqtaxiom : (forall i:t11b. (1 <= t11bqtint(i)))

axiom t11bqtaxiom1 : (forall i:t11b. (t11bqtint(i) <= 2))

predicate in_range8(x: int) = ((1 <= x) and (x <= 2))

function bool_eq12(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : t11b, t11b -> bool

logic dummy8 : t11b

type t11b__ref = { t11b__content : t11b
}

function t11b__ref_t11b__content__projection(a: t11b__ref) : t11b =
  (a).t11b__content

logic temp___String_Literal_224 : unit -> (int,character) farray

axiom temp___String_Literal_224__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_224(us_void_param)].
  (to_rep1((temp___String_Literal_224(us_void_param)[1])) = 79))

axiom temp___String_Literal_224__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_224(us_void_param)].
  (to_rep1((temp___String_Literal_224(us_void_param)[2])) = 112))

axiom temp___String_Literal_224__def_axiom2 :
  (forall us_void_param:unit [temp___String_Literal_224(us_void_param)].
  (to_rep1((temp___String_Literal_224(us_void_param)[3])) = 116))

axiom temp___String_Literal_224__def_axiom3 :
  (forall us_void_param:unit [temp___String_Literal_224(us_void_param)].
  (to_rep1((temp___String_Literal_224(us_void_param)[4])) = 105))

axiom temp___String_Literal_224__def_axiom4 :
  (forall us_void_param:unit [temp___String_Literal_224(us_void_param)].
  (to_rep1((temp___String_Literal_224(us_void_param)[5])) = 111))

axiom temp___String_Literal_224__def_axiom5 :
  (forall us_void_param:unit [temp___String_Literal_224(us_void_param)].
  (to_rep1((temp___String_Literal_224(us_void_param)[6])) = 110))

axiom temp___String_Literal_224__def_axiom6 :
  (forall us_void_param:unit [temp___String_Literal_224(us_void_param)].
  (to_rep1((temp___String_Literal_224(us_void_param)[7])) = 97))

axiom temp___String_Literal_224__def_axiom7 :
  (forall us_void_param:unit [temp___String_Literal_224(us_void_param)].
  (to_rep1((temp___String_Literal_224(us_void_param)[8])) = 108))

logic optional__B_1__ta__aggregate_def : int -> (int,natural) farray

logic temp___String_Literal_243 : unit -> (int,character) farray

axiom temp___String_Literal_243__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[1])) = 69))

axiom temp___String_Literal_243__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[2])) = 82))

axiom temp___String_Literal_243__def_axiom2 :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[3])) = 82))

axiom temp___String_Literal_243__def_axiom3 :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[4])) = 79))

axiom temp___String_Literal_243__def_axiom4 :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[5])) = 82))

axiom temp___String_Literal_243__def_axiom5 :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[6])) = 32))

axiom temp___String_Literal_243__def_axiom6 :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[7])) = 50))

axiom temp___String_Literal_243__def_axiom7 :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[8])) = 58))

axiom temp___String_Literal_243__def_axiom8 :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[9])) = 32))

axiom temp___String_Literal_243__def_axiom9 :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[10])) = 115))

axiom temp___String_Literal_243__def_axiom10 :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[11])) = 104))

axiom temp___String_Literal_243__def_axiom11 :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[12])) = 111))

axiom temp___String_Literal_243__def_axiom12 :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[13])) = 117))

axiom temp___String_Literal_243__def_axiom13 :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[14])) = 108))

axiom temp___String_Literal_243__def_axiom14 :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[15])) = 100))

axiom temp___String_Literal_243__def_axiom15 :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[16])) = 32))

axiom temp___String_Literal_243__def_axiom16 :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[17])) = 110))

axiom temp___String_Literal_243__def_axiom17 :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[18])) = 111))

axiom temp___String_Literal_243__def_axiom18 :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[19])) = 116))

axiom temp___String_Literal_243__def_axiom19 :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[20])) = 32))

axiom temp___String_Literal_243__def_axiom20 :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[21])) = 103))

axiom temp___String_Literal_243__def_axiom21 :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[22])) = 101))

axiom temp___String_Literal_243__def_axiom22 :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[23])) = 116))

axiom temp___String_Literal_243__def_axiom23 :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[24])) = 32))

axiom temp___String_Literal_243__def_axiom24 :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[25])) = 104))

axiom temp___String_Literal_243__def_axiom25 :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[26])) = 101))

axiom temp___String_Literal_243__def_axiom26 :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[27])) = 114))

axiom temp___String_Literal_243__def_axiom27 :
  (forall us_void_param:unit [temp___String_Literal_243(us_void_param)].
  (to_rep1((temp___String_Literal_243(us_void_param)[28])) = 101))

logic optional__B_3__ta__aggregate_def : int -> map

predicate dynamic_invariant1(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_46))

predicate dynamic_invariant2(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range4(temp___expr_74))

predicate dynamic_invariant3(temp___expr_96: us_t, temp___is_init_92: bool,
  temp___skip_constant_93: bool, temp___do_toplevel_94: bool,
  temp___do_typ_inv_95: bool) = ((not (temp___skip_constant_93 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_96),
  last1(temp___expr_96)))

predicate dynamic_invariant4(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range2(temp___expr_18))

logic rliteral : natural

axiom rliteral_axiom : (naturalqtint(rliteral) = 0)

axiom def_axiom :
  (forall temp___233:int. (dynamic_invariant(temp___233, true, true, true,
  true) ->
  (forall temp___234:int.
  ((optional__B_1__ta__aggregate_def(temp___233)[temp___234]) = rliteral))))

axiom def_axiom1 :
  (forall temp___245:int. (dynamic_invariant(temp___245, true, true, true,
  true) ->
  (forall temp___246:int. forall temp___247:int.
  (get(optional__B_3__ta__aggregate_def(temp___245), temp___246,
  temp___247) = rliteral))))

type count

logic countqtint : count -> int

axiom countqtaxiom : (forall i:count. (0 <= countqtint(i)))

axiom countqtaxiom1 : (forall i:count. (countqtint(i) <= 2147483647))

predicate in_range9(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq13(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq9 : count, count -> bool

logic dummy9 : count

type count__ref = { count__content : count
}

function count__ref_count__content__projection(a: count__ref) : count =
  (a).count__content

predicate dynamic_invariant5(temp___expr_164: int, temp___is_init_160: bool,
  temp___skip_constant_161: bool, temp___do_toplevel_162: bool,
  temp___do_typ_inv_163: bool) = (((temp___is_init_160 = true) or
  (0 <= 2147483647)) -> in_range9(temp___expr_164))

axiom line_length__post_axiom :
  (forall ada___ada__text_io__standard_in:us_private.
  forall ada___ada__text_io__file_system:us_private.
  forall ada___ada__text_io__standard_out:us_private.
  forall ada___ada__text_io__standard_err:us_private.
  forall ada___ada__text_io__current_in:us_private.
  forall ada___ada__text_io__current_out:us_private.
  forall ada___ada__text_io__current_err:us_private
  [line_length(ada___ada__text_io__standard_in,
  ada___ada__text_io__file_system, ada___ada__text_io__standard_out,
  ada___ada__text_io__standard_err, ada___ada__text_io__current_in,
  ada___ada__text_io__current_out, ada___ada__text_io__current_err)].
  dynamic_invariant5(line_length(ada___ada__text_io__standard_in,
  ada___ada__text_io__file_system, ada___ada__text_io__standard_out,
  ada___ada__text_io__standard_err, ada___ada__text_io__current_in,
  ada___ada__text_io__current_out, ada___ada__text_io__current_err), true,
  false, true, true))

axiom page_length__post_axiom :
  (forall ada___ada__text_io__standard_in:us_private.
  forall ada___ada__text_io__file_system:us_private.
  forall ada___ada__text_io__standard_out:us_private.
  forall ada___ada__text_io__standard_err:us_private.
  forall ada___ada__text_io__current_in:us_private.
  forall ada___ada__text_io__current_out:us_private.
  forall ada___ada__text_io__current_err:us_private
  [page_length(ada___ada__text_io__standard_in,
  ada___ada__text_io__file_system, ada___ada__text_io__standard_out,
  ada___ada__text_io__standard_err, ada___ada__text_io__current_in,
  ada___ada__text_io__current_out, ada___ada__text_io__current_err)].
  dynamic_invariant5(page_length(ada___ada__text_io__standard_in,
  ada___ada__text_io__file_system, ada___ada__text_io__standard_out,
  ada___ada__text_io__standard_err, ada___ada__text_io__current_in,
  ada___ada__text_io__current_out, ada___ada__text_io__current_err), true,
  false, true, true))

logic rliteral1 : natural

axiom rliteral_axiom1 : (naturalqtint(rliteral1) = 1)

 (* File "optional.adb", line 5, characters 0-0 *)
goal defqtvc :
  (forall standard_in:us_private. forall file_system:us_private.
  forall standard_out:us_private. forall standard_err:us_private.
  forall current_in:us_private. forall current_out:us_private.
  forall current_err:us_private.
  (forall standard_in1:us_private. forall file_system1:us_private.
  forall standard_out1:us_private. forall standard_err1:us_private.
  forall current_in1:us_private. forall current_out1:us_private.
  forall current_err1:us_private. (((line_length(standard_in, file_system,
  standard_out, standard_err, current_in, current_out,
  current_err) = line_length(standard_in1, file_system1, standard_out1,
  standard_err1, current_in1, current_out1, current_err1)) and
  (page_length(standard_in, file_system, standard_out, standard_err,
  current_in, current_out, current_err) = page_length(standard_in1,
  file_system1, standard_out1, standard_err1, current_in1, current_out1,
  current_err1))) ->
  ((exists ta:(int,natural) farray.
   ((ta = optional__B_1__ta__aggregate_def(0)) and
   (exists index:int. ((index = 1) and
   ((not (andb((if (1 <= index) then true else false),
   (if (index <= 5) then true else false)) = true)) or
   (exists temp___loop_entry_231:(int,natural) farray.
   ((temp___loop_entry_231 = ta) and
   (exists o:int. ((to_rep((temp___loop_entry_231[index])) = o) and
   (exists ta1:(int,natural) farray. exists index1:int.
   ((to_rep((temp___loop_entry_231[index1])) = 0) and
   ((andb((if (in_range6(index1) and
   (forall temp___229:int. (((1 <= temp___229) and (temp___229 <= 5)) ->
   (((5 <  temp___229) or ((temp___229 <  1) or (index1 <= temp___229))) ->
   ((ta1[temp___229]) = (ta[temp___229])))))) then true else false),
   (if ((1 <= index1) and (index1 <= 5)) then true else false)) = true) and
   (index1 = 5))))))))))))) ->
  (forall ta:map. ((ta = optional__B_3__ta__aggregate_def(0)) ->
  (let temp___235 = sum_of(2) : int in ((sum_of__function_guard(temp___235,
  2) and dynamic_invariant(temp___235, true, false, true, true)) ->
  (((1 <= temp___235) and (temp___235 <= 3)) ->
  (forall ta1:map. ((ta1 = set(ta, temp___235, 2, rliteral1)) ->
  (forall outer:int. ((outer = 1) ->
  (forall inner:int. ((inner = 1) ->
  ((andb((if (1 <= inner) then true else false),
  (if (inner <= 2) then true else false)) = true) ->
  (forall temp___loop_entry_242:map. ((temp___loop_entry_242 = ta1) ->
  (forall o:int. ((to_rep(get(temp___loop_entry_242, outer, inner)) = o) ->
  (to_rep(get(temp___loop_entry_242, outer, inner)) = 0)))))))))))))))))))))
