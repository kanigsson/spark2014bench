(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type my_int

logic my_intqtint : my_int -> int

axiom my_intqtaxiom : (forall i:my_int. (0 <= my_intqtint(i)))

axiom my_intqtaxiom1 : (forall i:my_int. (my_intqtint(i) <= 10000))

predicate in_range(x: int) = ((0 <= x) and (x <= 10000))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : my_int, my_int -> bool

logic dummy : my_int

type my_int__ref = { my_int__content : my_int
}

function my_int__ref_my_int__content__projection(a: my_int__ref) : my_int =
  (a).my_int__content

function to_rep(x: my_int) : int = my_intqtint(x)

logic of_rep : int -> my_int

axiom inversion_axiom :
  (forall x:my_int [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:my_int [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__pricing__item__price : my_int;
rec__pricing__item__number : my_int
}

function us_split_fields_rec__pricing__item__price__projection(a: us_split_fields) : my_int =
  (a).rec__pricing__item__price

function us_split_fields_rec__pricing__item__number__projection(a: us_split_fields) : my_int =
  (a).rec__pricing__item__number

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_fields1).rec__pricing__item__price) = to_rep(((b).us_split_fields1).rec__pricing__item__price)) and
  (to_rep(((a).us_split_fields1).rec__pricing__item__number) = to_rep(((b).us_split_fields1).rec__pricing__item__number))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic pricing__item__price__first__bit : int

logic pricing__item__price__last__bit : int

logic pricing__item__price__position : int

axiom pricing__item__price__first__bit_axiom :
  (0 <= pricing__item__price__first__bit)

axiom pricing__item__price__last__bit_axiom :
  (pricing__item__price__first__bit <  pricing__item__price__last__bit)

axiom pricing__item__price__position_axiom :
  (0 <= pricing__item__price__position)

logic pricing__item__number__first__bit : int

logic pricing__item__number__last__bit : int

logic pricing__item__number__position : int

axiom pricing__item__number__first__bit_axiom :
  (0 <= pricing__item__number__first__bit)

axiom pricing__item__number__last__bit_axiom :
  (pricing__item__number__first__bit <  pricing__item__number__last__bit)

axiom pricing__item__number__position_axiom :
  (0 <= pricing__item__number__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type item__ref = { item__content : us_rep
}

function item__ref_item__content__projection(a: item__ref) : us_rep =
  (a).item__content

logic it : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic mult : int, int -> int

logic mult__function_guard : int, int, int -> prop

logic bool_eq2 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq2(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq2(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

predicate dynamic_invariant(temp___expr_163: int, temp___is_init_159: bool,
  temp___skip_constant_160: bool, temp___do_toplevel_161: bool,
  temp___do_typ_inv_162: bool) = (((temp___is_init_159 = true) or
  (0 <= 10000)) -> in_range(temp___expr_163))

axiom mult__post_axiom :
  (forall x:int. forall y:int [mult(x, y)]. ((dynamic_invariant(x, true,
  true, true, true) and dynamic_invariant(y, true, true, true, true)) ->
  (let result = mult(x, y) : int in (mult__function_guard(result, x, y) ->
  (((x * y) <  10000) -> (result = (x * y)))))))

axiom mult__post_axiom1 :
  (forall x:int. forall y:int [mult(x, y)]. ((dynamic_invariant(x, true,
  true, true, true) and dynamic_invariant(y, true, true, true, true)) ->
  (let result = mult(x, y) : int in (mult__function_guard(result, x, y) ->
  ((not ((x * y) <  10000)) -> ((10000 <= (x * y)) -> (result = 10000)))))))

axiom mult__post_axiom2 :
  (forall x:int. forall y:int [mult(x, y)]. ((dynamic_invariant(x, true,
  true, true, true) and dynamic_invariant(y, true, true, true, true)) ->
  (let result = mult(x, y) : int in (mult__function_guard(result, x, y) ->
  dynamic_invariant(result, true, false, true, true)))))

 (* File "pricing.ads", line 19, characters 0-0 *)
goal defqtvc :
  (forall o:int.
  ((to_rep(((it).us_split_fields1).rec__pricing__item__number) = o) ->
  (forall o1:int.
  ((to_rep(((it).us_split_fields1).rec__pricing__item__price) = o1) ->
  (let o2 = mult(o1, o) : int in ((mult__function_guard(o2, o1, o) and
  (dynamic_invariant(o2, true, false, true, true) and (if (bool_lt((o1 * o),
  10000) = true) then (o2 = (o1 * o)) else ((bool_ge((o1 * o),
  10000) = true) -> (o2 = 10000))))) ->
  (forall pricing__price_of_item__result:int.
  ((pricing__price_of_item__result = o2) ->
  (mult__function_guard(mult(to_rep(((it).us_split_fields1).rec__pricing__item__price),
  to_rep(((it).us_split_fields1).rec__pricing__item__number)),
  to_rep(((it).us_split_fields1).rec__pricing__item__price),
  to_rep(((it).us_split_fields1).rec__pricing__item__number)) ->
  (pricing__price_of_item__result = mult(to_rep(((it).us_split_fields1).rec__pricing__item__price),
  to_rep(((it).us_split_fields1).rec__pricing__item__number))))))))))))
