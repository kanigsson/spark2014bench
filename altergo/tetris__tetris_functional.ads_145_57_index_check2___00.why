(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

type cell

predicate in_range1(x: int) = ((0 <= x) and (x <= 7))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : cell, cell -> bool

logic dummy1 : cell

type cell__ref = { cell__content : cell
}

function cell__ref_cell__content__projection(a: cell__ref) : cell =
  (a).cell__content

logic to_rep : cell -> int

logic of_rep : int -> cell

axiom inversion_axiom : (forall x:cell [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:cell [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,cell) farray
}

logic slide : (int,cell) farray, int, int -> (int,cell) farray

axiom slide_eq :
  (forall a:(int,cell) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,cell) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,cell) farray, a__first: int, a__last: int,
  b: (int,cell) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,cell) farray. forall b:(int,cell) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,cell) farray. forall b:(int,cell) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,cell) farray. forall b:(int,cell) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,cell) farray. forall b:(int,cell) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic dummy2 : (int,cell) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq2 : (int,cell) farray, (int,cell) farray -> bool

type map__ref1 = { map__content1 : (int,(int,cell) farray) farray
}

logic slide1 : (int,(int,cell) farray) farray, int,
  int -> (int,(int,cell) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,cell) farray) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,(int,cell) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,(int,cell) farray) farray, a__first: int,
  a__last: int, b: (int,(int,cell) farray) farray, b__first: int,
  b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq2((a[temp___idx_155]), 1, 10,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 10) = true)))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,(int,cell) farray) farray.
  forall b:(int,(int,cell) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,(int,cell) farray) farray.
  forall b:(int,(int,cell) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,(int,cell) farray) farray.
  forall b:(int,(int,cell) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,(int,cell) farray) farray.
  forall b:(int,(int,cell) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq2((a[temp___idx_155]), 1, 10,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 10) = true))))))

logic b : (int,(int,cell) farray) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic y : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic x : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type x_coord

logic x_coordqtint : x_coord -> int

axiom x_coordqtaxiom : (forall i:x_coord. (1 <= x_coordqtint(i)))

axiom x_coordqtaxiom1 : (forall i:x_coord. (x_coordqtint(i) <= 10))

predicate in_range2(x1: int) = ((1 <= x1) and (x1 <= 10))

function bool_eq4(x1: int, y1: int) : bool =
  (if (x1 = y1) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq3 : x_coord, x_coord -> bool

logic dummy3 : x_coord

type x_coord__ref = { x_coord__content : x_coord
}

function x_coord__ref_x_coord__content__projection(a: x_coord__ref) : x_coord =
  (a).x_coord__content

type y_coord

logic y_coordqtint : y_coord -> int

axiom y_coordqtaxiom : (forall i:y_coord. (1 <= y_coordqtint(i)))

axiom y_coordqtaxiom1 : (forall i:y_coord. (y_coordqtint(i) <= 50))

predicate in_range3(x1: int) = ((1 <= x1) and (x1 <= 50))

function bool_eq5(x1: int, y1: int) : bool =
  (if (x1 = y1) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : y_coord, y_coord -> bool

logic dummy4 : y_coord

type y_coord__ref = { y_coord__content : y_coord
}

function y_coord__ref_y_coord__content__projection(a: y_coord__ref) : y_coord =
  (a).y_coord__content

predicate dynamic_invariant1(temp___expr_546: int, temp___is_init_542: bool,
  temp___skip_constant_543: bool, temp___do_toplevel_544: bool,
  temp___do_typ_inv_545: bool) = (((temp___is_init_542 = true) or
  (0 <= 7)) -> in_range1(temp___expr_546))

predicate dynamic_invariant2(temp___expr_567: int, temp___is_init_563: bool,
  temp___skip_constant_564: bool, temp___do_toplevel_565: bool,
  temp___do_typ_inv_566: bool) = (((temp___is_init_563 = true) or
  (1 <= 10)) -> in_range2(temp___expr_567))

predicate dynamic_invariant3(temp___expr_574: int, temp___is_init_570: bool,
  temp___skip_constant_571: bool, temp___do_toplevel_572: bool,
  temp___do_typ_inv_573: bool) = (((temp___is_init_570 = true) or
  (1 <= 50)) -> in_range3(temp___expr_574))

 (* File "tetris_functional.ads", line 144, characters 0-0 *)
goal defqtvc : (dynamic_invariant(y, true, false, true, true) ->
  (dynamic_invariant(x, true, false, true, true) -> ((in_range2(x) and
  in_range3(y)) -> (((1 <= y) and (y <= 50)) -> (1 <= x)))))
