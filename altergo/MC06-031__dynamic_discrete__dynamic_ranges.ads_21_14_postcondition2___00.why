(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type int_array__ref = { int_array__content : us_t
}

function int_array__ref_int_array__content__projection(a: int_array__ref) : us_t =
  (a).int_array__content

logic a : us_t

logic attr__ATTRIBUTE_ADDRESS : int

logic c : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic nested : unit -> int

logic nested__function_guard : int, unit -> prop

logic last2 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy4 : integer

type dyn3__ref = { dyn3__content : integer
}

function dyn3__ref_dyn3__content__projection(a1: dyn3__ref) : integer =
  (a1).dyn3__content

predicate dynamic_invariant(temp___expr_250: int, temp___is_init_246: bool,
  temp___skip_constant_247: bool, temp___do_toplevel_248: bool,
  temp___do_typ_inv_249: bool) = (((temp___is_init_246 = true) or
  (0 <= last2)) -> dynamic_property1(0, last2, temp___expr_250))

axiom last__def_axiom : (last2 = c)

axiom nested__post_axiom :
  (forall us_void_param:unit [nested(us_void_param)]. ((((c <= last1(a)) and
  (first1(a) <= last1(a))) and (2 <= (last1(a) - first1(a)))) ->
  (let result = nested(us_void_param) : int in
  (nested__function_guard(result, us_void_param) -> (((result = 0) and
  (forall i:int. (((first1(a) <= i) and (i <= c)) ->
  (not (to_rep((to_array(a)[i])) = 0))))) or ((first1(a) <= result) and
  (to_rep((to_array(a)[result])) = 0)))))))

axiom nested__post_axiom1 :
  (forall us_void_param:unit [nested(us_void_param)]. ((((c <= last1(a)) and
  (first1(a) <= last1(a))) and (2 <= (last1(a) - first1(a)))) ->
  (let result = nested(us_void_param) : int in
  (nested__function_guard(result, us_void_param) -> dynamic_invariant(result,
  true, false, true, true)))))

predicate dynamic_invariant1(temp___expr_165: us_t, temp___is_init_161: bool,
  temp___skip_constant_162: bool, temp___do_toplevel_163: bool,
  temp___do_typ_inv_164: bool) = ((not (temp___skip_constant_162 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_165),
  last1(temp___expr_165)))

logic last3 : int

predicate dynamic_property2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy5 : integer

type dyn1__ref = { dyn1__content : integer
}

function dyn1__ref_dyn1__content__projection(a1: dyn1__ref) : integer =
  (a1).dyn1__content

logic last4 : int

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy6 : integer

type dyn2__ref = { dyn2__content : integer
}

function dyn2__ref_dyn2__content__projection(a1: dyn2__ref) : integer =
  (a1).dyn2__content

predicate dynamic_invariant2(temp___expr_243: int, temp___is_init_239: bool,
  temp___skip_constant_240: bool, temp___do_toplevel_241: bool,
  temp___do_typ_inv_242: bool) = (((temp___is_init_239 = true) or
  (0 <= last4)) -> dynamic_property3(0, last4, temp___expr_243))

axiom last__def_axiom1 : (last4 = (last3 - 1))

predicate dynamic_invariant3(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate dynamic_invariant4(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

predicate dynamic_invariant5(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_46))

predicate dynamic_invariant6(temp___expr_236: int, temp___is_init_232: bool,
  temp___skip_constant_233: bool, temp___do_toplevel_234: bool,
  temp___do_typ_inv_235: bool) = (((temp___is_init_232 = true) or
  (0 <= last3)) -> dynamic_property2(0, last3, temp___expr_236))

axiom last__def_axiom2 : (last3 = last1(a))

axiom c__def_axiom : (c = (last4 - 1))

 (* File "dynamic_ranges.ads", line 19, characters 0-0 *)
goal defqtvc : (dynamic_invariant1(a, true, false, true, true) ->
  (((first1(a) <= last1(a)) and (2 <= (last1(a) - first1(a)))) ->
  (forall dynamic_ranges__search_0__result:int. ((let o = (last4 - 1)
  : int in (in_range1(o) and (dynamic_property3(0, last4, o) and ((o = c) and
  (dynamic_invariant2(c, true, false, true, true) and (let temp___283 =
  last1(a) : int in (((first1(a) <= temp___283) and
  (temp___283 <= last1(a))) and
  (exists o1:int. ((to_rep((to_array(a)[temp___283])) = o1) and
  (exists spark__branch:bool.
  ((spark__branch = (if (o1 = 0) then true else false)) and
  (if (spark__branch = true) then (let o2 = last1(a) : int in
  (in_range2(o2) and (dynamic_ranges__search_0__result = o2))) else (let o2 =
  (last1(a) - 1) : int in (in_range1(o2) and (((first1(a) <= o2) and
  (o2 <= last1(a))) and
  (exists o3:int. ((to_rep((to_array(a)[o2])) = o3) and
  (exists spark__branch1:bool.
  ((spark__branch1 = (if (o3 = 0) then true else false)) and
  (if (spark__branch1 = true) then (let o4 = (last1(a) - 1) : int in
  (in_range1(o4) and (in_range2(o4) and
  (dynamic_ranges__search_0__result = o4)))) else (let o4 = nested(void)
  : int in ((nested__function_guard(o4, void) and (dynamic_invariant(o4,
  true, false, true, true) and (((o4 = 0) and
  (forall i:int. (((first1(a) <= i) and (i <= c)) ->
  (not (to_rep((to_array(a)[i])) = 0))))) or ((first1(a) <= o4) and
  (to_rep((to_array(a)[o4])) = 0))))) and
  (dynamic_ranges__search_0__result = o4))))))))))))))))))))))) ->
  (((dynamic_ranges__search_0__result = 0) and
  (forall i:int. (((first1(a) <= i) and (i <= last1(a))) ->
  (not (to_rep((to_array(a)[i])) = 0))))) or
  (((first1(a) <= dynamic_ranges__search_0__result) and
  (dynamic_ranges__search_0__result <= last1(a))) and
  (to_rep((to_array(a)[dynamic_ranges__search_0__result])) = 0)))))))
