(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_main_type

type us_rep = { rec__rec_types__test3__tree_3__is_null_pointer : bool;
rec__rec_types__test3__tree_3__pointer_address : int;
rec__rec_types__test3__tree_3__pointer_value_abstr : us_main_type
}

function us_rep_rec__rec_types__test3__tree_3__is_null_pointer__projection(a: us_rep) : bool =
  (a).rec__rec_types__test3__tree_3__is_null_pointer

function us_rep_rec__rec_types__test3__tree_3__pointer_address__projection(a: us_rep) : int =
  (a).rec__rec_types__test3__tree_3__pointer_address

function us_rep_rec__rec_types__test3__tree_3__pointer_value_abstr__projection(a: us_rep) : us_main_type =
  (a).rec__rec_types__test3__tree_3__pointer_value_abstr

type us_rep__ref = { us_rep__content : us_rep
}

function us_rep__ref___rep__content__5__projection(a: us_rep__ref) : us_rep =
  (a).us_rep__content

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if (((a).rec__rec_types__test3__tree_3__is_null_pointer = (b).rec__rec_types__test3__tree_3__is_null_pointer) and
  ((not ((a).rec__rec_types__test3__tree_3__is_null_pointer = true)) ->
  (((a).rec__rec_types__test3__tree_3__pointer_address = (b).rec__rec_types__test3__tree_3__pointer_address) and
  ((a).rec__rec_types__test3__tree_3__pointer_value_abstr = (b).rec__rec_types__test3__tree_3__pointer_value_abstr)))) then true else false)

logic dummy1 : us_rep

type tree_3__ref = { tree_3__content : us_rep
}

function tree_3__ref_tree_3__content__projection(a: tree_3__ref) : us_rep =
  (a).tree_3__content

type us_split_fields = { rec__rec_types__test3__tree_2_node__val : integer;
rec__rec_types__test3__tree_2_node__left : us_rep;
rec__rec_types__test3__tree_2_node__right : us_rep
}

function us_split_fields_rec__rec_types__test3__tree_2_node__val__projection(a: us_split_fields) : integer =
  (a).rec__rec_types__test3__tree_2_node__val

function us_split_fields_rec__rec_types__test3__tree_2_node__left__projection(a: us_split_fields) : us_rep =
  (a).rec__rec_types__test3__tree_2_node__left

function us_split_fields_rec__rec_types__test3__tree_2_node__right__projection(a: us_split_fields) : us_rep =
  (a).rec__rec_types__test3__tree_2_node__right

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__3__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep1, b: us_rep1) : bool =
  (if (((to_rep(((a).us_split_fields1).rec__rec_types__test3__tree_2_node__val) = to_rep(((b).us_split_fields1).rec__rec_types__test3__tree_2_node__val)) and
  (bool_eq1(((a).us_split_fields1).rec__rec_types__test3__tree_2_node__left,
  ((b).us_split_fields1).rec__rec_types__test3__tree_2_node__left) = true)) and
  (bool_eq1(((a).us_split_fields1).rec__rec_types__test3__tree_2_node__right,
  ((b).us_split_fields1).rec__rec_types__test3__tree_2_node__right) = true)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic rec_types__test3__tree_2_node__val__first__bit : int

logic rec_types__test3__tree_2_node__val__last__bit : int

logic rec_types__test3__tree_2_node__val__position : int

axiom rec_types__test3__tree_2_node__val__first__bit_axiom :
  (0 <= rec_types__test3__tree_2_node__val__first__bit)

axiom rec_types__test3__tree_2_node__val__last__bit_axiom :
  (rec_types__test3__tree_2_node__val__first__bit <  rec_types__test3__tree_2_node__val__last__bit)

axiom rec_types__test3__tree_2_node__val__position_axiom :
  (0 <= rec_types__test3__tree_2_node__val__position)

logic rec_types__test3__tree_2_node__left__first__bit : int

logic rec_types__test3__tree_2_node__left__last__bit : int

logic rec_types__test3__tree_2_node__left__position : int

axiom rec_types__test3__tree_2_node__left__first__bit_axiom :
  (0 <= rec_types__test3__tree_2_node__left__first__bit)

axiom rec_types__test3__tree_2_node__left__last__bit_axiom :
  (rec_types__test3__tree_2_node__left__first__bit <  rec_types__test3__tree_2_node__left__last__bit)

axiom rec_types__test3__tree_2_node__left__position_axiom :
  (0 <= rec_types__test3__tree_2_node__left__position)

logic rec_types__test3__tree_2_node__right__first__bit : int

logic rec_types__test3__tree_2_node__right__last__bit : int

logic rec_types__test3__tree_2_node__right__position : int

axiom rec_types__test3__tree_2_node__right__first__bit_axiom :
  (0 <= rec_types__test3__tree_2_node__right__first__bit)

axiom rec_types__test3__tree_2_node__right__last__bit_axiom :
  (rec_types__test3__tree_2_node__right__first__bit <  rec_types__test3__tree_2_node__right__last__bit)

axiom rec_types__test3__tree_2_node__right__position_axiom :
  (0 <= rec_types__test3__tree_2_node__right__position)

logic user_eq1 : us_rep1, us_rep1 -> bool

logic dummy2 : us_rep1

type tree_2_node__ref = { tree_2_node__content : us_rep1
}

function tree_2_node__ref_tree_2_node__content__projection(a: tree_2_node__ref) : us_rep1 =
  (a).tree_2_node__content

logic attr__ATTRIBUTE_ADDRESS : int

type us_main_type1

type us_rep2 = { rec__rec_types__test3__tree_2__is_null_pointer : bool;
rec__rec_types__test3__tree_2__pointer_address : int;
rec__rec_types__test3__tree_2__pointer_value_abstr : us_main_type1
}

function us_rep_rec__rec_types__test3__tree_2__is_null_pointer__projection(a: us_rep2) : bool =
  (a).rec__rec_types__test3__tree_2__is_null_pointer

function us_rep_rec__rec_types__test3__tree_2__pointer_address__projection(a: us_rep2) : int =
  (a).rec__rec_types__test3__tree_2__pointer_address

function us_rep_rec__rec_types__test3__tree_2__pointer_value_abstr__projection(a: us_rep2) : us_main_type1 =
  (a).rec__rec_types__test3__tree_2__pointer_value_abstr

type us_rep__ref1 = { us_rep__content1 : us_rep2
}

function us_rep__ref___rep__content__4__projection(a: us_rep__ref1) : us_rep2 =
  (a).us_rep__content1

function bool_eq3(a: us_rep2, b: us_rep2) : bool =
  (if (((a).rec__rec_types__test3__tree_2__is_null_pointer = (b).rec__rec_types__test3__tree_2__is_null_pointer) and
  ((not ((a).rec__rec_types__test3__tree_2__is_null_pointer = true)) ->
  (((a).rec__rec_types__test3__tree_2__pointer_address = (b).rec__rec_types__test3__tree_2__pointer_address) and
  ((a).rec__rec_types__test3__tree_2__pointer_value_abstr = (b).rec__rec_types__test3__tree_2__pointer_value_abstr)))) then true else false)

logic dummy3 : us_rep2

type tree_2__ref = { tree_2__content : us_rep2
}

function tree_2__ref_tree_2__content__projection(a: tree_2__ref) : us_rep2 =
  (a).tree_2__content

predicate default_initial_assumption(temp___expr_238: us_rep2,
  temp___skip_top_level_239: bool) =
  ((temp___expr_238).rec__rec_types__test3__tree_2__is_null_pointer = true)

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq4(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range1(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE1 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> bool

logic us_open : us_main_type1 -> us_rep1

logic us_close : us_rep1 -> us_main_type1

axiom close_open :
  (forall x:us_main_type1 [us_open(x)]. (us_close(us_open(x)) = x))

axiom open_close :
  (forall x:us_rep1 [us_close(x)]. (us_open(us_close(x)) = x))

function rec__rec_types__test3__tree_2__pointer_value(a: us_rep2) : us_rep1 =
  us_open((a).rec__rec_types__test3__tree_2__pointer_value_abstr)

predicate rec__rec_types__test3__tree_2__pointer_value__pred(a: us_rep2) =
  (not ((a).rec__rec_types__test3__tree_2__is_null_pointer = true))

logic us_null_pointer : us_rep2

axiom us_null_pointer__def_axiom :
  ((us_null_pointer).rec__rec_types__test3__tree_2__is_null_pointer = true)

type us_split_fields2 = { rec__rec_types__test3__tree_3_node__val : integer;
rec__rec_types__test3__tree_3_node__left : us_rep2;
rec__rec_types__test3__tree_3_node__middle : us_rep2;
rec__rec_types__test3__tree_3_node__right : us_rep2
}

function us_split_fields_rec__rec_types__test3__tree_3_node__val__projection(a: us_split_fields2) : integer =
  (a).rec__rec_types__test3__tree_3_node__val

function us_split_fields_rec__rec_types__test3__tree_3_node__left__projection(a: us_split_fields2) : us_rep2 =
  (a).rec__rec_types__test3__tree_3_node__left

function us_split_fields_rec__rec_types__test3__tree_3_node__middle__projection(a: us_split_fields2) : us_rep2 =
  (a).rec__rec_types__test3__tree_3_node__middle

function us_split_fields_rec__rec_types__test3__tree_3_node__right__projection(a: us_split_fields2) : us_rep2 =
  (a).rec__rec_types__test3__tree_3_node__right

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__4__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep3 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__4__projection(a: us_rep3) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq5(a: us_rep3, b: us_rep3) : bool =
  (if (((to_rep(((a).us_split_fields3).rec__rec_types__test3__tree_3_node__val) = to_rep(((b).us_split_fields3).rec__rec_types__test3__tree_3_node__val)) and
  (bool_eq3(((a).us_split_fields3).rec__rec_types__test3__tree_3_node__left,
  ((b).us_split_fields3).rec__rec_types__test3__tree_3_node__left) = true)) and
  ((bool_eq3(((a).us_split_fields3).rec__rec_types__test3__tree_3_node__middle,
  ((b).us_split_fields3).rec__rec_types__test3__tree_3_node__middle) = true) and
  (bool_eq3(((a).us_split_fields3).rec__rec_types__test3__tree_3_node__right,
  ((b).us_split_fields3).rec__rec_types__test3__tree_3_node__right) = true))) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic rec_types__test3__tree_3_node__val__first__bit : int

logic rec_types__test3__tree_3_node__val__last__bit : int

logic rec_types__test3__tree_3_node__val__position : int

axiom rec_types__test3__tree_3_node__val__first__bit_axiom :
  (0 <= rec_types__test3__tree_3_node__val__first__bit)

axiom rec_types__test3__tree_3_node__val__last__bit_axiom :
  (rec_types__test3__tree_3_node__val__first__bit <  rec_types__test3__tree_3_node__val__last__bit)

axiom rec_types__test3__tree_3_node__val__position_axiom :
  (0 <= rec_types__test3__tree_3_node__val__position)

logic rec_types__test3__tree_3_node__left__first__bit : int

logic rec_types__test3__tree_3_node__left__last__bit : int

logic rec_types__test3__tree_3_node__left__position : int

axiom rec_types__test3__tree_3_node__left__first__bit_axiom :
  (0 <= rec_types__test3__tree_3_node__left__first__bit)

axiom rec_types__test3__tree_3_node__left__last__bit_axiom :
  (rec_types__test3__tree_3_node__left__first__bit <  rec_types__test3__tree_3_node__left__last__bit)

axiom rec_types__test3__tree_3_node__left__position_axiom :
  (0 <= rec_types__test3__tree_3_node__left__position)

logic rec_types__test3__tree_3_node__middle__first__bit : int

logic rec_types__test3__tree_3_node__middle__last__bit : int

logic rec_types__test3__tree_3_node__middle__position : int

axiom rec_types__test3__tree_3_node__middle__first__bit_axiom :
  (0 <= rec_types__test3__tree_3_node__middle__first__bit)

axiom rec_types__test3__tree_3_node__middle__last__bit_axiom :
  (rec_types__test3__tree_3_node__middle__first__bit <  rec_types__test3__tree_3_node__middle__last__bit)

axiom rec_types__test3__tree_3_node__middle__position_axiom :
  (0 <= rec_types__test3__tree_3_node__middle__position)

logic rec_types__test3__tree_3_node__right__first__bit : int

logic rec_types__test3__tree_3_node__right__last__bit : int

logic rec_types__test3__tree_3_node__right__position : int

axiom rec_types__test3__tree_3_node__right__first__bit_axiom :
  (0 <= rec_types__test3__tree_3_node__right__first__bit)

axiom rec_types__test3__tree_3_node__right__last__bit_axiom :
  (rec_types__test3__tree_3_node__right__first__bit <  rec_types__test3__tree_3_node__right__last__bit)

axiom rec_types__test3__tree_3_node__right__position_axiom :
  (0 <= rec_types__test3__tree_3_node__right__position)

logic user_eq2 : us_rep3, us_rep3 -> bool

logic dummy4 : us_rep3

type tree_3_node__ref = { tree_3_node__content : us_rep3
}

function tree_3_node__ref_tree_3_node__content__projection(a: tree_3_node__ref) : us_rep3 =
  (a).tree_3_node__content

logic us_open1 : us_main_type -> us_rep3

logic us_close1 : us_rep3 -> us_main_type

axiom close_open1 :
  (forall x:us_main_type [us_open1(x)]. (us_close1(us_open1(x)) = x))

axiom open_close1 :
  (forall x:us_rep3 [us_close1(x)]. (us_open1(us_close1(x)) = x))

function rec__rec_types__test3__tree_3__pointer_value(a: us_rep) : us_rep3 =
  us_open1((a).rec__rec_types__test3__tree_3__pointer_value_abstr)

predicate rec__rec_types__test3__tree_3__pointer_value__pred(a: us_rep) =
  (not ((a).rec__rec_types__test3__tree_3__is_null_pointer = true))

logic us_null_pointer1 : us_rep

axiom us_null_pointer__def_axiom1 :
  ((us_null_pointer1).rec__rec_types__test3__tree_3__is_null_pointer = true)

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

predicate default_initial_assumption1(temp___expr_245: us_rep,
  temp___skip_top_level_246: bool) =
  ((temp___expr_245).rec__rec_types__test3__tree_3__is_null_pointer = true)

predicate default_initial_assumption2(temp___expr_252: us_rep1,
  temp___skip_top_level_253: bool) =
  (((((temp___expr_252).us_split_fields1).rec__rec_types__test3__tree_2_node__left).rec__rec_types__test3__tree_3__is_null_pointer = true) and
  ((((temp___expr_252).us_split_fields1).rec__rec_types__test3__tree_2_node__right).rec__rec_types__test3__tree_3__is_null_pointer = true))

predicate default_initial_assumption3(temp___expr_262: us_rep3,
  temp___skip_top_level_263: bool) =
  ((((((temp___expr_262).us_split_fields3).rec__rec_types__test3__tree_3_node__left).rec__rec_types__test3__tree_2__is_null_pointer = true) and
  ((((temp___expr_262).us_split_fields3).rec__rec_types__test3__tree_3_node__middle).rec__rec_types__test3__tree_2__is_null_pointer = true)) and
  ((((temp___expr_262).us_split_fields3).rec__rec_types__test3__tree_3_node__right).rec__rec_types__test3__tree_2__is_null_pointer = true))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 0)

logic rliteral1 : integer

axiom rliteral_axiom1 : (integerqtint(rliteral1) = 1)

 (* File "rec_types.ads", line 45, characters 0-0 *)
goal defqtvc :
  (forall us_next_pointer_address:int.
  (forall rec_types__test3__p_tree__x__assume:us_rep2.
  ((andb((if ((not ((rec_types__test3__p_tree__x__assume).rec__rec_types__test3__tree_2__is_null_pointer = true)) and
  ((rec_types__test3__p_tree__x__assume).rec__rec_types__test3__tree_2__pointer_address = us_next_pointer_address)) then true else false),
  (if (rec__rec_types__test3__tree_2__pointer_value(rec_types__test3__p_tree__x__assume) = {
  us_split_fields1 = { rec__rec_types__test3__tree_2_node__val = rliteral;
  rec__rec_types__test3__tree_2_node__left = us_null_pointer1;
  rec__rec_types__test3__tree_2_node__right = us_null_pointer1 }
  }) then true else false)) = true) ->
  (forall x__pointer_value:us_split_fields. (({ us_split_fields1 =
  x__pointer_value
  } = rec__rec_types__test3__tree_2__pointer_value(rec_types__test3__p_tree__x__assume)) ->
  (forall x__pointer_address:int.
  ((x__pointer_address = (rec_types__test3__p_tree__x__assume).rec__rec_types__test3__tree_2__pointer_address) ->
  (forall x__is_null_pointer:bool.
  ((x__is_null_pointer = (rec_types__test3__p_tree__x__assume).rec__rec_types__test3__tree_2__is_null_pointer) ->
  (let q_ = (rec__rec_types__test3__tree_2__pointer_value({
  rec__rec_types__test3__tree_2__is_null_pointer = x__is_null_pointer;
  rec__rec_types__test3__tree_2__pointer_address = x__pointer_address;
  rec__rec_types__test3__tree_2__pointer_value_abstr = us_close({
  us_split_fields1 = x__pointer_value }) })).us_split_fields1
  : us_split_fields in
  (forall us_next_pointer_address1:int.
  (forall o:us_rep.
  ((andb((if ((not ((o).rec__rec_types__test3__tree_3__is_null_pointer = true)) and
  ((o).rec__rec_types__test3__tree_3__pointer_address = us_next_pointer_address1)) then true else false),
  (if (rec__rec_types__test3__tree_3__pointer_value(o) = { us_split_fields3 =
  { rec__rec_types__test3__tree_3_node__val = rliteral1;
  rec__rec_types__test3__tree_3_node__left = us_null_pointer;
  rec__rec_types__test3__tree_3_node__middle = us_null_pointer;
  rec__rec_types__test3__tree_3_node__right = us_null_pointer }
  }) then true else false)) = true) ->
  (forall x__pointer_value1:us_split_fields. (({ us_split_fields1 =
  x__pointer_value1 } = rec__rec_types__test3__tree_2__pointer_value({
  rec__rec_types__test3__tree_2__is_null_pointer = x__is_null_pointer;
  rec__rec_types__test3__tree_2__pointer_address = x__pointer_address;
  rec__rec_types__test3__tree_2__pointer_value_abstr = us_close({
  us_split_fields1 = { rec__rec_types__test3__tree_2_node__val =
  (q_).rec__rec_types__test3__tree_2_node__val;
  rec__rec_types__test3__tree_2_node__left = o;
  rec__rec_types__test3__tree_2_node__right =
  (q_).rec__rec_types__test3__tree_2_node__right } }) })) ->
  rec__rec_types__test3__tree_2__pointer_value__pred({
  rec__rec_types__test3__tree_2__is_null_pointer = x__is_null_pointer;
  rec__rec_types__test3__tree_2__pointer_address = x__pointer_address;
  rec__rec_types__test3__tree_2__pointer_value_abstr = us_close({
  us_split_fields1 = x__pointer_value1 }) }))))))))))))))))
