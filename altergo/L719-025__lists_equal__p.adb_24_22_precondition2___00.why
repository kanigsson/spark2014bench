(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : count_type, count_type -> bool

logic dummy : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

function to_rep(x: count_type) : int = count_typeqtint(x)

logic of_rep : int -> count_type

axiom inversion_axiom :
  (forall x:count_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:count_type [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__p__my_lists__list__capacity : count_type
}

function us_split_discrs_rec__p__my_lists__list__capacity__projection(a: us_split_discrs) : count_type =
  (a).rec__p__my_lists__list__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__p__my_lists__list : us_main_type
}

function us_split_fields_rec__p__my_lists__list__projection(a: us_split_fields) : us_main_type =
  (a).rec__p__my_lists__list

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__p__my_lists__list__capacity) = to_rep(((b).us_split_discrs1).rec__p__my_lists__list__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__p__my_lists__list,
  ((b).us_split_fields1).rec__p__my_lists__list) = true)) then true else false)

predicate in_range2(rec__p__my_lists__list__capacity1: int,
  a: us_split_discrs) =
  (rec__p__my_lists__list__capacity1 = to_rep((a).rec__p__my_lists__list__capacity))

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic p__my_lists__list__capacity__first__bit : int

logic p__my_lists__list__capacity__last__bit : int

logic p__my_lists__list__capacity__position : int

axiom p__my_lists__list__capacity__first__bit_axiom :
  (0 <= p__my_lists__list__capacity__first__bit)

axiom p__my_lists__list__capacity__last__bit_axiom :
  (p__my_lists__list__capacity__first__bit <  p__my_lists__list__capacity__last__bit)

axiom p__my_lists__list__capacity__position_axiom :
  (0 <= p__my_lists__list__capacity__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type list__ref = { list__content : us_rep
}

function list__ref_list__content__projection(a: list__ref) : us_rep =
  (a).list__content

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep1

logic bool_eq3 : us_rep1, us_rep1 -> bool

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy2 : us_rep1

type sequence__ref = { sequence__content : us_rep1
}

function sequence__ref_sequence__content__projection(a: sequence__ref) : us_rep1 =
  (a).sequence__content

logic bool_eq4 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq4(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq4(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

logic length1 : us_rep1 -> int

logic length__function_guard : int, us_rep1 -> prop

function last(container: us_rep1) : int = (0 + length1(container))

logic last__function_guard : int, us_rep1 -> prop

logic get : us_rep1, int -> int

logic get__function_guard : int, us_rep1, int -> prop

function oeq(left: us_rep1, right: us_rep1) : bool =
  andb(bool_eq4(length1(left), length1(right)),
  (if (forall n:int. (((1 <= n) and (n <= last(left))) -> (get(left,
      n) = get(right, n)))) then true else false))

logic oeq__function_guard : bool, us_rep1, us_rep1 -> prop

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep2

logic bool_eq5 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic user_eq3 : us_rep2, us_rep2 -> bool

logic dummy3 : us_rep2

type map__ref = { map__content : us_rep2
}

function map__ref_map__content__projection(a: map__ref) : us_rep2 =
  (a).map__content

logic oeq1 : us_rep2, us_rep2 -> bool

logic oeq__function_guard1 : bool, us_rep2, us_rep2 -> prop

type us_split_fields2 = { rec__p__my_lists__cursor__node : count_type
}

function us_split_fields_rec__p__my_lists__cursor__node__projection(a: us_split_fields2) : count_type =
  (a).rec__p__my_lists__cursor__node

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep3 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__2__projection(a: us_rep3) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq6(a: us_rep3, b: us_rep3) : bool =
  (if (to_rep(((a).us_split_fields3).rec__p__my_lists__cursor__node) = to_rep(((b).us_split_fields3).rec__p__my_lists__cursor__node)) then true else false)

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic p__my_lists__cursor__node__first__bit : int

logic p__my_lists__cursor__node__last__bit : int

logic p__my_lists__cursor__node__position : int

axiom p__my_lists__cursor__node__first__bit_axiom :
  (0 <= p__my_lists__cursor__node__first__bit)

axiom p__my_lists__cursor__node__last__bit_axiom :
  (p__my_lists__cursor__node__first__bit <  p__my_lists__cursor__node__last__bit)

axiom p__my_lists__cursor__node__position_axiom :
  (0 <= p__my_lists__cursor__node__position)

logic user_eq4 : us_rep3, us_rep3 -> bool

logic dummy4 : us_rep3

type cursor__ref = { cursor__content : us_rep3
}

function cursor__ref_cursor__content__projection(a: cursor__ref) : us_rep3 =
  (a).cursor__content

type key_type__ref = { key_type__content : us_rep3
}

function key_type__ref_key_type__content__projection(a: key_type__ref) : us_rep3 =
  (a).key_type__content

logic has_key : us_rep2, us_rep3 -> bool

logic has_key__function_guard : bool, us_rep2, us_rep3 -> prop

logic get1 : us_rep2, us_rep3 -> int

logic get__function_guard1 : int, us_rep2, us_rep3 -> prop

logic length2 : us_rep2 -> int

logic length__function_guard1 : int, us_rep2 -> prop

logic is_empty : us_rep2 -> bool

logic is_empty__function_guard : bool, us_rep2 -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep2. forall b:us_rep2 [user_eq3(a, b)]. (user_eq3(a,
  b) = oeq1(a, b)))

predicate default_initial_assumption(temp___expr_315: us_rep2,
  temp___skip_top_level_316: bool) =
  ((not (temp___skip_top_level_316 = true)) ->
  ((is_empty(temp___expr_315) = true) and (length2(temp___expr_315) = 0)))

predicate default_initial_assumption1(temp___expr_301: us_rep3,
  temp___skip_top_level_302: bool) =
  (to_rep(((temp___expr_301).us_split_fields3).rec__p__my_lists__cursor__node) = 0)

axiom oeq__post_axiom :
  (forall left:us_rep2. forall right:us_rep2 [oeq1(left, right)].
  ((oeq1(left, right) = true) ->
  (forall key:us_rep3. ((has_key(left, key) = true) -> (has_key(right,
  key) = true)))))

axiom oeq__post_axiom1 :
  (forall left:us_rep2. forall right:us_rep2 [oeq1(left, right)].
  ((oeq1(left, right) = true) ->
  (forall key:us_rep3. ((has_key(left, key) = true) -> (get1(right,
  key) = get1(left, key))))))

axiom oeq__post_axiom2 :
  (forall left:us_rep2. forall right:us_rep2 [oeq1(left, right)].
  ((oeq1(left, right) = true) ->
  (forall key:us_rep3. ((has_key(right, key) = true) -> (has_key(left,
  key) = true)))))

axiom oeq__post_axiom3 :
  (forall left:us_rep2. forall right:us_rep2 [oeq1(left, right)].
  (((forall key:us_rep3. ((has_key(left, key) = true) -> ((has_key(right,
    key) = true) and (get1(right, key) = get1(left, key))))) and
  (forall key:us_rep3. ((has_key(right, key) = true) -> (has_key(left,
  key) = true)))) -> (oeq1(left, right) = true)))

logic model : us_rep -> us_rep1

logic model__function_guard : us_rep1, us_rep -> prop

logic length3 : us_rep -> int

logic length__function_guard2 : int, us_rep -> prop

logic oeq2 : us_rep, us_rep -> bool

logic oeq__function_guard2 : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom1 :
  (forall a:us_rep. forall b:us_rep [user_eq1(a, b)]. (user_eq1(a,
  b) = oeq2(a, b)))

axiom user_eq__def_axiom2 :
  (forall a:us_rep1. forall b:us_rep1 [user_eq2(a, b)]. (user_eq2(a,
  b) = oeq(a, b)))

predicate default_initial_assumption2(temp___expr_293: us_rep1,
  temp___skip_top_level_294: bool) =
  ((not (temp___skip_top_level_294 = true)) ->
  (length1(temp___expr_293) = 0))

axiom model__post_axiom :
  (forall container:us_rep [model(container)].
  (length1(model(container)) = length3(container)))

logic positions : us_rep -> us_rep2

logic positions__function_guard : us_rep2, us_rep -> prop

logic no_element : us_rep3

logic attr__ATTRIBUTE_ADDRESS : int

axiom positions__post_axiom :
  (forall container:us_rep [positions(container)].
  (not (has_key(positions(container), no_element) = true)))

axiom positions__post_axiom1 :
  (forall container:us_rep [positions(container)]. (let result =
  positions(container) : us_rep2 in
  (forall i:us_rep3. ((has_key(result, i) = true) -> (1 <= get1(result, i))))))

axiom positions__post_axiom2 :
  (forall container:us_rep [positions(container)]. (let result =
  positions(container) : us_rep2 in
  (forall i:us_rep3. ((has_key(result, i) = true) -> (get1(result,
  i) <= length3(container))))))

axiom positions__post_axiom3 :
  (forall container:us_rep [positions(container)]. (let result =
  positions(container) : us_rep2 in
  (forall i:us_rep3. ((has_key(result, i) = true) ->
  (forall j:us_rep3. ((has_key(result, j) = true) -> ((get1(result,
  i) = get1(result, j)) -> (bool_eq6(i, j) = true))))))))

logic copy : us_rep, int -> us_rep

logic copy__function_guard : us_rep, us_rep, int -> prop

predicate dynamic_invariant(temp___expr_242: int, temp___is_init_238: bool,
  temp___skip_constant_239: bool, temp___do_toplevel_240: bool,
  temp___do_typ_inv_241: bool) = (((temp___is_init_238 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_242))

axiom copy__post_axiom :
  (forall source:us_rep.
  (forall capacity:int [copy(source, capacity)].
  ((dynamic_invariant(capacity, true, true, true, true) and
  ((capacity = 0) or
  (to_rep(((source).us_split_discrs1).rec__p__my_lists__list__capacity) <= capacity))) ->
  (oeq(model(copy(source, capacity)), model(source)) = true))))

axiom copy__post_axiom1 :
  (forall source:us_rep.
  (forall capacity:int [copy(source, capacity)].
  ((dynamic_invariant(capacity, true, true, true, true) and
  ((capacity = 0) or
  (to_rep(((source).us_split_discrs1).rec__p__my_lists__list__capacity) <= capacity))) ->
  (oeq1(positions(copy(source, capacity)), positions(source)) = true))))

axiom copy__post_axiom2 :
  (forall source:us_rep.
  (forall capacity:int [copy(source, capacity)].
  ((dynamic_invariant(capacity, true, true, true, true) and
  ((capacity = 0) or
  (to_rep(((source).us_split_discrs1).rec__p__my_lists__list__capacity) <= capacity))) ->
  ((capacity = 0) -> (to_rep(((copy(source,
  capacity)).us_split_discrs1).rec__p__my_lists__list__capacity) = to_rep(((source).us_split_discrs1).rec__p__my_lists__list__capacity))))))

axiom copy__post_axiom3 :
  (forall source:us_rep.
  (forall capacity:int [copy(source, capacity)].
  ((dynamic_invariant(capacity, true, true, true, true) and
  ((capacity = 0) or
  (to_rep(((source).us_split_discrs1).rec__p__my_lists__list__capacity) <= capacity))) ->
  ((not (capacity = 0)) -> (to_rep(((copy(source,
  capacity)).us_split_discrs1).rec__p__my_lists__list__capacity) = capacity)))))

function has_element(container: us_rep, position: us_rep3) : bool =
  has_key(positions(container), position)

logic has_element__function_guard : bool, us_rep, us_rep3 -> prop

function element(container: us_rep, position: us_rep3) : int =
  get(model(container), get1(positions(container), position))

logic element__function_guard : int, us_rep, us_rep3 -> prop

type element_type

logic element_typeqtint : element_type -> int

axiom element_typeqtaxiom :
  (forall i:element_type. (1 <= element_typeqtint(i)))

axiom element_typeqtaxiom1 :
  (forall i:element_type. (element_typeqtint(i) <= 100))

predicate in_range3(x: int) = ((1 <= x) and (x <= 100))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq5 : element_type, element_type -> bool

logic dummy5 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_element_type__content__2__projection(a: element_type__ref) : element_type =
  (a).element_type__content

predicate dynamic_invariant1(temp___expr_235: int, temp___is_init_231: bool,
  temp___skip_constant_232: bool, temp___do_toplevel_233: bool,
  temp___do_typ_inv_234: bool) = (((temp___is_init_231 = true) or
  (1 <= 100)) -> in_range3(temp___expr_235))

predicate default_initial_assumption3(temp___expr_256: us_rep3,
  temp___skip_top_level_257: bool) =
  (to_rep(((temp___expr_256).us_split_fields3).rec__p__my_lists__cursor__node) = 0)

function equal_except(left: us_rep1, right: us_rep1, x: int, y: int) : bool =
  andb(bool_eq4(length1(left), length1(right)),
  (if (forall i:int. (((1 <= i) and (i <= last(left))) -> (((not (i = x)) and
      (not (i = y))) -> (get(left, i) = get(right, i))))) then true else false))

logic equal_except__function_guard : bool, us_rep1, us_rep1, int, int -> prop

function m_elements_swapped(left: us_rep1, right: us_rep1, x: int,
  y: int) : bool = andb(andb(andb(bool_eq4(length1(left), length1(right)),
  bool_eq4(get(left, x), get(right, y))), bool_eq4(get(left, y), get(right,
  x))), equal_except(left, right, x, y))

logic m_elements_swapped__function_guard : bool, us_rep1, us_rep1, int,
  int -> prop

logic l__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS1 : int

logic cu1 : us_rep3

logic attr__ATTRIBUTE_ADDRESS2 : int

logic cu2 : us_rep3

logic attr__ATTRIBUTE_ADDRESS3 : int

logic l_in : us_rep

logic attr__ATTRIBUTE_ADDRESS4 : int

logic rliteral : count_type

axiom rliteral_axiom : (count_typeqtint(rliteral) = 0)

axiom no_element__def_axiom : (no_element = { us_split_fields3 = {
  rec__p__my_lists__cursor__node = rliteral } })

axiom length__post_axiom :
  (forall container:us_rep [length3(container)].
  (length3(container) <= to_rep(((container).us_split_discrs1).rec__p__my_lists__list__capacity)))

axiom length__post_axiom1 :
  (forall container:us_rep [length3(container)].
  dynamic_invariant(length3(container), true, false, true, true))

axiom oeq__post_axiom4 :
  (forall left:us_rep. forall right:us_rep [oeq2(left, right)]. ((oeq2(left,
  right) = true) -> (oeq(model(left), model(right)) = true)))

axiom oeq__post_axiom5 :
  (forall left:us_rep. forall right:us_rep [oeq2(left, right)].
  ((oeq(model(left), model(right)) = true) -> (oeq2(left, right) = true)))

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. (0 <= extended_indexqtint(i)))

axiom extended_indexqtaxiom1 :
  (forall i:extended_index. (extended_indexqtint(i) <= 2147483647))

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq6 : extended_index, extended_index -> bool

logic dummy6 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref_extended_index__content__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

predicate dynamic_invariant2(temp___expr_285: int, temp___is_init_281: bool,
  temp___skip_constant_282: bool, temp___do_toplevel_283: bool,
  temp___do_typ_inv_284: bool) = (((temp___is_init_281 = true) or
  (0 <= 2147483647)) -> in_range4(temp___expr_285))

axiom length__post_axiom2 :
  (forall container:us_rep1 [length1(container)].
  ((0 + length1(container)) <= 2147483647))

axiom length__post_axiom3 :
  (forall container:us_rep1 [length1(container)].
  dynamic_invariant(length1(container), true, false, true, true))

type element_type1

logic element_typeqtint1 : element_type1 -> int

axiom element_typeqtaxiom2 :
  (forall i:element_type1. (1 <= element_typeqtint1(i)))

axiom element_typeqtaxiom3 :
  (forall i:element_type1. (element_typeqtint1(i) <= 100))

predicate in_range5(x: int) = ((1 <= x) and (x <= 100))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq7 : element_type1, element_type1 -> bool

logic dummy7 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref_element_type__content__3__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

predicate dynamic_invariant3(temp___expr_278: int, temp___is_init_274: bool,
  temp___skip_constant_275: bool, temp___do_toplevel_276: bool,
  temp___do_typ_inv_277: bool) = (((temp___is_init_274 = true) or
  (1 <= 100)) -> in_range5(temp___expr_278))

axiom get__post_axiom :
  (forall container:us_rep1.
  (forall position:int [get(container, position)].
  ((dynamic_invariant2(position, true, true, true, true) and
  ((1 <= position) and (position <= last(container)))) ->
  dynamic_invariant3(get(container, position), true, false, true, true))))

axiom has_key__post_axiom :
  (forall container:us_rep2.
  (forall key:us_rep3 [has_key(container, key)]. ((of_int(0) = true) ->
  ((exists k:us_rep3. ((has_key(container, k) = true) and (bool_eq6(k,
   key) = true))) ->
  (has_key(container, key) = true)))))

logic witness : us_rep2, us_rep3 -> int

logic witness__function_guard : int, us_rep2, us_rep3 -> prop

logic w_get : us_rep2, int -> int

logic w_get__function_guard : int, us_rep2, int -> prop

type element_type2

logic element_typeqtint2 : element_type2 -> int

axiom element_typeqtaxiom4 :
  (forall i:element_type2. (1 <= element_typeqtint2(i)))

axiom element_typeqtaxiom5 :
  (forall i:element_type2. (element_typeqtint2(i) <= 2147483647))

predicate in_range6(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq8 : element_type2, element_type2 -> bool

logic dummy8 : element_type2

type element_type__ref2 = { element_type__content2 : element_type2
}

function element_type__ref_element_type__content__4__projection(a: element_type__ref2) : element_type2 =
  (a).element_type__content2

predicate dynamic_invariant4(temp___expr_307: int, temp___is_init_303: bool,
  temp___skip_constant_304: bool, temp___do_toplevel_305: bool,
  temp___do_typ_inv_306: bool) = (((temp___is_init_303 = true) or
  (1 <= 2147483647)) -> in_range6(temp___expr_307))

axiom get__post_axiom1 :
  (forall container:us_rep2.
  (forall key:us_rep3 [get1(container, key)]. ((has_key(container,
  key) = true) -> ((of_int(0) = true) -> (get1(container,
  key) = w_get(container, witness(container, key)))))))

axiom get__post_axiom2 :
  (forall container:us_rep2.
  (forall key:us_rep3 [get1(container, key)]. ((has_key(container,
  key) = true) -> ((of_int(0) = true) ->
  (forall k:us_rep3. ((has_key(container, k) = true) -> ((bool_eq6(k,
  key) = true) -> (witness(container, key) = witness(container, k)))))))))

axiom get__post_axiom3 :
  (forall container:us_rep2.
  (forall key:us_rep3 [get1(container, key)]. ((has_key(container,
  key) = true) -> ((of_int(0) = true) ->
  (forall k:us_rep3. ((has_key(container, k) = true) -> ((witness(container,
  key) = witness(container, k)) -> (bool_eq6(k, key) = true))))))))

axiom get__post_axiom4 :
  (forall container:us_rep2.
  (forall key:us_rep3 [get1(container, key)]. ((has_key(container,
  key) = true) -> dynamic_invariant4(get1(container, key), true, false, true,
  true))))

axiom length__post_axiom4 :
  (forall container:us_rep2 [length2(container)].
  dynamic_invariant(length2(container), true, false, true, true))

axiom is_empty__post_axiom :
  (forall container:us_rep2 [is_empty(container)].
  ((is_empty(container) = true) ->
  (forall key:us_rep3. (not (has_key(container, key) = true)))))

axiom is_empty__post_axiom1 :
  (forall container:us_rep2 [is_empty(container)].
  ((forall key:us_rep3. (not (has_key(container, key) = true))) ->
  (is_empty(container) = true)))

logic has_witness : us_rep2, int -> bool

logic has_witness__function_guard : bool, us_rep2, int -> prop

axiom witness__post_axiom :
  (forall container:us_rep2.
  (forall key:us_rep3 [witness(container, key)]. ((has_key(container,
  key) = true) -> (has_witness(container, witness(container, key)) = true))))

axiom witness__post_axiom1 :
  (forall container:us_rep2.
  (forall key:us_rep3 [witness(container, key)]. ((has_key(container,
  key) = true) -> dynamic_invariant(witness(container, key), true, false,
  true, true))))

axiom w_get__post_axiom :
  (forall container:us_rep2.
  (forall witness1:int [w_get(container, witness1)].
  ((dynamic_invariant(witness1, true, true, true, true) and
  (has_witness(container, witness1) = true)) ->
  dynamic_invariant4(w_get(container, witness1), true, false, true, true))))

 (* File "p.ads", line 23, characters 0-0 *)
goal defqtvc :
  (forall l__split_fields:us_main_type. (((has_element({ us_split_discrs1 =
  l__split_discrs; us_split_fields1 = { rec__p__my_lists__list =
  l__split_fields } }, cu1) = true) and (has_element({ us_split_discrs1 =
  l__split_discrs; us_split_fields1 = { rec__p__my_lists__list =
  l__split_fields } }, cu2) = true)) -> (let o = { us_split_discrs1 =
  l__split_discrs; us_split_fields1 = { rec__p__my_lists__list =
  l__split_fields } } : us_rep in (let p__identity_swap__l_in__assume =
  copy(o, 0) : us_rep in ((((oeq(model(p__identity_swap__l_in__assume),
  model(o)) = true) and (oeq1(positions(p__identity_swap__l_in__assume),
  positions(o)) = true)) and
  (to_rep(((p__identity_swap__l_in__assume).us_split_discrs1).rec__p__my_lists__list__capacity) = to_rep((l__split_discrs).rec__p__my_lists__list__capacity))) ->
  ((p__identity_swap__l_in__assume = l_in) -> (let o1 = l__split_discrs
  : us_split_discrs in
  (forall l__split_fields1:us_main_type. (((m_elements_swapped(model({
  us_split_discrs1 = o1; us_split_fields1 = { rec__p__my_lists__list =
  l__split_fields } }), model({ us_split_discrs1 = o1; us_split_fields1 = {
  rec__p__my_lists__list = l__split_fields1 } }), get1(positions({
  us_split_discrs1 = o1; us_split_fields1 = { rec__p__my_lists__list =
  l__split_fields } }), cu1), get1(positions({ us_split_discrs1 = o1;
  us_split_fields1 = { rec__p__my_lists__list = l__split_fields } }),
  cu2)) = true) and (oeq1(positions({ us_split_discrs1 = o1;
  us_split_fields1 = { rec__p__my_lists__list = l__split_fields1 } }),
  positions({ us_split_discrs1 = o1; us_split_fields1 = {
  rec__p__my_lists__list = l__split_fields } })) = true)) -> (let o2 = cu2
  : us_rep3 in (let o3 = l_in : us_rep in (let o4 = element(o3, o2) : int in
  ((dynamic_invariant1(o4, true, false, true, true) and (o4 = get(model(o3),
  get1(positions(o3), o2)))) -> (has_element({ us_split_discrs1 =
  l__split_discrs; us_split_fields1 = { rec__p__my_lists__list =
  l__split_fields1 } }, cu1) = true))))))))))))))
