(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__foo__context_type__x : natural
}

function us_split_fields_rec__foo__context_type__x__projection(a: us_split_fields) : natural =
  (a).rec__foo__context_type__x

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__foo__context_type__x) = to_rep(((b).us_split_fields1).rec__foo__context_type__x)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic foo__context_type__x__first__bit : int

logic foo__context_type__x__last__bit : int

logic foo__context_type__x__position : int

axiom foo__context_type__x__first__bit_axiom :
  (0 <= foo__context_type__x__first__bit)

axiom foo__context_type__x__last__bit_axiom :
  (foo__context_type__x__first__bit <  foo__context_type__x__last__bit)

axiom foo__context_type__x__position_axiom :
  (0 <= foo__context_type__x__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type context_type__ref = { context_type__content : us_rep
}

function context_type__ref_context_type__content__projection(a: context_type__ref) : us_rep =
  (a).context_type__content

logic valid_x : int -> bool

logic valid_x__function_guard : bool, int -> prop

axiom temp___result_166qtdef :
  (forall temp___165:us_rep.
  valid_x__function_guard(valid_x(to_rep(((temp___165).us_split_fields1).rec__foo__context_type__x)),
  to_rep(((temp___165).us_split_fields1).rec__foo__context_type__x)))

predicate dynamic_invariant(temp___expr_164: us_rep,
  temp___is_init_160: bool, temp___skip_constant_161: bool,
  temp___do_toplevel_162: bool, temp___do_typ_inv_163: bool) =
  ((temp___do_toplevel_162 = true) -> ((temp___is_init_160 = true) ->
  (valid_x(to_rep(((temp___expr_164).us_split_fields1).rec__foo__context_type__x)) = true)))

axiom temp___result_172qtdef :
  (forall temp___171:us_rep.
  valid_x__function_guard(valid_x(to_rep(((temp___171).us_split_fields1).rec__foo__context_type__x)),
  to_rep(((temp___171).us_split_fields1).rec__foo__context_type__x)))

predicate dynamic_predicate(temp___170: us_rep) =
  (valid_x(to_rep(((temp___170).us_split_fields1).rec__foo__context_type__x)) = true)

logic attr__ATTRIBUTE_ADDRESS : int

type element_context_type__ref = { element_context_type__content : us_rep
}

function element_context_type__ref_element_context_type__content__projection(a: element_context_type__ref) : us_rep =
  (a).element_context_type__content

axiom temp___result_176qtdef :
  (forall temp___175:us_rep.
  valid_x__function_guard(valid_x(to_rep(((temp___175).us_split_fields1).rec__foo__context_type__x)),
  to_rep(((temp___175).us_split_fields1).rec__foo__context_type__x)))

predicate dynamic_predicate1(temp___174: us_rep) =
  (valid_x(to_rep(((temp___174).us_split_fields1).rec__foo__context_type__x)) = true)

logic valid : us_rep -> bool

logic valid__function_guard : bool, us_rep -> prop

logic valid_element : us_rep -> bool

logic valid_element__function_guard : bool, us_rep -> prop

axiom valid_element__post_axiom :
  (forall temp___183:us_rep.
  valid_x__function_guard(valid_x(to_rep(((temp___183).us_split_fields1).rec__foo__context_type__x)),
  to_rep(((temp___183).us_split_fields1).rec__foo__context_type__x)))

axiom valid_element__post_axiom1 :
  (forall temp___185:us_rep.
  valid_x__function_guard(valid_x(to_rep(((temp___185).us_split_fields1).rec__foo__context_type__x)),
  to_rep(((temp___185).us_split_fields1).rec__foo__context_type__x)))

predicate dynamic_invariant1(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_39))

axiom valid_x__def_axiom :
  (forall x:int [valid_x(x)]. ((valid_x(x) = true) -> (10 <  x)))

axiom valid_x__def_axiom1 :
  (forall x:int [valid_x(x)]. ((10 <  x) -> (valid_x(x) = true)))

 (* File "test.ads", line 7, characters 0-0 *)
goal defqtvc :
  (forall context__split_fields:natural. (dynamic_invariant({
  us_split_fields1 = { rec__foo__context_type__x = context__split_fields } },
  false, false, true, true) ->
  (forall bar__initialize_element__context__fields:natural.
  ((forall bar__initialize_element__context__fields1:natural.
   valid__function_guard(valid({ us_split_fields1 = {
   rec__foo__context_type__x = bar__initialize_element__context__fields1 }
   }), { us_split_fields1 = { rec__foo__context_type__x =
   bar__initialize_element__context__fields1 } })) ->
  ((forall bar__initialize_element__context__fields1:natural.
   valid_x__function_guard(valid_x(to_rep(bar__initialize_element__context__fields1)),
   to_rep(bar__initialize_element__context__fields1))) ->
  ((forall bar__initialize_element__context__fields1:natural.
   valid_x__function_guard(valid_x(to_rep(bar__initialize_element__context__fields1)),
   to_rep(bar__initialize_element__context__fields1))) ->
  ((((valid({ us_split_fields1 = { rec__foo__context_type__x =
  bar__initialize_element__context__fields } }) = true) and
  dynamic_predicate1({ us_split_fields1 = { rec__foo__context_type__x =
  bar__initialize_element__context__fields } })) and
  (valid_x(to_rep(bar__initialize_element__context__fields)) = true)) ->
  (forall context__split_fields1:natural.
  ((context__split_fields1 = bar__initialize_element__context__fields) ->
  dynamic_predicate({ us_split_fields1 = { rec__foo__context_type__x =
  context__split_fields1 } }))))))))))
