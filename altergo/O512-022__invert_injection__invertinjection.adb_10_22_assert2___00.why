(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type element

logic elementqtint : element -> int

axiom elementqtaxiom : (forall i:element. (1 <= elementqtint(i)))

axiom elementqtaxiom1 : (forall i:element. (elementqtint(i) <= 100))

predicate in_range1(x: int) = ((1 <= x) and (x <= 100))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : element, element -> bool

logic dummy : element

type element__ref = { element__content : element
}

function element__ref_element__content__projection(a: element__ref) : element =
  (a).element__content

function to_rep(x: element) : int = elementqtint(x)

logic of_rep : int -> element

axiom inversion_axiom :
  (forall x:element [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:element [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,element) farray
}

logic slide : (int,element) farray, int, int -> (int,element) farray

axiom slide_eq :
  (forall a:(int,element) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,element) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,element) farray, a__first: int, a__last: int,
  b: (int,element) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic a : (int,element) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_invariant(temp___expr_159: int, temp___is_init_155: bool,
  temp___skip_constant_156: bool, temp___do_toplevel_157: bool,
  temp___do_typ_inv_158: bool) = (((temp___is_init_155 = true) or
  (1 <= 100)) -> in_range1(temp___expr_159))

 (* File "invertinjection.ads", line 7, characters 0-0 *)
goal defqtvc :
  (forall b:(int,element) farray.
  (((forall i:int. (((1 <= i) and (i <= 100)) ->
    (forall j:int. (((1 <= j) and (j <= 100)) ->
    ((to_rep((a[i])) = to_rep((a[j]))) -> (i = j)))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (not (forall j:int. (((1 <= j) and (j <= 100)) ->
       (not (to_rep((a[j])) = i)))))))) ->
  (forall b1:(int,element) farray.
  ((exists i:int. ((i = 1) and (if (andb((if (1 <= i) then true else false),
   (if (i <= 100) then true else false)) = true) then (exists b2:(int,element) farray.
                                                      exists i1:int.
                                                      ((forall j:int.
                                                       (((1 <= j) and
                                                       (j <= (i1 - 1))) ->
                                                       (to_rep((b2[to_rep((a[j]))])) = j))) and
                                                      ((andb((if in_range1(i1) then true else false),
                                                      (if ((1 <= i1) and
                                                      (i1 <= 100)) then true else false)) = true) and
                                                      (exists o:element.
                                                      ((to_rep(o) = i1) and
                                                      (exists o1:int.
                                                      ((to_rep((a[i1])) = o1) and
                                                      ((b1 = (b2[o1 <- o])) and
                                                      (i1 = 100))))))))) else (b1 = b)))) ->
  (forall j:int. (((1 <= j) and (j <= 100)) ->
  (to_rep((b1[to_rep((a[j]))])) = j)))))))
