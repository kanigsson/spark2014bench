(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (div(x, y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((-abs_int(y)) <  mod(x,
  y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (mod(x, y) <  abs_int(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <  y) then (x % y) else ((x % y) + y))

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_invariant1(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range2(temp___expr_46))

logic divides : int, int -> bool

logic divides__function_guard : bool, int, int -> prop

axiom divides__def_axiom :
  (forall a:int. forall b:int [divides(a, b)]. ((divides(a, b) = true) ->
  (mod1(b, a) = 0)))

axiom divides__def_axiom1 :
  (forall a:int. forall b:int [divides(a, b)]. ((mod1(b, a) = 0) ->
  (divides(a, b) = true)))

logic a : int

logic attr__ATTRIBUTE_ADDRESS : int

logic b : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

axiom cdiv_cases :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((0 <  d) -> (div(n,
  d) = (n / d)))))

axiom cdiv_cases1 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((0 <  d) -> (div(n,
  d) = (-((-n) / d))))))

axiom cdiv_cases2 :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((d <  0) -> (div(n,
  d) = (-(n / (-d)))))))

axiom cdiv_cases3 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((d <  0) -> (div(n,
  d) = ((-n) / (-d))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))))

axiom cmod_cases1 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))))

axiom cmod_cases2 :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))))

axiom cmod_cases3 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d)))))))

 (* File "math_euclid.ads", line 5, characters 0-0 *)
goal defqtvc :
  (forall c:int. (dynamic_invariant1(a, true, false, true, true) ->
  (dynamic_invariant1(b, true, false, true, true) ->
  (forall an:int. ((an = a) -> (dynamic_invariant1(an, true, false, true,
  true) -> (let o = b : int in (in_range1(o) ->
  (forall bn:int. ((bn = o) -> (dynamic_invariant(bn, true, false, true,
  true) -> (dynamic_invariant1(c, false, false, true, true) ->
  (forall an1:int.
  ((forall c1:int. forall x:int. divides__function_guard(divides(x, c1), x,
   c1)) ->
  ((forall an2:int. forall x:int. divides__function_guard(divides(x, an2), x,
   an2)) ->
  ((forall an2:int. forall x:int. divides__function_guard(divides(x, an2), x,
   an2)) ->
  ((forall c1:int. forall an2:int. divides__function_guard(divides(an2, c1),
   an2, c1)) ->
  ((forall c1:int. forall an2:int. forall x:int.
   divides__function_guard(divides(x, mod1(c1, an2)), x, mod1(c1, an2))) ->
  ((forall x:int. divides__function_guard(divides(x, a), x, a)) ->
  ((forall x:int. divides__function_guard(divides(x, b), x, b)) ->
  ((forall an2:int. forall x:int. divides__function_guard(divides(x, an2), x,
   an2)) ->
  ((forall bn1:int. forall x:int. divides__function_guard(divides(x, bn1), x,
   bn1)) ->
  ((forall c1:int. forall x:int. divides__function_guard(divides(x, c1), x,
   c1)) ->
  ((forall an2:int. forall x:int. divides__function_guard(divides(x, an2), x,
   an2)) ->
  ((forall an2:int. forall x:int. divides__function_guard(divides(x, an2), x,
   an2)) ->
  ((forall c1:int. forall an2:int. divides__function_guard(divides(an2, c1),
   an2, c1)) ->
  ((forall c1:int. forall an2:int. forall x:int.
   divides__function_guard(divides(x, mod1(c1, an2)), x, mod1(c1, an2))) ->
  ((forall x:int. divides__function_guard(divides(x, a), x, a)) ->
  ((forall x:int. divides__function_guard(divides(x, b), x, b)) ->
  ((forall an2:int. forall x:int. divides__function_guard(divides(x, an2), x,
   an2)) ->
  ((forall bn1:int. forall x:int. divides__function_guard(divides(x, bn1), x,
   bn1)) ->
  ((if (not (bn = 0)) then (exists c1:int. ((c1 = an) and (in_range2(bn) and
                           (exists an2:int. ((an2 = bn) and (let o1 =
                           mod1(c1, bn) : int in (in_range1(o1) and
                           (exists bn1:int. ((bn1 = o1) and
                           ((forall x:int. (((1 <= x) and
                            (x <= 2147483647)) -> (((divides(x,
                            c1) = true) and (divides(x, an2) = true)) <->
                            ((divides(x, an2) = true) and ((divides(an2,
                            c1) = true) or (divides(x, mod1(c1,
                            an2)) = true)))))) and
                           (exists bn2:int. exists c2:int.
                           ((forall x:int. (((1 <= x) and
                            (x <= 2147483647)) -> (((divides(x,
                            a) = true) and (divides(x, b) = true)) <->
                            ((divides(x, an1) = true) and ((bn2 = 0) or
                            (divides(x, bn2) = true)))))) and
                           (((dynamic_invariant1(c2, false, true, true,
                           true) and dynamic_invariant1(an1, true, true,
                           true, true)) and dynamic_invariant(bn2, true,
                           true, true, true)) and (bn2 = 0)))))))))))))) else (an1 = an)) ->
  ((forall an2:int. divides__function_guard(divides(an2, an2), an2, an2)) ->
  ((divides(an1, an1) = true) ->
  ((forall an2:int. divides__function_guard(divides(an2, a), an2, a)) ->
  ((divides(an1, a) = true) ->
  ((forall an2:int. divides__function_guard(divides(an2, b), an2, b)) ->
  ((divides(an1, b) = true) ->
  ((forall x:int. divides__function_guard(divides(x, a), x, a)) ->
  ((forall x:int. divides__function_guard(divides(x, b), x, b)) ->
  ((forall x:int. ((((an1 + 1) <= x) and (x <= min(a, b))) ->
   (not ((divides(x, a) = true) and (divides(x, b) = true))))) ->
  (forall math_euclid__gcd__result:int. ((math_euclid__gcd__result = an1) ->
  (let o1 = a : int in (let o2 = divides(math_euclid__gcd__result, o1)
  : bool in ((divides__function_guard(o2, math_euclid__gcd__result, o1) and
  ((o2 = true) <-> (mod1(o1, math_euclid__gcd__result) = 0))) -> (let o3 =
  (if (o2 = true) then divides(math_euclid__gcd__result, b) else false)
  : bool in (((not (o2 = true)) or (let o4 = b : int in
  (divides__function_guard(o3, math_euclid__gcd__result, o4) and
  ((o3 = true) <-> (mod1(o4, math_euclid__gcd__result) = 0))))) ->
  ((o3 = true) ->
  (forall usf:int.
  ((andb((if ((math_euclid__gcd__result + 1) <= usf) then true else false),
  (if (usf <= min(a, b)) then true else false)) = true) -> (let o4 = b
  : int in (in_range2(usf) -> (let o5 = divides(usf, o4) : bool in
  ((divides__function_guard(o5, usf, o4) and ((o5 = true) <-> (mod1(o4,
  usf) = 0))) -> in_range2(usf))))))))))))))))))))))))))))))))))))))))))))))))))))))))
