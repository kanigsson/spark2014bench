(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type enum_t

predicate in_range1(x: int) = ((0 <= x) and (x <= 2))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : enum_t, enum_t -> bool

logic dummy : enum_t

type enum_t__ref = { enum_t__content : enum_t
}

function enum_t__ref_enum_t__content__projection(a: enum_t__ref) : enum_t =
  (a).enum_t__content

logic to_rep : enum_t -> int

logic of_rep : int -> enum_t

axiom inversion_axiom :
  (forall x:enum_t [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:enum_t [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type small_index_t

logic small_index_tqtint : small_index_t -> int

axiom small_index_tqtaxiom :
  (forall i:small_index_t. (1 <= small_index_tqtint(i)))

axiom small_index_tqtaxiom1 :
  (forall i:small_index_t. (small_index_tqtint(i) <= 1000))

predicate in_range2(x: int) = ((1 <= x) and (x <= 1000))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : small_index_t, small_index_t -> bool

logic dummy1 : small_index_t

type small_index_t__ref = { small_index_t__content : small_index_t
}

function small_index_t__ref_small_index_t__content__projection(a: small_index_t__ref) : small_index_t =
  (a).small_index_t__content

function to_rep1(x: small_index_t) : int = small_index_tqtint(x)

logic of_rep1 : int -> small_index_t

axiom inversion_axiom1 :
  (forall x:small_index_t [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:small_index_t [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__array_aggregates__basic_record__a :
small_index_t; rec__array_aggregates__basic_record__b : bool;
rec__array_aggregates__basic_record__c : enum_t
}

function us_split_fields_rec__array_aggregates__basic_record__a__projection(a: us_split_fields) : small_index_t =
  (a).rec__array_aggregates__basic_record__a

function us_split_fields_rec__array_aggregates__basic_record__b__projection(a: us_split_fields) : bool =
  (a).rec__array_aggregates__basic_record__b

function us_split_fields_rec__array_aggregates__basic_record__c__projection(a: us_split_fields) : enum_t =
  (a).rec__array_aggregates__basic_record__c

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__4__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__4__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if (((to_rep1(((a).us_split_fields1).rec__array_aggregates__basic_record__a) = to_rep1(((b).us_split_fields1).rec__array_aggregates__basic_record__a)) and
  (to_int(((a).us_split_fields1).rec__array_aggregates__basic_record__b) = to_int(((b).us_split_fields1).rec__array_aggregates__basic_record__b))) and
  (to_rep(((a).us_split_fields1).rec__array_aggregates__basic_record__c) = to_rep(((b).us_split_fields1).rec__array_aggregates__basic_record__c))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic array_aggregates__basic_record__a__first__bit : int

logic array_aggregates__basic_record__a__last__bit : int

logic array_aggregates__basic_record__a__position : int

axiom array_aggregates__basic_record__a__first__bit_axiom :
  (0 <= array_aggregates__basic_record__a__first__bit)

axiom array_aggregates__basic_record__a__last__bit_axiom :
  (array_aggregates__basic_record__a__first__bit <  array_aggregates__basic_record__a__last__bit)

axiom array_aggregates__basic_record__a__position_axiom :
  (0 <= array_aggregates__basic_record__a__position)

logic array_aggregates__basic_record__b__first__bit : int

logic array_aggregates__basic_record__b__last__bit : int

logic array_aggregates__basic_record__b__position : int

axiom array_aggregates__basic_record__b__first__bit_axiom :
  (0 <= array_aggregates__basic_record__b__first__bit)

axiom array_aggregates__basic_record__b__last__bit_axiom :
  (array_aggregates__basic_record__b__first__bit <  array_aggregates__basic_record__b__last__bit)

axiom array_aggregates__basic_record__b__position_axiom :
  (0 <= array_aggregates__basic_record__b__position)

logic array_aggregates__basic_record__c__first__bit : int

logic array_aggregates__basic_record__c__last__bit : int

logic array_aggregates__basic_record__c__position : int

axiom array_aggregates__basic_record__c__first__bit_axiom :
  (0 <= array_aggregates__basic_record__c__first__bit)

axiom array_aggregates__basic_record__c__last__bit_axiom :
  (array_aggregates__basic_record__c__first__bit <  array_aggregates__basic_record__c__last__bit)

axiom array_aggregates__basic_record__c__position_axiom :
  (0 <= array_aggregates__basic_record__c__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type basic_record__ref = { basic_record__content : us_rep
}

function basic_record__ref_basic_record__content__projection(a: basic_record__ref) : us_rep =
  (a).basic_record__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_164:int. (((a__first <= temp___idx_164) and
  (temp___idx_164 <= a__last)) -> (bool_eq3((a[temp___idx_164]),
  (b[((b__first - a__first) + temp___idx_164)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_164:int. (((a__first <= temp___idx_164) and
  (temp___idx_164 <= a__last)) -> (bool_eq3((a[temp___idx_164]),
  (b[((b__first - a__first) + temp___idx_164)])) = true))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic temp_____aggregate_def_515 : us_rep, us_rep -> (int,us_rep) farray

predicate dynamic_invariant(temp___expr_187: int, temp___is_init_183: bool,
  temp___skip_constant_184: bool, temp___do_toplevel_185: bool,
  temp___do_typ_inv_186: bool) = (((temp___is_init_183 = true) or
  (0 <= 2)) -> in_range1(temp___expr_187))

predicate dynamic_invariant1(temp___expr_257: int, temp___is_init_253: bool,
  temp___skip_constant_254: bool, temp___do_toplevel_255: bool,
  temp___do_typ_inv_256: bool) = (((temp___is_init_253 = true) or
  (1 <= 1000)) -> in_range2(temp___expr_257))

axiom def_axiom :
  (forall temp___517:us_rep. forall temp___518:us_rep.
  (forall temp___519:int. (((temp___519 = 2) or ((4 <= temp___519) and
  (temp___519 <= 6))) -> ((temp_____aggregate_def_515(temp___517,
  temp___518)[temp___519]) = temp___517))))

axiom def_axiom1 :
  (forall temp___517:us_rep. forall temp___518:us_rep.
  (forall temp___519:int. ((not ((temp___519 = 2) or ((4 <= temp___519) and
  (temp___519 <= 6)))) -> ((temp_____aggregate_def_515(temp___517,
  temp___518)[temp___519]) = temp___518))))

logic rliteral : small_index_t

axiom rliteral_axiom : (small_index_tqtint(rliteral) = 5)

logic rliteral1 : small_index_t

axiom rliteral_axiom1 : (small_index_tqtint(rliteral1) = 10)

 (* File "array_aggregates.adb", line 189, characters 0-0 *)
goal defqtvc :
  (forall o:enum_t. ((to_rep(o) = 1) ->
  (forall o1:enum_t. ((to_rep(o1) = 0) ->
  (forall x:(int,us_rep) farray. ((x = temp_____aggregate_def_515({
  us_split_fields1 = { rec__array_aggregates__basic_record__a = rliteral;
  rec__array_aggregates__basic_record__b = of_int(0);
  rec__array_aggregates__basic_record__c = o1 } }, { us_split_fields1 = {
  rec__array_aggregates__basic_record__a = rliteral1;
  rec__array_aggregates__basic_record__b = of_int(1);
  rec__array_aggregates__basic_record__c = o } })) ->
  (to_rep((((x[3])).us_split_fields1).rec__array_aggregates__basic_record__c) = 1)))))))
