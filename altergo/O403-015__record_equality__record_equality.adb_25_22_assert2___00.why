(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_39))

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_discrs = { rec__record_equality__root__c : natural
}

function us_split_discrs_rec__record_equality__root__c__projection(a: us_split_discrs) : natural =
  (a).rec__record_equality__root__c

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__record_equality__root__f1 : natural; rec__ext__
: us_private
}

function us_split_fields_rec__record_equality__root__f1__projection(a: us_split_fields) : natural =
  (a).rec__record_equality__root__f1

function us_split_fields_rec__ext____projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__tag : int
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__projection(a: us_rep) : int = (a).attr__tag

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__record_equality__root__c) = to_rep(((b).us_split_discrs1).rec__record_equality__root__c)) and
  (to_rep(((a).us_split_fields1).rec__record_equality__root__f1) = to_rep(((b).us_split_fields1).rec__record_equality__root__f1))) then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic record_equality__root__c__first__bit : int

logic record_equality__root__c__last__bit : int

logic record_equality__root__c__position : int

axiom record_equality__root__c__first__bit_axiom :
  (0 <= record_equality__root__c__first__bit)

axiom record_equality__root__c__last__bit_axiom :
  (record_equality__root__c__first__bit <  record_equality__root__c__last__bit)

axiom record_equality__root__c__position_axiom :
  (0 <= record_equality__root__c__position)

logic record_equality__root__f1__first__bit : int

logic record_equality__root__f1__last__bit : int

logic record_equality__root__f1__position : int

axiom record_equality__root__f1__first__bit_axiom :
  (0 <= record_equality__root__f1__first__bit)

axiom record_equality__root__f1__last__bit_axiom :
  (record_equality__root__f1__first__bit <  record_equality__root__f1__last__bit)

axiom record_equality__root__f1__position_axiom :
  (0 <= record_equality__root__f1__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type root__ref = { root__content : us_rep
}

function root__ref_root__content__projection(a: root__ref) : us_rep =
  (a).root__content

type us_split_fields2 = { rec__record_equality__child__f2 : natural;
rec__record_equality__root__f11 : natural; rec__ext__1 : us_private
}

function us_split_fields_rec__record_equality__child__f2__projection(a: us_split_fields2) : natural =
  (a).rec__record_equality__child__f2

function us_split_fields_rec__record_equality__root__f1__2__projection(a: us_split_fields2) : natural =
  (a).rec__record_equality__root__f11

function us_split_fields_rec__ext____2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2; attr__tag1 : int
}

function us_rep___split_discrs__2__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_attr__tag__2__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : natural, us_private -> us_private

logic extract__record_equality__child__f2 : us_private -> natural

axiom extract__record_equality__child__f2__conv :
  (forall record_equality__child__f2:natural.
  (forall rec__ext__2:us_private.
  (extract__record_equality__child__f2(hide_ext__(record_equality__child__f2,
  rec__ext__2)) = record_equality__child__f2)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = { rec__record_equality__root__f1 =
  ((a).us_split_fields3).rec__record_equality__root__f11; rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__record_equality__child__f2,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = {
  rec__record_equality__child__f2 =
  extract__record_equality__child__f2(((r).us_split_fields1).rec__ext__);
  rec__record_equality__root__f11 =
  ((r).us_split_fields1).rec__record_equality__root__f1; rec__ext__1 =
  extract__ext__(((r).us_split_fields1).rec__ext__) }; attr__tag1 =
  (r).attr__tag }

function bool_eq2(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep(((a).us_split_discrs2).rec__record_equality__root__c) = to_rep(((b).us_split_discrs2).rec__record_equality__root__c)) and
  ((to_rep(((a).us_split_fields3).rec__record_equality__child__f2) = to_rep(((b).us_split_fields3).rec__record_equality__child__f2)) and
  (to_rep(((a).us_split_fields3).rec__record_equality__root__f11) = to_rep(((b).us_split_fields3).rec__record_equality__root__f11)))) then true else false)

logic us_tag1 : int

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic record_equality__root__c__first__bit1 : int

logic record_equality__root__c__last__bit1 : int

logic record_equality__root__c__position1 : int

axiom record_equality__root__c__first__bit_axiom1 :
  (0 <= record_equality__root__c__first__bit1)

axiom record_equality__root__c__last__bit_axiom1 :
  (record_equality__root__c__first__bit1 <  record_equality__root__c__last__bit1)

axiom record_equality__root__c__position_axiom1 :
  (0 <= record_equality__root__c__position1)

logic record_equality__child__f2__first__bit : int

logic record_equality__child__f2__last__bit : int

logic record_equality__child__f2__position : int

axiom record_equality__child__f2__first__bit_axiom :
  (0 <= record_equality__child__f2__first__bit)

axiom record_equality__child__f2__last__bit_axiom :
  (record_equality__child__f2__first__bit <  record_equality__child__f2__last__bit)

axiom record_equality__child__f2__position_axiom :
  (0 <= record_equality__child__f2__position)

logic record_equality__root__f1__first__bit1 : int

logic record_equality__root__f1__last__bit1 : int

logic record_equality__root__f1__position1 : int

axiom record_equality__root__f1__first__bit_axiom1 :
  (0 <= record_equality__root__f1__first__bit1)

axiom record_equality__root__f1__last__bit_axiom1 :
  (record_equality__root__f1__first__bit1 <  record_equality__root__f1__last__bit1)

axiom record_equality__root__f1__position_axiom1 :
  (0 <= record_equality__root__f1__position1)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy2 : us_rep1

type child__ref = { child__content : us_rep1
}

function child__ref_child__content__projection(a: child__ref) : us_rep1 =
  (a).child__content

type us_split_fields4 = { rec__record_equality__grandchild__f3 : natural;
rec__record_equality__root__f12 : natural; rec__record_equality__child__f21 :
natural; rec__ext__2 : us_private
}

function us_split_fields_rec__record_equality__grandchild__f3__projection(a: us_split_fields4) : natural =
  (a).rec__record_equality__grandchild__f3

function us_split_fields_rec__record_equality__root__f1__3__projection(a: us_split_fields4) : natural =
  (a).rec__record_equality__root__f12

function us_split_fields_rec__record_equality__child__f2__2__projection(a: us_split_fields4) : natural =
  (a).rec__record_equality__child__f21

function us_split_fields_rec__ext____3__projection(a: us_split_fields4) : us_private =
  (a).rec__ext__2

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs3 : us_split_discrs; us_split_fields5 :
us_split_fields4; attr__tag2 : int
}

function us_rep___split_discrs__3__projection(a: us_rep2) : us_split_discrs =
  (a).us_split_discrs3

function us_rep___split_fields__3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function us_rep_attr__tag__3__projection(a: us_rep2) : int = (a).attr__tag2

logic hide_ext__1 : natural, natural, us_private -> us_private

logic extract__record_equality__grandchild__f3 : us_private -> natural

axiom extract__record_equality__grandchild__f3__conv :
  (forall record_equality__grandchild__f3:natural.
  forall record_equality__grandchild__f2:natural.
  (forall rec__ext__3:us_private.
  (extract__record_equality__grandchild__f3(hide_ext__1(record_equality__grandchild__f3,
  record_equality__grandchild__f2,
  rec__ext__3)) = record_equality__grandchild__f3)))

axiom extract__record_equality__child__f2__conv1 :
  (forall record_equality__grandchild__f3:natural.
  forall record_equality__grandchild__f2:natural.
  (forall rec__ext__3:us_private.
  (extract__record_equality__child__f2(hide_ext__1(record_equality__grandchild__f3,
  record_equality__grandchild__f2,
  rec__ext__3)) = record_equality__grandchild__f2)))

logic extract__ext__1 : us_private -> us_private

function to_base1(a: us_rep2) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs3; us_split_fields1 = { rec__record_equality__root__f1 =
  ((a).us_split_fields5).rec__record_equality__root__f12; rec__ext__ =
  hide_ext__1(((a).us_split_fields5).rec__record_equality__grandchild__f3,
  ((a).us_split_fields5).rec__record_equality__child__f21,
  ((a).us_split_fields5).rec__ext__2) }; attr__tag = (a).attr__tag2 }

function of_base1(r: us_rep) : us_rep2 = { us_split_discrs3 =
  (r).us_split_discrs1; us_split_fields5 = {
  rec__record_equality__grandchild__f3 =
  extract__record_equality__grandchild__f3(((r).us_split_fields1).rec__ext__);
  rec__record_equality__root__f12 =
  ((r).us_split_fields1).rec__record_equality__root__f1;
  rec__record_equality__child__f21 =
  extract__record_equality__child__f2(((r).us_split_fields1).rec__ext__);
  rec__ext__2 = extract__ext__1(((r).us_split_fields1).rec__ext__) };
  attr__tag2 = (r).attr__tag }

function bool_eq3(a: us_rep2, b: us_rep2) : bool =
  (if ((to_rep(((a).us_split_discrs3).rec__record_equality__root__c) = to_rep(((b).us_split_discrs3).rec__record_equality__root__c)) and
  (((to_rep(((a).us_split_fields5).rec__record_equality__grandchild__f3) = to_rep(((b).us_split_fields5).rec__record_equality__grandchild__f3)) and
  (to_rep(((a).us_split_fields5).rec__record_equality__root__f12) = to_rep(((b).us_split_fields5).rec__record_equality__root__f12))) and
  (to_rep(((a).us_split_fields5).rec__record_equality__child__f21) = to_rep(((b).us_split_fields5).rec__record_equality__child__f21)))) then true else false)

logic us_tag2 : int

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic record_equality__root__c__first__bit2 : int

logic record_equality__root__c__last__bit2 : int

logic record_equality__root__c__position2 : int

axiom record_equality__root__c__first__bit_axiom2 :
  (0 <= record_equality__root__c__first__bit2)

axiom record_equality__root__c__last__bit_axiom2 :
  (record_equality__root__c__first__bit2 <  record_equality__root__c__last__bit2)

axiom record_equality__root__c__position_axiom2 :
  (0 <= record_equality__root__c__position2)

logic record_equality__grandchild__f3__first__bit : int

logic record_equality__grandchild__f3__last__bit : int

logic record_equality__grandchild__f3__position : int

axiom record_equality__grandchild__f3__first__bit_axiom :
  (0 <= record_equality__grandchild__f3__first__bit)

axiom record_equality__grandchild__f3__last__bit_axiom :
  (record_equality__grandchild__f3__first__bit <  record_equality__grandchild__f3__last__bit)

axiom record_equality__grandchild__f3__position_axiom :
  (0 <= record_equality__grandchild__f3__position)

logic record_equality__root__f1__first__bit2 : int

logic record_equality__root__f1__last__bit2 : int

logic record_equality__root__f1__position2 : int

axiom record_equality__root__f1__first__bit_axiom2 :
  (0 <= record_equality__root__f1__first__bit2)

axiom record_equality__root__f1__last__bit_axiom2 :
  (record_equality__root__f1__first__bit2 <  record_equality__root__f1__last__bit2)

axiom record_equality__root__f1__position_axiom2 :
  (0 <= record_equality__root__f1__position2)

logic record_equality__child__f2__first__bit1 : int

logic record_equality__child__f2__last__bit1 : int

logic record_equality__child__f2__position1 : int

axiom record_equality__child__f2__first__bit_axiom1 :
  (0 <= record_equality__child__f2__first__bit1)

axiom record_equality__child__f2__last__bit_axiom1 :
  (record_equality__child__f2__first__bit1 <  record_equality__child__f2__last__bit1)

axiom record_equality__child__f2__position_axiom1 :
  (0 <= record_equality__child__f2__position1)

logic user_eq3 : us_rep2, us_rep2 -> bool

logic dummy3 : us_rep2

type grandchild__ref = { grandchild__content : us_rep2
}

function grandchild__ref_grandchild__content__projection(a: grandchild__ref) : us_rep2 =
  (a).grandchild__content

logic us_tag3 : int

predicate in_range1(rec__record_equality__root__c1: int, a: us_rep) =
  (rec__record_equality__root__c1 = to_rep(((a).us_split_discrs1).rec__record_equality__root__c))

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic record_equality__root__c__first__bit3 : int

logic record_equality__root__c__last__bit3 : int

logic record_equality__root__c__position3 : int

axiom record_equality__root__c__first__bit_axiom3 :
  (0 <= record_equality__root__c__first__bit3)

axiom record_equality__root__c__last__bit_axiom3 :
  (record_equality__root__c__first__bit3 <  record_equality__root__c__last__bit3)

axiom record_equality__root__c__position_axiom3 :
  (0 <= record_equality__root__c__position3)

logic record_equality__root__f1__first__bit3 : int

logic record_equality__root__f1__last__bit3 : int

logic record_equality__root__f1__position3 : int

axiom record_equality__root__f1__first__bit_axiom3 :
  (0 <= record_equality__root__f1__first__bit3)

axiom record_equality__root__f1__last__bit_axiom3 :
  (record_equality__root__f1__first__bit3 <  record_equality__root__f1__last__bit3)

axiom record_equality__root__f1__position_axiom3 :
  (0 <= record_equality__root__f1__position3)

logic record_equality__child__f2__first__bit2 : int

logic record_equality__child__f2__last__bit2 : int

logic record_equality__child__f2__position2 : int

axiom record_equality__child__f2__first__bit_axiom2 :
  (0 <= record_equality__child__f2__first__bit2)

axiom record_equality__child__f2__last__bit_axiom2 :
  (record_equality__child__f2__first__bit2 <  record_equality__child__f2__last__bit2)

axiom record_equality__child__f2__position_axiom2 :
  (0 <= record_equality__child__f2__position2)

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy4 : us_rep1

type tc_pu1S__ref = { tc_pu1S__content : us_rep1
}

function tc_pu1S__ref_tc_pu1S__content__2__projection(a: tc_pu1S__ref) : us_rep1 =
  (a).tc_pu1S__content

logic c_pu1__split_discrs : us_split_discrs

logic c_pu1__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

predicate dynamic_invariant1(temp___expr_227: us_rep1,
  temp___is_init_223: bool, temp___skip_constant_224: bool,
  temp___do_toplevel_225: bool, temp___do_typ_inv_226: bool) =
  ((not (temp___skip_constant_224 = true)) -> in_range1(0,
  to_base(temp___expr_227)))

predicate default_initial_assumption(temp___expr_229: us_rep1,
  temp___skip_top_level_230: bool) =
  (((temp___expr_229).attr__tag1 = us_tag3) and
  ((to_rep(((temp___expr_229).us_split_discrs2).rec__record_equality__root__c) = 0) and
  ((to_rep(((temp___expr_229).us_split_fields3).rec__record_equality__root__f11) = 0) and
  (to_rep(((temp___expr_229).us_split_fields3).rec__record_equality__child__f2) = 0))))

logic r6b : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic g_pu1__split_discrs : us_split_discrs

logic g_pu1__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic r8b : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic g_pu2__split_discrs : us_split_discrs

logic g_pu2__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic us_tag4 : int

predicate in_range2(rec__record_equality__root__c1: int, a: us_rep) =
  (rec__record_equality__root__c1 = to_rep(((a).us_split_discrs1).rec__record_equality__root__c))

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic record_equality__root__c__first__bit4 : int

logic record_equality__root__c__last__bit4 : int

logic record_equality__root__c__position4 : int

axiom record_equality__root__c__first__bit_axiom4 :
  (0 <= record_equality__root__c__first__bit4)

axiom record_equality__root__c__last__bit_axiom4 :
  (record_equality__root__c__first__bit4 <  record_equality__root__c__last__bit4)

axiom record_equality__root__c__position_axiom4 :
  (0 <= record_equality__root__c__position4)

logic record_equality__root__f1__first__bit4 : int

logic record_equality__root__f1__last__bit4 : int

logic record_equality__root__f1__position4 : int

axiom record_equality__root__f1__first__bit_axiom4 :
  (0 <= record_equality__root__f1__first__bit4)

axiom record_equality__root__f1__last__bit_axiom4 :
  (record_equality__root__f1__first__bit4 <  record_equality__root__f1__last__bit4)

axiom record_equality__root__f1__position_axiom4 :
  (0 <= record_equality__root__f1__position4)

logic record_equality__child__f2__first__bit3 : int

logic record_equality__child__f2__last__bit3 : int

logic record_equality__child__f2__position3 : int

axiom record_equality__child__f2__first__bit_axiom3 :
  (0 <= record_equality__child__f2__first__bit3)

axiom record_equality__child__f2__last__bit_axiom3 :
  (record_equality__child__f2__first__bit3 <  record_equality__child__f2__last__bit3)

axiom record_equality__child__f2__position_axiom3 :
  (0 <= record_equality__child__f2__position3)

logic record_equality__grandchild__f3__first__bit1 : int

logic record_equality__grandchild__f3__last__bit1 : int

logic record_equality__grandchild__f3__position1 : int

axiom record_equality__grandchild__f3__first__bit_axiom1 :
  (0 <= record_equality__grandchild__f3__first__bit1)

axiom record_equality__grandchild__f3__last__bit_axiom1 :
  (record_equality__grandchild__f3__first__bit1 <  record_equality__grandchild__f3__last__bit1)

axiom record_equality__grandchild__f3__position_axiom1 :
  (0 <= record_equality__grandchild__f3__position1)

logic user_eq5 : us_rep2, us_rep2 -> bool

logic dummy5 : us_rep2

type t5b__ref = { t5b__content : us_rep2
}

function t5b__ref_t5b__content__projection(a: t5b__ref) : us_rep2 =
  (a).t5b__content

logic us_tag5 : int

predicate in_range3(rec__record_equality__root__c1: int, a: us_rep) =
  (rec__record_equality__root__c1 = to_rep(((a).us_split_discrs1).rec__record_equality__root__c))

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic record_equality__root__c__first__bit5 : int

logic record_equality__root__c__last__bit5 : int

logic record_equality__root__c__position5 : int

axiom record_equality__root__c__first__bit_axiom5 :
  (0 <= record_equality__root__c__first__bit5)

axiom record_equality__root__c__last__bit_axiom5 :
  (record_equality__root__c__first__bit5 <  record_equality__root__c__last__bit5)

axiom record_equality__root__c__position_axiom5 :
  (0 <= record_equality__root__c__position5)

logic record_equality__root__f1__first__bit5 : int

logic record_equality__root__f1__last__bit5 : int

logic record_equality__root__f1__position5 : int

axiom record_equality__root__f1__first__bit_axiom5 :
  (0 <= record_equality__root__f1__first__bit5)

axiom record_equality__root__f1__last__bit_axiom5 :
  (record_equality__root__f1__first__bit5 <  record_equality__root__f1__last__bit5)

axiom record_equality__root__f1__position_axiom5 :
  (0 <= record_equality__root__f1__position5)

logic record_equality__child__f2__first__bit4 : int

logic record_equality__child__f2__last__bit4 : int

logic record_equality__child__f2__position4 : int

axiom record_equality__child__f2__first__bit_axiom4 :
  (0 <= record_equality__child__f2__first__bit4)

axiom record_equality__child__f2__last__bit_axiom4 :
  (record_equality__child__f2__first__bit4 <  record_equality__child__f2__last__bit4)

axiom record_equality__child__f2__position_axiom4 :
  (0 <= record_equality__child__f2__position4)

logic record_equality__grandchild__f3__first__bit2 : int

logic record_equality__grandchild__f3__last__bit2 : int

logic record_equality__grandchild__f3__position2 : int

axiom record_equality__grandchild__f3__first__bit_axiom2 :
  (0 <= record_equality__grandchild__f3__first__bit2)

axiom record_equality__grandchild__f3__last__bit_axiom2 :
  (record_equality__grandchild__f3__first__bit2 <  record_equality__grandchild__f3__last__bit2)

axiom record_equality__grandchild__f3__position_axiom2 :
  (0 <= record_equality__grandchild__f3__position2)

logic user_eq6 : us_rep2, us_rep2 -> bool

logic dummy6 : us_rep2

type t7b__ref = { t7b__content : us_rep2
}

function t7b__ref_t7b__content__projection(a: t7b__ref) : us_rep2 =
  (a).t7b__content

logic rliteral : natural

axiom rliteral_axiom : (naturalqtint(rliteral) = 0)

logic rliteral1 : natural

axiom rliteral_axiom1 : (naturalqtint(rliteral1) = 1)

 (* File "record_equality.ads", line 16, characters 0-0 *)
goal defqtvc :
  (forall c_pu1__split_fields:us_split_fields2. (in_range(0) ->
  (default_initial_assumption({ us_split_discrs2 = c_pu1__split_discrs;
  us_split_fields3 = c_pu1__split_fields; attr__tag1 = c_pu1__attr__tag },
  false) -> (dynamic_invariant1({ us_split_discrs2 = c_pu1__split_discrs;
  us_split_fields3 = c_pu1__split_fields; attr__tag1 = c_pu1__attr__tag },
  false, false, true, true) ->
  (forall record_equality__test_eq_ko__R6b__assume:int.
  ((to_rep((c_pu1__split_discrs).rec__record_equality__root__c) = record_equality__test_eq_ko__R6b__assume) ->
  ((record_equality__test_eq_ko__R6b__assume = r6b) ->
  (dynamic_invariant(r6b, true, false, true, true) ->
  (forall g_pu1__split_fields:us_split_fields4. ((g_pu1__split_fields = {
  rec__record_equality__grandchild__f3 = rliteral;
  rec__record_equality__root__f12 =
  (c_pu1__split_fields).rec__record_equality__root__f11;
  rec__record_equality__child__f21 =
  (c_pu1__split_fields).rec__record_equality__child__f2; rec__ext__2 =
  us_null_ext__ }) -> ((g_pu1__split_discrs = c_pu1__split_discrs) ->
  ((g_pu1__attr__tag = us_tag2) ->
  (forall record_equality__test_eq_ko__R8b__assume:int.
  ((to_rep((c_pu1__split_discrs).rec__record_equality__root__c) = record_equality__test_eq_ko__R8b__assume) ->
  ((record_equality__test_eq_ko__R8b__assume = r8b) ->
  (dynamic_invariant(r8b, true, false, true, true) ->
  (forall g_pu2__split_fields:us_split_fields4. ((g_pu2__split_fields = {
  rec__record_equality__grandchild__f3 = rliteral1;
  rec__record_equality__root__f12 =
  (c_pu1__split_fields).rec__record_equality__root__f11;
  rec__record_equality__child__f21 =
  (c_pu1__split_fields).rec__record_equality__child__f2; rec__ext__2 =
  us_null_ext__ }) -> ((g_pu2__split_discrs = c_pu1__split_discrs) ->
  ((g_pu2__attr__tag = us_tag2) -> (bool_eq3({ us_split_discrs3 =
  g_pu1__split_discrs; us_split_fields5 = g_pu1__split_fields; attr__tag2 =
  g_pu1__attr__tag }, { us_split_discrs3 = g_pu2__split_discrs;
  us_split_fields5 = g_pu2__split_fields; attr__tag2 = g_pu2__attr__tag
  }) = true)))))))))))))))))))))
