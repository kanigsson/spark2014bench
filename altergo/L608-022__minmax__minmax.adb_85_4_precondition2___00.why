(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. (1 <= tqtint(i)))

axiom tqtaxiom1 : (forall i:t. (tqtint(i) <= 127))

predicate in_range1(x: int) = ((1 <= x) and (x <= 127))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : t, t -> bool

logic dummy1 : t

type t__ref = { t__content : t
}

function t__ref_t__content__projection(a: t__ref) : t = (a).t__content

predicate dynamic_invariant1(temp___expr_186: int, temp___is_init_182: bool,
  temp___skip_constant_183: bool, temp___do_toplevel_184: bool,
  temp___do_typ_inv_185: bool) = (((temp___is_init_182 = true) or
  (1 <= 127)) -> in_range1(temp___expr_186))

type e

predicate in_range2(x: int) = ((0 <= x) and (x <= 3))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : e, e -> bool

logic dummy2 : e

type e__ref = { e__content : e
}

function e__ref_e__content__projection(a: e__ref) : e = (a).e__content

predicate dynamic_invariant2(temp___expr_193: int, temp___is_init_189: bool,
  temp___skip_constant_190: bool, temp___do_toplevel_191: bool,
  temp___do_typ_inv_192: bool) = (((temp___is_init_189 = true) or
  (0 <= 3)) -> in_range2(temp___expr_193))

type s

logic sqtint : s -> int

axiom sqtaxiom : (forall i:s. (1 <= sqtint(i)))

axiom sqtaxiom1 : (forall i:s. (sqtint(i) <= 127))

predicate in_range3(x: int) = ((1 <= x) and (x <= 127))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : s, s -> bool

logic dummy3 : s

type s__ref = { s__content : s
}

function s__ref_s__content__projection(a: s__ref) : s = (a).s__content

predicate dynamic_invariant3(temp___expr_179: int, temp___is_init_175: bool,
  temp___skip_constant_176: bool, temp___do_toplevel_177: bool,
  temp___do_typ_inv_178: bool) = (((temp___is_init_175 = true) or
  (1 <= 127)) -> in_range3(temp___expr_179))

 (* File "minmax.adb", line 1, characters 0-0 *)
goal defqtvc :
  (forall min:int. forall max:int. forall mint:int. forall maxt:int.
  forall mine:int. forall maxe:int.
  (forall x:int. ((x = 1) -> (dynamic_invariant(x, true, false, true,
  true) ->
  (forall y:int. ((y = 127) -> (dynamic_invariant(y, true, false, true,
  true) -> (dynamic_invariant(min, false, false, true, true) ->
  (dynamic_invariant(max, false, false, true, true) ->
  (forall v:int. ((v = 1) -> (dynamic_invariant1(v, true, false, true,
  true) ->
  (forall w:int. ((w = 127) -> (dynamic_invariant1(w, true, false, true,
  true) -> (dynamic_invariant1(mint, false, false, true, true) ->
  (dynamic_invariant1(maxt, false, false, true, true) ->
  (forall aa:int. ((aa = 0) -> (dynamic_invariant2(aa, true, false, true,
  true) ->
  (forall cc:int. ((cc = 2) -> (dynamic_invariant2(cc, true, false, true,
  true) -> (dynamic_invariant2(mine, false, false, true, true) ->
  (dynamic_invariant2(maxe, false, false, true, true) ->
  (forall min1:int. forall max1:int. ((dynamic_invariant(min1, true, true,
  true, true) and dynamic_invariant(max1, true, true, true, true)) ->
  (in_range3(y) -> (in_range3(x) ->
  (forall min2:int. forall max2:int. ((dynamic_invariant(min2, true, true,
  true, true) and dynamic_invariant(max2, true, true, true, true)) ->
  (v <  w))))))))))))))))))))))))))))))))
