(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type shape

predicate in_range(x: int) = ((1 <= x) and (x <= 7))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : shape, shape -> bool

logic dummy : shape

type shape__ref = { shape__content : shape
}

function shape__ref_shape__content__projection(a: shape__ref) : shape =
  (a).shape__content

logic to_rep : shape -> int

logic of_rep : int -> shape

axiom inversion_axiom : (forall x:shape [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:shape [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type px_coord

logic px_coordqtint : px_coord -> int

axiom px_coordqtaxiom : (forall i:px_coord. ((- 1) <= px_coordqtint(i)))

axiom px_coordqtaxiom1 : (forall i:px_coord. (px_coordqtint(i) <= 9))

predicate in_range1(x: int) = (((- 1) <= x) and (x <= 9))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : px_coord, px_coord -> bool

logic dummy1 : px_coord

type px_coord__ref = { px_coord__content : px_coord
}

function px_coord__ref_px_coord__content__projection(a: px_coord__ref) : px_coord =
  (a).px_coord__content

function to_rep1(x: px_coord) : int = px_coordqtint(x)

logic of_rep1 : int -> px_coord

axiom inversion_axiom1 :
  (forall x:px_coord [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:px_coord [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type py_coord

logic py_coordqtint : py_coord -> int

axiom py_coordqtaxiom : (forall i:py_coord. ((- 1) <= py_coordqtint(i)))

axiom py_coordqtaxiom1 : (forall i:py_coord. (py_coordqtint(i) <= 49))

predicate in_range2(x: int) = (((- 1) <= x) and (x <= 49))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : py_coord, py_coord -> bool

logic dummy2 : py_coord

type py_coord__ref = { py_coord__content : py_coord
}

function py_coord__ref_py_coord__content__projection(a: py_coord__ref) : py_coord =
  (a).py_coord__content

function to_rep2(x: py_coord) : int = py_coordqtint(x)

logic of_rep2 : int -> py_coord

axiom inversion_axiom2 :
  (forall x:py_coord [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:py_coord [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type direction

predicate in_range3(x: int) = ((0 <= x) and (x <= 3))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : direction, direction -> bool

logic dummy3 : direction

type direction__ref = { direction__content : direction
}

function direction__ref_direction__content__projection(a: direction__ref) : direction =
  (a).direction__content

logic to_rep3 : direction -> int

logic of_rep3 : int -> direction

axiom inversion_axiom3 :
  (forall x:direction [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:direction [to_rep3(x)]. in_range3(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range3(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_fields = { rec__tetris_initial__piece__s : shape;
rec__tetris_initial__piece__d : direction; rec__tetris_initial__piece__x :
px_coord; rec__tetris_initial__piece__y : py_coord
}

function us_split_fields_rec__tetris_initial__piece__s__projection(a: us_split_fields) : shape =
  (a).rec__tetris_initial__piece__s

function us_split_fields_rec__tetris_initial__piece__d__projection(a: us_split_fields) : direction =
  (a).rec__tetris_initial__piece__d

function us_split_fields_rec__tetris_initial__piece__x__projection(a: us_split_fields) : px_coord =
  (a).rec__tetris_initial__piece__x

function us_split_fields_rec__tetris_initial__piece__y__projection(a: us_split_fields) : py_coord =
  (a).rec__tetris_initial__piece__y

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq4(a: us_rep, b: us_rep) : bool =
  (if (((to_rep(((a).us_split_fields1).rec__tetris_initial__piece__s) = to_rep(((b).us_split_fields1).rec__tetris_initial__piece__s)) and
  (to_rep3(((a).us_split_fields1).rec__tetris_initial__piece__d) = to_rep3(((b).us_split_fields1).rec__tetris_initial__piece__d))) and
  ((to_rep1(((a).us_split_fields1).rec__tetris_initial__piece__x) = to_rep1(((b).us_split_fields1).rec__tetris_initial__piece__x)) and
  (to_rep2(((a).us_split_fields1).rec__tetris_initial__piece__y) = to_rep2(((b).us_split_fields1).rec__tetris_initial__piece__y)))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic tetris_initial__piece__s__first__bit : int

logic tetris_initial__piece__s__last__bit : int

logic tetris_initial__piece__s__position : int

axiom tetris_initial__piece__s__first__bit_axiom :
  (0 <= tetris_initial__piece__s__first__bit)

axiom tetris_initial__piece__s__last__bit_axiom :
  (tetris_initial__piece__s__first__bit <  tetris_initial__piece__s__last__bit)

axiom tetris_initial__piece__s__position_axiom :
  (0 <= tetris_initial__piece__s__position)

logic tetris_initial__piece__d__first__bit : int

logic tetris_initial__piece__d__last__bit : int

logic tetris_initial__piece__d__position : int

axiom tetris_initial__piece__d__first__bit_axiom :
  (0 <= tetris_initial__piece__d__first__bit)

axiom tetris_initial__piece__d__last__bit_axiom :
  (tetris_initial__piece__d__first__bit <  tetris_initial__piece__d__last__bit)

axiom tetris_initial__piece__d__position_axiom :
  (0 <= tetris_initial__piece__d__position)

logic tetris_initial__piece__x__first__bit : int

logic tetris_initial__piece__x__last__bit : int

logic tetris_initial__piece__x__position : int

axiom tetris_initial__piece__x__first__bit_axiom :
  (0 <= tetris_initial__piece__x__first__bit)

axiom tetris_initial__piece__x__last__bit_axiom :
  (tetris_initial__piece__x__first__bit <  tetris_initial__piece__x__last__bit)

axiom tetris_initial__piece__x__position_axiom :
  (0 <= tetris_initial__piece__x__position)

logic tetris_initial__piece__y__first__bit : int

logic tetris_initial__piece__y__last__bit : int

logic tetris_initial__piece__y__position : int

axiom tetris_initial__piece__y__first__bit_axiom :
  (0 <= tetris_initial__piece__y__first__bit)

axiom tetris_initial__piece__y__last__bit_axiom :
  (tetris_initial__piece__y__first__bit <  tetris_initial__piece__y__last__bit)

axiom tetris_initial__piece__y__position_axiom :
  (0 <= tetris_initial__piece__y__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type piece__ref = { piece__content : us_rep
}

function piece__ref_piece__content__projection(a: piece__ref) : us_rep =
  (a).piece__content

logic turn_direction : int, int -> int

logic turn_direction__function_guard : int, int, int -> prop

predicate dynamic_invariant(temp___expr_615: int, temp___is_init_611: bool,
  temp___skip_constant_612: bool, temp___do_toplevel_613: bool,
  temp___do_typ_inv_614: bool) = (((temp___is_init_611 = true) or
  (0 <= 3)) -> in_range3(temp___expr_615))

type turn_action

predicate in_range4(x: int) = ((3 <= x) and (x <= 4))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : turn_action, turn_action -> bool

logic dummy5 : turn_action

type turn_action__ref = { turn_action__content : turn_action
}

function turn_action__ref_turn_action__content__projection(a: turn_action__ref) : turn_action =
  (a).turn_action__content

predicate dynamic_invariant1(temp___expr_715: int, temp___is_init_711: bool,
  temp___skip_constant_712: bool, temp___do_toplevel_713: bool,
  temp___do_typ_inv_714: bool) = (((temp___is_init_711 = true) or
  (3 <= 4)) -> in_range4(temp___expr_715))

axiom turn_direction__post_axiom :
  (forall d:int. forall t:int [turn_direction(d, t)]. ((dynamic_invariant(d,
  true, true, true, true) and dynamic_invariant1(t, true, true, true,
  true)) -> (let result = turn_direction(d, t) : int in
  (turn_direction__function_guard(result, d, t) -> dynamic_invariant(result,
  true, false, true, true)))))

axiom turn_direction__def_axiom :
  (forall d:int. forall t:int [turn_direction(d, t)]. ((dynamic_invariant(d,
  true, true, true, true) and dynamic_invariant1(t, true, true, true,
  true)) -> (turn_direction(d,
  t) = (if (t = 3) then (if (d = 0) then 3 else (d - 1)) else (if (d = 3) then 0 else (d + 1))))))

logic p : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic a : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type action

predicate in_range5(x: int) = ((0 <= x) and (x <= 4))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : action, action -> bool

logic dummy6 : action

type action__ref = { action__content : action
}

function action__ref_action__content__projection(a1: action__ref) : action =
  (a1).action__content

predicate dynamic_invariant2(temp___expr_701: int, temp___is_init_697: bool,
  temp___skip_constant_698: bool, temp___do_toplevel_699: bool,
  temp___do_typ_inv_700: bool) = (((temp___is_init_697 = true) or
  (0 <= 4)) -> in_range5(temp___expr_701))

predicate dynamic_invariant3(temp___expr_550: int, temp___is_init_546: bool,
  temp___skip_constant_547: bool, temp___do_toplevel_548: bool,
  temp___do_typ_inv_549: bool) = (((temp___is_init_546 = true) or
  (1 <= 7)) -> in_range(temp___expr_550))

predicate dynamic_invariant4(temp___expr_601: int, temp___is_init_597: bool,
  temp___skip_constant_598: bool, temp___do_toplevel_599: bool,
  temp___do_typ_inv_600: bool) = (((temp___is_init_597 = true) or
  ((- 1) <= 9)) -> in_range1(temp___expr_601))

predicate dynamic_invariant5(temp___expr_608: int, temp___is_init_604: bool,
  temp___skip_constant_605: bool, temp___do_toplevel_606: bool,
  temp___do_typ_inv_607: bool) = (((temp___is_init_604 = true) or
  ((- 1) <= 49)) -> in_range2(temp___expr_608))

 (* File "tetris_initial.ads", line 168, characters 0-0 *)
goal defqtvc : (dynamic_invariant2(a, true, false, true, true) ->
  ((not (a = 0)) -> ((a = 1) ->
  (forall o:int.
  ((to_rep1(((p).us_split_fields1).rec__tetris_initial__piece__x) = o) ->
  in_range1((o + 1)))))))
