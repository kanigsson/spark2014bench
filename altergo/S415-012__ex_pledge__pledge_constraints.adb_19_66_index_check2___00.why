(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

type us_rep = { rec__pledge_constraints__int_acc__is_null_pointer : bool;
rec__pledge_constraints__int_acc__pointer_address : int;
rec__pledge_constraints__int_acc__pointer_value : integer
}

function us_rep_rec__pledge_constraints__int_acc__is_null_pointer__projection(a: us_rep) : bool =
  (a).rec__pledge_constraints__int_acc__is_null_pointer

function us_rep_rec__pledge_constraints__int_acc__pointer_address__projection(a: us_rep) : int =
  (a).rec__pledge_constraints__int_acc__pointer_address

function us_rep_rec__pledge_constraints__int_acc__pointer_value__projection(a: us_rep) : integer =
  (a).rec__pledge_constraints__int_acc__pointer_value

type us_rep__ref = { us_rep__content : us_rep
}

function us_rep__ref___rep__content__projection(a: us_rep__ref) : us_rep =
  (a).us_rep__content

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if (((a).rec__pledge_constraints__int_acc__is_null_pointer = (b).rec__pledge_constraints__int_acc__is_null_pointer) and
  ((not ((a).rec__pledge_constraints__int_acc__is_null_pointer = true)) ->
  (((a).rec__pledge_constraints__int_acc__pointer_address = (b).rec__pledge_constraints__int_acc__pointer_address) and
  ((a).rec__pledge_constraints__int_acc__pointer_value = (b).rec__pledge_constraints__int_acc__pointer_value)))) then true else false)

predicate rec__pledge_constraints__int_acc__pointer_value__pred(a: us_rep) =
  (not ((a).rec__pledge_constraints__int_acc__is_null_pointer = true))

logic us_null_pointer : us_rep

axiom us_null_pointer__def_axiom :
  ((us_null_pointer).rec__pledge_constraints__int_acc__is_null_pointer = true)

logic dummy2 : us_rep

type int_acc__ref = { int_acc__content : us_rep
}

function int_acc__ref_int_acc__content__projection(a: int_acc__ref) : us_rep =
  (a).int_acc__content

type us_split_discrs = { rec__pledge_constraints__int_acc_option__present :
bool
}

function us_split_discrs_rec__pledge_constraints__int_acc_option__present__projection(a: us_split_discrs) : bool =
  (a).rec__pledge_constraints__int_acc_option__present

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__pledge_constraints__int_acc_option__content :
us_rep
}

function us_split_fields_rec__pledge_constraints__int_acc_option__content__projection(a: us_split_fields) : us_rep =
  (a).rec__pledge_constraints__int_acc_option__content

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

predicate pledge_constraints__int_acc_option__content__pred(a: us_rep1) =
  (to_int(((a).us_split_discrs1).rec__pledge_constraints__int_acc_option__present) = 1)

function bool_eq4(a: us_rep1, b: us_rep1) : bool =
  (if ((to_int(((a).us_split_discrs1).rec__pledge_constraints__int_acc_option__present) = to_int(((b).us_split_discrs1).rec__pledge_constraints__int_acc_option__present)) and
  (pledge_constraints__int_acc_option__content__pred(a) ->
  (bool_eq3(((a).us_split_fields1).rec__pledge_constraints__int_acc_option__content,
  ((b).us_split_fields1).rec__pledge_constraints__int_acc_option__content) = true))) then true else false)

predicate in_range3(rec__pledge_constraints__int_acc_option__present1: bool,
  a: us_split_discrs) =
  (rec__pledge_constraints__int_acc_option__present1 = (a).rec__pledge_constraints__int_acc_option__present)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic pledge_constraints__int_acc_option__present__first__bit : int

logic pledge_constraints__int_acc_option__present__last__bit : int

logic pledge_constraints__int_acc_option__present__position : int

axiom pledge_constraints__int_acc_option__present__first__bit_axiom :
  (0 <= pledge_constraints__int_acc_option__present__first__bit)

axiom pledge_constraints__int_acc_option__present__last__bit_axiom :
  (pledge_constraints__int_acc_option__present__first__bit <  pledge_constraints__int_acc_option__present__last__bit)

axiom pledge_constraints__int_acc_option__present__position_axiom :
  (0 <= pledge_constraints__int_acc_option__present__position)

logic pledge_constraints__int_acc_option__content__first__bit : int

logic pledge_constraints__int_acc_option__content__last__bit : int

logic pledge_constraints__int_acc_option__content__position : int

axiom pledge_constraints__int_acc_option__content__first__bit_axiom :
  (0 <= pledge_constraints__int_acc_option__content__first__bit)

axiom pledge_constraints__int_acc_option__content__last__bit_axiom :
  (pledge_constraints__int_acc_option__content__first__bit <  pledge_constraints__int_acc_option__content__last__bit)

axiom pledge_constraints__int_acc_option__content__position_axiom :
  (0 <= pledge_constraints__int_acc_option__content__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type int_acc_option__ref = { int_acc_option__content : us_rep1
}

function int_acc_option__ref_int_acc_option__content__projection(a: int_acc_option__ref) : us_rep1 =
  (a).int_acc_option__content

type map__ref = { map__content : (int,us_rep1) farray
}

logic slide : (int,us_rep1) farray, int, int -> (int,us_rep1) farray

axiom slide_eq :
  (forall a:(int,us_rep1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq5(a: (int,us_rep1) farray, a__first: int, a__last: int,
  b: (int,us_rep1) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq4((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq4((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,us_rep1) farray; rt : t
}

function to_array(a: us_t) : (int,us_rep1) farray = (a).elts

function of_array(a: (int,us_rep1) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size1 : int

logic object__size1 : int

logic component__size : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom1 : (0 <= alignment1)

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy4 : us_t

type int_opt_arr__ref = { int_opt_arr__content : us_t
}

function int_opt_arr__ref_int_opt_arr__content__projection(a: int_opt_arr__ref) : us_t =
  (a).int_opt_arr__content

type us_rep2 = { rec__pledge_constraints__int_arr_acc__is_null_pointer :
bool; rec__pledge_constraints__int_arr_acc__pointer_address : int;
rec__pledge_constraints__int_arr_acc__pointer_value : us_t
}

function us_rep_rec__pledge_constraints__int_arr_acc__is_null_pointer__projection(a: us_rep2) : bool =
  (a).rec__pledge_constraints__int_arr_acc__is_null_pointer

function us_rep_rec__pledge_constraints__int_arr_acc__pointer_address__projection(a: us_rep2) : int =
  (a).rec__pledge_constraints__int_arr_acc__pointer_address

function us_rep_rec__pledge_constraints__int_arr_acc__pointer_value__projection(a: us_rep2) : us_t =
  (a).rec__pledge_constraints__int_arr_acc__pointer_value

type us_rep__ref1 = { us_rep__content1 : us_rep2
}

function us_rep__ref___rep__content__2__projection(a: us_rep__ref1) : us_rep2 =
  (a).us_rep__content1

function bool_eq7(a: us_rep2, b: us_rep2) : bool =
  (if (((a).rec__pledge_constraints__int_arr_acc__is_null_pointer = (b).rec__pledge_constraints__int_arr_acc__is_null_pointer) and
  ((not ((a).rec__pledge_constraints__int_arr_acc__is_null_pointer = true)) ->
  (((a).rec__pledge_constraints__int_arr_acc__pointer_address = (b).rec__pledge_constraints__int_arr_acc__pointer_address) and
  ((a).rec__pledge_constraints__int_arr_acc__pointer_value = (b).rec__pledge_constraints__int_arr_acc__pointer_value)))) then true else false)

predicate rec__pledge_constraints__int_arr_acc__pointer_value__pred(a: us_rep2) =
  (not ((a).rec__pledge_constraints__int_arr_acc__is_null_pointer = true))

logic us_null_pointer1 : us_rep2

axiom us_null_pointer__def_axiom1 :
  ((us_null_pointer1).rec__pledge_constraints__int_arr_acc__is_null_pointer = true)

logic dummy5 : us_rep2

type int_arr_acc__ref = { int_arr_acc__content : us_rep2
}

function int_arr_acc__ref_int_arr_acc__content__projection(a: int_arr_acc__ref) : us_rep2 =
  (a).int_arr_acc__content

type us_split_fields2 = { rec__pledge_constraints__two_arrays__a1 : us_rep2;
rec__pledge_constraints__two_arrays__a2 : us_rep2
}

function us_split_fields_rec__pledge_constraints__two_arrays__a1__projection(a: us_split_fields2) : us_rep2 =
  (a).rec__pledge_constraints__two_arrays__a1

function us_split_fields_rec__pledge_constraints__two_arrays__a2__projection(a: us_split_fields2) : us_rep2 =
  (a).rec__pledge_constraints__two_arrays__a2

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep3 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__2__projection(a: us_rep3) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq8(a: us_rep3, b: us_rep3) : bool =
  (if ((bool_eq7(((a).us_split_fields3).rec__pledge_constraints__two_arrays__a1,
  ((b).us_split_fields3).rec__pledge_constraints__two_arrays__a1) = true) and
  (bool_eq7(((a).us_split_fields3).rec__pledge_constraints__two_arrays__a2,
  ((b).us_split_fields3).rec__pledge_constraints__two_arrays__a2) = true)) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic pledge_constraints__two_arrays__a1__first__bit : int

logic pledge_constraints__two_arrays__a1__last__bit : int

logic pledge_constraints__two_arrays__a1__position : int

axiom pledge_constraints__two_arrays__a1__first__bit_axiom :
  (0 <= pledge_constraints__two_arrays__a1__first__bit)

axiom pledge_constraints__two_arrays__a1__last__bit_axiom :
  (pledge_constraints__two_arrays__a1__first__bit <  pledge_constraints__two_arrays__a1__last__bit)

axiom pledge_constraints__two_arrays__a1__position_axiom :
  (0 <= pledge_constraints__two_arrays__a1__position)

logic pledge_constraints__two_arrays__a2__first__bit : int

logic pledge_constraints__two_arrays__a2__last__bit : int

logic pledge_constraints__two_arrays__a2__position : int

axiom pledge_constraints__two_arrays__a2__first__bit_axiom :
  (0 <= pledge_constraints__two_arrays__a2__first__bit)

axiom pledge_constraints__two_arrays__a2__last__bit_axiom :
  (pledge_constraints__two_arrays__a2__first__bit <  pledge_constraints__two_arrays__a2__last__bit)

axiom pledge_constraints__two_arrays__a2__position_axiom :
  (0 <= pledge_constraints__two_arrays__a2__position)

logic user_eq4 : us_rep3, us_rep3 -> bool

logic dummy6 : us_rep3

type two_arrays__ref = { two_arrays__content : us_rep3
}

function two_arrays__ref_two_arrays__content__projection(a: two_arrays__ref) : us_rep3 =
  (a).two_arrays__content

logic attr__ATTRIBUTE_ADDRESS : int

predicate dynamic_invariant(temp___expr_214: us_rep3,
  temp___is_init_210: bool, temp___skip_constant_211: bool,
  temp___do_toplevel_212: bool, temp___do_typ_inv_213: bool) =
  (((not ((((temp___expr_214).us_split_fields3).rec__pledge_constraints__two_arrays__a1).rec__pledge_constraints__int_arr_acc__is_null_pointer = true)) ->
  dynamic_property(1, 2147483647,
  first1((((temp___expr_214).us_split_fields3).rec__pledge_constraints__two_arrays__a1).rec__pledge_constraints__int_arr_acc__pointer_value),
  last1((((temp___expr_214).us_split_fields3).rec__pledge_constraints__two_arrays__a1).rec__pledge_constraints__int_arr_acc__pointer_value))) and
  ((not ((((temp___expr_214).us_split_fields3).rec__pledge_constraints__two_arrays__a2).rec__pledge_constraints__int_arr_acc__is_null_pointer = true)) ->
  dynamic_property(1, 2147483647,
  first1((((temp___expr_214).us_split_fields3).rec__pledge_constraints__two_arrays__a2).rec__pledge_constraints__int_arr_acc__pointer_value),
  last1((((temp___expr_214).us_split_fields3).rec__pledge_constraints__two_arrays__a2).rec__pledge_constraints__int_arr_acc__pointer_value))))

predicate default_initial_assumption(temp___expr_219: us_rep3,
  temp___skip_top_level_220: bool) =
  (((((temp___expr_219).us_split_fields3).rec__pledge_constraints__two_arrays__a1).rec__pledge_constraints__int_arr_acc__is_null_pointer = true) and
  ((((temp___expr_219).us_split_fields3).rec__pledge_constraints__two_arrays__a2).rec__pledge_constraints__int_arr_acc__is_null_pointer = true))

logic dummy7 : us_rep

type t5b__ref = { t5b__content : us_rep
}

function t5b__ref_t5b__content__projection(a: t5b__ref) : us_rep =
  (a).t5b__content

logic attr__ATTRIBUTE_ADDRESS1 : int

type us_pledge_ty

type us_pledge_ty__ref = { us_pledge_ty__content : us_pledge_ty
}

logic us_pledge_get : us_pledge_ty, us_rep3, us_rep -> bool

type t8b

logic t8bqtint : t8b -> int

axiom t8bqtaxiom : (forall i:t8b. (1 <= t8bqtint(i)))

axiom t8bqtaxiom1 : (forall i:t8b. (t8bqtint(i) <= 3))

predicate in_range4(x: int) = ((1 <= x) and (x <= 3))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq5 : t8b, t8b -> bool

logic dummy8 : t8b

type t8b__ref = { t8b__content : t8b
}

function t8b__ref_t8b__content__projection(a: t8b__ref) : t8b =
  (a).t8b__content

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic pledge_constraints__int_acc_option__present__first__bit1 : int

logic pledge_constraints__int_acc_option__present__last__bit1 : int

logic pledge_constraints__int_acc_option__present__position1 : int

axiom pledge_constraints__int_acc_option__present__first__bit_axiom1 :
  (0 <= pledge_constraints__int_acc_option__present__first__bit1)

axiom pledge_constraints__int_acc_option__present__last__bit_axiom1 :
  (pledge_constraints__int_acc_option__present__first__bit1 <  pledge_constraints__int_acc_option__present__last__bit1)

axiom pledge_constraints__int_acc_option__present__position_axiom1 :
  (0 <= pledge_constraints__int_acc_option__present__position1)

logic pledge_constraints__int_acc_option__content__first__bit1 : int

logic pledge_constraints__int_acc_option__content__last__bit1 : int

logic pledge_constraints__int_acc_option__content__position1 : int

axiom pledge_constraints__int_acc_option__content__first__bit_axiom1 :
  (0 <= pledge_constraints__int_acc_option__content__first__bit1)

axiom pledge_constraints__int_acc_option__content__last__bit_axiom1 :
  (pledge_constraints__int_acc_option__content__first__bit1 <  pledge_constraints__int_acc_option__content__last__bit1)

axiom pledge_constraints__int_acc_option__content__position_axiom1 :
  (0 <= pledge_constraints__int_acc_option__content__position1)

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy9 : us_rep1

type t7b__ref = { t7b__content : us_rep1
}

function t7b__ref_t7b__content__projection(a: t7b__ref) : us_rep1 =
  (a).t7b__content

logic temp_____aggregate_def_239 : us_rep1 -> (int,us_rep1) farray

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate dynamic_invariant2(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range2(temp___expr_46))

predicate default_initial_assumption1(temp___expr_182: us_rep,
  temp___skip_top_level_183: bool) =
  ((temp___expr_182).rec__pledge_constraints__int_acc__is_null_pointer = true)

predicate default_initial_assumption2(temp___expr_190: us_rep1,
  temp___skip_top_level_191: bool) =
  ((((temp___expr_190).us_split_discrs1).rec__pledge_constraints__int_acc_option__present = of_int(0)) and
  (pledge_constraints__int_acc_option__content__pred(temp___expr_190) ->
  ((((temp___expr_190).us_split_fields1).rec__pledge_constraints__int_acc_option__content).rec__pledge_constraints__int_acc__is_null_pointer = true)))

predicate dynamic_invariant3(temp___expr_198: us_t, temp___is_init_194: bool,
  temp___skip_constant_195: bool, temp___do_toplevel_196: bool,
  temp___do_typ_inv_197: bool) = ((not (temp___skip_constant_195 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_198),
  last1(temp___expr_198)))

predicate dynamic_invariant4(temp___expr_205: us_rep2,
  temp___is_init_201: bool, temp___skip_constant_202: bool,
  temp___do_toplevel_203: bool, temp___do_typ_inv_204: bool) =
  ((not ((temp___expr_205).rec__pledge_constraints__int_arr_acc__is_null_pointer = true)) ->
  dynamic_property(1, 2147483647,
  first1((temp___expr_205).rec__pledge_constraints__int_arr_acc__pointer_value),
  last1((temp___expr_205).rec__pledge_constraints__int_arr_acc__pointer_value)))

predicate default_initial_assumption3(temp___expr_208: us_rep2,
  temp___skip_top_level_209: bool) =
  ((temp___expr_208).rec__pledge_constraints__int_arr_acc__is_null_pointer = true)

axiom def_axiom :
  (forall temp___241:us_rep1.
  (forall temp___242:int.
  ((temp_____aggregate_def_239(temp___241)[temp___242]) = temp___241)))

 (* File "pledge_constraints.adb", line 18, characters 0-0 *)
goal defqtvc :
  (forall x__split_fields:us_split_fields2. (dynamic_invariant({
  us_split_fields3 = x__split_fields }, true, false, true, true) ->
  (forall o:bool.
  ((if (notb(bool_eq7((x__split_fields).rec__pledge_constraints__two_arrays__a1,
  us_null_pointer1)) = true) then (o = andb((if (first1(((x__split_fields).rec__pledge_constraints__two_arrays__a1).rec__pledge_constraints__int_arr_acc__pointer_value) <= 1) then true else false),
  (if (1 <= last1(((x__split_fields).rec__pledge_constraints__two_arrays__a1).rec__pledge_constraints__int_arr_acc__pointer_value)) then true else false))) else (o = false)) ->
  ((o = true) ->
  (first1(((x__split_fields).rec__pledge_constraints__two_arrays__a1).rec__pledge_constraints__int_arr_acc__pointer_value) <= 1))))))
