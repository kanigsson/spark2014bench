(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : positive, positive -> bool

logic dummy : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : natural, natural -> bool

logic dummy2 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep1(x: natural) : int = naturalqtint(x)

logic of_rep1 : int -> natural

axiom inversion_axiom1 :
  (forall x:natural [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:natural [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,natural) farray, a__first: int, a__last: int,
  b: (int,natural) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)]))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,natural) farray; rt : t
}

function to_array(a: us_t) : (int,natural) farray = (a).elts

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type nat_array__ref = { nat_array__content : us_t
}

function nat_array__ref_nat_array__content__projection(a: nat_array__ref) : us_t =
  (a).nat_array__content

logic init : int -> us_t

logic init__function_guard : us_t, int -> prop

type my_count

logic my_countqtint : my_count -> int

axiom my_countqtaxiom : (forall i:my_count. (1 <= my_countqtint(i)))

axiom my_countqtaxiom1 : (forall i:my_count. (my_countqtint(i) <= 5))

predicate in_range4(x: int) = ((1 <= x) and (x <= 5))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : my_count, my_count -> bool

logic dummy4 : my_count

type my_count__ref = { my_count__content : my_count
}

function my_count__ref_my_count__content__projection(a: my_count__ref) : my_count =
  (a).my_count__content

predicate dynamic_invariant(temp___expr_181: int, temp___is_init_177: bool,
  temp___skip_constant_178: bool, temp___do_toplevel_179: bool,
  temp___do_typ_inv_180: bool) = (((temp___is_init_177 = true) or
  (1 <= 5)) -> in_range4(temp___expr_181))

predicate dynamic_invariant1(temp___expr_188: us_t, temp___is_init_184: bool,
  temp___skip_constant_185: bool, temp___do_toplevel_186: bool,
  temp___do_typ_inv_187: bool) = ((not (temp___skip_constant_185 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_188),
  last1(temp___expr_188)))

type t15b__ref = { t15b__content : us_t
}

function t15b__ref_t15b__content__projection(a: t15b__ref) : us_t =
  (a).t15b__content

logic temp_____aggregate_def_200 : int, int, int -> us_t

axiom init__post_axiom :
  (forall c:int [init(c)]. (dynamic_invariant(c, true, true, true, true) ->
  (let result = init(c) : us_t in (init__function_guard(result, c) ->
  dynamic_invariant1(result, true, false, true, true)))))

axiom init__def_axiom :
  (forall c:int [init(c)]. (dynamic_invariant(c, true, true, true, true) ->
  (init(c) = of_array(to_array(temp_____aggregate_def_200(0, c, (c + 9))),
  first1(temp_____aggregate_def_200(0, c, (c + 9))),
  last1(temp_____aggregate_def_200(0, c, (c + 9)))))))

logic a__first : integer

logic a__last : integer

logic attr__ATTRIBUTE_ADDRESS : int

type tarray_1_10P1

logic tarray_1_10P1qtint : tarray_1_10P1 -> int

axiom tarray_1_10P1qtaxiom :
  (forall i:tarray_1_10P1. (1 <= tarray_1_10P1qtint(i)))

axiom tarray_1_10P1qtaxiom1 :
  (forall i:tarray_1_10P1. (tarray_1_10P1qtint(i) <= 10))

predicate in_range5(x: int) = ((1 <= x) and (x <= 10))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : tarray_1_10P1, tarray_1_10P1 -> bool

logic dummy5 : tarray_1_10P1

type tarray_1_10P1__ref = { tarray_1_10P1__content : tarray_1_10P1
}

function tarray_1_10P1__ref_tarray_1_10P1__content__projection(a: tarray_1_10P1__ref) : tarray_1_10P1 =
  (a).tarray_1_10P1__content

type t9b

logic t9bqtint : t9b -> int

axiom t9bqtaxiom : (forall i:t9b. (2 <= t9bqtint(i)))

axiom t9bqtaxiom1 : (forall i:t9b. (t9bqtint(i) <= 11))

predicate in_range6(x: int) = ((2 <= x) and (x <= 11))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : t9b, t9b -> bool

logic dummy6 : t9b

type t9b__ref = { t9b__content : t9b
}

function t9b__ref_t9b__content__projection(a: t9b__ref) : t9b =
  (a).t9b__content

type t11b

logic t11bqtint : t11b -> int

axiom t11bqtaxiom : (forall i:t11b. (1 <= t11bqtint(i)))

axiom t11bqtaxiom1 : (forall i:t11b. (t11bqtint(i) <= 10))

predicate in_range7(x: int) = ((1 <= x) and (x <= 10))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : t11b, t11b -> bool

logic dummy7 : t11b

type t11b__ref = { t11b__content : t11b
}

function t11b__ref_t11b__content__projection(a: t11b__ref) : t11b =
  (a).t11b__content

logic member__a__aggregate_def : int -> (int,natural) farray

logic temp_____aggregate_def_229 : int -> (int,natural) farray

predicate dynamic_invariant2(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range3(temp___expr_39))

predicate dynamic_invariant3(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range1(temp___expr_46))

predicate dynamic_invariant4(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range2(temp___expr_18))

logic rliteral : natural

axiom rliteral_axiom : (naturalqtint(rliteral) = 0)

axiom def_axiom :
  (forall temp___202:int. forall temp___203:int. forall temp___204:int.
  (dynamic_invariant2(temp___202, true, true, true, true) ->
  (dynamic_property(1, 2147483647, temp___203, temp___204) ->
  (first1(temp_____aggregate_def_200(temp___202, temp___203,
  temp___204)) = temp___203))))

axiom def_axiom1 :
  (forall temp___202:int. forall temp___203:int. forall temp___204:int.
  (dynamic_invariant2(temp___202, true, true, true, true) ->
  (dynamic_property(1, 2147483647, temp___203, temp___204) ->
  (last1(temp_____aggregate_def_200(temp___202, temp___203,
  temp___204)) = temp___204))))

axiom def_axiom2 :
  (forall temp___202:int. forall temp___203:int. forall temp___204:int.
  (dynamic_invariant2(temp___202, true, true, true, true) ->
  (forall temp___205:int. ((to_array(temp_____aggregate_def_200(temp___202,
  temp___203, temp___204))[temp___205]) = rliteral))))

axiom def_axiom3 :
  (forall temp___209:int. (dynamic_invariant2(temp___209, true, true, true,
  true) ->
  (forall temp___210:int.
  ((member__a__aggregate_def(temp___209)[temp___210]) = rliteral))))

logic rliteral1 : natural

axiom rliteral_axiom1 : (naturalqtint(rliteral1) = 1)

axiom def_axiom4 :
  (forall temp___231:int. (dynamic_invariant2(temp___231, true, true, true,
  true) ->
  (forall temp___232:int.
  ((temp_____aggregate_def_229(temp___231)[temp___232]) = rliteral1))))

 (* File "member.adb", line 1, characters 0-0 *)
goal defqtvc : (let member__a__assume = of_array(member__a__aggregate_def(0),
  2, 11) : us_t in
  (forall a:(int,natural) farray. ((a = to_array(member__a__assume)) ->
  ((to_rep(a__first) = first1(member__a__assume)) ->
  ((to_rep(a__last) = last1(member__a__assume)) -> (dynamic_property(1,
  2147483647, to_rep(a__first), to_rep(a__last)) ->
  (init__function_guard(init(1), 1) -> (init__function_guard(init(1), 1) ->
  (((first1(init(1)) = 1) and (last1(init(1)) = 10)) ->
  (init__function_guard(init(2), 2) -> (init__function_guard(init(1), 1) ->
  ((bool_eq4(to_array(init(1)), first1(init(1)), last1(init(1)),
  to_array(init(2)), first1(init(2)), last1(init(2))) = true) ->
  (init__function_guard(init(1), 1) -> (let temp___225 = init(1) : us_t in
  ((init__function_guard(init(2), 2) -> (bool_eq5(temp___225,
  init(2)) = true)) or (init__function_guard(init(3), 3) ->
  (bool_eq5(temp___225, init(3)) = true)))))))))))))))))
