(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic a : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic b : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic count : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type count_t

logic count_tqtint : count_t -> int

axiom count_tqtaxiom : (forall i:count_t. (0 <= count_tqtint(i)))

axiom count_tqtaxiom1 : (forall i:count_t. (count_tqtint(i) <= 5))

predicate in_range1(x: int) = ((0 <= x) and (x <= 5))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : count_t, count_t -> bool

logic dummy1 : count_t

type count_t__ref = { count_t__content : count_t
}

function count_t__ref_count_t__content__projection(a1: count_t__ref) : count_t =
  (a1).count_t__content

predicate dynamic_invariant(temp___expr_187: int, temp___is_init_183: bool,
  temp___skip_constant_184: bool, temp___do_toplevel_185: bool,
  temp___do_typ_inv_186: bool) = (((temp___is_init_183 = true) or
  (0 <= 5)) -> in_range1(temp___expr_187))

type index_t

logic index_tqtint : index_t -> int

axiom index_tqtaxiom : (forall i:index_t. (1 <= index_tqtint(i)))

axiom index_tqtaxiom1 : (forall i:index_t. (index_tqtint(i) <= 10))

predicate in_range2(x: int) = ((1 <= x) and (x <= 10))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : index_t, index_t -> bool

logic dummy2 : index_t

type index_t__ref = { index_t__content : index_t
}

function index_t__ref_index_t__content__projection(a1: index_t__ref) : index_t =
  (a1).index_t__content

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a1:(int,integer) farray. forall b1:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a1, a_first, a_last, b1, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((concat(a1, a_first, a_last, b1,
  b_first, b_last)[i]) = (a1[i]))))))

axiom concat_def1 :
  (forall a1:(int,integer) farray. forall b1:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a1, a_first, a_last, b1, b_first, b_last)[i])].
  ((a_last <  i) -> ((concat(a1, a_first, a_last, b1, b_first,
  b_last)[i]) = (b1[((i - a_last) + (b_first - 1))]))))))

logic concat_singleton_left : integer, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_singleton_left_def :
  (forall a1:integer.
  (forall b1:(int,integer) farray.
  (forall a_first:int. forall b_first:int. forall b_last:int
  [concat_singleton_left(a1, a_first, b1, b_first, b_last)].
  ((concat_singleton_left(a1, a_first, b1, b_first, b_last)[a_first]) = a1))))

axiom concat_singleton_left_def1 :
  (forall a1:integer.
  (forall b1:(int,integer) farray.
  (forall a_first:int. forall b_first:int. forall b_last:int
  [concat_singleton_left(a1, a_first, b1, b_first, b_last)].
  (forall i:int [(concat_singleton_left(a1, a_first, b1, b_first,
  b_last)[i])]. ((a_first <  i) -> ((concat_singleton_left(a1, a_first, b1,
  b_first, b_last)[i]) = (b1[((i - a_first) + (b_first - 1))])))))))

logic concat_singleton_right : (int,integer) farray, int, int,
  integer -> (int,integer) farray

axiom concat_singleton_right_def :
  (forall a1:(int,integer) farray.
  (forall b1:integer.
  (forall a_first:int. forall a_last:int [concat_singleton_right(a1, a_first,
  a_last, b1)]. ((concat_singleton_right(a1, a_first, a_last,
  b1)[(a_last + 1)]) = b1))))

axiom concat_singleton_right_def1 :
  (forall a1:(int,integer) farray.
  (forall b1:integer.
  (forall a_first:int. forall a_last:int [concat_singleton_right(a1, a_first,
  a_last, b1)].
  (forall i:int [(concat_singleton_right(a1, a_first, a_last, b1)[i])|
  (a1[i])]. (((a_first <= i) and (i <= a_last)) ->
  ((concat_singleton_right(a1, a_first, a_last, b1)[i]) = (a1[i])))))))

logic concat_singletons : integer, int, integer -> (int,integer) farray

axiom concat_singletons_def :
  (forall a1:integer. forall b1:integer.
  (forall a_first:int [concat_singletons(a1, a_first, b1)].
  ((concat_singletons(a1, a_first, b1)[a_first]) = a1)))

axiom concat_singletons_def1 :
  (forall a1:integer. forall b1:integer.
  (forall a_first:int [concat_singletons(a1, a_first, b1)].
  ((concat_singletons(a1, a_first, b1)[(a_first + 1)]) = b1)))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range(low) and in_range(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a1: us_t) : (int,integer) farray = (a1).elts

function of_array(a1: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a1; rt = mk(f, l) }

function first1(a1: us_t) : int = to_rep(first((a1).rt))

function last1(a1: us_t) : int = to_rep(last((a1).rt))

function length1(a1: us_t) : int =
  (if (first1(a1) <= last1(a1)) then ((last1(a1) - first1(a1)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq2((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type unconstrained_array_t__ref = { unconstrained_array_t__content : us_t
}

function unconstrained_array_t__ref_unconstrained_array_t__content__projection(a1: unconstrained_array_t__ref) : us_t =
  (a1).unconstrained_array_t__content

logic main__a__aggregate_def : int -> (int,integer) farray

logic main__b__aggregate_def : int -> (int,integer) farray

type t15b__ref = { t15b__content : us_t
}

function t15b__ref_t15b__content__projection(a1: t15b__ref) : us_t =
  (a1).t15b__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def2 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep(first2(mk1(f, l))) = f))))

axiom mk_def3 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep(last2(mk1(f, l))) = l))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t1 = { elts1 : (int,integer) farray; rt1 : t1
}

function to_array1(a1: us_t1) : (int,integer) farray = (a1).elts1

function of_array1(a1: (int,integer) farray, f: int, l: int) : us_t1 = {
  elts1 = a1; rt1 = mk1(f, l) }

function first3(a1: us_t1) : int = to_rep(first2((a1).rt1))

function last3(a1: us_t1) : int = to_rep(last2((a1).rt1))

function length2(a1: us_t1) : int =
  (if (first3(a1) <= last3(a1)) then ((last3(a1) - first3(a1)) + 1) else 0)

logic value__size1 : int

logic object__size1 : int

logic component__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom1 : (0 <= alignment1)

function bool_eq6(x: us_t1, y: us_t1) : bool = bool_eq2((x).elts1,
  to_rep(first2((x).rt1)), to_rep(last2((x).rt1)), (y).elts1,
  to_rep(first2((y).rt1)), to_rep(last2((y).rt1)))

logic user_eq4 : us_t1, us_t1 -> bool

logic dummy4 : us_t1

type tarray_b_tB__ref = { tarray_b_tB__content : us_t1
}

function tarray_b_tB__ref_tarray_b_tB__content__projection(a1: tarray_b_tB__ref) : us_t1 =
  (a1).tarray_b_tB__content

type t17b__ref = { t17b__content : us_t1
}

function t17b__ref_t17b__content__projection(a1: t17b__ref) : us_t1 =
  (a1).t17b__content

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

predicate dynamic_invariant2(temp___expr_194: int, temp___is_init_190: bool,
  temp___skip_constant_191: bool, temp___do_toplevel_192: bool,
  temp___do_typ_inv_193: bool) = (((temp___is_init_190 = true) or
  (1 <= 10)) -> in_range2(temp___expr_194))

predicate dynamic_invariant3(temp___expr_201: us_t, temp___is_init_197: bool,
  temp___skip_constant_198: bool, temp___do_toplevel_199: bool,
  temp___do_typ_inv_200: bool) = ((not (temp___skip_constant_198 = true)) ->
  dynamic_property((- 2147483648), 2147483647, first1(temp___expr_201),
  last1(temp___expr_201)))

axiom a__def_axiom : (a = main__a__aggregate_def(0))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 0)

axiom def_axiom :
  (forall temp___156:int. (dynamic_invariant1(temp___156, true, true, true,
  true) ->
  (forall temp___157:int.
  ((main__a__aggregate_def(temp___156)[temp___157]) = rliteral))))

axiom b__def_axiom : (b = main__b__aggregate_def(0))

axiom def_axiom1 :
  (forall temp___159:int. (dynamic_invariant1(temp___159, true, true, true,
  true) ->
  (forall temp___160:int.
  ((main__b__aggregate_def(temp___159)[temp___160]) = rliteral))))

 (* File "main.adb", line 16, characters 0-0 *)
goal defqtvc : ((main__a__aggregate_def(0) = a) ->
  ((main__b__aggregate_def(0) = b) -> (dynamic_invariant(count, true, false,
  true, true) -> (((1 <= count) -> (((1 <= 1) and (1 <= 10)) and
  ((1 <= count) and (count <= 10)))) -> (let temp___243 = of_array1(b, 1,
  count) : us_t1 in (dynamic_property((- 2147483648), 2147483647,
  first3(temp___243), last3(temp___243)) -> (let temp___245 =
  of_array(to_array1(temp___243), first3(temp___243), last3(temp___243))
  : us_t in (let temp___239 = (1 + count) : int in (((temp___239 <= 10) ->
  (((1 <= temp___239) and (temp___239 <= 10)) and ((1 <= 10) and
  (10 <= 10)))) -> (let temp___241 = of_array(a, temp___239, 10) : us_t in
  (let temp___244 = of_array(to_array(temp___241), first1(temp___241),
  last1(temp___241)) : us_t in ((not (length1(temp___244) = 0)) ->
  in_range(((first1(temp___244) + (length(first1(temp___244),
  last1(temp___244)) + length(first1(temp___245),
  last1(temp___245)))) - 1))))))))))))))
