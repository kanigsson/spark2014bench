(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

logic hide : int -> int

logic hide__function_guard : int, int -> prop

axiom hide__post_axiom :
  (forall x:int [hide(x)]. (dynamic_invariant(x, true, true, true, true) ->
  (let result = hide(x) : int in (hide__function_guard(result, x) ->
  dynamic_invariant(result, true, false, true, true)))))

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__tagged_component_check__q__p3__root__f :
natural; rec__ext__ : us_private
}

function us_split_fields_rec__tagged_component_check__q__p3__root__f__projection(a: us_split_fields) : natural =
  (a).rec__tagged_component_check__q__p3__root__f

function us_split_fields_rec__ext____5__projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__5__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___split_fields__5__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__5__projection(a: us_rep) : int = (a).attr__tag

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__tagged_component_check__q__p3__root__f) = to_rep(((b).us_split_fields1).rec__tagged_component_check__q__p3__root__f)) then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic tagged_component_check__q__p3__root__f__first__bit : int

logic tagged_component_check__q__p3__root__f__last__bit : int

logic tagged_component_check__q__p3__root__f__position : int

axiom tagged_component_check__q__p3__root__f__first__bit_axiom :
  (0 <= tagged_component_check__q__p3__root__f__first__bit)

axiom tagged_component_check__q__p3__root__f__last__bit_axiom :
  (tagged_component_check__q__p3__root__f__first__bit <  tagged_component_check__q__p3__root__f__last__bit)

axiom tagged_component_check__q__p3__root__f__position_axiom :
  (0 <= tagged_component_check__q__p3__root__f__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type root__ref = { root__content : us_rep
}

function root__ref_root__content__3__projection(a: root__ref) : us_rep =
  (a).root__content

type us_split_fields2 = { rec__tagged_component_check__q__p3__c__g : natural;
rec__tagged_component_check__q__p3__root__f1 : natural; rec__ext__1 :
us_private
}

function us_split_fields_rec__tagged_component_check__q__p3__c__g__projection(a: us_split_fields2) : natural =
  (a).rec__tagged_component_check__q__p3__c__g

function us_split_fields_rec__tagged_component_check__q__p3__root__f__2__projection(a: us_split_fields2) : natural =
  (a).rec__tagged_component_check__q__p3__root__f1

function us_split_fields_rec__ext____6__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__6__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___split_fields__6__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_attr__tag__6__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : natural, us_private -> us_private

logic extract__tagged_component_check__q__p3__c__g : us_private -> natural

axiom extract__tagged_component_check__q__p3__c__g__conv :
  (forall tagged_component_check__q__p3__c__g:natural.
  (forall rec__ext__2:us_private.
  (extract__tagged_component_check__q__p3__c__g(hide_ext__(tagged_component_check__q__p3__c__g,
  rec__ext__2)) = tagged_component_check__q__p3__c__g)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__tagged_component_check__q__p3__root__f =
  ((a).us_split_fields3).rec__tagged_component_check__q__p3__root__f1;
  rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__tagged_component_check__q__p3__c__g,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__tagged_component_check__q__p3__c__g =
  extract__tagged_component_check__q__p3__c__g(((r).us_split_fields1).rec__ext__);
  rec__tagged_component_check__q__p3__root__f1 =
  ((r).us_split_fields1).rec__tagged_component_check__q__p3__root__f;
  rec__ext__1 = extract__ext__(((r).us_split_fields1).rec__ext__) };
  attr__tag1 = (r).attr__tag }

function bool_eq3(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep(((a).us_split_fields3).rec__tagged_component_check__q__p3__c__g) = to_rep(((b).us_split_fields3).rec__tagged_component_check__q__p3__c__g)) and
  (to_rep(((a).us_split_fields3).rec__tagged_component_check__q__p3__root__f1) = to_rep(((b).us_split_fields3).rec__tagged_component_check__q__p3__root__f1))) then true else false)

logic us_tag1 : int

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic tagged_component_check__q__p3__c__g__first__bit : int

logic tagged_component_check__q__p3__c__g__last__bit : int

logic tagged_component_check__q__p3__c__g__position : int

axiom tagged_component_check__q__p3__c__g__first__bit_axiom :
  (0 <= tagged_component_check__q__p3__c__g__first__bit)

axiom tagged_component_check__q__p3__c__g__last__bit_axiom :
  (tagged_component_check__q__p3__c__g__first__bit <  tagged_component_check__q__p3__c__g__last__bit)

axiom tagged_component_check__q__p3__c__g__position_axiom :
  (0 <= tagged_component_check__q__p3__c__g__position)

logic tagged_component_check__q__p3__root__f__first__bit1 : int

logic tagged_component_check__q__p3__root__f__last__bit1 : int

logic tagged_component_check__q__p3__root__f__position1 : int

axiom tagged_component_check__q__p3__root__f__first__bit_axiom1 :
  (0 <= tagged_component_check__q__p3__root__f__first__bit1)

axiom tagged_component_check__q__p3__root__f__last__bit_axiom1 :
  (tagged_component_check__q__p3__root__f__first__bit1 <  tagged_component_check__q__p3__root__f__last__bit1)

axiom tagged_component_check__q__p3__root__f__position_axiom1 :
  (0 <= tagged_component_check__q__p3__root__f__position1)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type c__ref = { c__content : us_rep1
}

function c__ref_c__content__3__projection(a: c__ref) : us_rep1 =
  (a).c__content

predicate dynamic_invariant1(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_39))

axiom temp___result_196qtdef : hide__function_guard(hide(4), 4)

predicate default_initial_assumption(temp___expr_194: us_rep,
  temp___skip_top_level_195: bool) =
  (((temp___expr_194).attr__tag = us_tag) and
  (to_rep(((temp___expr_194).us_split_fields1).rec__tagged_component_check__q__p3__root__f) = hide(4)))

axiom temp___result_204qtdef : hide__function_guard(hide(5), 5)

axiom temp___result_205qtdef : hide__function_guard(hide(4), 4)

predicate default_initial_assumption1(temp___expr_202: us_rep1,
  temp___skip_top_level_203: bool) =
  (((temp___expr_202).attr__tag1 = us_tag1) and
  ((to_rep(((temp___expr_202).us_split_fields3).rec__tagged_component_check__q__p3__c__g) = hide(5)) and
  (to_rep(((temp___expr_202).us_split_fields3).rec__tagged_component_check__q__p3__root__f1) = hide(4))))

 (* File "/home/kanig/dev/spark2014/benchmark_script/data/tmp-test-PA12-001__default_checks_on_private-8676/src/gnatprove/tagged_component_check__q__p3__c.mlw", line 685, characters 5-8 *)
goal defqtvc : (let o = hide(5) : int in ((hide__function_guard(o, 5) and
  dynamic_invariant(o, true, false, true, true)) -> in_range(o)))
