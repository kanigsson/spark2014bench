(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. (0 <= tqtint(i)))

axiom tqtaxiom1 : (forall i:t. (tqtint(i) <= 65535))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (16 <= n)) -> (nth(x,
  n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  16)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth(bw_and(v1, v2), n) = andb(nth(v1, n), nth(v2, n)))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth(bw_or(v1, v2), n) = orb(nth(v1, n), nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  16)) -> (nth(bw_not(v),
  n) = notb(nth(v, n)))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  16) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((16 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> (((n + s) <  16) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> ((16 <= (n + s)) -> (nth(asr(b, s), n) = nth(b,
  (16 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  16))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 16))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 16))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

function to_int(x: t) : int =
  (if is_signed_positive(x) then tqtint(x) else (-(65536 - tqtint(x))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 65535))

axiom to_uint_bounds : (forall v:t. (0 <= tqtint(v)))

axiom to_uint_bounds1 : (forall v:t. (tqtint(v) <  65536))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  65536)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 16)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 65535)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) -> sge(x, zeros)))

axiom positive_is_ge_zeros1 :
  (forall x:t. (sge(x, zeros) -> is_signed_positive(x)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  65536) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  65536)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 65536)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  65536) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 65536)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  65536)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) -> eq_sub_bv(a, b, i, n)))

axiom eq_sub_equiv1 :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub_bv(a, b, i, n) ->
  eq_sub(a, b, tqtint(i), tqtint(n))))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 16)]. (eq_sub(x, y, 0, 16) ->
  (x = y)))

type t__ref = { t__content : t
}

function bool_eq(x: t, y: t) : bool = (if (x = y) then true else false)

function bool_ne(x: t, y: t) : bool = (if (not (x = y)) then true else false)

function bool_lt(x: t, y: t) : bool = (if ult(x, y) then true else false)

function bool_le(x: t, y: t) : bool = (if ule(x, y) then true else false)

function bool_gt(x: t, y: t) : bool = (if ugt(x, y) then true else false)

function bool_ge(x: t, y: t) : bool = (if uge(x, y) then true else false)

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

function bv_min(x: t, y: t) : t = (if ule(x, y) then x else y)

function bv_max(x: t, y: t) : t = (if ule(x, y) then y else x)

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type t1

logic tqtint1 : t1 -> int

axiom tqtaxiom2 : (forall i:t1. (0 <= tqtint1(i)))

axiom tqtaxiom3 : (forall i:t1. (tqtint1(i) <= 4294967295))

logic nth1 : t1, int -> bool

axiom nth_out_of_bound1 :
  (forall x:t1. forall n:int. (((n <  0) or (32 <= n)) -> (nth1(x,
  n) = false)))

logic zeros1 : t1

axiom Nth_zeros1 : (forall n:int. (nth1(zeros1, n) = false))

logic one1 : t1

logic ones1 : t1

axiom Nth_ones1 :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth1(ones1, n) = true)))

logic bw_and1 : t1, t1 -> t1

axiom Nth_bw_and1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth1(bw_and1(v1, v2), n) = andb(nth1(v1, n), nth1(v2, n)))))

logic bw_or1 : t1, t1 -> t1

axiom Nth_bw_or1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth1(bw_or1(v1, v2), n) = orb(nth1(v1, n), nth1(v2, n)))))

logic bw_xor1 : t1, t1 -> t1

axiom Nth_bw_xor1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth1(bw_xor1(v1, v2), n) = xorb(nth1(v1, n), nth1(v2, n)))))

logic bw_not1 : t1 -> t1

axiom Nth_bw_not1 :
  (forall v:t1. forall n:int. (((0 <= n) and (n <  32)) -> (nth1(bw_not1(v),
  n) = notb(nth1(v, n)))))

logic lsr1 : t1, int -> t1

axiom Lsr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  32) -> (nth1(lsr1(b, s), n) = nth1(b, (n + s)))))))

axiom Lsr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((32 <= (n + s)) -> (nth1(lsr1(b, s), n) = false)))))

axiom lsr_zeros1 : (forall x:t1. (lsr1(x, 0) = x))

logic asr1 : t1, int -> t1

axiom Asr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> (((n + s) <  32) -> (nth1(asr1(b, s), n) = nth1(b,
  (n + s)))))))

axiom Asr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> ((32 <= (n + s)) -> (nth1(asr1(b, s), n) = nth1(b,
  (32 - 1)))))))

axiom asr_zeros1 : (forall x:t1. (asr1(x, 0) = x))

logic lsl1 : t1, int -> t1

axiom Lsl_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  32))) -> (nth1(lsl1(b, s), n) = nth1(b, (n - s)))))

axiom Lsl_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth1(lsl1(b, s), n) = false)))

axiom lsl_zeros1 : (forall x:t1. (lsl1(x, 0) = x))

logic rotate_right1 : t1, int -> t1

axiom Nth_rotate_right1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth1(rotate_right1(v, n), i) = nth1(v, ((i + n) % 32))))))

logic rotate_left1 : t1, int -> t1

axiom Nth_rotate_left1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth1(rotate_left1(v, n), i) = nth1(v, ((i - n) % 32))))))

logic is_signed_positive1 : t1 -> prop

logic of_int1 : int -> t1

function to_int1(x: t1) : int =
  (if is_signed_positive1(x) then tqtint1(x) else (-(4294967296 - tqtint1(x))))

axiom to_uint_extensionality1 :
  (forall v:t1. forall vqt:t1. ((tqtint1(v) = tqtint1(vqt)) -> (v = vqt)))

axiom to_int_extensionality1 :
  (forall v:t1. forall vqt:t1. ((to_int1(v) = to_int1(vqt)) -> (v = vqt)))

predicate uint_in_range1(i: int) = ((0 <= i) and (i <= 4294967295))

axiom to_uint_bounds2 : (forall v:t1. (0 <= tqtint1(v)))

axiom to_uint_bounds3 : (forall v:t1. (tqtint1(v) <  4294967296))

axiom to_uint_of_int1 :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint1(of_int1(i)) = i)))

logic size_bv1 : t1

axiom to_uint_size_bv1 : (tqtint1(size_bv1) = 32)

axiom to_uint_zeros1 : (tqtint1(zeros1) = 0)

axiom to_uint_one1 : (tqtint1(one1) = 1)

axiom to_uint_ones1 : (tqtint1(ones1) = 4294967295)

predicate ult1(x: t1, y: t1) = (tqtint1(x) <  tqtint1(y))

predicate ule1(x: t1, y: t1) = (tqtint1(x) <= tqtint1(y))

predicate ugt1(x: t1, y: t1) = (tqtint1(y) <  tqtint1(x))

predicate uge1(x: t1, y: t1) = (tqtint1(y) <= tqtint1(x))

predicate slt1(v1: t1, v2: t1) = (to_int1(v1) <  to_int1(v2))

predicate sle1(v1: t1, v2: t1) = (to_int1(v1) <= to_int1(v2))

predicate sgt1(v1: t1, v2: t1) = (to_int1(v2) <  to_int1(v1))

predicate sge1(v1: t1, v2: t1) = (to_int1(v2) <= to_int1(v1))

axiom positive_is_ge_zeros2 :
  (forall x:t1. (is_signed_positive1(x) -> sge1(x, zeros1)))

axiom positive_is_ge_zeros3 :
  (forall x:t1. (sge1(x, zeros1) -> is_signed_positive1(x)))

logic add1 : t1, t1 -> t1

axiom to_uint_add_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) + tqtint1(v2)) <  4294967296) -> (tqtint1(add1(v1,
  v2)) = (tqtint1(v1) + tqtint1(v2)))))

logic sub1 : t1, t1 -> t1

axiom to_uint_sub_bounded1 :
  (forall v1:t1. forall v2:t1. (((0 <= (tqtint1(v1) - tqtint1(v2))) and
  ((tqtint1(v1) - tqtint1(v2)) <  4294967296)) -> (tqtint1(sub1(v1,
  v2)) = (tqtint1(v1) - tqtint1(v2)))))

logic neg1 : t1 -> t1

axiom to_uint_neg1 :
  (forall v:t1. (tqtint1(neg1(v)) = ((-tqtint1(v)) % 4294967296)))

logic mul1 : t1, t1 -> t1

axiom to_uint_mul_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) * tqtint1(v2)) <  4294967296) -> (tqtint1(mul1(v1,
  v2)) = (tqtint1(v1) * tqtint1(v2)))))

logic udiv1 : t1, t1 -> t1

axiom to_uint_udiv1 :
  (forall v1:t1. forall v2:t1. (tqtint1(udiv1(v1,
  v2)) = (tqtint1(v1) / tqtint1(v2))))

logic urem1 : t1, t1 -> t1

axiom to_uint_urem1 :
  (forall v1:t1. forall v2:t1. (tqtint1(urem1(v1,
  v2)) = (tqtint1(v1) % tqtint1(v2))))

logic lsr_bv1 : t1, t1 -> t1

axiom lsr_bv_is_lsr1 :
  (forall x:t1. forall n:t1. (lsr_bv1(x, n) = lsr1(x, tqtint1(n))))

axiom to_uint_lsr1 :
  (forall v:t1. forall n:t1. (tqtint1(lsr_bv1(v,
  n)) = (tqtint1(v) / pow2(tqtint1(n)))))

logic asr_bv1 : t1, t1 -> t1

axiom asr_bv_is_asr1 :
  (forall x:t1. forall n:t1. (asr_bv1(x, n) = asr1(x, tqtint1(n))))

logic lsl_bv1 : t1, t1 -> t1

axiom lsl_bv_is_lsl1 :
  (forall x:t1. forall n:t1. (lsl_bv1(x, n) = lsl1(x, tqtint1(n))))

axiom to_uint_lsl1 :
  (forall v:t1. forall n:t1. (tqtint1(lsl_bv1(v,
  n)) = ((tqtint1(v) * pow2(tqtint1(n))) % 4294967296)))

logic rotate_right_bv1 : t1, t1 -> t1

logic rotate_left_bv1 : t1, t1 -> t1

axiom rotate_left_bv_is_rotate_left1 :
  (forall v:t1. forall n:t1. (rotate_left_bv1(v, n) = rotate_left1(v,
  tqtint1(n))))

axiom rotate_right_bv_is_rotate_right1 :
  (forall v:t1. forall n:t1. (rotate_right_bv1(v, n) = rotate_right1(v,
  tqtint1(n))))

logic nth_bv1 : t1, t1 -> bool

axiom Nth_bv_is_nth1 :
  (forall x:t1. forall i:t1. (nth1(x, tqtint1(i)) = nth_bv1(x, i)))

axiom Nth_bv_is_nth21 :
  (forall x:t1. forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (nth_bv1(x, of_int1(i)) = nth1(x, i))))

logic eq_sub_bv1 : t1, t1, t1, t1 -> prop

predicate eq_sub1(a: t1, b: t1, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth1(a, j) = nth1(b,
  j))))

axiom eq_sub_equiv2 :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub1(a, b,
  tqtint1(i), tqtint1(n)) -> eq_sub_bv1(a, b, i, n)))

axiom eq_sub_equiv3 :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub_bv1(a, b, i,
  n) -> eq_sub1(a, b, tqtint1(i), tqtint1(n))))

axiom Extensionality1 :
  (forall x:t1. forall y:t1 [eq_sub1(x, y, 0, 32)]. (eq_sub1(x, y, 0, 32) ->
  (x = y)))

type t__ref1 = { t__content1 : t1
}

function bool_eq1(x: t1, y: t1) : bool = (if (x = y) then true else false)

function bool_ne1(x: t1, y: t1) : bool =
  (if (not (x = y)) then true else false)

function bool_lt1(x: t1, y: t1) : bool = (if ult1(x, y) then true else false)

function bool_le1(x: t1, y: t1) : bool = (if ule1(x, y) then true else false)

function bool_gt1(x: t1, y: t1) : bool = (if ugt1(x, y) then true else false)

function bool_ge1(x: t1, y: t1) : bool = (if uge1(x, y) then true else false)

logic power1 : t1, int -> t1

axiom Power_02 : (forall x:t1. (power1(x, 0) = one1))

axiom Power_12 : (forall x:t1. (power1(x, 1) = x))

axiom Power_s2 :
  (forall x:t1. forall n:int. ((0 <= n) -> (power1(x, (n + 1)) = mul1(x,
  power1(x, n)))))

axiom Power_s_alt1 :
  (forall x:t1. forall n:int. ((0 <  n) -> (power1(x, n) = mul1(x, power1(x,
  (n - 1))))))

axiom Power_sum2 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = mul1(power1(x, n), power1(x, m))))))

axiom Power_mult1 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult21 :
  (forall x:t1. forall y:t1. forall n:int. ((0 <= n) -> (power1(mul1(x, y),
  n) = mul1(power1(x, n), power1(y, n)))))

function bv_min1(x: t1, y: t1) : t1 = (if ule1(x, y) then x else y)

function bv_max1(x: t1, y: t1) : t1 = (if ule1(x, y) then y else x)

axiom bv_min_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_min1(x, y)) = min(tqtint1(x),
  tqtint1(y))))

axiom bv_max_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_max1(x, y)) = max(tqtint1(x),
  tqtint1(y))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq2(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int2(b: bool) : int = (if (b = true) then 1 else 0)

function of_int2(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic dummy1 : (int,integer) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq1 : (int,integer) farray, (int,integer) farray -> bool

type map

type map__ref1 = { map__content1 : map
}

logic get : map, int, t -> (int,integer) farray

logic set : map, int, t, (int,integer) farray -> map

axiom Select_eq :
  (forall m:map.
  (forall i:int.
  (forall j:t.
  (forall a:(int,integer) farray [set(m, i, j, a)]. (get(set(m, i, j, a), i,
  j) = a)))))

axiom Select_neq :
  (forall m:map.
  (forall i:int. forall i2:int.
  (forall j:t. forall j2:t.
  (forall a:(int,integer) farray [get(set(m, i, j, a), i2, j2)| set(m, i, j,
  a), get(m, i2, j2)]. ((not ((i = i2) and (j = j2))) -> (get(set(m, i, j,
  a), i2, j2) = get(m, i2, j2)))))))

logic slide1 : map, int, int, t, t -> map

axiom slide_def1 :
  (forall a:map.
  (forall new_first:int. forall old_first:int.
  (forall new_first_2:t. forall old_first_2:t.
  (forall i:int.
  (forall j:t [get(slide1(a, old_first, new_first, old_first_2, new_first_2),
  i, j)]. (get(slide1(a, old_first, new_first, old_first_2, new_first_2), i,
  j) = get(a, (i - (new_first - old_first)), sub(j, sub(new_first_2,
  old_first_2)))))))))

function bool_eq5(a: map, a__first: int, a__last: int, a__first_2: t,
  a__last_2: t, b: map, b__first: int, b__last: int, b__first_2: t,
  b__last_2: t) : bool =
  (if (((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (if ule(a__first_2, a__last_2) then (ule(b__first_2, b__last_2) and
  (sub(a__last_2, a__first_2) = sub(b__last_2,
  b__first_2))) else ugt(b__first_2, b__last_2))) and
  (forall temp___idx_155:int.
  (forall temp___idx_156:t. ((((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) and (ule(a__first_2, temp___idx_156) and
  ule(temp___idx_156, a__last_2))) -> (bool_eq4(get(a, temp___idx_155,
  temp___idx_156), 1, 3, get(b, ((b__first - a__first) + temp___idx_155),
  add(sub(b__first_2, a__first_2), temp___idx_156)), 1, 3) = true))))) then true else false)

axiom bool_eq_rev4 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int.
  (forall a__first_2:t. forall a__last_2:t. forall b__first_2:t.
  forall b__last_2:t. ((bool_eq5(b, b__first, b__last, b__first_2, b__last_2,
  a, a__first, a__last, a__first_2, a__last_2) = true) ->
  ((a__first <= a__last) -> (b__first <= b__last))))))

axiom bool_eq_rev5 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int.
  (forall a__first_2:t. forall a__last_2:t. forall b__first_2:t.
  forall b__last_2:t. ((bool_eq5(b, b__first, b__last, b__first_2, b__last_2,
  a, a__first, a__last, a__first_2, a__last_2) = true) ->
  ((a__first <= a__last) -> ((a__last - a__first) = (b__last - b__first)))))))

axiom bool_eq_rev6 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int.
  (forall a__first_2:t. forall a__last_2:t. forall b__first_2:t.
  forall b__last_2:t. ((bool_eq5(b, b__first, b__last, b__first_2, b__last_2,
  a, a__first, a__last, a__first_2, a__last_2) = true) ->
  ((not (a__first <= a__last)) -> (b__last <  b__first))))))

axiom bool_eq_rev7 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int.
  (forall a__first_2:t. forall a__last_2:t. forall b__first_2:t.
  forall b__last_2:t. ((bool_eq5(b, b__first, b__last, b__first_2, b__last_2,
  a, a__first, a__last, a__first_2, a__last_2) = true) -> (ule(a__first_2,
  a__last_2) -> ule(b__first_2, b__last_2))))))

axiom bool_eq_rev8 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int.
  (forall a__first_2:t. forall a__last_2:t. forall b__first_2:t.
  forall b__last_2:t. ((bool_eq5(b, b__first, b__last, b__first_2, b__last_2,
  a, a__first, a__last, a__first_2, a__last_2) = true) -> (ule(a__first_2,
  a__last_2) -> (sub(a__last_2, a__first_2) = sub(b__last_2, b__first_2)))))))

axiom bool_eq_rev9 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int.
  (forall a__first_2:t. forall a__last_2:t. forall b__first_2:t.
  forall b__last_2:t. ((bool_eq5(b, b__first, b__last, b__first_2, b__last_2,
  a, a__first, a__last, a__first_2, a__last_2) = true) ->
  ((not ule(a__first_2, a__last_2)) -> ugt(b__first_2, b__last_2))))))

axiom bool_eq_rev10 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int.
  (forall a__first_2:t. forall a__last_2:t. forall b__first_2:t.
  forall b__last_2:t. ((bool_eq5(b, b__first, b__last, b__first_2, b__last_2,
  a, a__first, a__last, a__first_2, a__last_2) = true) ->
  (forall temp___idx_155:int.
  (forall temp___idx_156:t. ((((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) and (ule(a__first_2, temp___idx_156) and
  ule(temp___idx_156, a__last_2))) -> (bool_eq4(get(a, temp___idx_155,
  temp___idx_156), 1, 3, get(b, ((b__first - a__first) + temp___idx_155),
  add(sub(b__first_2, a__first_2), temp___idx_156)), 1, 3) = true))))))))

logic dummy2 : map

logic value__size1 : int

logic object__size1 : int

logic component__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq2 : map, map -> bool

type map__ref2 = { map__content2 : (t1,map) farray
}

logic slide2 : (t1,map) farray, t1, t1 -> (t1,map) farray

axiom slide_eq1 :
  (forall a:(t1,map) farray.
  (forall first:t1 [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(t1,map) farray.
  (forall old_first:t1.
  (forall new_first:t1.
  (forall i:t1 [(slide2(a, old_first, new_first)[i])]. ((slide2(a, old_first,
  new_first)[i]) = (a[sub1(i, sub1(new_first, old_first))]))))))

logic rliteral : t

axiom rliteral_axiom : (tqtint(rliteral) = 1)

logic rliteral1 : t

axiom rliteral_axiom1 : (tqtint(rliteral1) = 3)

function bool_eq6(a: (t1,map) farray, a__first: t1, a__last: t1,
  b: (t1,map) farray, b__first: t1, b__last: t1) : bool =
  (if ((if ule1(a__first, a__last) then (ule1(b__first, b__last) and
  (sub1(a__last, a__first) = sub1(b__last, b__first))) else ugt1(b__first,
  b__last)) and
  (forall temp___idx_157:t1. ((ule1(a__first, temp___idx_157) and
  ule1(temp___idx_157, a__last)) -> (bool_eq5((a[temp___idx_157]), 1, 3,
  rliteral, rliteral1, (b[add1(sub1(b__first, a__first), temp___idx_157)]),
  1, 3, rliteral, rliteral1) = true)))) then true else false)

axiom bool_eq_rev11 :
  (forall a:(t1,map) farray. forall b:(t1,map) farray.
  (forall a__first:t1. forall a__last:t1. forall b__first:t1.
  forall b__last:t1. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> (ule1(a__first, a__last) -> ule1(b__first, b__last)))))

axiom bool_eq_rev12 :
  (forall a:(t1,map) farray. forall b:(t1,map) farray.
  (forall a__first:t1. forall a__last:t1. forall b__first:t1.
  forall b__last:t1. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> (ule1(a__first, a__last) -> (sub1(a__last,
  a__first) = sub1(b__last, b__first))))))

axiom bool_eq_rev13 :
  (forall a:(t1,map) farray. forall b:(t1,map) farray.
  (forall a__first:t1. forall a__last:t1. forall b__first:t1.
  forall b__last:t1. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not ule1(a__first, a__last)) -> ugt1(b__first,
  b__last)))))

axiom bool_eq_rev14 :
  (forall a:(t1,map) farray. forall b:(t1,map) farray.
  (forall a__first:t1. forall a__last:t1. forall b__first:t1.
  forall b__last:t1. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_157:t1. ((ule1(a__first, temp___idx_157) and
  ule1(temp___idx_157, a__last)) -> (bool_eq5((a[temp___idx_157]), 1, 3,
  rliteral, rliteral1, (b[add1(sub1(b__first, a__first), temp___idx_157)]),
  1, 3, rliteral, rliteral1) = true))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic y : (t1,map) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

type index1

logic index1qtint : index1 -> int

axiom index1qtaxiom : (forall i:index1. (1 <= index1qtint(i)))

axiom index1qtaxiom1 : (forall i:index1. (index1qtint(i) <= 3))

predicate in_range2(x: int) = ((1 <= x) and (x <= 3))

function bool_eq7(x: int, y1: int) : bool =
  (if (x = y1) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq3 : index1, index1 -> bool

logic dummy3 : index1

type index1__ref = { index1__content : index1
}

function index1__ref_index1__content__projection(a: index1__ref) : index1 =
  (a).index1__content

type index2

logic attr__ATTRIBUTE_MODULUS : t

predicate in_range3(x: t) = (ule(rliteral, x) and ule(x, rliteral1))

predicate in_range_int(x: int) = ((1 <= x) and (x <= 3))

function bool_eq8(x: t, y1: t) : bool = (if (x = y1) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> t

logic user_eq4 : index2, index2 -> bool

logic dummy4 : index2

type index2__ref = { index2__content : index2
}

function index2__ref_index2__content__projection(a: index2__ref) : index2 =
  (a).index2__content

type index3

logic attr__ATTRIBUTE_MODULUS1 : t1

logic rliteral2 : t1

axiom rliteral_axiom2 : (tqtint1(rliteral2) = 1)

logic rliteral3 : t1

axiom rliteral_axiom3 : (tqtint1(rliteral3) = 3)

predicate in_range4(x: t1) = (ule1(rliteral2, x) and ule1(x, rliteral3))

predicate in_range_int1(x: int) = ((1 <= x) and (x <= 3))

function bool_eq9(x: t1, y1: t1) : bool = (if (x = y1) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> t1

logic user_eq5 : index3, index3 -> bool

logic dummy5 : index3

type index3__ref = { index3__content : index3
}

function index3__ref_index3__content__projection(a: index3__ref) : index3 =
  (a).index3__content

type u32

logic attr__ATTRIBUTE_MODULUS2 : t1

function bool_eq10(x: t1, y1: t1) : bool = (if (x = y1) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> t1

logic user_eq6 : u32, u32 -> bool

logic dummy6 : u32

type u32__ref = { u32__content : u32
}

function u32__ref_u32__content__projection(a: u32__ref) : u32 =
  (a).u32__content

logic to_rep1 : u32 -> t1

logic of_rep1 : t1 -> u32

axiom inversion_axiom1 :
  (forall x:u32 [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom coerce_axiom1 :
  (forall x:t1 [to_rep1(of_rep1(x))]. (to_rep1(of_rep1(x)) = x))

function to_int3(x: u32) : int = tqtint1(to_rep1(x))

axiom range_int_axiom :
  (forall x:u32 [to_int3(x)]. uint_in_range1(to_int3(x)))

type t2

logic first : t2 -> u32

logic last : t2 -> u32

logic mk : t1, t1 -> t2

axiom mk_def :
  (forall f:t1. forall l:t1 [mk(f, l)]. (to_rep1(first(mk(f, l))) = f))

axiom mk_def1 :
  (forall f:t1. forall l:t1 [mk(f, l)]. (to_rep1(last(mk(f, l))) = l))

predicate dynamic_property(range_first: t1, range_last: t1, low: t1,
  high: t1) = (ule1(low, high) -> (in_range4(low) and in_range4(high)))

type us_t = { elts : (t1,map) farray; rt : t2
}

function to_array(a: us_t) : (t1,map) farray = (a).elts

function of_array(a: (t1,map) farray, f: t1, l: t1) : us_t = { elts = a; rt =
  mk(f, l) }

function first1(a: us_t) : t1 = to_rep1(first((a).rt))

function last1(a: us_t) : t1 = to_rep1(last((a).rt))

function length(a: us_t) : int = (if ule1(first1(a),
  last1(a)) then ((tqtint1(last1(a)) - tqtint1(first1(a))) + 1) else 0)

logic value__size2 : int

logic object__size2 : int

logic component__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom component__size_axiom2 : (0 <= component__size2)

axiom alignment_axiom2 : (0 <= alignment2)

function bool_eq11(x: us_t, y1: us_t) : bool = bool_eq6((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y1).elts,
  to_rep1(first((y1).rt)), to_rep1(last((y1).rt)))

logic user_eq7 : us_t, us_t -> bool

logic dummy7 : us_t

type tt3B__ref = { tt3B__content : us_t
}

function tt3B__ref_tt3B__content__projection(a: tt3B__ref) : us_t =
  (a).tt3B__content

type t13b__ref = { t13b__content : us_t
}

function t13b__ref_t13b__content__projection(a: t13b__ref) : us_t =
  (a).t13b__content

type t15b__ref = { t15b__content : us_t
}

function t15b__ref_t15b__content__projection(a: t15b__ref) : us_t =
  (a).t15b__content

logic p_bv__x__aggregate_def : map -> (t1,map) farray

logic temp_____aggregate_def_260 : (int,integer) farray -> map

logic temp_____aggregate_def_265 : int -> (int,integer) farray

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate dynamic_invariant1(temp___expr_183: int, temp___is_init_179: bool,
  temp___skip_constant_180: bool, temp___do_toplevel_181: bool,
  temp___do_typ_inv_182: bool) = (((temp___is_init_179 = true) or
  (1 <= 3)) -> in_range2(temp___expr_183))

predicate dynamic_invariant2(temp___expr_204: t, temp___is_init_200: bool,
  temp___skip_constant_201: bool, temp___do_toplevel_202: bool,
  temp___do_typ_inv_203: bool) = (((temp___is_init_200 = true) or
  ule(rliteral, rliteral1)) -> in_range3(temp___expr_204))

predicate dynamic_invariant3(temp___expr_211: t1, temp___is_init_207: bool,
  temp___skip_constant_208: bool, temp___do_toplevel_209: bool,
  temp___do_typ_inv_210: bool) = (((temp___is_init_207 = true) or
  ule1(rliteral2, rliteral3)) -> in_range4(temp___expr_211))

axiom def_axiom :
  (forall temp___258:map.
  (forall temp___259:t1.
  ((p_bv__x__aggregate_def(temp___258)[temp___259]) = temp___258)))

axiom def_axiom1 :
  (forall temp___262:(int,integer) farray.
  (forall temp___263:int.
  (forall temp___264:t. (get(temp_____aggregate_def_260(temp___262),
  temp___263, temp___264) = temp___262))))

logic rliteral4 : integer

axiom rliteral_axiom4 : (integerqtint(rliteral4) = 0)

axiom def_axiom2 :
  (forall temp___267:int. (dynamic_invariant(temp___267, true, true, true,
  true) ->
  (forall temp___268:int.
  ((temp_____aggregate_def_265(temp___267)[temp___268]) = rliteral4))))

logic rliteral5 : integer

axiom rliteral_axiom5 : (integerqtint(rliteral5) = 1)

 (* File "p_bv.adb", line 1, characters 0-0 *)
goal defqtvc :
  (forall x:(t1,map) farray.
  ((x = p_bv__x__aggregate_def(temp_____aggregate_def_260(temp_____aggregate_def_265(0)))) ->
  ((x = y) ->
  (forall i3:t1. ((i3 = rliteral2) -> ((andb((if ule1(rliteral2,
  i3) then true else false), (if ule1(i3,
  rliteral3) then true else false)) = true) ->
  (forall x1:(t1,map) farray. forall i31:t1.
  ((andb((if (forall temp___312:t1. ((ule1(rliteral2, temp___312) and
             ule1(temp___312, rliteral3)) -> ((ult1(rliteral3, temp___312) or
             (ult1(temp___312, rliteral2) or ule1(i31, temp___312))) ->
             ((x1[temp___312]) = (x[temp___312]))))) then true else false),
  (if (ule1(rliteral2, i31) and ule1(i31,
  rliteral3)) then true else false)) = true) ->
  (forall x2:(t1,map) farray.
  ((exists i21:int. ((i21 = 1) and
   (if (andb((if (1 <= i21) then true else false),
   (if (i21 <= 3) then true else false)) = true) then (exists x3:(t1,map) farray.
                                                      exists i211:int.
                                                      ((andb((if (forall temp___291:t1.
                                                                 ((ule1(rliteral2,
                                                                 temp___291) and
                                                                 ule1(temp___291,
                                                                 rliteral3)) ->
                                                                 (if (not (i31 = temp___291)) then ((x3[temp___291]) = (x1[temp___291])) else 
                                                                 (forall temp___292:int.
                                                                 (forall temp___293:t.
                                                                 ((((1 <= temp___292) and
                                                                 (temp___292 <= 3)) and
                                                                 (ule(rliteral,
                                                                 temp___293) and
                                                                 ule(temp___293,
                                                                 rliteral1))) ->
                                                                 (((3 <  temp___292) or
                                                                 ((temp___292 <  1) or
                                                                 (i211 <= temp___292))) ->
                                                                 (get((x3[temp___291]),
                                                                 temp___292,
                                                                 temp___293) = get((x1[temp___291]),
                                                                 temp___292,
                                                                 temp___293))))))))) then true else false),
                                                      (if ((1 <= i211) and
                                                      (i211 <= 3)) then true else false)) = true) and
                                                      ((exists i22:t.
                                                       ((i22 = rliteral) and
                                                       (if (andb((if ule(rliteral,
                                                       i22) then true else false),
                                                       (if ule(i22,
                                                       rliteral1) then true else false)) = true) then 
                                                       (exists x4:(t1,map) farray.
                                                       exists i221:t.
                                                       ((andb((if (forall temp___286:t1.
                                                                  ((ule1(rliteral2,
                                                                  temp___286) and
                                                                  ule1(temp___286,
                                                                  rliteral3)) ->
                                                                  (if (not (i31 = temp___286)) then ((x4[temp___286]) = (x3[temp___286])) else 
                                                                  (forall temp___287:int.
                                                                  (forall temp___288:t.
                                                                  ((((1 <= temp___287) and
                                                                  (temp___287 <= 3)) and
                                                                  (ule(rliteral,
                                                                  temp___288) and
                                                                  ule(temp___288,
                                                                  rliteral1))) ->
                                                                  ((ult(rliteral1,
                                                                  temp___288) or
                                                                  (ult(temp___288,
                                                                  rliteral) or
                                                                  (ule(i221,
                                                                  temp___288) or
                                                                  (not (i211 = temp___287))))) ->
                                                                  (get((x4[temp___286]),
                                                                  temp___287,
                                                                  temp___288) = get((x3[temp___286]),
                                                                  temp___287,
                                                                  temp___288))))))))) then true else false),
                                                       (if (ule(rliteral,
                                                       i221) and ule(i221,
                                                       rliteral1)) then true else false)) = true) and
                                                       ((exists i1:int.
                                                        ((i1 = 1) and
                                                        (if (andb((if (1 <= i1) then true else false),
                                                        (if (i1 <= 3) then true else false)) = true) then 
                                                        (exists x5:(t1,map) farray.
                                                        exists i11:int.
                                                        ((andb((if (forall temp___281:t1.
                                                                   ((ule1(rliteral2,
                                                                   temp___281) and
                                                                   ule1(temp___281,
                                                                   rliteral3)) ->
                                                                   (if (not (i31 = temp___281)) then ((x5[temp___281]) = (x4[temp___281])) else 
                                                                   (forall temp___282:int.
                                                                   (forall temp___283:t.
                                                                   ((((1 <= temp___282) and
                                                                   (temp___282 <= 3)) and
                                                                   (ule(rliteral,
                                                                   temp___283) and
                                                                   ule(temp___283,
                                                                   rliteral1))) ->
                                                                   (if ((not (i221 = temp___283)) or
                                                                   (not (i211 = temp___282))) then (get((x5[temp___281]),
                                                                   temp___282,
                                                                   temp___283) = get((x4[temp___281]),
                                                                   temp___282,
                                                                   temp___283)) else 
                                                                   (forall temp___284:int.
                                                                   (((1 <= temp___284) and
                                                                   (temp___284 <= 3)) ->
                                                                   (((3 <  temp___284) or
                                                                   ((temp___284 <  1) or
                                                                   (i11 <= temp___284))) ->
                                                                   ((get((x5[temp___281]),
                                                                   temp___282,
                                                                   temp___283)[temp___284]) = (get((x4[temp___281]),
                                                                   temp___282,
                                                                   temp___283)[temp___284])))))))))))) then true else false),
                                                        (if ((1 <= i11) and
                                                        (i11 <= 3)) then true else false)) = true) and
                                                        ((x2 = (x5[i31 <- set((x5[i31]),
                                                        i211, i221,
                                                        (get((x5[i31]), i211,
                                                        i221)[i11 <- rliteral5]))])) and
                                                        (i11 = 3)))) else (x2 = x4)))) and
                                                       (i221 = rliteral1)))) else (x2 = x3)))) and
                                                      (i211 = 3)))) else (x2 = x1)))) ->
  (let temp___297 = add1(i31, rliteral2) : t1 in (ule1(temp___297,
  rliteral3) -> ule1(rliteral2, temp___297)))))))))))))
