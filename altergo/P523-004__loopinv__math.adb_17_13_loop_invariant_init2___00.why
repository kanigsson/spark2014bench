(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type value

logic valueqtint : value -> int

axiom valueqtaxiom : (forall i:value. (0 <= valueqtint(i)))

axiom valueqtaxiom1 : (forall i:value. (valueqtint(i) <= 10000))

predicate in_range1(x: int) = ((0 <= x) and (x <= 10000))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : value, value -> bool

logic dummy : value

type value__ref = { value__content : value
}

function value__ref_value__content__projection(a: value__ref) : value =
  (a).value__content

function to_rep(x: value) : int = valueqtint(x)

logic of_rep : int -> value

axiom inversion_axiom : (forall x:value [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:value [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,value) farray
}

logic slide : (int,value) farray, int, int -> (int,value) farray

axiom slide_eq :
  (forall a:(int,value) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,value) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,value) farray, a__first: int, a__last: int,
  b: (int,value) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic i5s : (int,value) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

predicate dynamic_invariant(temp___expr_161: int, temp___is_init_157: bool,
  temp___skip_constant_158: bool, temp___do_toplevel_159: bool,
  temp___do_typ_inv_160: bool) = (((temp___is_init_157 = true) or
  (0 <= 10000)) -> in_range1(temp___expr_161))

type index

logic indexqtint : index -> int

axiom indexqtaxiom : (forall i:index. (1 <= indexqtint(i)))

axiom indexqtaxiom1 : (forall i:index. (indexqtint(i) <= 100))

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : index, index -> bool

logic dummy1 : index

type index__ref = { index__content : index
}

function index__ref_index__content__projection(a: index__ref) : index =
  (a).index__content

logic sorted : (int,value) farray -> bool

logic sorted__function_guard : bool, (int,value) farray -> prop

axiom temp___result_189qtdef :
  (forall temp___188:(int,value) farray.
  sorted__function_guard(sorted(temp___188), temp___188))

predicate dynamic_invariant1(temp___expr_187: (int,value) farray,
  temp___is_init_183: bool, temp___skip_constant_184: bool,
  temp___do_toplevel_185: bool, temp___do_typ_inv_186: bool) =
  ((temp___do_toplevel_185 = true) -> ((temp___is_init_183 = true) ->
  (sorted(temp___expr_187) = true)))

axiom temp___result_197qtdef :
  (forall temp___196:(int,value) farray.
  sorted__function_guard(sorted(temp___196), temp___196))

predicate dynamic_predicate(temp___195: (int,value) farray) =
  (sorted(temp___195) = true)

predicate dynamic_invariant2(temp___expr_168: int, temp___is_init_164: bool,
  temp___skip_constant_165: bool, temp___do_toplevel_166: bool,
  temp___do_typ_inv_167: bool) = (((temp___is_init_164 = true) or
  (1 <= 100)) -> in_range2(temp___expr_168))

axiom sorted__def_axiom :
  (forall v:(int,value) farray [sorted(v)]. ((sorted(v) = true) ->
  (forall j:int. (((1 <= j) and (j <= 99)) ->
  (to_rep((v[j])) <= to_rep((v[(j + 1)])))))))

axiom sorted__def_axiom1 :
  (forall v:(int,value) farray [sorted(v)].
  ((forall j:int. (((1 <= j) and (j <= 99)) ->
   (to_rep((v[j])) <= to_rep((v[(j + 1)]))))) ->
  (sorted(v) = true)))

 (* File "math.ads", line 14, characters 0-0 *)
goal defqtvc :
  (forall v:(int,value) farray. forall tmp_value:int.
  (dynamic_invariant1(i5s, true, false, true, true) ->
  (dynamic_invariant1(i5s, true, false, true, true) -> (dynamic_invariant1(v,
  true, false, true, true) ->
  (forall o:int. ((to_rep((v[1])) = o) ->
  (forall prev_value:int. ((prev_value = o) -> (dynamic_invariant(prev_value,
  true, false, true, true) -> (dynamic_invariant(tmp_value, false, false,
  true, true) ->
  (forall j:int. ((j = 1) -> ((andb((if (1 <= j) then true else false),
  (if (j <= 100) then true else false)) = true) ->
  (forall temp___loop_entry_216:(int,value) farray.
  ((temp___loop_entry_216 = v) ->
  (forall temp___loop_entry_221:(int,value) farray.
  ((temp___loop_entry_221 = v) ->
  (forall temp___loop_entry_218:(int,value) farray.
  ((temp___loop_entry_218 = v) ->
  (forall tmp_value1:int. ((tmp_value1 = prev_value) ->
  (forall o1:int. ((to_rep((v[j])) = o1) ->
  (forall prev_value1:int. ((prev_value1 = o1) ->
  (forall o2:value. ((to_rep(o2) = tmp_value1) -> (let temp___209 =
  (v[j <- o2]) : (int,value) farray in (dynamic_predicate(temp___209) ->
  (forall v1:(int,value) farray. ((v1 = temp___209) ->
  (forall o3:int. ((to_rep((temp___loop_entry_221[j])) = o3) ->
  ((prev_value1 = to_rep((temp___loop_entry_221[j]))) ->
  ((forall k:int. (((1 <= k) and (k <= j)) ->
   (to_rep((v1[k])) = to_rep((temp___loop_entry_218[max(1, (k - 1))]))))) ->
  (forall k:int. ((((j + 1) <= k) and (k <= 100)) ->
  (to_rep((v1[k])) = to_rep((temp___loop_entry_216[k]))))))))))))))))))))))))))))))))))))))))
