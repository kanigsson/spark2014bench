(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

logic attr__ATTRIBUTE_ADDRESS : int

type map__ref = { map__content : (int,bool) farray
}

logic slide : (int,bool) farray, int, int -> (int,bool) farray

axiom slide_eq :
  (forall a:(int,bool) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,bool) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,bool) farray, a__first: int, a__last: int,
  b: (int,bool) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_int((a[temp___idx_156])) = to_int((b[((b__first - a__first) + temp___idx_156)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_int((a[temp___idx_156])) = to_int((b[((b__first - a__first) + temp___idx_156)]))))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,bool) farray; rt : t
}

function to_array(a: us_t) : (int,bool) farray = (a).elts

function of_array(a: (int,bool) farray, f: int, l: int) : us_t = { elts = a;
  rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq4(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq2 : us_t, us_t -> bool

logic dummy2 : us_t

type a1__ref = { a1__content : us_t
}

function a1__ref_a1__content__projection(a: a1__ref) : us_t = (a).a1__content

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

type tTxSP1

logic tTxSP1qtint : tTxSP1 -> int

axiom tTxSP1qtaxiom : (forall i:tTxSP1. (0 <= tTxSP1qtint(i)))

axiom tTxSP1qtaxiom1 : (forall i:tTxSP1. (tTxSP1qtint(i) <= 10))

predicate in_range3(x: int) = ((0 <= x) and (x <= 10))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : tTxSP1, tTxSP1 -> bool

logic dummy3 : tTxSP1

type tTxSP1__ref = { tTxSP1__content : tTxSP1
}

function tTxSP1__ref_tTxSP1__content__projection(a: tTxSP1__ref) : tTxSP1 =
  (a).tTxSP1__content

type tTySP1

logic tTySP1qtint : tTySP1 -> int

axiom tTySP1qtaxiom : (forall i:tTySP1. (1 <= tTySP1qtint(i)))

axiom tTySP1qtaxiom1 : (forall i:tTySP1. (tTySP1qtint(i) <= 10))

predicate in_range4(x: int) = ((1 <= x) and (x <= 10))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : tTySP1, tTySP1 -> bool

logic dummy4 : tTySP1

type tTySP1__ref = { tTySP1__content : tTySP1
}

function tTySP1__ref_tTySP1__content__projection(a: tTySP1__ref) : tTySP1 =
  (a).tTySP1__content

type tTxSP11

logic tTxSP1qtint1 : tTxSP11 -> int

axiom tTxSP1qtaxiom2 : (forall i:tTxSP11. (0 <= tTxSP1qtint1(i)))

axiom tTxSP1qtaxiom3 : (forall i:tTxSP11. (tTxSP1qtint1(i) <= 10))

predicate in_range5(x: int) = ((0 <= x) and (x <= 10))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : tTxSP11, tTxSP11 -> bool

logic dummy5 : tTxSP11

type tTxSP1__ref1 = { tTxSP1__content1 : tTxSP11
}

function tTxSP1__ref_tTxSP1__content__2__projection(a: tTxSP1__ref1) : tTxSP11 =
  (a).tTxSP1__content1

type tTySP11

logic tTySP1qtint1 : tTySP11 -> int

axiom tTySP1qtaxiom2 : (forall i:tTySP11. (1 <= tTySP1qtint1(i)))

axiom tTySP1qtaxiom3 : (forall i:tTySP11. (tTySP1qtint1(i) <= 11))

predicate in_range6(x: int) = ((1 <= x) and (x <= 11))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : tTySP11, tTySP11 -> bool

logic dummy6 : tTySP11

type tTySP1__ref1 = { tTySP1__content1 : tTySP11
}

function tTySP1__ref_tTySP1__content__2__projection(a: tTySP1__ref1) : tTySP11 =
  (a).tTySP1__content1

type tTxSP12

logic tTxSP1qtint2 : tTxSP12 -> int

axiom tTxSP1qtaxiom4 : (forall i:tTxSP12. (1 <= tTxSP1qtint2(i)))

axiom tTxSP1qtaxiom5 : (forall i:tTxSP12. (tTxSP1qtint2(i) <= 10))

predicate in_range7(x: int) = ((1 <= x) and (x <= 10))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : tTxSP12, tTxSP12 -> bool

logic dummy7 : tTxSP12

type tTxSP1__ref2 = { tTxSP1__content2 : tTxSP12
}

function tTxSP1__ref_tTxSP1__content__3__projection(a: tTxSP1__ref2) : tTxSP12 =
  (a).tTxSP1__content2

type tTxSP13

logic tTxSP1qtint3 : tTxSP13 -> int

axiom tTxSP1qtaxiom6 : (forall i:tTxSP13. (1 <= tTxSP1qtint3(i)))

axiom tTxSP1qtaxiom7 : (forall i:tTxSP13. (tTxSP1qtint3(i) <= 11))

predicate in_range8(x: int) = ((1 <= x) and (x <= 11))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : tTxSP13, tTxSP13 -> bool

logic dummy8 : tTxSP13

type tTxSP1__ref3 = { tTxSP1__content3 : tTxSP13
}

function tTxSP1__ref_tTxSP1__content__4__projection(a: tTxSP1__ref3) : tTxSP13 =
  (a).tTxSP1__content3

type tTxSP14

logic tTxSP1qtint4 : tTxSP14 -> int

axiom tTxSP1qtaxiom8 : (forall i:tTxSP14. (1 <= tTxSP1qtint4(i)))

axiom tTxSP1qtaxiom9 : (forall i:tTxSP14. (tTxSP1qtint4(i) <= 10))

predicate in_range9(x: int) = ((1 <= x) and (x <= 10))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq9 : tTxSP14, tTxSP14 -> bool

logic dummy9 : tTxSP14

type tTxSP1__ref4 = { tTxSP1__content4 : tTxSP14
}

function tTxSP1__ref_tTxSP1__content__5__projection(a: tTxSP1__ref4) : tTxSP14 =
  (a).tTxSP1__content4

type tTxSP15

logic tTxSP1qtint5 : tTxSP15 -> int

axiom tTxSP1qtaxiom10 : (forall i:tTxSP15. (1 <= tTxSP1qtint5(i)))

axiom tTxSP1qtaxiom11 : (forall i:tTxSP15. (tTxSP1qtint5(i) <= 11))

predicate in_range10(x: int) = ((1 <= x) and (x <= 11))

function bool_eq12(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq10 : tTxSP15, tTxSP15 -> bool

logic dummy10 : tTxSP15

type tTxSP1__ref5 = { tTxSP1__content5 : tTxSP15
}

function tTxSP1__ref_tTxSP1__content__6__projection(a: tTxSP1__ref5) : tTxSP15 =
  (a).tTxSP1__content5

logic do_checks__do_length_check__B_21__x__aggregate_def : bool -> (int,bool) farray

logic do_checks__do_length_check__B_21__y__aggregate_def : bool -> (int,bool) farray

logic do_checks__do_length_check__B_22__x__aggregate_def : bool -> (int,bool) farray

logic do_checks__do_length_check__B_22__y__aggregate_def : bool -> (int,bool) farray

logic do_checks__do_length_check__B_23__x__aggregate_def : bool -> (int,bool) farray

logic do_checks__do_length_check__B_24__x__aggregate_def : bool -> (int,bool) farray

logic do_checks__do_length_check__B_25__x__aggregate_def : bool -> (int,bool) farray

logic do_checks__do_length_check__B_26__x__aggregate_def : bool -> (int,bool) farray

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate dynamic_invariant2(temp___expr_364: us_t, temp___is_init_360: bool,
  temp___skip_constant_361: bool, temp___do_toplevel_362: bool,
  temp___do_typ_inv_363: bool) = ((not (temp___skip_constant_361 = true)) ->
  dynamic_property(0, 2147483647, first1(temp___expr_364),
  last1(temp___expr_364)))

axiom def_axiom :
  (forall temp___798:bool.
  (forall temp___799:int.
  ((do_checks__do_length_check__B_21__x__aggregate_def(temp___798)[temp___799]) = temp___798)))

axiom def_axiom1 :
  (forall temp___801:bool.
  (forall temp___802:int.
  ((do_checks__do_length_check__B_21__y__aggregate_def(temp___801)[temp___802]) = temp___801)))

axiom def_axiom2 :
  (forall temp___806:bool.
  (forall temp___807:int.
  ((do_checks__do_length_check__B_22__x__aggregate_def(temp___806)[temp___807]) = temp___806)))

axiom def_axiom3 :
  (forall temp___809:bool.
  (forall temp___810:int.
  ((do_checks__do_length_check__B_22__y__aggregate_def(temp___809)[temp___810]) = temp___809)))

axiom def_axiom4 :
  (forall temp___812:bool.
  (forall temp___813:int.
  ((do_checks__do_length_check__B_23__x__aggregate_def(temp___812)[temp___813]) = temp___812)))

axiom def_axiom5 :
  (forall temp___815:bool.
  (forall temp___816:int.
  ((do_checks__do_length_check__B_24__x__aggregate_def(temp___815)[temp___816]) = temp___815)))

axiom def_axiom6 :
  (forall temp___819:bool.
  (forall temp___820:int.
  ((do_checks__do_length_check__B_25__x__aggregate_def(temp___819)[temp___820]) = temp___819)))

axiom def_axiom7 :
  (forall temp___823:bool.
  (forall temp___824:int.
  ((do_checks__do_length_check__B_26__x__aggregate_def(temp___823)[temp___824]) = temp___823)))

 (* File "do_checks.adb", line 6, characters 0-0 *)
goal defqtvc : true
