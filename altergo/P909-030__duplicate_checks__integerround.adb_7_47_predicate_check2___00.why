(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic x : int

logic attr__ATTRIBUTE_ADDRESS : int

type t1

logic t1qtint : t1 -> int

axiom t1qtaxiom : (forall i:t1. ((- 10) <= t1qtint(i)))

axiom t1qtaxiom1 : (forall i:t1. (t1qtint(i) <= 10))

predicate in_range1(x1: int) = (((- 10) <= x1) and (x1 <= 10))

function bool_eq1(x1: int, y: int) : bool =
  (if (x1 = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : t1, t1 -> bool

logic dummy : t1

type t1__ref = { t1__content : t1
}

function t1__ref_t1__content__projection(a: t1__ref) : t1 = (a).t1__content

predicate dynamic_invariant(temp___expr_181: int, temp___is_init_177: bool,
  temp___skip_constant_178: bool, temp___do_toplevel_179: bool,
  temp___do_typ_inv_180: bool) = (((temp___is_init_177 = true) or
  ((- 10) <= 10)) -> in_range1(temp___expr_181))

type t2

logic t2qtint : t2 -> int

axiom t2qtaxiom : (forall i:t2. ((- 10) <= t2qtint(i)))

axiom t2qtaxiom1 : (forall i:t2. (t2qtint(i) <= 10))

predicate in_range2(x1: int) = (((- 10) <= x1) and (x1 <= 10))

function bool_eq2(x1: int, y: int) : bool =
  (if (x1 = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : t2, t2 -> bool

logic dummy1 : t2

type t2__ref = { t2__content : t2
}

function t2__ref_t2__content__projection(a: t2__ref) : t2 = (a).t2__content

predicate dynamic_invariant1(temp___expr_188: int, temp___is_init_184: bool,
  temp___skip_constant_185: bool, temp___do_toplevel_186: bool,
  temp___do_typ_inv_187: bool) = ((((temp___is_init_184 = true) or
  ((- 10) <= 10)) -> in_range2(temp___expr_188)) and
  ((temp___do_toplevel_186 = true) -> ((temp___is_init_184 = true) ->
  (((- 1) <= temp___expr_188) and (temp___expr_188 <= 1)))))

predicate dynamic_predicate(temp___192: int) = (((- 1) <= temp___192) and
  (temp___192 <= 1))

 (* File "integerround.adb", line 7, characters 0-0 *)
goal defqtvc : (dynamic_invariant(x, true, false, true, true) ->
  ((in_range2(x) and (let temp___199 = x : int in (((- 1) <= temp___199) and
  (temp___199 <= 1)))) -> (let o = x : int in (in_range2(o) ->
  ((- 1) <= o)))))
