(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic attr__ATTRIBUTE_ADDRESS : int

logic get_highest_reading : int -> int

logic get_highest_reading__function_guard : int, int -> prop

type reading

logic readingqtint : reading -> int

axiom readingqtaxiom : (forall i:reading. ((- 1) <= readingqtint(i)))

axiom readingqtaxiom1 : (forall i:reading. (readingqtint(i) <= 100))

predicate in_range1(x: int) = (((- 1) <= x) and (x <= 100))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : reading, reading -> bool

logic dummy : reading

type reading__ref = { reading__content : reading
}

function reading__ref_reading__content__projection(a: reading__ref) : reading =
  (a).reading__content

predicate dynamic_invariant(temp___expr_159: int, temp___is_init_155: bool,
  temp___skip_constant_156: bool, temp___do_toplevel_157: bool,
  temp___do_typ_inv_158: bool) = (((temp___is_init_155 = true) or
  ((- 1) <= 100)) -> in_range1(temp___expr_159))

axiom get_highest_reading__post_axiom :
  (forall refinement__high_reading:int
  [get_highest_reading(refinement__high_reading)].
  (dynamic_invariant(refinement__high_reading, true, true, true, true) ->
  (let result = get_highest_reading(refinement__high_reading) : int in
  (get_highest_reading__function_guard(result, refinement__high_reading) ->
  dynamic_invariant(result, true, false, true, true)))))

axiom get_highest_reading__def_axiom :
  (forall refinement__high_reading:int
  [get_highest_reading(refinement__high_reading)].
  (dynamic_invariant(refinement__high_reading, true, true, true, true) ->
  (get_highest_reading(refinement__high_reading) = refinement__high_reading)))

logic r : int

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "refinement.ads", line 10, characters 0-0 *)
goal defqtvc :
  (forall high_reading:int. (dynamic_invariant(high_reading, true, false,
  true, true) -> (dynamic_invariant(r, true, false, true, true) ->
  (((0 <= r) and (r <= 100)) ->
  (forall high_reading1:int.
  ((exists spark__branch:bool.
   ((spark__branch = (if (high_reading <  r) then true else false)) and
   (if (spark__branch = true) then (high_reading1 = r) else (high_reading1 = high_reading)))) ->
  ((forall high_reading2:int.
   get_highest_reading__function_guard(get_highest_reading(high_reading2),
   high_reading2)) ->
  ((- 1) <  get_highest_reading(high_reading1)))))))))
