(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic attr__ATTRIBUTE_ADDRESS : int

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type us_split_fields = { rec__ext__ : us_private
}

function us_split_fields_rec__ext____projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__projection(a: us_rep) : int = (a).attr__tag

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if true then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type root__ref = { root__content : us_rep
}

function root__ref_root__content__projection(a: root__ref) : us_rep =
  (a).root__content

type us_split_fields2 = { rec__extension_pkg__ext__flag : bool; rec__ext__1 :
us_private
}

function us_split_fields_rec__extension_pkg__ext__flag__projection(a: us_split_fields2) : bool =
  (a).rec__extension_pkg__ext__flag

function us_split_fields_rec__ext____2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_attr__tag__2__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : bool, us_private -> us_private

logic extract__extension_pkg__ext__flag : us_private -> bool

axiom extract__extension_pkg__ext__flag__conv :
  (forall extension_pkg__ext__flag:bool.
  (forall rec__ext__2:us_private.
  (to_int(extract__extension_pkg__ext__flag(hide_ext__(extension_pkg__ext__flag,
  rec__ext__2))) = to_int(extension_pkg__ext__flag))))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = { rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__extension_pkg__ext__flag,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__extension_pkg__ext__flag =
  extract__extension_pkg__ext__flag(((r).us_split_fields1).rec__ext__);
  rec__ext__1 = extract__ext__(((r).us_split_fields1).rec__ext__) };
  attr__tag1 = (r).attr__tag }

function bool_eq2(a: us_rep1, b: us_rep1) : bool =
  (if (to_int(((a).us_split_fields3).rec__extension_pkg__ext__flag) = to_int(((b).us_split_fields3).rec__extension_pkg__ext__flag)) then true else false)

logic us_tag1 : int

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic extension_pkg__ext__flag__first__bit : int

logic extension_pkg__ext__flag__last__bit : int

logic extension_pkg__ext__flag__position : int

axiom extension_pkg__ext__flag__first__bit_axiom :
  (0 <= extension_pkg__ext__flag__first__bit)

axiom extension_pkg__ext__flag__last__bit_axiom :
  (extension_pkg__ext__flag__first__bit <  extension_pkg__ext__flag__last__bit)

axiom extension_pkg__ext__flag__position_axiom :
  (0 <= extension_pkg__ext__flag__position)

logic user_eq1 : us_rep1, us_rep1 -> bool

logic dummy1 : us_rep1

type ext__ref = { ext__content : us_rep1
}

function ext__ref_ext__content__projection(a: ext__ref) : us_rep1 =
  (a).ext__content

logic get : us_rep1, bool -> bool

logic get__function_guard : bool, us_rep1, bool -> prop

logic get1 : int, us_rep1, bool -> bool

logic get__function_guard1 : bool, int, us_rep1, bool -> prop

logic x : us_rep1

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate default_initial_assumption(temp___expr_172: us_rep1,
  temp___skip_top_level_173: bool) = ((temp___expr_172).attr__tag1 = us_tag1)

axiom extension_pkg__ext__compat_axiom :
  (forall x1:us_rep1.
  (forall extension_pkg__body_elaborated:bool [get1(us_tag1, x1,
  extension_pkg__body_elaborated)]. (get__function_guard1(get1(us_tag1, x1,
  extension_pkg__body_elaborated), us_tag1, x1,
  extension_pkg__body_elaborated) ->
  (forall x2:us_rep1. forall extension_pkg__body_elaborated1:bool.
  get__function_guard(get(x2, extension_pkg__body_elaborated1), x2,
  extension_pkg__body_elaborated1)))))

axiom extension_pkg__ext__compat_axiom1 :
  (forall x1:us_rep1.
  (forall extension_pkg__body_elaborated:bool [get1(us_tag1, x1,
  extension_pkg__body_elaborated)]. (get__function_guard1(get1(us_tag1, x1,
  extension_pkg__body_elaborated), us_tag1, x1,
  extension_pkg__body_elaborated) -> (to_int(get(x1,
  extension_pkg__body_elaborated)) = to_int(get1(us_tag1, x1,
  extension_pkg__body_elaborated))))))

axiom get__def_axiom :
  (forall x1:us_rep1.
  (forall extension_pkg__body_elaborated:bool [get(x1,
  extension_pkg__body_elaborated)]. ((get(x1,
  extension_pkg__body_elaborated) = true) ->
  (extension_pkg__body_elaborated = true))))

axiom get__def_axiom1 :
  (forall x1:us_rep1.
  (forall extension_pkg__body_elaborated:bool [get(x1,
  extension_pkg__body_elaborated)].
  ((extension_pkg__body_elaborated = true) -> (get(x1,
  extension_pkg__body_elaborated) = true))))

predicate default_initial_assumption1(temp___expr_165: us_rep,
  temp___skip_top_level_166: bool) = ((temp___expr_165).attr__tag = us_tag)

 (* File "extension_pkg.ads", line 10, characters 0-0 *)
goal defqtvc :
  (forall body_elaborated:bool.
  ((forall body_elaborated1:bool. get__function_guard(get(x,
   body_elaborated1), x, body_elaborated1)) ->
  ((get(x, body_elaborated) = true) -> (body_elaborated = true))))
