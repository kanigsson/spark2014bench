(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_invariant(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range2(temp___expr_46))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

function length1(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq2 : us_t, us_t -> bool

logic dummy2 : us_t

type array_type__ref = { array_type__content : us_t
}

function array_type__ref_array_type__content__projection(a: array_type__ref) : us_t =
  (a).array_type__content

logic perm : us_t, us_t -> bool

logic perm__function_guard : bool, us_t, us_t -> prop

predicate dynamic_invariant1(temp___expr_162: us_t, temp___is_init_158: bool,
  temp___skip_constant_159: bool, temp___do_toplevel_160: bool,
  temp___do_typ_inv_161: bool) = ((not (temp___skip_constant_159 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_162),
  last1(temp___expr_162)))

logic values__first : integer

logic values__last : integer

logic attr__ATTRIBUTE_ADDRESS : int

logic perm_transitive : us_t, us_t, us_t -> bool

logic perm_transitive__function_guard : bool, us_t, us_t, us_t -> prop

axiom perm_transitive__post_axiom :
  (forall a:us_t. forall b:us_t. forall c:us_t [perm_transitive(a, b, c)].
  (((dynamic_invariant1(a, true, true, true, true) and dynamic_invariant1(b,
  true, true, true, true)) and dynamic_invariant1(c, true, true, true,
  true)) ->
  (forall a1:us_t. forall b1:us_t. perm__function_guard(perm(a1, b1), a1,
  b1))))

axiom perm_transitive__post_axiom1 :
  (forall a:us_t. forall b:us_t. forall c:us_t [perm_transitive(a, b, c)].
  (((dynamic_invariant1(a, true, true, true, true) and dynamic_invariant1(b,
  true, true, true, true)) and dynamic_invariant1(c, true, true, true,
  true)) ->
  (forall b1:us_t. forall c1:us_t. perm__function_guard(perm(b1, c1), b1,
  c1))))

axiom perm_transitive__post_axiom2 :
  (forall a:us_t. forall b:us_t. forall c:us_t [perm_transitive(a, b, c)].
  (((dynamic_invariant1(a, true, true, true, true) and dynamic_invariant1(b,
  true, true, true, true)) and dynamic_invariant1(c, true, true, true,
  true)) ->
  (forall a1:us_t. forall c1:us_t. perm__function_guard(perm(a1, c1), a1,
  c1))))

axiom perm_transitive__post_axiom3 :
  (forall a:us_t. forall b:us_t. forall c:us_t [perm_transitive(a, b, c)].
  (((dynamic_invariant1(a, true, true, true, true) and dynamic_invariant1(b,
  true, true, true, true)) and dynamic_invariant1(c, true, true, true,
  true)) -> (let result = perm_transitive(a, b, c) : bool in
  (perm_transitive__function_guard(result, a, b, c) -> ((((result = true) and
  (perm(a, b) = true)) and (perm(b, c) = true)) -> (perm(a, c) = true))))))

logic index_of_minimum : us_t -> int

logic index_of_minimum__function_guard : int, us_t -> prop

axiom index_of_minimum__post_axiom :
  (forall unsorted:us_t [index_of_minimum(unsorted)].
  ((dynamic_invariant1(unsorted, true, true, true, true) and
  (first1(unsorted) <= last1(unsorted))) -> (let result =
  index_of_minimum(unsorted) : int in
  (index_of_minimum__function_guard(result, unsorted) ->
  (first1(unsorted) <= result)))))

axiom index_of_minimum__post_axiom1 :
  (forall unsorted:us_t [index_of_minimum(unsorted)].
  ((dynamic_invariant1(unsorted, true, true, true, true) and
  (first1(unsorted) <= last1(unsorted))) -> (let result =
  index_of_minimum(unsorted) : int in
  (index_of_minimum__function_guard(result, unsorted) ->
  (result <= last1(unsorted))))))

axiom index_of_minimum__post_axiom2 :
  (forall unsorted:us_t [index_of_minimum(unsorted)].
  ((dynamic_invariant1(unsorted, true, true, true, true) and
  (first1(unsorted) <= last1(unsorted))) -> (let result =
  index_of_minimum(unsorted) : int in
  (index_of_minimum__function_guard(result, unsorted) ->
  (forall j:int. (((first1(unsorted) <= j) and (j <= last1(unsorted))) ->
  (to_rep((to_array(unsorted)[result])) <= to_rep((to_array(unsorted)[j])))))))))

axiom index_of_minimum__post_axiom3 :
  (forall unsorted:us_t [index_of_minimum(unsorted)].
  ((dynamic_invariant1(unsorted, true, true, true, true) and
  (first1(unsorted) <= last1(unsorted))) -> (let result =
  index_of_minimum(unsorted) : int in
  (index_of_minimum__function_guard(result, unsorted) ->
  dynamic_invariant(result, true, false, true, true)))))

logic values_last__first : integer

logic values_last__last : integer

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type tvalues_lastS__ref = { tvalues_lastS__content : us_t
}

function tvalues_lastS__ref_tvalues_lastS__content__projection(a: tvalues_lastS__ref) : us_t =
  (a).tvalues_lastS__content

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy3 : integer

type t19b__ref = { t19b__content : integer
}

function t19b__ref_t19b__content__projection(a: t19b__ref) : integer =
  (a).t19b__content

type t23b__ref = { t23b__content : us_t
}

function t23b__ref_t23b__content__projection(a: t23b__ref) : us_t =
  (a).t23b__content

predicate dynamic_invariant2(temp___expr_217: us_t, temp___is_init_213: bool,
  temp___skip_constant_214: bool, temp___do_toplevel_215: bool,
  temp___do_typ_inv_216: bool) = ((not (temp___skip_constant_214 = true)) ->
  (dynamic_property(to_rep(values__first), to_rep(values__last),
  first1(temp___expr_217), last1(temp___expr_217)) and
  ((first1(temp___expr_217) = to_rep(values__first)) and
  (last1(temp___expr_217) = to_rep(values__last)))))

predicate default_initial_assumption(temp___expr_219: us_t,
  temp___skip_top_level_220: bool) =
  ((first1(temp___expr_219) = to_rep(values__first)) and
  (last1(temp___expr_219) = to_rep(values__last)))

predicate dynamic_invariant3(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

 (* File "sorters.ads", line 15, characters 0-0 *)
goal defqtvc :
  (forall values:(int,integer) farray.
  (forall values1:(int,integer) farray. ((values1 = values) ->
  (dynamic_property(1, 2147483647, to_rep(values__first),
  to_rep(values__last)) -> (((1 <= length(to_rep(values__first),
  to_rep(values__last))) and (to_rep(values__last) <= 2147483647)) ->
  ((to_rep(values__first) <= to_rep(values__last)) ->
  (1 <= to_rep(values__first))))))))
