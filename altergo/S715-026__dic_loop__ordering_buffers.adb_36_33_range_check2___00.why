(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (div(x, y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((-abs_int(y)) <  mod(x,
  y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (mod(x, y) <  abs_int(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <  y) then (x % y) else ((x % y) + y))

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. (0 <= tqtint(i)))

axiom tqtaxiom1 : (forall i:t. (tqtint(i) <= 255))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_and(v1, v2), n) = andb(nth(v1, n), nth(v2, n)))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_or(v1, v2), n) = orb(nth(v1, n), nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  8)) -> (nth(bw_not(v),
  n) = notb(nth(v, n)))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth(asr(b, s), n) = nth(b, (8 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 8))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 8))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

function to_int(x: t) : int =
  (if is_signed_positive(x) then tqtint(x) else (-(256 - tqtint(x))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds : (forall v:t. (0 <= tqtint(v)))

axiom to_uint_bounds1 : (forall v:t. (tqtint(v) <  256))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) -> sge(x, zeros)))

axiom positive_is_ge_zeros1 :
  (forall x:t. (sge(x, zeros) -> is_signed_positive(x)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  256) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  256)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 256)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  256) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 256)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) -> eq_sub_bv(a, b, i, n)))

axiom eq_sub_equiv1 :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub_bv(a, b, i, n) ->
  eq_sub(a, b, tqtint(i), tqtint(n))))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 8)]. (eq_sub(x, y, 0, 8) ->
  (x = y)))

type t__ref = { t__content : t
}

function bool_eq(x: t, y: t) : bool = (if (x = y) then true else false)

function bool_ne(x: t, y: t) : bool = (if (not (x = y)) then true else false)

function bool_lt(x: t, y: t) : bool = (if ult(x, y) then true else false)

function bool_le(x: t, y: t) : bool = (if ule(x, y) then true else false)

function bool_gt(x: t, y: t) : bool = (if ugt(x, y) then true else false)

function bool_ge(x: t, y: t) : bool = (if uge(x, y) then true else false)

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

function bv_min(x: t, y: t) : t = (if ule(x, y) then x else y)

function bv_max(x: t, y: t) : t = (if ule(x, y) then y else x)

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int1(b: bool) : int = (if (b = true) then 1 else 0)

function of_int1(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic is_null : int -> bool

logic is_null__function_guard : bool, int -> prop

type message_pointer

logic message_pointerqtint : message_pointer -> int

axiom message_pointerqtaxiom :
  (forall i:message_pointer. ((- 2147483648) <= message_pointerqtint(i)))

axiom message_pointerqtaxiom1 :
  (forall i:message_pointer. (message_pointerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : message_pointer, message_pointer -> bool

logic dummy : message_pointer

type message_pointer__ref = { message_pointer__content : message_pointer
}

function message_pointer__ref_message_pointer__content__projection(a: message_pointer__ref) : message_pointer =
  (a).message_pointer__content

predicate dynamic_invariant(temp___expr_186: int, temp___is_init_182: bool,
  temp___skip_constant_183: bool, temp___do_toplevel_184: bool,
  temp___do_typ_inv_185: bool) = (((temp___is_init_182 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_186))

axiom is_null__def_axiom :
  (forall message:int [is_null(message)]. ((is_null(message) = true) ->
  (message = 0)))

axiom is_null__def_axiom1 :
  (forall message:int [is_null(message)]. ((message = 0) ->
  (is_null(message) = true)))

type slightly_extended_sequence_number_type

logic slightly_extended_sequence_number_typeqtint : slightly_extended_sequence_number_type -> int

axiom slightly_extended_sequence_number_typeqtaxiom :
  (forall i:slightly_extended_sequence_number_type.
  (1 <= slightly_extended_sequence_number_typeqtint(i)))

axiom slightly_extended_sequence_number_typeqtaxiom1 :
  (forall i:slightly_extended_sequence_number_type.
  (slightly_extended_sequence_number_typeqtint(i) <= 100000000))

predicate in_range2(x: int) = ((1 <= x) and (x <= 100000000))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : slightly_extended_sequence_number_type,
  slightly_extended_sequence_number_type -> bool

logic dummy1 : slightly_extended_sequence_number_type

type slightly_extended_sequence_number_type__ref = {
slightly_extended_sequence_number_type__content :
slightly_extended_sequence_number_type
}

function slightly_extended_sequence_number_type__ref_slightly_extended_sequence_number_type__content__projection(a: slightly_extended_sequence_number_type__ref) : slightly_extended_sequence_number_type =
  (a).slightly_extended_sequence_number_type__content

function to_rep(x: slightly_extended_sequence_number_type) : int =
  slightly_extended_sequence_number_typeqtint(x)

logic of_rep : int -> slightly_extended_sequence_number_type

axiom inversion_axiom :
  (forall x:slightly_extended_sequence_number_type [to_rep(x)].
  (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:slightly_extended_sequence_number_type [to_rep(x)].
  in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

function to_rep1(x: message_pointer) : int = message_pointerqtint(x)

logic of_rep1 : int -> message_pointer

axiom inversion_axiom1 :
  (forall x:message_pointer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:message_pointer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (t,message_pointer) farray
}

logic slide : (t,message_pointer) farray, t, t -> (t,message_pointer) farray

axiom slide_eq :
  (forall a:(t,message_pointer) farray.
  (forall first:t [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(t,message_pointer) farray.
  (forall old_first:t.
  (forall new_first:t.
  (forall i:t [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[sub(i, sub(new_first, old_first))]))))))

function bool_eq4(a: (t,message_pointer) farray, a__first: t, a__last: t,
  b: (t,message_pointer) farray, b__first: t, b__last: t) : bool =
  (if ((if ule(a__first, a__last) then (ule(b__first, b__last) and
  (sub(a__last, a__first) = sub(b__last, b__first))) else ugt(b__first,
  b__last)) and
  (forall temp___idx_154:t. ((ule(a__first, temp___idx_154) and
  ule(temp___idx_154, a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[add(sub(b__first, a__first),
  temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(t,message_pointer) farray. forall b:(t,message_pointer) farray.
  (forall a__first:t. forall a__last:t. forall b__first:t. forall b__last:t.
  ((bool_eq4(b, b__first, b__last, a, a__first, a__last) = true) ->
  (ule(a__first, a__last) -> ule(b__first, b__last)))))

axiom bool_eq_rev1 :
  (forall a:(t,message_pointer) farray. forall b:(t,message_pointer) farray.
  (forall a__first:t. forall a__last:t. forall b__first:t. forall b__last:t.
  ((bool_eq4(b, b__first, b__last, a, a__first, a__last) = true) ->
  (ule(a__first, a__last) -> (sub(a__last, a__first) = sub(b__last,
  b__first))))))

axiom bool_eq_rev2 :
  (forall a:(t,message_pointer) farray. forall b:(t,message_pointer) farray.
  (forall a__first:t. forall a__last:t. forall b__first:t. forall b__last:t.
  ((bool_eq4(b, b__first, b__last, a, a__first, a__last) = true) ->
  ((not ule(a__first, a__last)) -> ugt(b__first, b__last)))))

axiom bool_eq_rev3 :
  (forall a:(t,message_pointer) farray. forall b:(t,message_pointer) farray.
  (forall a__first:t. forall a__last:t. forall b__first:t. forall b__last:t.
  ((bool_eq4(b, b__first, b__last, a, a__first, a__last) = true) ->
  (forall temp___idx_154:t. ((ule(a__first, temp___idx_154) and
  ule(temp___idx_154, a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[add(sub(b__first, a__first),
  temp___idx_154)]))))))))

logic dummy2 : (t,message_pointer) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq2 : (t,message_pointer) farray,
  (t,message_pointer) farray -> bool

type us_split_fields = { rec__ordering_buffers__ordering_buffer_type__ring :
(t,message_pointer) farray;
rec__ordering_buffers__ordering_buffer_type__first :
slightly_extended_sequence_number_type
}

function us_split_fields_rec__ordering_buffers__ordering_buffer_type__ring__projection(a: us_split_fields) : (t,message_pointer) farray =
  (a).rec__ordering_buffers__ordering_buffer_type__ring

function us_split_fields_rec__ordering_buffers__ordering_buffer_type__first__projection(a: us_split_fields) : slightly_extended_sequence_number_type =
  (a).rec__ordering_buffers__ordering_buffer_type__first

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic rliteral : t

axiom rliteral_axiom : (tqtint(rliteral) = 0)

logic rliteral1 : t

axiom rliteral_axiom1 : (tqtint(rliteral1) = 15)

function bool_eq5(a: us_rep, b: us_rep) : bool =
  (if ((bool_eq4(((a).us_split_fields1).rec__ordering_buffers__ordering_buffer_type__ring,
  rliteral, rliteral1,
  ((b).us_split_fields1).rec__ordering_buffers__ordering_buffer_type__ring,
  rliteral, rliteral1) = true) and
  (to_rep(((a).us_split_fields1).rec__ordering_buffers__ordering_buffer_type__first) = to_rep(((b).us_split_fields1).rec__ordering_buffers__ordering_buffer_type__first))) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic ordering_buffers__ordering_buffer_type__ring__first__bit : int

logic ordering_buffers__ordering_buffer_type__ring__last__bit : int

logic ordering_buffers__ordering_buffer_type__ring__position : int

axiom ordering_buffers__ordering_buffer_type__ring__first__bit_axiom :
  (0 <= ordering_buffers__ordering_buffer_type__ring__first__bit)

axiom ordering_buffers__ordering_buffer_type__ring__last__bit_axiom :
  (ordering_buffers__ordering_buffer_type__ring__first__bit <  ordering_buffers__ordering_buffer_type__ring__last__bit)

axiom ordering_buffers__ordering_buffer_type__ring__position_axiom :
  (0 <= ordering_buffers__ordering_buffer_type__ring__position)

logic ordering_buffers__ordering_buffer_type__first__first__bit : int

logic ordering_buffers__ordering_buffer_type__first__last__bit : int

logic ordering_buffers__ordering_buffer_type__first__position : int

axiom ordering_buffers__ordering_buffer_type__first__first__bit_axiom :
  (0 <= ordering_buffers__ordering_buffer_type__first__first__bit)

axiom ordering_buffers__ordering_buffer_type__first__last__bit_axiom :
  (ordering_buffers__ordering_buffer_type__first__first__bit <  ordering_buffers__ordering_buffer_type__first__last__bit)

axiom ordering_buffers__ordering_buffer_type__first__position_axiom :
  (0 <= ordering_buffers__ordering_buffer_type__first__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type ordering_buffer_type__ref = { ordering_buffer_type__content : us_rep
}

function ordering_buffer_type__ref_ordering_buffer_type__content__projection(a: ordering_buffer_type__ref) : us_rep =
  (a).ordering_buffer_type__content

logic first : us_rep -> int

logic first__function_guard : int, us_rep -> prop

logic last : us_rep -> int

logic last__function_guard : int, us_rep -> prop

logic has_message : us_rep, int -> bool

logic has_message__function_guard : bool, us_rep, int -> prop

logic temp_____aggregate_def_214 : int -> (t,message_pointer) farray

axiom temp___result_219qtdef :
  (forall temp___218:us_rep. first__function_guard(first(temp___218),
  temp___218))

axiom temp___result_220qtdef :
  (forall temp___218:us_rep. first__function_guard(first(temp___218),
  temp___218))

axiom temp___result_221qtdef :
  (forall temp___218:us_rep. last__function_guard(last(temp___218),
  temp___218))

axiom temp___result_222qtdef :
  (forall temp___218:us_rep. forall index:int.
  has_message__function_guard(has_message(temp___218, index), temp___218,
  index))

predicate default_initial_assumption(temp___expr_212: us_rep,
  temp___skip_top_level_213: bool) =
  (((((temp___expr_212).us_split_fields1).rec__ordering_buffers__ordering_buffer_type__ring = temp_____aggregate_def_214(0)) and
  (to_rep(((temp___expr_212).us_split_fields1).rec__ordering_buffers__ordering_buffer_type__first) = 1)) and
  ((not (temp___skip_top_level_213 = true)) ->
  ((first(temp___expr_212) = 1) and
  (forall index:int. (((first(temp___expr_212) <= index) and
  (index <= last(temp___expr_212))) -> (not (has_message(temp___expr_212,
  index) = true)))))))

predicate dynamic_invariant1(temp___expr_179: int, temp___is_init_175: bool,
  temp___skip_constant_176: bool, temp___do_toplevel_177: bool,
  temp___do_typ_inv_178: bool) = (((temp___is_init_175 = true) or
  (1 <= 100000000)) -> in_range2(temp___expr_179))

axiom first__post_axiom :
  (forall buffer:us_rep [first(buffer)]. (let result = first(buffer) : int in
  (first__function_guard(result, buffer) -> dynamic_invariant1(result, true,
  false, true, true))))

axiom first__def_axiom :
  (forall buffer:us_rep [first(buffer)].
  (first(buffer) = to_rep(((buffer).us_split_fields1).rec__ordering_buffers__ordering_buffer_type__first)))

type extended_sequence_number_type

logic extended_sequence_number_typeqtint : extended_sequence_number_type -> int

axiom extended_sequence_number_typeqtaxiom :
  (forall i:extended_sequence_number_type.
  (1 <= extended_sequence_number_typeqtint(i)))

axiom extended_sequence_number_typeqtaxiom1 :
  (forall i:extended_sequence_number_type.
  (extended_sequence_number_typeqtint(i) <= 100000015))

predicate in_range3(x: int) = ((1 <= x) and (x <= 100000015))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : extended_sequence_number_type,
  extended_sequence_number_type -> bool

logic dummy4 : extended_sequence_number_type

type extended_sequence_number_type__ref = {
extended_sequence_number_type__content : extended_sequence_number_type
}

function extended_sequence_number_type__ref_extended_sequence_number_type__content__projection(a: extended_sequence_number_type__ref) : extended_sequence_number_type =
  (a).extended_sequence_number_type__content

predicate dynamic_invariant2(temp___expr_172: int, temp___is_init_168: bool,
  temp___skip_constant_169: bool, temp___do_toplevel_170: bool,
  temp___do_typ_inv_171: bool) = (((temp___is_init_168 = true) or
  (1 <= 100000015)) -> in_range3(temp___expr_172))

axiom last__post_axiom :
  (forall buffer:us_rep [last(buffer)]. (let result = last(buffer) : int in
  (last__function_guard(result, buffer) -> dynamic_invariant2(result, true,
  false, true, true))))

axiom last__def_axiom :
  (forall buffer:us_rep. first__function_guard(first(buffer), buffer))

axiom last__def_axiom1 :
  (forall buffer:us_rep [last(buffer)].
  (last(buffer) = ((first(buffer) + 16) - 1)))

logic get_message : us_rep, int -> int

logic get_message__function_guard : int, us_rep, int -> prop

axiom get_message__post_axiom :
  (forall buffer:us_rep. first__function_guard(first(buffer), buffer))

axiom get_message__post_axiom1 :
  (forall buffer:us_rep. last__function_guard(last(buffer), buffer))

axiom get_message__post_axiom2 :
  (forall buffer:us_rep.
  (forall index:int [get_message(buffer, index)]. ((dynamic_invariant2(index,
  true, true, true, true) and ((first(buffer) <= index) and
  (index <= last(buffer)))) -> (let result = get_message(buffer, index)
  : int in (get_message__function_guard(result, buffer, index) ->
  dynamic_invariant(result, true, false, true, true))))))

axiom get_message__def_axiom :
  (forall buffer:us_rep.
  (forall index:int [get_message(buffer, index)]. (dynamic_invariant2(index,
  true, true, true, true) -> (get_message(buffer,
  index) = to_rep1((((buffer).us_split_fields1).rec__ordering_buffers__ordering_buffer_type__ring[of_int(mod1(index,
  256))]))))))

axiom has_message__post_axiom :
  (forall buffer:us_rep. first__function_guard(first(buffer), buffer))

axiom has_message__post_axiom1 :
  (forall buffer:us_rep. last__function_guard(last(buffer), buffer))

axiom has_message__def_axiom :
  (forall buffer:us_rep. forall index:int.
  get_message__function_guard(get_message(buffer, index), buffer, index))

axiom has_message__def_axiom1 :
  (forall buffer:us_rep. forall index:int.
  get_message__function_guard(get_message(buffer, index), buffer, index))

axiom has_message__def_axiom2 :
  (forall buffer:us_rep. forall index:int.
  is_null__function_guard(is_null(get_message(buffer, index)),
  get_message(buffer, index)))

axiom has_message__def_axiom3 :
  (forall buffer:us_rep.
  (forall index:int [has_message(buffer, index)]. ((has_message(buffer,
  index) = true) -> (not (is_null(get_message(buffer, index)) = true)))))

axiom has_message__def_axiom4 :
  (forall buffer:us_rep.
  (forall index:int [has_message(buffer, index)].
  ((not (is_null(get_message(buffer, index)) = true)) -> (has_message(buffer,
  index) = true))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type sequence_number_type

logic sequence_number_typeqtint : sequence_number_type -> int

axiom sequence_number_typeqtaxiom :
  (forall i:sequence_number_type. (1 <= sequence_number_typeqtint(i)))

axiom sequence_number_typeqtaxiom1 :
  (forall i:sequence_number_type. (sequence_number_typeqtint(i) <= 99999999))

predicate in_range4(x: int) = ((1 <= x) and (x <= 99999999))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : sequence_number_type, sequence_number_type -> bool

logic dummy5 : sequence_number_type

type sequence_number_type__ref = { sequence_number_type__content :
sequence_number_type
}

function sequence_number_type__ref_sequence_number_type__content__projection(a: sequence_number_type__ref) : sequence_number_type =
  (a).sequence_number_type__content

logic orig_first : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_invariant3(temp___expr_165: int, temp___is_init_161: bool,
  temp___skip_constant_162: bool, temp___do_toplevel_163: bool,
  temp___do_typ_inv_164: bool) = (((temp___is_init_161 = true) or
  (1 <= 99999999)) -> in_range4(temp___expr_165))

logic rliteral2 : message_pointer

axiom rliteral_axiom2 : (message_pointerqtint(rliteral2) = 0)

axiom def_axiom :
  (forall temp___216:int. (dynamic_invariant(temp___216, true, true, true,
  true) ->
  (forall temp___217:t.
  ((temp_____aggregate_def_214(temp___216)[temp___217]) = rliteral2))))

axiom cdiv_cases :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((0 <  d) -> (div(n,
  d) = (n / d)))))

axiom cdiv_cases1 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((0 <  d) -> (div(n,
  d) = (-((-n) / d))))))

axiom cdiv_cases2 :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((d <  0) -> (div(n,
  d) = (-(n / (-d)))))))

axiom cdiv_cases3 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((d <  0) -> (div(n,
  d) = ((-n) / (-d))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))))

axiom cmod_cases1 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))))

axiom cmod_cases2 :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))))

axiom cmod_cases3 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d)))))))

 (* File "ordering_buffers.ads", line 49, characters 0-0 *)
goal defqtvc :
  (forall buffer__split_fields:us_split_fields. forall message:int.
  (forall buffer__split_fields1:us_split_fields.
  ((buffer__split_fields1 = buffer__split_fields) ->
  (dynamic_invariant(message, false, false, true, true) ->
  ((forall buffer__split_fields2:us_split_fields.
   first__function_guard(first({ us_split_fields1 = buffer__split_fields2 }),
   { us_split_fields1 = buffer__split_fields2 })) ->
  ((forall buffer__split_fields2:us_split_fields.
   first__function_guard(first({ us_split_fields1 = buffer__split_fields2 }),
   { us_split_fields1 = buffer__split_fields2 })) ->
  ((forall buffer__split_fields2:us_split_fields.
   first__function_guard(first({ us_split_fields1 = buffer__split_fields2 }),
   { us_split_fields1 = buffer__split_fields2 })) ->
  ((forall buffer__split_fields2:us_split_fields.
   has_message__function_guard(has_message({ us_split_fields1 =
   buffer__split_fields2 }, first({ us_split_fields1 = buffer__split_fields2
   })), { us_split_fields1 = buffer__split_fields2 }, first({
   us_split_fields1 = buffer__split_fields2 }))) ->
  ((in_range4(first({ us_split_fields1 = buffer__split_fields })) and
  (has_message({ us_split_fields1 = buffer__split_fields }, first({
  us_split_fields1 = buffer__split_fields })) = true)) -> (let o = {
  us_split_fields1 = buffer__split_fields } : us_rep in
  (let ordering_buffers__consume_first__orig_first__assume = first(o)
  : int in
  ((first__function_guard(ordering_buffers__consume_first__orig_first__assume,
  o) and
  (dynamic_invariant1(ordering_buffers__consume_first__orig_first__assume,
  true, false, true, true) and
  (ordering_buffers__consume_first__orig_first__assume = to_rep((buffer__split_fields).rec__ordering_buffers__ordering_buffer_type__first)))) ->
  ((ordering_buffers__consume_first__orig_first__assume = orig_first) ->
  (dynamic_invariant1(orig_first, true, false, true, true) -> (let o1 =
  orig_first : int in (let o2 = { us_split_fields1 = buffer__split_fields }
  : us_rep in (let o3 = get_message(o2, o1) : int in
  ((get_message__function_guard(o3, o2, o1) and (dynamic_invariant(o3, true,
  false, true, true) and
  (o3 = to_rep1(((buffer__split_fields).rec__ordering_buffers__ordering_buffer_type__ring[of_int(mod1(o1,
  256))]))))) ->
  (forall message1:int. ((message1 = o3) -> in_range4(orig_first)))))))))))))))))))))
