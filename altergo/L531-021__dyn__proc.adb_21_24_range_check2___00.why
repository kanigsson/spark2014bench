(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type ttB

logic ttBqtint : ttB -> int

axiom ttBqtaxiom : (forall i:ttB. ((- 128) <= ttBqtint(i)))

axiom ttBqtaxiom1 : (forall i:ttB. (ttBqtint(i) <= 127))

predicate in_range1(x: int) = (((- 128) <= x) and (x <= 127))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : ttB, ttB -> bool

logic dummy1 : ttB

type ttB__ref = { ttB__content : ttB
}

function ttB__ref_ttB__content__projection(a: ttB__ref) : ttB =
  (a).ttB__content

function to_rep(x: ttB) : int = ttBqtint(x)

logic of_rep : int -> ttB

axiom inversion_axiom : (forall x:ttB [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:ttB [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. (1 <= tqtint(i)))

axiom tqtaxiom1 : (forall i:t. (tqtint(i) <= 10))

predicate in_range2(x: int) = ((1 <= x) and (x <= 10))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : t, t -> bool

logic dummy2 : t

type t__ref = { t__content : t
}

function t__ref_t__content__projection(a: t__ref) : t = (a).t__content

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)]))))))))

type t1

logic first : t1 -> ttB

logic last : t1 -> ttB

logic mk : int, int -> t1

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,integer) farray; rt : t1
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

function length1(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type a__ref = { a__content : us_t
}

function a__ref_a__content__projection(a: a__ref) : us_t = (a).a__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

logic f : int -> us_t

logic f__function_guard : us_t, int -> prop

predicate dynamic_invariant1(temp___expr_190: us_t, temp___is_init_186: bool,
  temp___skip_constant_187: bool, temp___do_toplevel_188: bool,
  temp___do_typ_inv_189: bool) = ((not (temp___skip_constant_187 = true)) ->
  dynamic_property(1, 10, first1(temp___expr_190), last1(temp___expr_190)))

axiom f__post_axiom :
  (forall x:int [f(x)]. (dynamic_invariant(x, true, true, true, true) ->
  (let result = f(x) : us_t in (f__function_guard(result, x) ->
  dynamic_invariant1(result, true, false, true, true)))))

logic item__first : ttB

logic item__last : ttB

logic attr__ATTRIBUTE_ADDRESS : int

function to_rep2(x: t) : int = tqtint(x)

logic of_rep2 : int -> t

axiom inversion_axiom2 : (forall x:t [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:t [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type t4b__ref = { t4b__content : us_t
}

function t4b__ref_t4b__content__projection(a: t4b__ref) : us_t =
  (a).t4b__content

type us_split_discrs = { rec__proc__r__length : t
}

function us_split_discrs_rec__proc__r__length__projection(a: us_split_discrs) : t =
  (a).rec__proc__r__length

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__proc__r__contents : us_t
}

function us_split_fields_rec__proc__r__contents__projection(a: us_split_fields) : us_t =
  (a).rec__proc__r__contents

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq6(a: us_rep, b: us_rep) : bool =
  (if ((to_rep2(((a).us_split_discrs1).rec__proc__r__length) = to_rep2(((b).us_split_discrs1).rec__proc__r__length)) and
  (bool_eq5(((a).us_split_fields1).rec__proc__r__contents,
  ((b).us_split_fields1).rec__proc__r__contents) = true)) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic proc__r__length__first__bit : int

logic proc__r__length__last__bit : int

logic proc__r__length__position : int

axiom proc__r__length__first__bit_axiom : (0 <= proc__r__length__first__bit)

axiom proc__r__length__last__bit_axiom :
  (proc__r__length__first__bit <  proc__r__length__last__bit)

axiom proc__r__length__position_axiom : (0 <= proc__r__length__position)

logic proc__r__contents__first__bit : int

logic proc__r__contents__last__bit : int

logic proc__r__contents__position : int

axiom proc__r__contents__first__bit_axiom :
  (0 <= proc__r__contents__first__bit)

axiom proc__r__contents__last__bit_axiom :
  (proc__r__contents__first__bit <  proc__r__contents__last__bit)

axiom proc__r__contents__position_axiom : (0 <= proc__r__contents__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type r__ref = { r__content : us_rep
}

function r__ref_r__content__projection(a: r__ref) : us_rep = (a).r__content

logic dr__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant2(temp___expr_196: us_rep,
  temp___is_init_192: bool, temp___skip_constant_193: bool,
  temp___do_toplevel_194: bool, temp___do_typ_inv_195: bool) =
  (let temp___197 = ((temp___expr_196).us_split_discrs1).rec__proc__r__length
  : t in (dynamic_property(1, to_rep2(temp___197),
  first1(((temp___expr_196).us_split_fields1).rec__proc__r__contents),
  last1(((temp___expr_196).us_split_fields1).rec__proc__r__contents)) and
  ((first1(((temp___expr_196).us_split_fields1).rec__proc__r__contents) = 1) and
  (last1(((temp___expr_196).us_split_fields1).rec__proc__r__contents) = to_rep2(temp___197)))))

type t14b__ref = { t14b__content : us_t
}

function t14b__ref_t14b__content__projection(a: t14b__ref) : us_t =
  (a).t14b__content

type us_split_fields2 = { rec__proc__r__contents1 : us_t
}

function us_split_fields_rec__proc__r__contents__2__projection(a: us_split_fields2) : us_t =
  (a).rec__proc__r__contents1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__2__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = { rec__proc__r__contents =
  of_array(to_array(((a).us_split_fields3).rec__proc__r__contents1),
  first1(((a).us_split_fields3).rec__proc__r__contents1),
  last1(((a).us_split_fields3).rec__proc__r__contents1)) } }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = { rec__proc__r__contents1 =
  of_array(to_array(((r).us_split_fields1).rec__proc__r__contents),
  first1(((r).us_split_fields1).rec__proc__r__contents),
  last1(((r).us_split_fields1).rec__proc__r__contents)) } }

function bool_eq7(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep2(((a).us_split_discrs2).rec__proc__r__length) = to_rep2(((b).us_split_discrs2).rec__proc__r__length)) and
  (bool_eq5(((a).us_split_fields3).rec__proc__r__contents1,
  ((b).us_split_fields3).rec__proc__r__contents1) = true)) then true else false)

predicate in_range3(rec__proc__r__length1: int, a: us_rep) =
  (rec__proc__r__length1 = to_rep2(((a).us_split_discrs1).rec__proc__r__length))

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic proc__r__length__first__bit1 : int

logic proc__r__length__last__bit1 : int

logic proc__r__length__position1 : int

axiom proc__r__length__first__bit_axiom1 :
  (0 <= proc__r__length__first__bit1)

axiom proc__r__length__last__bit_axiom1 :
  (proc__r__length__first__bit1 <  proc__r__length__last__bit1)

axiom proc__r__length__position_axiom1 : (0 <= proc__r__length__position1)

logic proc__r__contents__first__bit1 : int

logic proc__r__contents__last__bit1 : int

logic proc__r__contents__position1 : int

axiom proc__r__contents__first__bit_axiom1 :
  (0 <= proc__r__contents__first__bit1)

axiom proc__r__contents__last__bit_axiom1 :
  (proc__r__contents__first__bit1 <  proc__r__contents__last__bit1)

axiom proc__r__contents__position_axiom1 :
  (0 <= proc__r__contents__position1)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy5 : us_rep1

type t13b__ref = { t13b__content : us_rep1
}

function t13b__ref_t13b__content__projection(a: t13b__ref) : us_rep1 =
  (a).t13b__content

predicate dynamic_invariant3(temp___expr_183: int, temp___is_init_179: bool,
  temp___skip_constant_180: bool, temp___do_toplevel_181: bool,
  temp___do_typ_inv_182: bool) = (((temp___is_init_179 = true) or
  (1 <= 10)) -> in_range2(temp___expr_183))

 (* File "proc.adb", line 19, characters 0-0 *)
goal defqtvc : (let proc__p__item__assume = f(3) : us_t in
  ((f__function_guard(proc__p__item__assume, 3) and
  dynamic_invariant1(proc__p__item__assume, true, false, true, true)) ->
  (forall item:(int,integer) farray.
  ((item = to_array(proc__p__item__assume)) ->
  ((to_rep(item__first) = first1(proc__p__item__assume)) ->
  ((to_rep(item__last) = last1(proc__p__item__assume)) ->
  (dynamic_property(1, 10, to_rep(item__first), to_rep(item__last)) ->
  ((if (to_rep(item__first) <= to_rep(item__last)) then ((1 <= length(to_rep(item__first),
  to_rep(item__last))) and
  ((to_rep(item__last) - to_rep(item__first)) = (length(to_rep(item__first),
  to_rep(item__last)) - 1))) else (length(to_rep(item__first),
  to_rep(item__last)) <  1)) ->
  (forall o:int. ((to_rep(item__last) = o) ->
  (forall o1:int. ((to_rep(item__first) = o1) ->
  (forall o2:int. ((to_rep(item__first) = o2) ->
  (forall o3:int. ((to_rep(item__last) = o3) ->
  (forall o4:int. ((to_rep(item__first) = o4) -> in_range2(length(o4, o3))))))))))))))))))))
