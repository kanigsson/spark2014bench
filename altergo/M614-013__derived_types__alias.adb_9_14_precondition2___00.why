(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type element

logic elementqtint : element -> int

axiom elementqtaxiom : (forall i:element. (0 <= elementqtint(i)))

axiom elementqtaxiom1 : (forall i:element. (elementqtint(i) <= 100))

predicate in_range1(x: int) = ((0 <= x) and (x <= 100))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : element, element -> bool

logic dummy1 : element

type element__ref = { element__content : element
}

function element__ref_element__content__projection(a: element__ref) : element =
  (a).element__content

function to_rep1(x: element) : int = elementqtint(x)

logic of_rep1 : int -> element

axiom inversion_axiom1 :
  (forall x:element [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:element [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__alias__my_rec__content : element;
rec__alias__my_rec__modulus : natural
}

function us_split_fields_rec__alias__my_rec__content__projection(a: us_split_fields) : element =
  (a).rec__alias__my_rec__content

function us_split_fields_rec__alias__my_rec__modulus__projection(a: us_split_fields) : natural =
  (a).rec__alias__my_rec__modulus

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if ((to_rep1(((a).us_split_fields1).rec__alias__my_rec__content) = to_rep1(((b).us_split_fields1).rec__alias__my_rec__content)) and
  (to_rep(((a).us_split_fields1).rec__alias__my_rec__modulus) = to_rep(((b).us_split_fields1).rec__alias__my_rec__modulus))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic alias__my_rec__content__first__bit : int

logic alias__my_rec__content__last__bit : int

logic alias__my_rec__content__position : int

axiom alias__my_rec__content__first__bit_axiom :
  (0 <= alias__my_rec__content__first__bit)

axiom alias__my_rec__content__last__bit_axiom :
  (alias__my_rec__content__first__bit <  alias__my_rec__content__last__bit)

axiom alias__my_rec__content__position_axiom :
  (0 <= alias__my_rec__content__position)

logic alias__my_rec__modulus__first__bit : int

logic alias__my_rec__modulus__last__bit : int

logic alias__my_rec__modulus__position : int

axiom alias__my_rec__modulus__first__bit_axiom :
  (0 <= alias__my_rec__modulus__first__bit)

axiom alias__my_rec__modulus__last__bit_axiom :
  (alias__my_rec__modulus__first__bit <  alias__my_rec__modulus__last__bit)

axiom alias__my_rec__modulus__position_axiom :
  (0 <= alias__my_rec__modulus__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type my_rec__ref = { my_rec__content : us_rep
}

function my_rec__ref_my_rec__content__projection(a: my_rec__ref) : us_rep =
  (a).my_rec__content

logic get_content : us_rep -> int

logic get_content__function_guard : int, us_rep -> prop

predicate dynamic_invariant(temp___expr_160: int, temp___is_init_156: bool,
  temp___skip_constant_157: bool, temp___do_toplevel_158: bool,
  temp___do_typ_inv_159: bool) = (((temp___is_init_156 = true) or
  (0 <= 100)) -> in_range1(temp___expr_160))

predicate default_initial_assumption(temp___expr_168: us_rep,
  temp___skip_top_level_169: bool) =
  ((to_rep1(((temp___expr_168).us_split_fields1).rec__alias__my_rec__content) = 0) and
  (to_rep(((temp___expr_168).us_split_fields1).rec__alias__my_rec__modulus) = 0))

axiom get_content__post_axiom :
  (forall r:us_rep [get_content(r)].
  ((0 <  to_rep(((r).us_split_fields1).rec__alias__my_rec__modulus)) ->
  (let result = get_content(r) : int in (get_content__function_guard(result,
  r) -> dynamic_invariant(result, true, false, true, true)))))

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic alias__my_rec__content__first__bit1 : int

logic alias__my_rec__content__last__bit1 : int

logic alias__my_rec__content__position1 : int

axiom alias__my_rec__content__first__bit_axiom1 :
  (0 <= alias__my_rec__content__first__bit1)

axiom alias__my_rec__content__last__bit_axiom1 :
  (alias__my_rec__content__first__bit1 <  alias__my_rec__content__last__bit1)

axiom alias__my_rec__content__position_axiom1 :
  (0 <= alias__my_rec__content__position1)

logic alias__my_rec__modulus__first__bit1 : int

logic alias__my_rec__modulus__last__bit1 : int

logic alias__my_rec__modulus__position1 : int

axiom alias__my_rec__modulus__first__bit_axiom1 :
  (0 <= alias__my_rec__modulus__first__bit1)

axiom alias__my_rec__modulus__last__bit_axiom1 :
  (alias__my_rec__modulus__first__bit1 <  alias__my_rec__modulus__last__bit1)

axiom alias__my_rec__modulus__position_axiom1 :
  (0 <= alias__my_rec__modulus__position1)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type my_alias__ref = { my_alias__content : us_rep
}

function my_alias__ref_my_alias__content__projection(a: my_alias__ref) : us_rep =
  (a).my_alias__content

logic r : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic x : int

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate default_initial_assumption1(temp___expr_175: us_rep,
  temp___skip_top_level_176: bool) =
  ((to_rep1(((temp___expr_175).us_split_fields1).rec__alias__my_rec__content) = 0) and
  (to_rep(((temp___expr_175).us_split_fields1).rec__alias__my_rec__modulus) = 0))

predicate dynamic_invariant1(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_39))

 (* File "alias.ads", line 13, characters 0-0 *)
goal defqtvc : (dynamic_invariant(x, true, false, true, true) ->
  (0 <  to_rep(((r).us_split_fields1).rec__alias__my_rec__modulus)))
