(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : count_type, count_type -> bool

logic dummy : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

function to_rep(x: count_type) : int = count_typeqtint(x)

logic of_rep : int -> count_type

axiom inversion_axiom :
  (forall x:count_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:count_type [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__sorted_lists__my_lists__cursor__node :
count_type
}

function us_split_fields_rec__sorted_lists__my_lists__cursor__node__projection(a: us_split_fields) : count_type =
  (a).rec__sorted_lists__my_lists__cursor__node

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__sorted_lists__my_lists__cursor__node) = to_rep(((b).us_split_fields1).rec__sorted_lists__my_lists__cursor__node)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic sorted_lists__my_lists__cursor__node__first__bit : int

logic sorted_lists__my_lists__cursor__node__last__bit : int

logic sorted_lists__my_lists__cursor__node__position : int

axiom sorted_lists__my_lists__cursor__node__first__bit_axiom :
  (0 <= sorted_lists__my_lists__cursor__node__first__bit)

axiom sorted_lists__my_lists__cursor__node__last__bit_axiom :
  (sorted_lists__my_lists__cursor__node__first__bit <  sorted_lists__my_lists__cursor__node__last__bit)

axiom sorted_lists__my_lists__cursor__node__position_axiom :
  (0 <= sorted_lists__my_lists__cursor__node__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type cursor__ref = { cursor__content : us_rep
}

function cursor__ref_cursor__content__projection(a: cursor__ref) : us_rep =
  (a).cursor__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__sorted_lists__my_lists__list__capacity :
count_type
}

function us_split_discrs_rec__sorted_lists__my_lists__list__capacity__projection(a: us_split_discrs) : count_type =
  (a).rec__sorted_lists__my_lists__list__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields2 = { rec__sorted_lists__my_lists__list : us_main_type
}

function us_split_fields_rec__sorted_lists__my_lists__list__projection(a: us_split_fields2) : us_main_type =
  (a).rec__sorted_lists__my_lists__list

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq3(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__sorted_lists__my_lists__list__capacity) = to_rep(((b).us_split_discrs1).rec__sorted_lists__my_lists__list__capacity)) and
  (us_main_eq(((a).us_split_fields3).rec__sorted_lists__my_lists__list,
  ((b).us_split_fields3).rec__sorted_lists__my_lists__list) = true)) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic sorted_lists__my_lists__list__capacity__first__bit : int

logic sorted_lists__my_lists__list__capacity__last__bit : int

logic sorted_lists__my_lists__list__capacity__position : int

axiom sorted_lists__my_lists__list__capacity__first__bit_axiom :
  (0 <= sorted_lists__my_lists__list__capacity__first__bit)

axiom sorted_lists__my_lists__list__capacity__last__bit_axiom :
  (sorted_lists__my_lists__list__capacity__first__bit <  sorted_lists__my_lists__list__capacity__last__bit)

axiom sorted_lists__my_lists__list__capacity__position_axiom :
  (0 <= sorted_lists__my_lists__list__capacity__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy2 : us_rep1

type list__ref = { list__content : us_rep1
}

function list__ref_list__content__projection(a: list__ref) : us_rep1 =
  (a).list__content

logic length : us_rep1 -> int

logic length__function_guard : int, us_rep1 -> prop

logic oeq : us_rep1, us_rep1 -> bool

logic oeq__function_guard : bool, us_rep1, us_rep1 -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep1. forall b:us_rep1 [user_eq2(a, b)]. (user_eq2(a,
  b) = oeq(a, b)))

predicate dynamic_invariant(temp___expr_247: int, temp___is_init_243: bool,
  temp___skip_constant_244: bool, temp___do_toplevel_245: bool,
  temp___do_typ_inv_246: bool) = (((temp___is_init_243 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_247))

axiom length__post_axiom :
  (forall container:us_rep1 [length(container)].
  (length(container) <= to_rep(((container).us_split_discrs1).rec__sorted_lists__my_lists__list__capacity)))

axiom length__post_axiom1 :
  (forall container:us_rep1 [length(container)].
  dynamic_invariant(length(container), true, false, true, true))

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep2

logic bool_eq4 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic user_eq3 : us_rep2, us_rep2 -> bool

logic dummy3 : us_rep2

type sequence__ref = { sequence__content : us_rep2
}

function sequence__ref_sequence__content__projection(a: sequence__ref) : us_rep2 =
  (a).sequence__content

logic get : us_rep2, int -> int

logic get__function_guard : int, us_rep2, int -> prop

logic length1 : us_rep2 -> int

logic length__function_guard1 : int, us_rep2 -> prop

function last(container: us_rep2) : int = (0 + length1(container))

logic last__function_guard : int, us_rep2 -> prop

type element_type

logic element_typeqtint : element_type -> int

axiom element_typeqtaxiom :
  (forall i:element_type. (1 <= element_typeqtint(i)))

axiom element_typeqtaxiom1 :
  (forall i:element_type. (element_typeqtint(i) <= 100))

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq4 : element_type, element_type -> bool

logic dummy4 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_element_type__content__3__projection(a: element_type__ref) : element_type =
  (a).element_type__content

predicate dynamic_invariant1(temp___expr_283: int, temp___is_init_279: bool,
  temp___skip_constant_280: bool, temp___do_toplevel_281: bool,
  temp___do_typ_inv_282: bool) = (((temp___is_init_279 = true) or
  (1 <= 100)) -> in_range2(temp___expr_283))

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. (0 <= extended_indexqtint(i)))

axiom extended_indexqtaxiom1 :
  (forall i:extended_index. (extended_indexqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq5 : extended_index, extended_index -> bool

logic dummy5 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref_extended_index__content__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

predicate dynamic_invariant2(temp___expr_290: int, temp___is_init_286: bool,
  temp___skip_constant_287: bool, temp___do_toplevel_288: bool,
  temp___do_typ_inv_289: bool) = (((temp___is_init_286 = true) or
  (0 <= 2147483647)) -> in_range3(temp___expr_290))

logic bool_eq7 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq7(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq7(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length2(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function oeq1(left: us_rep2, right: us_rep2) : bool =
  andb(bool_eq7(length1(left), length1(right)),
  (if (forall n:int. (((1 <= n) and (n <= last(left))) -> (get(left,
      n) = get(right, n)))) then true else false))

logic oeq__function_guard1 : bool, us_rep2, us_rep2 -> prop

axiom user_eq__def_axiom1 :
  (forall a:us_rep2. forall b:us_rep2 [user_eq3(a, b)]. (user_eq3(a,
  b) = oeq1(a, b)))

predicate default_initial_assumption(temp___expr_298: us_rep2,
  temp___skip_top_level_299: bool) =
  ((not (temp___skip_top_level_299 = true)) ->
  (length1(temp___expr_298) = 0))

axiom get__post_axiom :
  (forall container:us_rep2.
  (forall position:int [get(container, position)].
  ((dynamic_invariant2(position, true, true, true, true) and
  ((1 <= position) and (position <= last(container)))) ->
  dynamic_invariant1(get(container, position), true, false, true, true))))

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep3

logic bool_eq8 : us_rep3, us_rep3 -> bool

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic user_eq6 : us_rep3, us_rep3 -> bool

logic dummy6 : us_rep3

type map__ref = { map__content : us_rep3
}

function map__ref_map__content__projection(a: map__ref) : us_rep3 =
  (a).map__content

type key_type__ref = { key_type__content : us_rep
}

function key_type__ref_key_type__content__projection(a: key_type__ref) : us_rep =
  (a).key_type__content

logic get1 : us_rep3, us_rep -> int

logic get__function_guard1 : int, us_rep3, us_rep -> prop

logic has_key : us_rep3, us_rep -> bool

logic has_key__function_guard : bool, us_rep3, us_rep -> prop

logic witness : us_rep3, us_rep -> int

logic witness__function_guard : int, us_rep3, us_rep -> prop

logic w_get : us_rep3, int -> int

logic w_get__function_guard : int, us_rep3, int -> prop

type element_type1

logic element_typeqtint1 : element_type1 -> int

axiom element_typeqtaxiom2 :
  (forall i:element_type1. (1 <= element_typeqtint1(i)))

axiom element_typeqtaxiom3 :
  (forall i:element_type1. (element_typeqtint1(i) <= 2147483647))

predicate in_range4(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq7 : element_type1, element_type1 -> bool

logic dummy7 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref_element_type__content__4__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

predicate dynamic_invariant3(temp___expr_312: int, temp___is_init_308: bool,
  temp___skip_constant_309: bool, temp___do_toplevel_310: bool,
  temp___do_typ_inv_311: bool) = (((temp___is_init_308 = true) or
  (1 <= 2147483647)) -> in_range4(temp___expr_312))

logic length3 : us_rep3 -> int

logic length__function_guard2 : int, us_rep3 -> prop

logic oeq2 : us_rep3, us_rep3 -> bool

logic oeq__function_guard2 : bool, us_rep3, us_rep3 -> prop

logic is_empty : us_rep3 -> bool

logic is_empty__function_guard : bool, us_rep3 -> prop

axiom user_eq__def_axiom2 :
  (forall a:us_rep3. forall b:us_rep3 [user_eq6(a, b)]. (user_eq6(a,
  b) = oeq2(a, b)))

predicate default_initial_assumption1(temp___expr_320: us_rep3,
  temp___skip_top_level_321: bool) =
  ((not (temp___skip_top_level_321 = true)) ->
  ((is_empty(temp___expr_320) = true) and (length3(temp___expr_320) = 0)))

predicate default_initial_assumption2(temp___expr_306: us_rep,
  temp___skip_top_level_307: bool) =
  (to_rep(((temp___expr_306).us_split_fields1).rec__sorted_lists__my_lists__cursor__node) = 0)

axiom get__post_axiom1 :
  (forall container:us_rep3.
  (forall key:us_rep [get1(container, key)]. ((has_key(container,
  key) = true) -> ((of_int(0) = true) -> (get1(container,
  key) = w_get(container, witness(container, key)))))))

axiom get__post_axiom2 :
  (forall container:us_rep3.
  (forall key:us_rep [get1(container, key)]. ((has_key(container,
  key) = true) -> ((of_int(0) = true) ->
  (forall k:us_rep. ((has_key(container, k) = true) -> ((bool_eq2(k,
  key) = true) -> (witness(container, key) = witness(container, k)))))))))

axiom get__post_axiom3 :
  (forall container:us_rep3.
  (forall key:us_rep [get1(container, key)]. ((has_key(container,
  key) = true) -> ((of_int(0) = true) ->
  (forall k:us_rep. ((has_key(container, k) = true) -> ((witness(container,
  key) = witness(container, k)) -> (bool_eq2(k, key) = true))))))))

axiom get__post_axiom4 :
  (forall container:us_rep3.
  (forall key:us_rep [get1(container, key)]. ((has_key(container,
  key) = true) -> dynamic_invariant3(get1(container, key), true, false, true,
  true))))

logic model : us_rep1 -> us_rep2

logic model__function_guard : us_rep2, us_rep1 -> prop

axiom model__post_axiom :
  (forall container:us_rep1 [model(container)].
  (length1(model(container)) = length(container)))

logic positions : us_rep1 -> us_rep3

logic positions__function_guard : us_rep3, us_rep1 -> prop

logic no_element : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

axiom positions__post_axiom :
  (forall container:us_rep1 [positions(container)].
  (not (has_key(positions(container), no_element) = true)))

axiom positions__post_axiom1 :
  (forall container:us_rep1 [positions(container)]. (let result =
  positions(container) : us_rep3 in
  (forall i:us_rep. ((has_key(result, i) = true) -> (1 <= get1(result, i))))))

axiom positions__post_axiom2 :
  (forall container:us_rep1 [positions(container)]. (let result =
  positions(container) : us_rep3 in
  (forall i:us_rep. ((has_key(result, i) = true) -> (get1(result,
  i) <= length(container))))))

axiom positions__post_axiom3 :
  (forall container:us_rep1 [positions(container)]. (let result =
  positions(container) : us_rep3 in
  (forall i:us_rep. ((has_key(result, i) = true) ->
  (forall j:us_rep. ((has_key(result, j) = true) -> ((get1(result,
  i) = get1(result, j)) -> (bool_eq2(i, j) = true))))))))

function has_element(container: us_rep1, position: us_rep) : bool =
  has_key(positions(container), position)

logic has_element__function_guard : bool, us_rep1, us_rep -> prop

function element(container: us_rep1, position: us_rep) : int =
  get(model(container), get1(positions(container), position))

logic element__function_guard : int, us_rep1, us_rep -> prop

type element_type2

logic element_typeqtint2 : element_type2 -> int

axiom element_typeqtaxiom4 :
  (forall i:element_type2. (1 <= element_typeqtint2(i)))

axiom element_typeqtaxiom5 :
  (forall i:element_type2. (element_typeqtint2(i) <= 100))

predicate in_range5(x: int) = ((1 <= x) and (x <= 100))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq8 : element_type2, element_type2 -> bool

logic dummy8 : element_type2

type element_type__ref2 = { element_type__content2 : element_type2
}

function element_type__ref_element_type__content__2__projection(a: element_type__ref2) : element_type2 =
  (a).element_type__content2

predicate dynamic_invariant4(temp___expr_240: int, temp___is_init_236: bool,
  temp___skip_constant_237: bool, temp___do_toplevel_238: bool,
  temp___do_typ_inv_239: bool) = (((temp___is_init_236 = true) or
  (1 <= 100)) -> in_range5(temp___expr_240))

predicate default_initial_assumption3(temp___expr_261: us_rep,
  temp___skip_top_level_262: bool) =
  (to_rep(((temp___expr_261).us_split_fields1).rec__sorted_lists__my_lists__cursor__node) = 0)

function range_equal(left: us_rep2, right: us_rep2, fst: int,
  lst: int) : bool =
  (if (forall i:int. (((fst <= i) and (i <= lst)) -> (get(left,
      i) = get(right, i)))) then true else false)

logic range_equal__function_guard : bool, us_rep2, us_rep2, int, int -> prop

function range_shifted(left: us_rep2, right: us_rep2, fst: int, lst: int,
  offset: int) : bool =
  andb((if (forall i:int. (((fst <= i) and (i <= lst)) -> (get(left,
           i) = get(right, (i + offset))))) then true else false),
  (if (forall i:int. ((((fst + offset) <= i) and (i <= (lst + offset))) ->
      (get(left, (i - offset)) = get(right, i)))) then true else false))

logic range_shifted__function_guard : bool, us_rep2, us_rep2, int, int,
  int -> prop

logic p_positions_shifted : us_rep3, us_rep3, int, int -> bool

logic p_positions_shifted__function_guard : bool, us_rep3, us_rep3, int,
  int -> prop

logic first : us_rep1 -> us_rep

logic first__function_guard : us_rep, us_rep1 -> prop

axiom first__post_axiom :
  (forall container:us_rep1 [first(container)]. ((length(container) = 0) ->
  (bool_eq2(first(container), no_element) = true)))

axiom first__post_axiom1 :
  (forall container:us_rep1 [first(container)].
  ((not (length(container) = 0)) -> (has_element(container,
  first(container)) = true)))

axiom first__post_axiom2 :
  (forall container:us_rep1 [first(container)].
  ((not (length(container) = 0)) -> (get1(positions(container),
  first(container)) = 1)))

logic previous : us_rep1, us_rep -> us_rep

logic previous__function_guard : us_rep, us_rep1, us_rep -> prop

axiom previous__post_axiom :
  (forall container:us_rep1.
  (forall position:us_rep [previous(container, position)].
  (((has_element(container, position) = true) or (bool_eq2(position,
  no_element) = true)) -> (((bool_eq2(position, no_element) = true) or
  (get1(positions(container), position) = 1)) ->
  (bool_eq2(previous(container, position), no_element) = true)))))

axiom previous__post_axiom1 :
  (forall container:us_rep1.
  (forall position:us_rep [previous(container, position)].
  (((has_element(container, position) = true) or (bool_eq2(position,
  no_element) = true)) -> ((not ((bool_eq2(position, no_element) = true) or
  (get1(positions(container), position) = 1))) -> (has_element(container,
  previous(container, position)) = true)))))

axiom previous__post_axiom2 :
  (forall container:us_rep1.
  (forall position:us_rep [previous(container, position)].
  (((has_element(container, position) = true) or (bool_eq2(position,
  no_element) = true)) -> ((not ((bool_eq2(position, no_element) = true) or
  (get1(positions(container), position) = 1))) -> (get1(positions(container),
  previous(container, position)) = (get1(positions(container),
  position) - 1))))))

logic is_sorted : us_rep1 -> bool

logic is_sorted__function_guard : bool, us_rep1 -> prop

logic my_lt : int, int -> bool

logic my_lt__function_guard : bool, int, int -> prop

axiom temp___result_227qtdef :
  (forall container:us_rep2. forall i:int. forall j:int.
  my_lt__function_guard(my_lt(get(container, i), get(container, j)),
  get(container, i), get(container, j)))

function m_elements_sorted(container: us_rep2) : bool =
  (if (forall i:int. (((1 <= i) and (i <= length1(container))) ->
      (forall j:int. (((i <= j) and (j <= length1(container))) ->
      ((get(container, i) = get(container, j)) or (my_lt(get(container, i),
      get(container, j)) = true)))))) then true else false)

logic m_elements_sorted__function_guard : bool, us_rep2 -> prop

axiom is_sorted__post_axiom :
  (forall container:us_rep1 [is_sorted(container)].
  ((is_sorted(container) = true) ->
  (m_elements_sorted(model(container)) = true)))

axiom is_sorted__post_axiom1 :
  (forall container:us_rep1 [is_sorted(container)].
  ((m_elements_sorted(model(container)) = true) ->
  (is_sorted(container) = true)))

logic container__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS1 : int

logic new_item : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type element_type3

logic element_typeqtint3 : element_type3 -> int

axiom element_typeqtaxiom6 :
  (forall i:element_type3. (1 <= element_typeqtint3(i)))

axiom element_typeqtaxiom7 :
  (forall i:element_type3. (element_typeqtint3(i) <= 100))

predicate in_range6(x: int) = ((1 <= x) and (x <= 100))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq9 : element_type3, element_type3 -> bool

logic dummy9 : element_type3

type element_type__ref3 = { element_type__content3 : element_type3
}

function element_type__ref_element_type__content__projection(a: element_type__ref3) : element_type3 =
  (a).element_type__content3

predicate dynamic_invariant5(temp___expr_233: int, temp___is_init_229: bool,
  temp___skip_constant_230: bool, temp___do_toplevel_231: bool,
  temp___do_typ_inv_232: bool) = (((temp___is_init_229 = true) or
  (1 <= 100)) -> in_range6(temp___expr_233))

type tcount_typeB

logic tcount_typeBqtint : tcount_typeB -> int

axiom tcount_typeBqtaxiom :
  (forall i:tcount_typeB. ((- 2147483648) <= tcount_typeBqtint(i)))

axiom tcount_typeBqtaxiom1 :
  (forall i:tcount_typeB. (tcount_typeBqtint(i) <= 2147483647))

predicate in_range7(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq12(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq10 : tcount_typeB, tcount_typeB -> bool

logic dummy10 : tcount_typeB

type tcount_typeB__ref = { tcount_typeB__content : tcount_typeB
}

function tcount_typeB__ref_tcount_typeB__content__projection(a: tcount_typeB__ref) : tcount_typeB =
  (a).tcount_typeB__content

axiom my_lt__def_axiom :
  (forall i1:int. forall i2:int [my_lt(i1, i2)]. ((my_lt(i1, i2) = true) ->
  (i1 <  i2)))

axiom my_lt__def_axiom1 :
  (forall i1:int. forall i2:int [my_lt(i1, i2)]. ((i1 <  i2) -> (my_lt(i1,
  i2) = true)))

logic rliteral : count_type

axiom rliteral_axiom : (count_typeqtint(rliteral) = 0)

axiom no_element__def_axiom : (no_element = { us_split_fields1 = {
  rec__sorted_lists__my_lists__cursor__node = rliteral } })

type positive_count_type

logic positive_count_typeqtint : positive_count_type -> int

axiom positive_count_typeqtaxiom :
  (forall i:positive_count_type. (1 <= positive_count_typeqtint(i)))

axiom positive_count_typeqtaxiom1 :
  (forall i:positive_count_type. (positive_count_typeqtint(i) <= 2147483647))

predicate in_range8(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq13(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq11 : positive_count_type, positive_count_type -> bool

logic dummy11 : positive_count_type

type positive_count_type__ref = { positive_count_type__content :
positive_count_type
}

function positive_count_type__ref_positive_count_type__content__projection(a: positive_count_type__ref) : positive_count_type =
  (a).positive_count_type__content

predicate dynamic_invariant6(temp___expr_269: int, temp___is_init_265: bool,
  temp___skip_constant_266: bool, temp___do_toplevel_267: bool,
  temp___do_typ_inv_268: bool) = (((temp___is_init_265 = true) or
  (1 <= 2147483647)) -> in_range8(temp___expr_269))

logic keys_included : us_rep3, us_rep3 -> bool

logic keys_included__function_guard : bool, us_rep3, us_rep3 -> prop

axiom p_positions_shifted__post_axiom :
  (forall small:us_rep3. forall big:us_rep3.
  (forall cut1:int. forall count:int [p_positions_shifted(small, big, cut1,
  count)]. ((dynamic_invariant6(cut1, true, true, true, true) and
  dynamic_invariant(count, true, true, true, true)) ->
  ((p_positions_shifted(small, big, cut1, count) = true) ->
  (keys_included(small, big) = true)))))

axiom p_positions_shifted__post_axiom1 :
  (forall small:us_rep3. forall big:us_rep3.
  (forall cut1:int. forall count:int [p_positions_shifted(small, big, cut1,
  count)]. ((dynamic_invariant6(cut1, true, true, true, true) and
  dynamic_invariant(count, true, true, true, true)) ->
  ((p_positions_shifted(small, big, cut1, count) = true) ->
  (forall i:us_rep. ((has_key(small, i) = true) -> ((get1(small,
  i) <  cut1) -> (get1(big, i) = get1(small, i)))))))))

axiom p_positions_shifted__post_axiom2 :
  (forall small:us_rep3. forall big:us_rep3.
  (forall cut1:int. forall count:int [p_positions_shifted(small, big, cut1,
  count)]. ((dynamic_invariant6(cut1, true, true, true, true) and
  dynamic_invariant(count, true, true, true, true)) ->
  ((p_positions_shifted(small, big, cut1, count) = true) ->
  (forall i:us_rep. ((has_key(small, i) = true) -> ((not (get1(small,
  i) <  cut1)) -> ((get1(big, i) - count) = get1(small, i)))))))))

axiom p_positions_shifted__post_axiom3 :
  (forall small:us_rep3. forall big:us_rep3.
  (forall cut1:int. forall count:int [p_positions_shifted(small, big, cut1,
  count)]. ((dynamic_invariant6(cut1, true, true, true, true) and
  dynamic_invariant(count, true, true, true, true)) ->
  ((p_positions_shifted(small, big, cut1, count) = true) ->
  (forall i:us_rep. ((has_key(big, i) = true) -> ((has_key(small,
  i) = true) or (((cut1 - count) <= (get1(big, i) - count)) and ((get1(big,
  i) - count) <= (cut1 - 1))))))))))

axiom p_positions_shifted__post_axiom4 :
  (forall small:us_rep3. forall big:us_rep3.
  (forall cut1:int. forall count:int [p_positions_shifted(small, big, cut1,
  count)]. ((dynamic_invariant6(cut1, true, true, true, true) and
  dynamic_invariant(count, true, true, true, true)) ->
  ((((keys_included(small, big) = true) and
  (forall i:us_rep. ((has_key(small, i) = true) -> (if (get1(small,
  i) <  cut1) then (get1(big, i) = get1(small, i)) else ((get1(big,
  i) - count) = get1(small, i)))))) and
  (forall i:us_rep. ((has_key(big, i) = true) -> ((has_key(small,
  i) = true) or (((cut1 - count) <= (get1(big, i) - count)) and ((get1(big,
  i) - count) <= (cut1 - 1))))))) -> (p_positions_shifted(small, big, cut1,
  count) = true)))))

axiom oeq__post_axiom :
  (forall left:us_rep1. forall right:us_rep1 [oeq(left, right)]. ((oeq(left,
  right) = true) -> (oeq1(model(left), model(right)) = true)))

axiom oeq__post_axiom1 :
  (forall left:us_rep1. forall right:us_rep1 [oeq(left, right)].
  ((oeq1(model(left), model(right)) = true) -> (oeq(left, right) = true)))

axiom length__post_axiom2 :
  (forall container:us_rep2 [length1(container)].
  ((0 + length1(container)) <= 2147483647))

axiom length__post_axiom3 :
  (forall container:us_rep2 [length1(container)].
  dynamic_invariant(length1(container), true, false, true, true))

axiom has_key__post_axiom :
  (forall container:us_rep3.
  (forall key:us_rep [has_key(container, key)]. ((of_int(0) = true) ->
  ((exists k:us_rep. ((has_key(container, k) = true) and (bool_eq2(k,
   key) = true))) ->
  (has_key(container, key) = true)))))

axiom length__post_axiom4 :
  (forall container:us_rep3 [length3(container)].
  dynamic_invariant(length3(container), true, false, true, true))

axiom oeq__post_axiom2 :
  (forall left:us_rep3. forall right:us_rep3 [oeq2(left, right)].
  ((oeq2(left, right) = true) ->
  (forall key:us_rep. ((has_key(left, key) = true) -> (has_key(right,
  key) = true)))))

axiom oeq__post_axiom3 :
  (forall left:us_rep3. forall right:us_rep3 [oeq2(left, right)].
  ((oeq2(left, right) = true) ->
  (forall key:us_rep. ((has_key(left, key) = true) -> (get1(right,
  key) = get1(left, key))))))

axiom oeq__post_axiom4 :
  (forall left:us_rep3. forall right:us_rep3 [oeq2(left, right)].
  ((oeq2(left, right) = true) ->
  (forall key:us_rep. ((has_key(right, key) = true) -> (has_key(left,
  key) = true)))))

axiom oeq__post_axiom5 :
  (forall left:us_rep3. forall right:us_rep3 [oeq2(left, right)].
  (((forall key:us_rep. ((has_key(left, key) = true) -> ((has_key(right,
    key) = true) and (get1(right, key) = get1(left, key))))) and
  (forall key:us_rep. ((has_key(right, key) = true) -> (has_key(left,
  key) = true)))) -> (oeq2(left, right) = true)))

axiom is_empty__post_axiom :
  (forall container:us_rep3 [is_empty(container)].
  ((is_empty(container) = true) ->
  (forall key:us_rep. (not (has_key(container, key) = true)))))

axiom is_empty__post_axiom1 :
  (forall container:us_rep3 [is_empty(container)].
  ((forall key:us_rep. (not (has_key(container, key) = true))) ->
  (is_empty(container) = true)))

axiom keys_included__post_axiom :
  (forall left:us_rep3. forall right:us_rep3 [keys_included(left, right)].
  ((keys_included(left, right) = true) ->
  (forall key:us_rep. ((has_key(left, key) = true) -> (has_key(right,
  key) = true)))))

axiom keys_included__post_axiom1 :
  (forall left:us_rep3. forall right:us_rep3 [keys_included(left, right)].
  ((forall key:us_rep. ((has_key(left, key) = true) -> (has_key(right,
   key) = true))) ->
  (keys_included(left, right) = true)))

logic has_witness : us_rep3, int -> bool

logic has_witness__function_guard : bool, us_rep3, int -> prop

axiom witness__post_axiom :
  (forall container:us_rep3.
  (forall key:us_rep [witness(container, key)]. ((has_key(container,
  key) = true) -> (has_witness(container, witness(container, key)) = true))))

axiom witness__post_axiom1 :
  (forall container:us_rep3.
  (forall key:us_rep [witness(container, key)]. ((has_key(container,
  key) = true) -> dynamic_invariant(witness(container, key), true, false,
  true, true))))

axiom w_get__post_axiom :
  (forall container:us_rep3.
  (forall witness1:int [w_get(container, witness1)].
  ((dynamic_invariant(witness1, true, true, true, true) and
  (has_witness(container, witness1) = true)) ->
  dynamic_invariant3(w_get(container, witness1), true, false, true, true))))

 (* File "sorted_lists.ads", line 20, characters 0-0 *)
goal defqtvc :
  (forall container__split_fields:us_main_type. (dynamic_invariant5(new_item,
  true, false, true, true) -> ((length({ us_split_discrs1 =
  container__split_discrs; us_split_fields3 = {
  rec__sorted_lists__my_lists__list = container__split_fields }
  }) <  to_rep((container__split_discrs).rec__sorted_lists__my_lists__list__capacity)) ->
  (let usf = { us_split_discrs1 = container__split_discrs; us_split_fields3 =
  { rec__sorted_lists__my_lists__list = container__split_fields } }
  : us_rep1 in (let o = { us_split_discrs1 = container__split_discrs;
  us_split_fields3 = { rec__sorted_lists__my_lists__list =
  container__split_fields } } : us_rep1 in
  (let sorted_lists__my_insert__current__assume = first(o) : us_rep in
  ((if (bool_eq7(length(o),
  0) = true) then (bool_eq2(sorted_lists__my_insert__current__assume,
  no_element) = true) else ((has_element(o,
  sorted_lists__my_insert__current__assume) = true) and (get1(positions(o),
  sorted_lists__my_insert__current__assume) = 1))) ->
  (forall current__split_fields:count_type. (({
  rec__sorted_lists__my_lists__cursor__node = current__split_fields
  } = (sorted_lists__my_insert__current__assume).us_split_fields1) ->
  (forall current__split_fields1:count_type. ((let o1 = { us_split_fields1 =
  { rec__sorted_lists__my_lists__cursor__node = current__split_fields } }
  : us_rep in (let o2 = { us_split_discrs1 = container__split_discrs;
  us_split_fields3 = { rec__sorted_lists__my_lists__list =
  container__split_fields } } : us_rep1 in (let o3 = has_element(o2, o1)
  : bool in (((o3 = true) <-> (has_key(positions(o2), o1) = true)) and
  (((not (o3 = true)) or (let o4 = { us_split_fields1 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields } }
  : us_rep in (let o5 = { us_split_discrs1 = container__split_discrs;
  us_split_fields3 = { rec__sorted_lists__my_lists__list =
  container__split_fields } } : us_rep1 in (let o6 = element(o5, o4) : int in
  (dynamic_invariant4(o6, true, false, true, true) and (o6 = get(model(o5),
  get1(positions(o5), o4)))))))) and (if ((o3 = true) and (element({
  us_split_discrs1 = container__split_discrs; us_split_fields3 = {
  rec__sorted_lists__my_lists__list = container__split_fields } }, {
  us_split_fields1 = { rec__sorted_lists__my_lists__cursor__node =
  current__split_fields } }) <  new_item)) then (let o4 = {
  us_split_discrs1 = container__split_discrs; us_split_fields3 = {
  rec__sorted_lists__my_lists__list = container__split_fields } }
  : us_rep1 in (let o5 = first(o4) : us_rep in ((if (bool_eq7(length(o4),
  0) = true) then (bool_eq2(o5, no_element) = true) else ((has_element(o4,
  o5) = true) and (get1(positions(o4), o5) = 1))) and (((bool_eq2({
  us_split_fields1 = { rec__sorted_lists__my_lists__cursor__node =
  current__split_fields } }, o5) = true) or (let o6 = { us_split_fields1 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields } }
  : us_rep in (let o7 = { us_split_discrs1 = container__split_discrs;
  us_split_fields3 = { rec__sorted_lists__my_lists__list =
  container__split_fields } } : us_rep1 in (let o8 = previous(o7, o6)
  : us_rep in ((if (orb(bool_eq2(o6, no_element),
  bool_eq7(get1(positions(o7), o6), 1)) = true) then (bool_eq2(o8,
  no_element) = true) else ((has_element(o7, o8) = true) and
  (get1(positions(o7), o8) = (get1(positions(o7), o6) - 1)))) and (let o9 = {
  us_split_discrs1 = container__split_discrs; us_split_fields3 = {
  rec__sorted_lists__my_lists__list = container__split_fields } }
  : us_rep1 in (let o10 = element(o9, o8) : int in (dynamic_invariant4(o10,
  true, false, true, true) and (o10 = get(model(o9), get1(positions(o9),
  o8))))))))))) and
  (exists current__split_fields2:count_type. (((bool_eq2({ us_split_fields1 =
  { rec__sorted_lists__my_lists__cursor__node = current__split_fields2 } },
  first({ us_split_discrs1 = container__split_discrs; us_split_fields3 = {
  rec__sorted_lists__my_lists__list = container__split_fields }
  })) = true) or (element({ us_split_discrs1 = container__split_discrs;
  us_split_fields3 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }, previous({ us_split_discrs1 =
  container__split_discrs; us_split_fields3 = {
  rec__sorted_lists__my_lists__list = container__split_fields } }, {
  us_split_fields1 = { rec__sorted_lists__my_lists__cursor__node =
  current__split_fields2 } })) <  new_item)) and
  ((andb((if true then true else false), (if ((has_element({
  us_split_discrs1 = container__split_discrs; us_split_fields3 = {
  rec__sorted_lists__my_lists__list = container__split_fields } }, {
  us_split_fields1 = { rec__sorted_lists__my_lists__cursor__node =
  current__split_fields2 } }) = true) and (element({ us_split_discrs1 =
  container__split_discrs; us_split_fields3 = {
  rec__sorted_lists__my_lists__list = container__split_fields } }, {
  us_split_fields1 = { rec__sorted_lists__my_lists__cursor__node =
  current__split_fields2 }
  }) <  new_item)) then true else false)) = true) and (let o6 = {
  us_split_discrs1 = container__split_discrs; us_split_fields3 = {
  rec__sorted_lists__my_lists__list = container__split_fields } }
  : us_rep1 in ((if (orb(bool_eq2({ us_split_fields1 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields2 } },
  no_element), bool_eq7(get1(positions(o6), { us_split_fields1 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields2 } }),
  length(o6))) = true) then (bool_eq2({ us_split_fields1 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields1 } },
  no_element) = true) else ((has_element(o6, { us_split_fields1 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields1 }
  }) = true) and (get1(positions(o6), { us_split_fields1 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields1 }
  }) = (get1(positions(o6), { us_split_fields1 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields2 }
  }) + 1)))) and (let o7 = { us_split_fields1 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields1 } }
  : us_rep in (let o8 = { us_split_discrs1 = container__split_discrs;
  us_split_fields3 = { rec__sorted_lists__my_lists__list =
  container__split_fields } } : us_rep1 in (let o9 = has_element(o8, o7)
  : bool in (((o9 = true) <-> (has_key(positions(o8), o7) = true)) and
  (((not (o9 = true)) or (let o10 = { us_split_fields1 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields1 } }
  : us_rep in (let o11 = { us_split_discrs1 = container__split_discrs;
  us_split_fields3 = { rec__sorted_lists__my_lists__list =
  container__split_fields } } : us_rep1 in (let o12 = element(o11, o10)
  : int in (dynamic_invariant4(o12, true, false, true, true) and
  (o12 = get(model(o11), get1(positions(o11), o10)))))))) and
  (not ((o9 = true) and (element({ us_split_discrs1 =
  container__split_discrs; us_split_fields3 = {
  rec__sorted_lists__my_lists__list = container__split_fields } }, {
  us_split_fields1 = { rec__sorted_lists__my_lists__cursor__node =
  current__split_fields1 } }) <  new_item))))))))))))))))) else (current__split_fields1 = current__split_fields))))))) ->
  (let o1 = { us_split_fields1 = {
  rec__sorted_lists__my_lists__cursor__node = current__split_fields1 } }
  : us_rep in (let o2 = container__split_discrs : us_split_discrs in
  (forall container__split_fields1:us_main_type.
  forall position__split_fields:count_type. ((((((((length({
  us_split_discrs1 = o2; us_split_fields3 = {
  rec__sorted_lists__my_lists__list = container__split_fields1 }
  }) = (length({ us_split_discrs1 = o2; us_split_fields3 = {
  rec__sorted_lists__my_lists__list = container__split_fields } }) + 1)) and
  (has_key(positions({ us_split_discrs1 = o2; us_split_fields3 = {
  rec__sorted_lists__my_lists__list = container__split_fields1 } }), {
  us_split_fields1 = { rec__sorted_lists__my_lists__cursor__node =
  position__split_fields } }) = true)) and (if (bool_eq2(o1,
  no_element) = true) then (get1(positions({ us_split_discrs1 = o2;
  us_split_fields3 = { rec__sorted_lists__my_lists__list =
  container__split_fields1 } }), { us_split_fields1 = {
  rec__sorted_lists__my_lists__cursor__node = position__split_fields }
  }) = length({ us_split_discrs1 = o2; us_split_fields3 = {
  rec__sorted_lists__my_lists__list = container__split_fields1 }
  })) else (get1(positions({ us_split_discrs1 = o2; us_split_fields3 = {
  rec__sorted_lists__my_lists__list = container__split_fields1 } }), {
  us_split_fields1 = { rec__sorted_lists__my_lists__cursor__node =
  position__split_fields } }) = get1(positions({ us_split_discrs1 = o2;
  us_split_fields3 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }), o1)))) and (range_equal(model({
  us_split_discrs1 = o2; us_split_fields3 = {
  rec__sorted_lists__my_lists__list = container__split_fields } }), model({
  us_split_discrs1 = o2; us_split_fields3 = {
  rec__sorted_lists__my_lists__list = container__split_fields1 } }), 1,
  (get1(positions({ us_split_discrs1 = o2; us_split_fields3 = {
  rec__sorted_lists__my_lists__list = container__split_fields1 } }), {
  us_split_fields1 = { rec__sorted_lists__my_lists__cursor__node =
  position__split_fields } }) - 1)) = true)) and (range_shifted(model({
  us_split_discrs1 = o2; us_split_fields3 = {
  rec__sorted_lists__my_lists__list = container__split_fields } }), model({
  us_split_discrs1 = o2; us_split_fields3 = {
  rec__sorted_lists__my_lists__list = container__split_fields1 } }),
  get1(positions({ us_split_discrs1 = o2; us_split_fields3 = {
  rec__sorted_lists__my_lists__list = container__split_fields1 } }), {
  us_split_fields1 = { rec__sorted_lists__my_lists__cursor__node =
  position__split_fields } }), length({ us_split_discrs1 = o2;
  us_split_fields3 = { rec__sorted_lists__my_lists__list =
  container__split_fields } }), 1) = true)) and (get(model({
  us_split_discrs1 = o2; us_split_fields3 = {
  rec__sorted_lists__my_lists__list = container__split_fields1 } }),
  get1(positions({ us_split_discrs1 = o2; us_split_fields3 = {
  rec__sorted_lists__my_lists__list = container__split_fields1 } }), {
  us_split_fields1 = { rec__sorted_lists__my_lists__cursor__node =
  position__split_fields } })) = new_item)) and
  (p_positions_shifted(positions({ us_split_discrs1 = o2; us_split_fields3 =
  { rec__sorted_lists__my_lists__list = container__split_fields } }),
  positions({ us_split_discrs1 = o2; us_split_fields3 = {
  rec__sorted_lists__my_lists__list = container__split_fields1 } }),
  get1(positions({ us_split_discrs1 = o2; us_split_fields3 = {
  rec__sorted_lists__my_lists__list = container__split_fields1 } }), {
  us_split_fields1 = { rec__sorted_lists__my_lists__cursor__node =
  position__split_fields } }), 1) = true)) ->
  (forall o3:bool. ((let o4 = { us_split_fields1 = {
  rec__sorted_lists__my_lists__cursor__node = position__split_fields } }
  : us_rep in (let o5 = { us_split_discrs1 = container__split_discrs;
  us_split_fields3 = { rec__sorted_lists__my_lists__list =
  container__split_fields1 } } : us_rep1 in (let o6 = has_element(o5, o4)
  : bool in (((o6 = true) <-> (has_key(positions(o5), o4) = true)) and
  (((not (o6 = true)) or (let o7 = { us_split_fields1 = {
  rec__sorted_lists__my_lists__cursor__node = position__split_fields } }
  : us_rep in (let o8 = { us_split_discrs1 = container__split_discrs;
  us_split_fields3 = { rec__sorted_lists__my_lists__list =
  container__split_fields1 } } : us_rep1 in (let o9 = element(o8, o7)
  : int in (dynamic_invariant4(o9, true, false, true, true) and
  (o9 = get(model(o8), get1(positions(o8), o7)))))))) and
  (if ((o6 = true) and (element({ us_split_discrs1 = container__split_discrs;
  us_split_fields3 = { rec__sorted_lists__my_lists__list =
  container__split_fields1 } }, { us_split_fields1 = {
  rec__sorted_lists__my_lists__cursor__node = position__split_fields }
  }) = new_item)) then ((let o7 = { us_split_fields1 = {
  rec__sorted_lists__my_lists__cursor__node = position__split_fields } }
  : us_rep in (let o8 = { us_split_discrs1 = container__split_discrs;
  us_split_fields3 = { rec__sorted_lists__my_lists__list =
  container__split_fields1 } } : us_rep1 in (let o9 = positions(o8)
  : us_rep3 in (((not (has_key(o9, no_element) = true)) and
  (forall i:us_rep. ((has_key(o9, i) = true) -> (((1 <= get1(o9, i)) and
  (get1(o9, i) <= length(o8))) and
  (forall j:us_rep. ((has_key(o9, j) = true) -> ((get1(o9, i) = get1(o9,
  j)) -> (bool_eq2(i, j) = true)))))))) and (let o10 = get1(o9, o7) : int in
  (dynamic_invariant3(o10, true, false, true, true) and
  ((of_int(0) = true) -> ((o10 = w_get(o9, witness(o9, o7))) and
  (forall k:us_rep. ((has_key(o9, k) = true) -> ((bool_eq2(k, o7) = true) <->
  (witness(o9, o7) = witness(o9, k))))))))))))) and
  (o3 = (if (forall i:int. (((1 <= i) and (i <= (get1(positions({
            us_split_discrs1 = container__split_discrs; us_split_fields3 = {
            rec__sorted_lists__my_lists__list = container__split_fields1 }
            }), { us_split_fields1 = {
            rec__sorted_lists__my_lists__cursor__node =
            position__split_fields } }) - 1))) -> (get(model({
            us_split_discrs1 = container__split_discrs; us_split_fields3 = {
            rec__sorted_lists__my_lists__list = container__split_fields1 }
            }), i) = get(model({ us_split_discrs1 = container__split_discrs;
            us_split_fields3 = { rec__sorted_lists__my_lists__list =
            container__split_fields } }), i)))) then true else false))) else (o3 = false))))))) ->
  ((o3 = true) ->
  (forall usf1:int. (let o4 = length({ us_split_discrs1 =
  container__split_discrs; us_split_fields3 = {
  rec__sorted_lists__my_lists__list = container__split_fields1 } }) : int in
  ((dynamic_invariant(o4, true, false, true, true) and
  (o4 <= to_rep((container__split_discrs).rec__sorted_lists__my_lists__list__capacity))) ->
  (let o5 = { us_split_fields1 = {
  rec__sorted_lists__my_lists__cursor__node = position__split_fields } }
  : us_rep in (let o6 = { us_split_discrs1 = container__split_discrs;
  us_split_fields3 = { rec__sorted_lists__my_lists__list =
  container__split_fields1 } } : us_rep1 in (let o7 = positions(o6)
  : us_rep3 in (((not (has_key(o7, no_element) = true)) and
  (forall i:us_rep. ((has_key(o7, i) = true) -> (((1 <= get1(o7, i)) and
  (get1(o7, i) <= length(o6))) and
  (forall j:us_rep. ((has_key(o7, j) = true) -> ((get1(o7, i) = get1(o7,
  j)) -> (bool_eq2(i, j) = true)))))))) -> (let o8 = get1(o7, o5) : int in
  ((dynamic_invariant3(o8, true, false, true, true) and
  ((of_int(0) = true) -> ((o8 = w_get(o7, witness(o7, o5))) and
  (forall k:us_rep. ((has_key(o7, k) = true) -> ((bool_eq2(k, o5) = true) <->
  (witness(o7, o5) = witness(o7, k)))))))) ->
  ((andb((if (o8 <= usf1) then true else false),
  (if (usf1 <= (o4 - 1)) then true else false)) = true) ->
  (in_range3(usf1) -> ((length1(model(usf)) = length(usf)) ->
  (1 <= usf1)))))))))))))))))))))))))))))))
