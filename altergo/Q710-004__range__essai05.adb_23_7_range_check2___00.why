(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type tindex_aB

logic tindex_aBqtint : tindex_aB -> int

axiom tindex_aBqtaxiom : (forall i:tindex_aB. ((- 128) <= tindex_aBqtint(i)))

axiom tindex_aBqtaxiom1 : (forall i:tindex_aB. (tindex_aBqtint(i) <= 127))

predicate in_range2(x: int) = (((- 128) <= x) and (x <= 127))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : tindex_aB, tindex_aB -> bool

logic dummy1 : tindex_aB

type tindex_aB__ref = { tindex_aB__content : tindex_aB
}

function tindex_aB__ref_tindex_aB__content__projection(a: tindex_aB__ref) : tindex_aB =
  (a).tindex_aB__content

function to_rep1(x: tindex_aB) : int = tindex_aBqtint(x)

logic of_rep1 : int -> tindex_aB

axiom inversion_axiom1 :
  (forall x:tindex_aB [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:tindex_aB [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type index_a

logic index_aqtint : index_a -> int

axiom index_aqtaxiom : (forall i:index_a. ((- 3) <= index_aqtint(i)))

axiom index_aqtaxiom1 : (forall i:index_a. (index_aqtint(i) <= 15))

predicate in_range3(x: int) = (((- 3) <= x) and (x <= 15))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : index_a, index_a -> bool

logic dummy2 : index_a

type index_a__ref = { index_a__content : index_a
}

function index_a__ref_index_a__content__projection(a: index_a__ref) : index_a =
  (a).index_a__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

type t

logic first : t -> tindex_aB

logic last : t -> tindex_aB

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type array_a__ref = { array_a__content : us_t
}

function array_a__ref_array_a__content__projection(a: array_a__ref) : us_t =
  (a).array_a__content

logic v : us_t

logic attr__ATTRIBUTE_ADDRESS : int

type index_b

logic index_bqtint : index_b -> int

axiom index_bqtaxiom : (forall i:index_b. (3 <= index_bqtint(i)))

axiom index_bqtaxiom1 : (forall i:index_b. (index_bqtint(i) <= 15))

predicate in_range4(x: int) = ((3 <= x) and (x <= 15))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : index_b, index_b -> bool

logic dummy4 : index_b

type index_b__ref = { index_b__content : index_b
}

function index_b__ref_index_b__content__projection(a: index_b__ref) : index_b =
  (a).index_b__content

type t1

logic first2 : t1 -> tindex_aB

logic last2 : t1 -> tindex_aB

logic mk1 : int, int -> t1

axiom mk_def2 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(first2(mk1(f, l))) = f))))

axiom mk_def3 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(last2(mk1(f, l))) = l))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range4(low) and in_range4(high)))))

type us_t1 = { elts1 : (int,integer) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,integer) farray = (a).elts1

function of_array1(a: (int,integer) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

function length1(a: us_t1) : int =
  (if (first3(a) <= last3(a)) then ((last3(a) - first3(a)) + 1) else 0)

logic value__size1 : int

logic object__size1 : int

logic component__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom1 : (0 <= alignment1)

function bool_eq7(x: us_t1, y: us_t1) : bool = bool_eq4((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq5 : us_t1, us_t1 -> bool

logic dummy5 : us_t1

type array_b__ref = { array_b__content : us_t1
}

function array_b__ref_array_b__content__projection(a: array_b__ref) : us_t1 =
  (a).array_b__content

logic r__first : tindex_aB

logic r__last : tindex_aB

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_invariant(temp___expr_196: us_t, temp___is_init_192: bool,
  temp___skip_constant_193: bool, temp___do_toplevel_194: bool,
  temp___do_typ_inv_195: bool) = ((not (temp___skip_constant_193 = true)) ->
  dynamic_property((- 3), 15, first1(temp___expr_196),
  last1(temp___expr_196)))

type trS__ref = { trS__content : us_t1
}

function trS__ref_trS__content__2__projection(a: trS__ref) : us_t1 =
  (a).trS__content

type t17b__ref = { t17b__content : us_t1
}

function t17b__ref_t17b__content__projection(a: t17b__ref) : us_t1 =
  (a).t17b__content

logic essai05__conv2__r__aggregate_def : int, int, int -> us_t1

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate dynamic_invariant2(temp___expr_182: int, temp___is_init_178: bool,
  temp___skip_constant_179: bool, temp___do_toplevel_180: bool,
  temp___do_typ_inv_181: bool) = (((temp___is_init_178 = true) or
  ((- 3) <= 15)) -> in_range3(temp___expr_182))

predicate dynamic_invariant3(temp___expr_189: int, temp___is_init_185: bool,
  temp___skip_constant_186: bool, temp___do_toplevel_187: bool,
  temp___do_typ_inv_188: bool) = (((temp___is_init_185 = true) or
  (3 <= 15)) -> in_range4(temp___expr_189))

predicate dynamic_invariant4(temp___expr_202: us_t1,
  temp___is_init_198: bool, temp___skip_constant_199: bool,
  temp___do_toplevel_200: bool, temp___do_typ_inv_201: bool) =
  ((not (temp___skip_constant_199 = true)) -> dynamic_property1(3, 15,
  first3(temp___expr_202), last3(temp___expr_202)))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 0)

axiom def_axiom :
  (forall temp___252:int. forall temp___253:int. forall temp___254:int.
  (dynamic_invariant1(temp___252, true, true, true, true) ->
  (dynamic_property1(3, 15, temp___253, temp___254) ->
  (first3(essai05__conv2__r__aggregate_def(temp___252, temp___253,
  temp___254)) = temp___253))))

axiom def_axiom1 :
  (forall temp___252:int. forall temp___253:int. forall temp___254:int.
  (dynamic_invariant1(temp___252, true, true, true, true) ->
  (dynamic_property1(3, 15, temp___253, temp___254) ->
  (last3(essai05__conv2__r__aggregate_def(temp___252, temp___253,
  temp___254)) = temp___254))))

axiom def_axiom2 :
  (forall temp___252:int. forall temp___253:int. forall temp___254:int.
  (dynamic_invariant1(temp___252, true, true, true, true) ->
  (forall temp___255:int.
  ((to_array1(essai05__conv2__r__aggregate_def(temp___252, temp___253,
  temp___254))[temp___255]) = rliteral))))

predicate dynamic_invariant5(temp___expr_238: us_t1,
  temp___is_init_234: bool, temp___skip_constant_235: bool,
  temp___do_toplevel_236: bool, temp___do_typ_inv_237: bool) =
  ((not (temp___skip_constant_235 = true)) -> (dynamic_property1(first1(v),
  last1(v), first3(temp___expr_238), last3(temp___expr_238)) and
  ((first3(temp___expr_238) = first1(v)) and
  (last3(temp___expr_238) = last1(v)))))

predicate default_initial_assumption(temp___expr_240: us_t1,
  temp___skip_top_level_241: bool) =
  ((first3(temp___expr_240) = first1(v)) and
  (last3(temp___expr_240) = last1(v)))

 (* File "essai05.adb", line 9, characters 0-0 *)
goal defqtvc : (dynamic_invariant(v, true, false, true, true) ->
  ((first1(v) <= last1(v)) -> (3 <= first1(v))))
