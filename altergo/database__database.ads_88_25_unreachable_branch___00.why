(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type character

predicate in_range(x: int) = ((0 <= x) and (x <= 255))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : character, character -> bool

logic dummy : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq1(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq2(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range1(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE1 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> bool

type ext_account_num

logic ext_account_numqtint : ext_account_num -> int

axiom ext_account_numqtaxiom :
  (forall i:ext_account_num. (0 <= ext_account_numqtint(i)))

axiom ext_account_numqtaxiom1 :
  (forall i:ext_account_num. (ext_account_numqtint(i) <= 200000))

predicate in_range2(x: int) = ((0 <= x) and (x <= 200000))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : ext_account_num, ext_account_num -> bool

logic dummy1 : ext_account_num

type ext_account_num__ref = { ext_account_num__content : ext_account_num
}

function ext_account_num__ref_ext_account_num__content__projection(a: ext_account_num__ref) : ext_account_num =
  (a).ext_account_num__content

function to_rep1(x: ext_account_num) : int = ext_account_numqtint(x)

logic of_rep1 : int -> ext_account_num

axiom inversion_axiom1 :
  (forall x:ext_account_num [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:ext_account_num [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__database__availability__account_link__available
: bool; rec__database__availability__account_link__prev : ext_account_num;
rec__database__availability__account_link__next : ext_account_num
}

function us_split_fields_rec__database__availability__account_link__available__projection(a: us_split_fields) : bool =
  (a).rec__database__availability__account_link__available

function us_split_fields_rec__database__availability__account_link__prev__projection(a: us_split_fields) : ext_account_num =
  (a).rec__database__availability__account_link__prev

function us_split_fields_rec__database__availability__account_link__next__projection(a: us_split_fields) : ext_account_num =
  (a).rec__database__availability__account_link__next

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq4(a: us_rep, b: us_rep) : bool =
  (if (((to_int(((a).us_split_fields1).rec__database__availability__account_link__available) = to_int(((b).us_split_fields1).rec__database__availability__account_link__available)) and
  (to_rep1(((a).us_split_fields1).rec__database__availability__account_link__prev) = to_rep1(((b).us_split_fields1).rec__database__availability__account_link__prev))) and
  (to_rep1(((a).us_split_fields1).rec__database__availability__account_link__next) = to_rep1(((b).us_split_fields1).rec__database__availability__account_link__next))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic database__availability__account_link__available__first__bit : int

logic database__availability__account_link__available__last__bit : int

logic database__availability__account_link__available__position : int

axiom database__availability__account_link__available__first__bit_axiom :
  (0 <= database__availability__account_link__available__first__bit)

axiom database__availability__account_link__available__last__bit_axiom :
  (database__availability__account_link__available__first__bit <  database__availability__account_link__available__last__bit)

axiom database__availability__account_link__available__position_axiom :
  (0 <= database__availability__account_link__available__position)

logic database__availability__account_link__prev__first__bit : int

logic database__availability__account_link__prev__last__bit : int

logic database__availability__account_link__prev__position : int

axiom database__availability__account_link__prev__first__bit_axiom :
  (0 <= database__availability__account_link__prev__first__bit)

axiom database__availability__account_link__prev__last__bit_axiom :
  (database__availability__account_link__prev__first__bit <  database__availability__account_link__prev__last__bit)

axiom database__availability__account_link__prev__position_axiom :
  (0 <= database__availability__account_link__prev__position)

logic database__availability__account_link__next__first__bit : int

logic database__availability__account_link__next__last__bit : int

logic database__availability__account_link__next__position : int

axiom database__availability__account_link__next__first__bit_axiom :
  (0 <= database__availability__account_link__next__first__bit)

axiom database__availability__account_link__next__last__bit_axiom :
  (database__availability__account_link__next__first__bit <  database__availability__account_link__next__last__bit)

axiom database__availability__account_link__next__position_axiom :
  (0 <= database__availability__account_link__next__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type account_link__ref = { account_link__content : us_rep
}

function account_link__ref_account_link__content__projection(a: account_link__ref) : us_rep =
  (a).account_link__content

type map__ref1 = { map__content1 : (int,us_rep) farray
}

logic slide1 : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq1 :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq5(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq4((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq4((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic existing : int, (int,us_rep) farray -> bool

logic existing__function_guard : bool, int, (int,us_rep) farray -> prop

logic is_available : int, (int,us_rep) farray -> bool

logic is_available__function_guard : bool, int, (int,us_rep) farray -> prop

type account_num

logic account_numqtint : account_num -> int

axiom account_numqtaxiom : (forall i:account_num. (1 <= account_numqtint(i)))

axiom account_numqtaxiom1 :
  (forall i:account_num. (account_numqtint(i) <= 200000))

predicate in_range3(x: int) = ((1 <= x) and (x <= 200000))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : account_num, account_num -> bool

logic dummy3 : account_num

type account_num__ref = { account_num__content : account_num
}

function account_num__ref_account_num__content__projection(a: account_num__ref) : account_num =
  (a).account_num__content

predicate dynamic_invariant(temp___expr_189: int, temp___is_init_185: bool,
  temp___skip_constant_186: bool, temp___do_toplevel_187: bool,
  temp___do_typ_inv_188: bool) = (((temp___is_init_185 = true) or
  (1 <= 200000)) -> in_range3(temp___expr_189))

axiom existing__def_axiom :
  (forall account:int.
  forall database__availability__links:(int,us_rep) farray.
  is_available__function_guard(is_available(account,
  database__availability__links), account, database__availability__links))

axiom existing__def_axiom1 :
  (forall account:int.
  (forall database__availability__links:(int,us_rep) farray
  [existing(account, database__availability__links)]. ((existing(account,
  database__availability__links) = true) -> (not (is_available(account,
  database__availability__links) = true)))))

axiom existing__def_axiom2 :
  (forall account:int.
  (forall database__availability__links:(int,us_rep) farray
  [existing(account, database__availability__links)].
  ((not (is_available(account, database__availability__links) = true)) ->
  (existing(account, database__availability__links) = true))))

logic no_name : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

type num

logic numqtint : num -> int

axiom numqtaxiom : (forall i:num. (0 <= numqtint(i)))

axiom numqtaxiom1 : (forall i:num. (numqtint(i) <= 999))

predicate in_range4(x: int) = ((0 <= x) and (x <= 999))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : num, num -> bool

logic dummy4 : num

type num__ref = { num__content : num
}

function num__ref_num__content__projection(a: num__ref) : num =
  (a).num__content

function to_rep2(x: num) : int = numqtint(x)

logic of_rep2 : int -> num

axiom inversion_axiom2 :
  (forall x:num [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:num [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref2 = { map__content2 : (int,num) farray
}

logic slide2 : (int,num) farray, int, int -> (int,num) farray

axiom slide_eq2 :
  (forall a:(int,num) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,num) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq8(a: (int,num) farray, a__first: int, a__last: int,
  b: (int,num) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) ->
  (to_rep2((a[temp___idx_157])) = to_rep2((b[((b__first - a__first) + temp___idx_157)])))))) then true else false)

axiom bool_eq_rev8 :
  (forall a:(int,num) farray. forall b:(int,num) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev9 :
  (forall a:(int,num) farray. forall b:(int,num) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev10 :
  (forall a:(int,num) farray. forall b:(int,num) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev11 :
  (forall a:(int,num) farray. forall b:(int,num) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) ->
  (to_rep2((a[temp___idx_157])) = to_rep2((b[((b__first - a__first) + temp___idx_157)]))))))))

logic no_id : (int,num) farray

logic attr__ATTRIBUTE_ADDRESS2 : int

logic dummy5 : (int,character) farray

logic value__size1 : int

logic object__size1 : int

logic component__size : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq5 : (int,character) farray, (int,character) farray -> bool

logic dummy6 : (int,num) farray

logic value__size2 : int

logic object__size2 : int

logic component__size1 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom2 : (0 <= alignment2)

logic user_eq6 : (int,num) farray, (int,num) farray -> bool

type us_split_fields2 = { rec__database__account_rec__owner_name :
(int,character) farray; rec__database__account_rec__owner_id :
(int,num) farray; rec__database__account_rec__account : ext_account_num
}

function us_split_fields_rec__database__account_rec__owner_name__projection(a: us_split_fields2) : (int,character) farray =
  (a).rec__database__account_rec__owner_name

function us_split_fields_rec__database__account_rec__owner_id__projection(a: us_split_fields2) : (int,num) farray =
  (a).rec__database__account_rec__owner_id

function us_split_fields_rec__database__account_rec__account__projection(a: us_split_fields2) : ext_account_num =
  (a).rec__database__account_rec__account

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq9(a: us_rep1, b: us_rep1) : bool =
  (if (((bool_eq1(((a).us_split_fields3).rec__database__account_rec__owner_name,
  1, 255, ((b).us_split_fields3).rec__database__account_rec__owner_name, 1,
  255) = true) and
  (bool_eq8(((a).us_split_fields3).rec__database__account_rec__owner_id, 0,
  2, ((b).us_split_fields3).rec__database__account_rec__owner_id, 0,
  2) = true)) and
  (to_rep1(((a).us_split_fields3).rec__database__account_rec__account) = to_rep1(((b).us_split_fields3).rec__database__account_rec__account))) then true else false)

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic database__account_rec__owner_name__first__bit : int

logic database__account_rec__owner_name__last__bit : int

logic database__account_rec__owner_name__position : int

axiom database__account_rec__owner_name__first__bit_axiom :
  (0 <= database__account_rec__owner_name__first__bit)

axiom database__account_rec__owner_name__last__bit_axiom :
  (database__account_rec__owner_name__first__bit <  database__account_rec__owner_name__last__bit)

axiom database__account_rec__owner_name__position_axiom :
  (0 <= database__account_rec__owner_name__position)

logic database__account_rec__owner_id__first__bit : int

logic database__account_rec__owner_id__last__bit : int

logic database__account_rec__owner_id__position : int

axiom database__account_rec__owner_id__first__bit_axiom :
  (0 <= database__account_rec__owner_id__first__bit)

axiom database__account_rec__owner_id__last__bit_axiom :
  (database__account_rec__owner_id__first__bit <  database__account_rec__owner_id__last__bit)

axiom database__account_rec__owner_id__position_axiom :
  (0 <= database__account_rec__owner_id__position)

logic database__account_rec__account__first__bit : int

logic database__account_rec__account__last__bit : int

logic database__account_rec__account__position : int

axiom database__account_rec__account__first__bit_axiom :
  (0 <= database__account_rec__account__first__bit)

axiom database__account_rec__account__last__bit_axiom :
  (database__account_rec__account__first__bit <  database__account_rec__account__last__bit)

axiom database__account_rec__account__position_axiom :
  (0 <= database__account_rec__account__position)

logic user_eq7 : us_rep1, us_rep1 -> bool

logic dummy7 : us_rep1

type account_rec__ref = { account_rec__content : us_rep1
}

function account_rec__ref_account_rec__content__projection(a: account_rec__ref) : us_rep1 =
  (a).account_rec__content

logic no_account_rec : us_rep1

logic attr__ATTRIBUTE_ADDRESS3 : int

type map__ref3 = { map__content3 : (int,us_rep1) farray
}

logic slide3 : (int,us_rep1) farray, int, int -> (int,us_rep1) farray

axiom slide_eq3 :
  (forall a:(int,us_rep1) farray.
  (forall first:int [slide3(a, first, first)]. (slide3(a, first, first) = a)))

axiom slide_def3 :
  (forall a:(int,us_rep1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq10(a: (int,us_rep1) farray, a__first: int, a__last: int,
  b: (int,us_rep1) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_158:int. (((a__first <= temp___idx_158) and
  (temp___idx_158 <= a__last)) -> (bool_eq9((a[temp___idx_158]),
  (b[((b__first - a__first) + temp___idx_158)])) = true)))) then true else false)

axiom bool_eq_rev12 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq10(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev13 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq10(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev14 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq10(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev15 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq10(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_158:int. (((a__first <= temp___idx_158) and
  (temp___idx_158 <= a__last)) -> (bool_eq9((a[temp___idx_158]),
  (b[((b__first - a__first) + temp___idx_158)])) = true))))))

logic attr__ATTRIBUTE_ADDRESS4 : int

logic belongs_to : int, (int,character) farray, (int,num) farray,
  (int,us_rep1) farray -> bool

logic belongs_to__function_guard : bool, int, (int,character) farray,
  (int,num) farray, (int,us_rep1) farray -> prop

axiom belongs_to__def_axiom :
  (forall account:int.
  (forall customer:(int,character) farray.
  (forall id:(int,num) farray.
  (forall database__accounts:(int,us_rep1) farray [belongs_to(account,
  customer, id, database__accounts)]. ((belongs_to(account, customer, id,
  database__accounts) = true) -> (bool_eq9((database__accounts[account]), {
  us_split_fields3 = { rec__database__account_rec__owner_name = customer;
  rec__database__account_rec__owner_id = id;
  rec__database__account_rec__account = of_rep1(account) } }) = true))))))

axiom belongs_to__def_axiom1 :
  (forall account:int.
  (forall customer:(int,character) farray.
  (forall id:(int,num) farray.
  (forall database__accounts:(int,us_rep1) farray [belongs_to(account,
  customer, id, database__accounts)].
  ((bool_eq9((database__accounts[account]), { us_split_fields3 = {
  rec__database__account_rec__owner_name = customer;
  rec__database__account_rec__owner_id = id;
  rec__database__account_rec__account = of_rep1(account) } }) = true) ->
  (belongs_to(account, customer, id, database__accounts) = true))))))

logic attr__ATTRIBUTE_ADDRESS5 : int

type cur

predicate in_range5(x: int) = ((0 <= x) and (x <= 6))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq8 : cur, cur -> bool

logic dummy8 : cur

type cur__ref = { cur__content : cur
}

function cur__ref_cur__content__projection(a: cur__ref) : cur =
  (a).cur__content

logic to_rep3 : cur -> int

logic of_rep3 : int -> cur

axiom inversion_axiom3 :
  (forall x:cur [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:cur [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

type raw_amount

logic raw_amountqtint : raw_amount -> int

axiom raw_amountqtaxiom : (forall i:raw_amount. (0 <= raw_amountqtint(i)))

axiom raw_amountqtaxiom1 :
  (forall i:raw_amount. (raw_amountqtint(i) <= 1000000))

predicate in_range6(x: int) = ((0 <= x) and (x <= 1000000))

function bool_eq12(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq9 : raw_amount, raw_amount -> bool

logic dummy9 : raw_amount

type raw_amount__ref = { raw_amount__content : raw_amount
}

function raw_amount__ref_raw_amount__content__projection(a: raw_amount__ref) : raw_amount =
  (a).raw_amount__content

function to_rep4(x: raw_amount) : int = raw_amountqtint(x)

logic of_rep4 : int -> raw_amount

axiom inversion_axiom4 :
  (forall x:raw_amount [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:raw_amount [to_rep4(x)]. in_range6(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range6(x) ->
  (to_rep4(of_rep4(x)) = x)))

type us_split_fields4 = { rec__money__amount__currency : cur;
rec__money__amount__raw : raw_amount
}

function us_split_fields_rec__money__amount__currency__projection(a: us_split_fields4) : cur =
  (a).rec__money__amount__currency

function us_split_fields_rec__money__amount__raw__projection(a: us_split_fields4) : raw_amount =
  (a).rec__money__amount__raw

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___split_fields__3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function bool_eq13(a: us_rep2, b: us_rep2) : bool =
  (if ((to_rep3(((a).us_split_fields5).rec__money__amount__currency) = to_rep3(((b).us_split_fields5).rec__money__amount__currency)) and
  (to_rep4(((a).us_split_fields5).rec__money__amount__raw) = to_rep4(((b).us_split_fields5).rec__money__amount__raw))) then true else false)

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic money__amount__currency__first__bit : int

logic money__amount__currency__last__bit : int

logic money__amount__currency__position : int

axiom money__amount__currency__first__bit_axiom :
  (0 <= money__amount__currency__first__bit)

axiom money__amount__currency__last__bit_axiom :
  (money__amount__currency__first__bit <  money__amount__currency__last__bit)

axiom money__amount__currency__position_axiom :
  (0 <= money__amount__currency__position)

logic money__amount__raw__first__bit : int

logic money__amount__raw__last__bit : int

logic money__amount__raw__position : int

axiom money__amount__raw__first__bit_axiom :
  (0 <= money__amount__raw__first__bit)

axiom money__amount__raw__last__bit_axiom :
  (money__amount__raw__first__bit <  money__amount__raw__last__bit)

axiom money__amount__raw__position_axiom :
  (0 <= money__amount__raw__position)

logic user_eq10 : us_rep2, us_rep2 -> bool

logic dummy10 : us_rep2

type amount__ref = { amount__content : us_rep2
}

function amount__ref_amount__content__projection(a: amount__ref) : us_rep2 =
  (a).amount__content

type us_split_fields6 = { rec__database__account_balance__value : us_rep2;
rec__database__account_balance__account : ext_account_num
}

function us_split_fields_rec__database__account_balance__value__projection(a: us_split_fields6) : us_rep2 =
  (a).rec__database__account_balance__value

function us_split_fields_rec__database__account_balance__account__projection(a: us_split_fields6) : ext_account_num =
  (a).rec__database__account_balance__account

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___split_fields__content__4__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_fields7 : us_split_fields6
}

function us_rep___split_fields__4__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

function bool_eq14(a: us_rep3, b: us_rep3) : bool =
  (if ((bool_eq13(((a).us_split_fields7).rec__database__account_balance__value,
  ((b).us_split_fields7).rec__database__account_balance__value) = true) and
  (to_rep1(((a).us_split_fields7).rec__database__account_balance__account) = to_rep1(((b).us_split_fields7).rec__database__account_balance__account))) then true else false)

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic database__account_balance__value__first__bit : int

logic database__account_balance__value__last__bit : int

logic database__account_balance__value__position : int

axiom database__account_balance__value__first__bit_axiom :
  (0 <= database__account_balance__value__first__bit)

axiom database__account_balance__value__last__bit_axiom :
  (database__account_balance__value__first__bit <  database__account_balance__value__last__bit)

axiom database__account_balance__value__position_axiom :
  (0 <= database__account_balance__value__position)

logic database__account_balance__account__first__bit : int

logic database__account_balance__account__last__bit : int

logic database__account_balance__account__position : int

axiom database__account_balance__account__first__bit_axiom :
  (0 <= database__account_balance__account__first__bit)

axiom database__account_balance__account__last__bit_axiom :
  (database__account_balance__account__first__bit <  database__account_balance__account__last__bit)

axiom database__account_balance__account__position_axiom :
  (0 <= database__account_balance__account__position)

logic user_eq11 : us_rep3, us_rep3 -> bool

logic dummy11 : us_rep3

type account_balance__ref = { account_balance__content : us_rep3
}

function account_balance__ref_account_balance__content__projection(a: account_balance__ref) : us_rep3 =
  (a).account_balance__content

type map__ref4 = { map__content4 : (int,us_rep3) farray
}

logic slide4 : (int,us_rep3) farray, int, int -> (int,us_rep3) farray

axiom slide_eq4 :
  (forall a:(int,us_rep3) farray.
  (forall first:int [slide4(a, first, first)]. (slide4(a, first, first) = a)))

axiom slide_def4 :
  (forall a:(int,us_rep3) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide4(a, old_first, new_first)[i])]. ((slide4(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq15(a: (int,us_rep3) farray, a__first: int, a__last: int,
  b: (int,us_rep3) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_171:int. (((a__first <= temp___idx_171) and
  (temp___idx_171 <= a__last)) -> (bool_eq14((a[temp___idx_171]),
  (b[((b__first - a__first) + temp___idx_171)])) = true)))) then true else false)

axiom bool_eq_rev16 :
  (forall a:(int,us_rep3) farray. forall b:(int,us_rep3) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq15(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev17 :
  (forall a:(int,us_rep3) farray. forall b:(int,us_rep3) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq15(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev18 :
  (forall a:(int,us_rep3) farray. forall b:(int,us_rep3) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq15(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev19 :
  (forall a:(int,us_rep3) farray. forall b:(int,us_rep3) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq15(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_171:int. (((a__first <= temp___idx_171) and
  (temp___idx_171 <= a__last)) -> (bool_eq14((a[temp___idx_171]),
  (b[((b__first - a__first) + temp___idx_171)])) = true))))))

logic attr__ATTRIBUTE_ADDRESS6 : int

logic balance : int, (int,us_rep3) farray, (int,us_rep) farray -> us_rep2

logic balance__function_guard : us_rep2, int, (int,us_rep3) farray,
  (int,us_rep) farray -> prop

axiom balance__post_axiom :
  (forall account:int.
  forall database__availability__links:(int,us_rep) farray.
  existing__function_guard(existing(account, database__availability__links),
  account, database__availability__links))

axiom balance__def_axiom :
  (forall account:int.
  (forall database__accounts_balance:(int,us_rep3) farray.
  (forall database__availability__links:(int,us_rep) farray [balance(account,
  database__accounts_balance, database__availability__links)].
  (dynamic_invariant(account, true, true, true, true) -> (balance(account,
  database__accounts_balance,
  database__availability__links) = (((database__accounts_balance[account])).us_split_fields7).rec__database__account_balance__value)))))

logic is_empty : us_rep2 -> bool

logic is_empty__function_guard : bool, us_rep2 -> prop

axiom is_empty__def_axiom :
  (forall a:us_rep2 [is_empty(a)]. ((is_empty(a) = true) ->
  (to_rep4(((a).us_split_fields5).rec__money__amount__raw) = 0)))

axiom is_empty__def_axiom1 :
  (forall a:us_rep2 [is_empty(a)].
  ((to_rep4(((a).us_split_fields5).rec__money__amount__raw) = 0) ->
  (is_empty(a) = true)))

logic customer : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS7 : int

logic id : (int,num) farray

logic attr__ATTRIBUTE_ADDRESS8 : int

logic account : int

logic attr__ATTRIBUTE_ADDRESS9 : int

predicate dynamic_invariant1(temp___expr_182: int, temp___is_init_178: bool,
  temp___skip_constant_179: bool, temp___do_toplevel_180: bool,
  temp___do_typ_inv_181: bool) = (((temp___is_init_178 = true) or
  (0 <= 200000)) -> in_range2(temp___expr_182))

type name_len

logic name_lenqtint : name_len -> int

axiom name_lenqtaxiom : (forall i:name_len. (1 <= name_lenqtint(i)))

axiom name_lenqtaxiom1 : (forall i:name_len. (name_lenqtint(i) <= 255))

predicate in_range7(x: int) = ((1 <= x) and (x <= 255))

function bool_eq16(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq12 : name_len, name_len -> bool

logic dummy12 : name_len

type name_len__ref = { name_len__content : name_len
}

function name_len__ref_name_len__content__projection(a: name_len__ref) : name_len =
  (a).name_len__content

type num_position

predicate in_range8(x: int) = ((0 <= x) and (x <= 2))

function bool_eq17(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq13 : num_position, num_position -> bool

logic dummy13 : num_position

type num_position__ref = { num_position__content : num_position
}

function num_position__ref_num_position__content__projection(a: num_position__ref) : num_position =
  (a).num_position__content

predicate dynamic_invariant2(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range(temp___expr_74))

axiom is_available__def_axiom :
  (forall account1:int.
  (forall database__availability__links:(int,us_rep) farray
  [is_available(account1, database__availability__links)].
  ((is_available(account1, database__availability__links) = true) ->
  ((((database__availability__links[account1])).us_split_fields1).rec__database__availability__account_link__available = true))))

axiom is_available__def_axiom1 :
  (forall account1:int.
  (forall database__availability__links:(int,us_rep) farray
  [is_available(account1, database__availability__links)].
  (((((database__availability__links[account1])).us_split_fields1).rec__database__availability__account_link__available = true) ->
  (is_available(account1, database__availability__links) = true))))

logic rliteral : ext_account_num

axiom rliteral_axiom : (ext_account_numqtint(rliteral) = 0)

axiom no_account_rec__def_axiom : (no_account_rec = { us_split_fields3 = {
  rec__database__account_rec__owner_name = no_name;
  rec__database__account_rec__owner_id = no_id;
  rec__database__account_rec__account = rliteral } })

predicate dynamic_invariant3(temp___expr_225: int, temp___is_init_221: bool,
  temp___skip_constant_222: bool, temp___do_toplevel_223: bool,
  temp___do_typ_inv_224: bool) = (((temp___is_init_221 = true) or
  (1 <= 255)) -> in_range7(temp___expr_225))

logic identity__no_name__aggregate_def : int -> (int,character) farray

axiom no_name__def_axiom : (no_name = identity__no_name__aggregate_def(32))

axiom def_axiom :
  (forall temp___160:int. (dynamic_invariant2(temp___160, true, true, true,
  true) ->
  (forall temp___161:int.
  (to_rep((identity__no_name__aggregate_def(temp___160)[temp___161])) = temp___160))))

predicate dynamic_invariant4(temp___expr_249: int, temp___is_init_245: bool,
  temp___skip_constant_246: bool, temp___do_toplevel_247: bool,
  temp___do_typ_inv_248: bool) = (((temp___is_init_245 = true) or
  (0 <= 999)) -> in_range4(temp___expr_249))

predicate dynamic_invariant5(temp___expr_242: int, temp___is_init_238: bool,
  temp___skip_constant_239: bool, temp___do_toplevel_240: bool,
  temp___do_typ_inv_241: bool) = (((temp___is_init_238 = true) or
  (0 <= 2)) -> in_range8(temp___expr_242))

logic identity__no_id__aggregate_def : int, int, int -> (int,num) farray

axiom no_id__def_axiom : (no_id = identity__no_id__aggregate_def(0, 0, 0))

logic rliteral1 : num

axiom rliteral_axiom1 : (numqtint(rliteral1) = 0)

axiom def_axiom1 :
  (forall temp___163:int. forall temp___164:int. forall temp___165:int.
  (((dynamic_invariant4(temp___163, true, true, true, true) and
  dynamic_invariant4(temp___164, true, true, true, true)) and
  dynamic_invariant4(temp___165, true, true, true, true)) ->
  ((identity__no_id__aggregate_def(temp___163, temp___164,
  temp___165)[0]) = rliteral1)))

axiom def_axiom2 :
  (forall temp___163:int. forall temp___164:int. forall temp___165:int.
  (((dynamic_invariant4(temp___163, true, true, true, true) and
  dynamic_invariant4(temp___164, true, true, true, true)) and
  dynamic_invariant4(temp___165, true, true, true, true)) ->
  ((identity__no_id__aggregate_def(temp___163, temp___164,
  temp___165)[1]) = rliteral1)))

axiom def_axiom3 :
  (forall temp___163:int. forall temp___164:int. forall temp___165:int.
  (((dynamic_invariant4(temp___163, true, true, true, true) and
  dynamic_invariant4(temp___164, true, true, true, true)) and
  dynamic_invariant4(temp___165, true, true, true, true)) ->
  ((identity__no_id__aggregate_def(temp___163, temp___164,
  temp___165)[2]) = rliteral1)))

predicate dynamic_invariant6(temp___expr_319: int, temp___is_init_315: bool,
  temp___skip_constant_316: bool, temp___do_toplevel_317: bool,
  temp___do_typ_inv_318: bool) = (((temp___is_init_315 = true) or
  (0 <= 6)) -> in_range5(temp___expr_319))

predicate dynamic_invariant7(temp___expr_326: int, temp___is_init_322: bool,
  temp___skip_constant_323: bool, temp___do_toplevel_324: bool,
  temp___do_typ_inv_325: bool) = (((temp___is_init_322 = true) or
  (0 <= 1000000)) -> in_range6(temp___expr_326))

 (* File "database.ads", line 81, characters 0-0 *)
goal defqtvc :
  (forall links:(int,us_rep) farray. forall accounts:(int,us_rep1) farray.
  forall first_available:int. (({ us_split_fields3 = {
  rec__database__account_rec__owner_name = no_name;
  rec__database__account_rec__owner_id = no_id;
  rec__database__account_rec__account = rliteral } } = no_account_rec) ->
  (dynamic_invariant1(first_available, true, false, true, true) ->
  (dynamic_invariant(account, true, false, true, true) ->
  (forall o:bool.
  ((forall links1:(int,us_rep) farray. forall o1:int.
   is_available__function_guard(is_available(o1, links1), o1, links1)) ->
  ((let o1 = account : int in (let o2 = existing(o1, links) : bool in
  ((existing__function_guard(o2, o1, links) and ((o2 = true) <->
  (not (is_available(o1, links) = true)))) and (if (o2 = true) then (let o3 =
  id : (int,num) farray in (let o4 = customer : (int,character) farray in
  (let o5 = account : int in ((o = belongs_to(o5, o4, o3, accounts)) and
  (belongs_to__function_guard(o, o5, o4, o3, accounts) and ((o = true) <->
  (bool_eq9((accounts[o5]), { us_split_fields3 = {
  rec__database__account_rec__owner_name = o4;
  rec__database__account_rec__owner_id = o3;
  rec__database__account_rec__account = of_rep1(o5) }
  }) = true))))))) else (o = false))))) -> (not (o = true)))))))))
