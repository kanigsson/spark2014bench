(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_invariant(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range2(temp___expr_46))

type us_split_fields = { rec__types_with_invariants__my_integer__sign : bool;
rec__types_with_invariants__my_integer__val : natural
}

function us_split_fields_rec__types_with_invariants__my_integer__sign__projection(a: us_split_fields) : bool =
  (a).rec__types_with_invariants__my_integer__sign

function us_split_fields_rec__types_with_invariants__my_integer__val__projection(a: us_split_fields) : natural =
  (a).rec__types_with_invariants__my_integer__val

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if ((to_int(((a).us_split_fields1).rec__types_with_invariants__my_integer__sign) = to_int(((b).us_split_fields1).rec__types_with_invariants__my_integer__sign)) and
  (to_rep(((a).us_split_fields1).rec__types_with_invariants__my_integer__val) = to_rep(((b).us_split_fields1).rec__types_with_invariants__my_integer__val))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic types_with_invariants__my_integer__sign__first__bit : int

logic types_with_invariants__my_integer__sign__last__bit : int

logic types_with_invariants__my_integer__sign__position : int

axiom types_with_invariants__my_integer__sign__first__bit_axiom :
  (0 <= types_with_invariants__my_integer__sign__first__bit)

axiom types_with_invariants__my_integer__sign__last__bit_axiom :
  (types_with_invariants__my_integer__sign__first__bit <  types_with_invariants__my_integer__sign__last__bit)

axiom types_with_invariants__my_integer__sign__position_axiom :
  (0 <= types_with_invariants__my_integer__sign__position)

logic types_with_invariants__my_integer__val__first__bit : int

logic types_with_invariants__my_integer__val__last__bit : int

logic types_with_invariants__my_integer__val__position : int

axiom types_with_invariants__my_integer__val__first__bit_axiom :
  (0 <= types_with_invariants__my_integer__val__first__bit)

axiom types_with_invariants__my_integer__val__last__bit_axiom :
  (types_with_invariants__my_integer__val__first__bit <  types_with_invariants__my_integer__val__last__bit)

axiom types_with_invariants__my_integer__val__position_axiom :
  (0 <= types_with_invariants__my_integer__val__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type my_integer__ref = { my_integer__content : us_rep
}

function my_integer__ref_my_integer__content__projection(a: my_integer__ref) : us_rep =
  (a).my_integer__content

logic to_integer : us_rep -> int

logic to_integer__function_guard : int, us_rep -> prop

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy3 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range3(temp___expr_18))

predicate default_initial_assumption(temp___expr_164: us_rep,
  temp___skip_top_level_165: bool) =
  ((((temp___expr_164).us_split_fields1).rec__types_with_invariants__my_integer__sign = of_int(1)) and
  (to_rep(((temp___expr_164).us_split_fields1).rec__types_with_invariants__my_integer__val) = 0))

predicate type_invariant(temp___166: us_rep) =
  ((to_rep(((temp___166).us_split_fields1).rec__types_with_invariants__my_integer__val) = 0) ->
  (((temp___166).us_split_fields1).rec__types_with_invariants__my_integer__sign = true))

axiom to_integer__post_axiom :
  (forall x:us_rep [to_integer(x)]. (let result = to_integer(x) : int in
  (to_integer__function_guard(result, x) -> dynamic_invariant1(result, true,
  false, true, true))))

axiom to_integer__def_axiom :
  (forall x:us_rep [to_integer(x)].
  (to_integer(x) = (if (((x).us_split_fields1).rec__types_with_invariants__my_integer__sign = true) then to_rep(((x).us_split_fields1).rec__types_with_invariants__my_integer__val) else (-to_rep(((x).us_split_fields1).rec__types_with_invariants__my_integer__val)))))

logic from_integer : int -> us_rep

logic from_integer__function_guard : us_rep, int -> prop

logic bool_eq5 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq5(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq5(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

axiom from_integer__def_axiom :
  (forall x:int [from_integer(x)]. (dynamic_invariant1(x, true, true, true,
  true) -> (from_integer(x) = { us_split_fields1 = {
  rec__types_with_invariants__my_integer__sign = bool_ge(x, 0);
  rec__types_with_invariants__my_integer__val = of_rep(abs_int(x)) } })))

logic i : int

logic attr__ATTRIBUTE_ADDRESS : int

logic e : us_rep

logic attr__ATTRIBUTE_ADDRESS1 : int

type int____ref = { int____content : us_rep
}

function int____ref_int____content__projection(a: int____ref) : us_rep =
  (a).int____content

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate default_initial_assumption1(temp___expr_256: us_rep,
  temp___skip_top_level_257: bool) =
  ((((temp___expr_256).us_split_fields1).rec__types_with_invariants__my_integer__sign = of_int(1)) and
  (to_rep(((temp___expr_256).us_split_fields1).rec__types_with_invariants__my_integer__val) = 0))

predicate dynamic_invariant2(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

 (* File "types_with_invariants.adb", line 8, characters 0-0 *)
goal defqtvc : (dynamic_invariant(i, true, false, true, true) ->
  (forall t__split_fields:us_split_fields.
  ((t__split_fields = (e).us_split_fields1) ->
  ((to_rep((t__split_fields).rec__types_with_invariants__my_integer__val) = to_rep(((e).us_split_fields1).rec__types_with_invariants__my_integer__val)) ->
  (forall o:int.
  ((to_rep(((e).us_split_fields1).rec__types_with_invariants__my_integer__val) = o) ->
  (((if (not (o = 0)) then true else ((e).us_split_fields1).rec__types_with_invariants__my_integer__sign) = true) ->
  (let o1 = e : us_rep in (let o2 = to_integer(o1) : int in
  ((to_integer__function_guard(o2, o1) and (dynamic_invariant1(o2, true,
  false, true, true) and
  (o2 = (if (((o1).us_split_fields1).rec__types_with_invariants__my_integer__sign = true) then to_rep(((o1).us_split_fields1).rec__types_with_invariants__my_integer__val) else (-to_rep(((o1).us_split_fields1).rec__types_with_invariants__my_integer__val)))))) ->
  ((- 2147483648) <  o2)))))))))))
