(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (div(x, y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((-abs_int(y)) <  mod(x,
  y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (mod(x, y) <  abs_int(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <  y) then (x % y) else ((x % y) + y))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_39))

logic v : int

logic attr__ATTRIBUTE_ADDRESS : int

logic m : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic d : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

type tuint_64B

logic tuint_64Bqtint : tuint_64B -> int

axiom tuint_64Bqtaxiom :
  (forall i:tuint_64B. ((- 9223372036854775808) <= tuint_64Bqtint(i)))

axiom tuint_64Bqtaxiom1 :
  (forall i:tuint_64B. (tuint_64Bqtint(i) <= 9223372036854775807))

predicate in_range1(x: int) = (((- 9223372036854775808) <= x) and
  (x <= 9223372036854775807))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : tuint_64B, tuint_64B -> bool

logic dummy1 : tuint_64B

type tuint_64B__ref = { tuint_64B__content : tuint_64B
}

function tuint_64B__ref_tuint_64B__content__projection(a: tuint_64B__ref) : tuint_64B =
  (a).tuint_64B__content

type uint_64

logic uint_64qtint : uint_64 -> int

axiom uint_64qtaxiom : (forall i:uint_64. (0 <= uint_64qtint(i)))

axiom uint_64qtaxiom1 :
  (forall i:uint_64. (uint_64qtint(i) <= 9223372036854775807))

predicate in_range2(x: int) = ((0 <= x) and (x <= 9223372036854775807))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : uint_64, uint_64 -> bool

logic dummy2 : uint_64

type uint_64__ref = { uint_64__content : uint_64
}

function uint_64__ref_uint_64__content__projection(a: uint_64__ref) : uint_64 =
  (a).uint_64__content

predicate dynamic_invariant1(temp___expr_159: int, temp___is_init_155: bool,
  temp___skip_constant_156: bool, temp___do_toplevel_157: bool,
  temp___do_typ_inv_158: bool) = (((temp___is_init_155 = true) or
  (0 <= 9223372036854775807)) -> in_range2(temp___expr_159))

axiom cdiv_cases :
  (forall n:int. forall d1:int [div(n, d1)]. ((0 <= n) -> ((0 <  d1) ->
  (div(n, d1) = (n / d1)))))

axiom cdiv_cases1 :
  (forall n:int. forall d1:int [div(n, d1)]. ((n <= 0) -> ((0 <  d1) ->
  (div(n, d1) = (-((-n) / d1))))))

axiom cdiv_cases2 :
  (forall n:int. forall d1:int [div(n, d1)]. ((0 <= n) -> ((d1 <  0) ->
  (div(n, d1) = (-(n / (-d1)))))))

axiom cdiv_cases3 :
  (forall n:int. forall d1:int [div(n, d1)]. ((n <= 0) -> ((d1 <  0) ->
  (div(n, d1) = ((-n) / (-d1))))))

axiom cmod_cases :
  (forall n:int. forall d1:int [mod(n, d1)]. ((0 <= n) -> ((0 <  d1) ->
  (mod(n, d1) = (n % d1)))))

axiom cmod_cases1 :
  (forall n:int. forall d1:int [mod(n, d1)]. ((n <= 0) -> ((0 <  d1) ->
  (mod(n, d1) = (-((-n) % d1))))))

axiom cmod_cases2 :
  (forall n:int. forall d1:int [mod(n, d1)]. ((0 <= n) -> ((d1 <  0) ->
  (mod(n, d1) = (n % (-d1))))))

axiom cmod_cases3 :
  (forall n:int. forall d1:int [mod(n, d1)]. ((n <= 0) -> ((d1 <  0) ->
  (mod(n, d1) = (-((-n) % (-d1)))))))

 (* File "pck.ads", line 4, characters 0-0 *)
goal defqtvc :
  (forall result_hi:int. forall result_lo:int. forall remainder:int.
  (dynamic_invariant1(v, true, false, true, true) -> (dynamic_invariant(m,
  true, false, true, true) -> (dynamic_invariant(d, true, false, true,
  true) -> ((not (d = 0)) -> (let o = div(v, 4294967296) : int in
  (in_range2(o) ->
  (forall v_hi:int. ((v_hi = o) -> (dynamic_invariant1(v_hi, true, false,
  true, true) -> (let o1 = mod(v, 4294967296) : int in (in_range2(o1) ->
  (forall v_lo:int. ((v_lo = o1) -> (dynamic_invariant1(v_lo, true, false,
  true, true) -> (dynamic_invariant1(result_hi, false, false, true, true) ->
  (dynamic_invariant1(result_lo, false, false, true, true) ->
  (dynamic_invariant1(remainder, false, false, true, true) -> (let o2 =
  (v_hi * m) : int in (in_range1(o2) -> (in_range2(o2) ->
  (forall v_hi1:int. ((v_hi1 = o2) -> (let o3 = (v_lo * m) : int in
  (in_range1(o3) -> (in_range2(o3) ->
  (forall v_lo1:int. ((v_lo1 = o3) -> (let o4 = (v_hi1 + div(v_lo1,
  4294967296)) : int in (in_range1(o4) ->
  (forall v_hi2:int. ((v_hi2 = o4) ->
  (forall v_lo2:int. ((v_lo2 = mod(v_lo1, 4294967296)) -> (let o5 =
  div(v_hi2, d) : int in (in_range2(o5) ->
  (forall result_hi1:int. ((result_hi1 = o5) ->
  ((result_hi1 <  2147483647) -> (let o6 = (result_hi1 * d) : int in
  (in_range1(o6) -> (let o7 = (v_hi2 - o6) : int in (in_range1(o7) ->
  (in_range2(o7) ->
  (forall remainder1:int. ((remainder1 = o7) -> (let o8 =
  (result_hi1 * 4294967296) : int in (in_range1(o8) -> (in_range2(o8) ->
  (forall result_hi2:int. ((result_hi2 = o8) -> (let o9 =
  (remainder1 * 4294967296) : int in (in_range1(o9) -> (let o10 =
  (v_lo2 + o9) : int in (in_range1(o10) -> (in_range1((o10 + div(d, 2))) ->
  (not (d = 0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
