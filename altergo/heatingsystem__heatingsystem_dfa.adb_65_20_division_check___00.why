(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (div(x, y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((-abs_int(y)) <  mod(x,
  y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (mod(x, y) <  abs_int(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <  y) then (x % y) else ((x % y) + y))

logic time : int

logic attr__ATTRIBUTE_ADDRESS : int

type displaydigits

logic displaydigitsqtint : displaydigits -> int

axiom displaydigitsqtaxiom :
  (forall i:displaydigits. (0 <= displaydigitsqtint(i)))

axiom displaydigitsqtaxiom1 :
  (forall i:displaydigits. (displaydigitsqtint(i) <= 9))

predicate in_range(x: int) = ((0 <= x) and (x <= 9))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : displaydigits, displaydigits -> bool

logic dummy : displaydigits

type displaydigits__ref = { displaydigits__content : displaydigits
}

function displaydigits__ref_displaydigits__content__projection(a: displaydigits__ref) : displaydigits =
  (a).displaydigits__content

function to_rep(x: displaydigits) : int = displaydigitsqtint(x)

logic of_rep : int -> displaydigits

axiom inversion_axiom :
  (forall x:displaydigits [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:displaydigits [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,displaydigits) farray
}

logic slide : (int,displaydigits) farray, int,
  int -> (int,displaydigits) farray

axiom slide_eq :
  (forall a:(int,displaydigits) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,displaydigits) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq1(a: (int,displaydigits) farray, a__first: int, a__last: int,
  b: (int,displaydigits) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,displaydigits) farray. forall b:(int,displaydigits) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,displaydigits) farray. forall b:(int,displaydigits) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,displaydigits) farray. forall b:(int,displaydigits) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,displaydigits) farray. forall b:(int,displaydigits) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)]))))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type times

logic timesqtint : times -> int

axiom timesqtaxiom : (forall i:times. (0 <= timesqtint(i)))

axiom timesqtaxiom1 : (forall i:times. (timesqtint(i) <= 86399))

predicate in_range1(x: int) = ((0 <= x) and (x <= 86399))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : times, times -> bool

logic dummy1 : times

type times__ref = { times__content : times
}

function times__ref_times__content__projection(a: times__ref) : times =
  (a).times__content

predicate dynamic_invariant(temp___expr_182: int, temp___is_init_178: bool,
  temp___skip_constant_179: bool, temp___do_toplevel_180: bool,
  temp___do_typ_inv_181: bool) = (((temp___is_init_178 = true) or
  (0 <= 86399)) -> in_range1(temp___expr_182))

type hours

logic hoursqtint : hours -> int

axiom hoursqtaxiom : (forall i:hours. (0 <= hoursqtint(i)))

axiom hoursqtaxiom1 : (forall i:hours. (hoursqtint(i) <= 23))

predicate in_range2(x: int) = ((0 <= x) and (x <= 23))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : hours, hours -> bool

logic dummy2 : hours

type hours__ref = { hours__content : hours
}

function hours__ref_hours__content__projection(a: hours__ref) : hours =
  (a).hours__content

predicate dynamic_invariant1(temp___expr_213: int, temp___is_init_209: bool,
  temp___skip_constant_210: bool, temp___do_toplevel_211: bool,
  temp___do_typ_inv_212: bool) = (((temp___is_init_209 = true) or
  (0 <= 23)) -> in_range2(temp___expr_213))

type minutes

logic minutesqtint : minutes -> int

axiom minutesqtaxiom : (forall i:minutes. (0 <= minutesqtint(i)))

axiom minutesqtaxiom1 : (forall i:minutes. (minutesqtint(i) <= 59))

predicate in_range3(x: int) = ((0 <= x) and (x <= 59))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : minutes, minutes -> bool

logic dummy3 : minutes

type minutes__ref = { minutes__content : minutes
}

function minutes__ref_minutes__content__projection(a: minutes__ref) : minutes =
  (a).minutes__content

predicate dynamic_invariant2(temp___expr_220: int, temp___is_init_216: bool,
  temp___skip_constant_217: bool, temp___do_toplevel_218: bool,
  temp___do_typ_inv_219: bool) = (((temp___is_init_216 = true) or
  (0 <= 59)) -> in_range3(temp___expr_220))

logic temp_____aggregate_def_275 : int, int, int,
  int -> (int,displaydigits) farray

predicate dynamic_invariant3(temp___expr_234: int, temp___is_init_230: bool,
  temp___skip_constant_231: bool, temp___do_toplevel_232: bool,
  temp___do_typ_inv_233: bool) = (((temp___is_init_230 = true) or
  (0 <= 9)) -> in_range(temp___expr_234))

axiom def_axiom :
  (forall temp___277:int. forall temp___278:int. forall temp___279:int.
  forall temp___280:int. (((dynamic_invariant3(temp___277, true, true, true,
  true) and dynamic_invariant3(temp___278, true, true, true, true)) and
  (dynamic_invariant3(temp___279, true, true, true, true) and
  dynamic_invariant3(temp___280, true, true, true, true))) ->
  (to_rep((temp_____aggregate_def_275(temp___277, temp___278, temp___279,
  temp___280)[0])) = temp___277)))

axiom def_axiom1 :
  (forall temp___277:int. forall temp___278:int. forall temp___279:int.
  forall temp___280:int. (((dynamic_invariant3(temp___277, true, true, true,
  true) and dynamic_invariant3(temp___278, true, true, true, true)) and
  (dynamic_invariant3(temp___279, true, true, true, true) and
  dynamic_invariant3(temp___280, true, true, true, true))) ->
  (to_rep((temp_____aggregate_def_275(temp___277, temp___278, temp___279,
  temp___280)[1])) = temp___278)))

axiom def_axiom2 :
  (forall temp___277:int. forall temp___278:int. forall temp___279:int.
  forall temp___280:int. (((dynamic_invariant3(temp___277, true, true, true,
  true) and dynamic_invariant3(temp___278, true, true, true, true)) and
  (dynamic_invariant3(temp___279, true, true, true, true) and
  dynamic_invariant3(temp___280, true, true, true, true))) ->
  (to_rep((temp_____aggregate_def_275(temp___277, temp___278, temp___279,
  temp___280)[2])) = temp___279)))

axiom def_axiom3 :
  (forall temp___277:int. forall temp___278:int. forall temp___279:int.
  forall temp___280:int. (((dynamic_invariant3(temp___277, true, true, true,
  true) and dynamic_invariant3(temp___278, true, true, true, true)) and
  (dynamic_invariant3(temp___279, true, true, true, true) and
  dynamic_invariant3(temp___280, true, true, true, true))) ->
  (to_rep((temp_____aggregate_def_275(temp___277, temp___278, temp___279,
  temp___280)[3])) = temp___280)))

axiom cdiv_cases :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((0 <  d) -> (div(n,
  d) = (n / d)))))

axiom cdiv_cases1 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((0 <  d) -> (div(n,
  d) = (-((-n) / d))))))

axiom cdiv_cases2 :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((d <  0) -> (div(n,
  d) = (-(n / (-d)))))))

axiom cdiv_cases3 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((d <  0) -> (div(n,
  d) = ((-n) / (-d))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))))

axiom cmod_cases1 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))))

axiom cmod_cases2 :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))))

axiom cmod_cases3 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d)))))))

 (* File "heatingsystem_dfa.adb", line 54, characters 0-0 *)
goal defqtvc :
  (forall hour:int. forall minute:int. (dynamic_invariant(time, true, false,
  true, true) -> (dynamic_invariant1(hour, false, false, true, true) ->
  (dynamic_invariant2(minute, false, false, true, true) ->
  (not (3600 = 0))))))
