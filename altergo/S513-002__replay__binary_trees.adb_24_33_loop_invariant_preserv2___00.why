(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq1 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type set__ref = { set__content : us_rep
}

function set__ref_set__content__projection(a: set__ref) : us_rep =
  (a).set__content

logic contains : us_rep, int -> bool

logic contains__function_guard : bool, us_rep, int -> prop

type element_type

logic element_typeqtint : element_type -> int

axiom element_typeqtaxiom :
  (forall i:element_type. (1 <= element_typeqtint(i)))

axiom element_typeqtaxiom1 :
  (forall i:element_type. (element_typeqtint(i) <= 100))

predicate in_range1(x: int) = ((1 <= x) and (x <= 100))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : element_type, element_type -> bool

logic dummy1 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_element_type__content__projection(a: element_type__ref) : element_type =
  (a).element_type__content

predicate dynamic_invariant(temp___expr_301: int, temp___is_init_297: bool,
  temp___skip_constant_298: bool, temp___do_toplevel_299: bool,
  temp___do_typ_inv_300: bool) = (((temp___is_init_297 = true) or
  (1 <= 100)) -> in_range1(temp___expr_301))

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq(a, b)]. (user_eq(a, b) = oeq(a,
  b)))

predicate default_initial_assumption(temp___expr_309: us_rep,
  temp___skip_top_level_310: bool) =
  ((not (temp___skip_top_level_310 = true)) ->
  (is_empty(temp___expr_309) = true))

axiom contains__post_axiom :
  (forall container:us_rep.
  (forall item:int [contains(container, item)]. (dynamic_invariant(item,
  true, true, true, true) -> ((of_int(1) = true) ->
  ((exists e:int. ((in_range1(e) and (contains(container, e) = true)) and
   (e = item))) ->
  (contains(container, item) = true))))))

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : count_type, count_type -> bool

logic dummy2 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

predicate dynamic_invariant1(temp___expr_189: int, temp___is_init_185: bool,
  temp___skip_constant_186: bool, temp___do_toplevel_187: bool,
  temp___do_typ_inv_188: bool) = (((temp___is_init_185 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_189))

axiom length__post_axiom :
  (forall container:us_rep [length(container)].
  dynamic_invariant1(length(container), true, false, true, true))

logic ole : us_rep, us_rep -> bool

logic ole__function_guard : bool, us_rep, us_rep -> prop

logic included_except : us_rep, us_rep, int -> bool

logic included_except__function_guard : bool, us_rep, us_rep, int -> prop

logic add : us_rep, int -> us_rep

logic add__function_guard : us_rep, us_rep, int -> prop

axiom add__post_axiom :
  (forall container:us_rep.
  (forall item:int [add(container, item)]. ((dynamic_invariant(item, true,
  true, true, true) and ((not (contains(container, item) = true)) and
  (length(container) <  2147483647))) -> (length(add(container,
  item)) = (length(container) + 1)))))

axiom add__post_axiom1 :
  (forall container:us_rep.
  (forall item:int [add(container, item)]. ((dynamic_invariant(item, true,
  true, true, true) and ((not (contains(container, item) = true)) and
  (length(container) <  2147483647))) -> (contains(add(container, item),
  item) = true))))

axiom add__post_axiom2 :
  (forall container:us_rep.
  (forall item:int [add(container, item)]. ((dynamic_invariant(item, true,
  true, true, true) and ((not (contains(container, item) = true)) and
  (length(container) <  2147483647))) -> (ole(container, add(container,
  item)) = true))))

axiom add__post_axiom3 :
  (forall container:us_rep.
  (forall item:int [add(container, item)]. ((dynamic_invariant(item, true,
  true, true, true) and ((not (contains(container, item) = true)) and
  (length(container) <  2147483647))) -> (included_except(add(container,
  item), container, item) = true))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type index_type

logic index_typeqtint : index_type -> int

axiom index_typeqtaxiom : (forall i:index_type. (1 <= index_typeqtint(i)))

axiom index_typeqtaxiom1 : (forall i:index_type. (index_typeqtint(i) <= 100))

predicate in_range3(x: int) = ((1 <= x) and (x <= 100))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : index_type, index_type -> bool

logic dummy3 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref_index_type__content__projection(a: index_type__ref) : index_type =
  (a).index_type__content

predicate dynamic_invariant2(temp___expr_196: int, temp___is_init_192: bool,
  temp___skip_constant_193: bool, temp___do_toplevel_194: bool,
  temp___do_typ_inv_195: bool) = (((temp___is_init_192 = true) or
  (1 <= 100)) -> in_range3(temp___expr_196))

axiom ole__post_axiom :
  (forall left:us_rep. forall right:us_rep [ole(left, right)]. ((ole(left,
  right) = true) ->
  (forall item:int. ((in_range1(item) and (contains(left, item) = true)) ->
  (contains(right, item) = true)))))

axiom ole__post_axiom1 :
  (forall left:us_rep. forall right:us_rep [ole(left, right)].
  ((forall item:int. ((in_range1(item) and (contains(left, item) = true)) ->
   (contains(right, item) = true))) ->
  (ole(left, right) = true)))

axiom oeq__post_axiom :
  (forall left:us_rep. forall right:us_rep [oeq(left, right)]. ((oeq(left,
  right) = true) -> (ole(left, right) = true)))

axiom oeq__post_axiom1 :
  (forall left:us_rep. forall right:us_rep [oeq(left, right)]. ((oeq(left,
  right) = true) -> (ole(right, left) = true)))

axiom oeq__post_axiom2 :
  (forall left:us_rep. forall right:us_rep [oeq(left, right)]. (((ole(left,
  right) = true) and (ole(right, left) = true)) -> (oeq(left,
  right) = true)))

axiom is_empty__post_axiom :
  (forall container:us_rep [is_empty(container)].
  ((is_empty(container) = true) ->
  (forall item:int. (not (in_range1(item) and (contains(container,
  item) = true))))))

axiom is_empty__post_axiom1 :
  (forall container:us_rep [is_empty(container)].
  ((forall item:int. (not (in_range1(item) and (contains(container,
   item) = true)))) ->
  (is_empty(container) = true)))

axiom is_empty__post_axiom2 :
  (forall container:us_rep [is_empty(container)].
  ((is_empty(container) = true) -> (length(container) = 0)))

axiom is_empty__post_axiom3 :
  (forall container:us_rep [is_empty(container)]. ((length(container) = 0) ->
  (is_empty(container) = true)))

axiom included_except__post_axiom :
  (forall left:us_rep. forall right:us_rep.
  (forall item:int [included_except(left, right, item)].
  (dynamic_invariant(item, true, true, true, true) -> ((included_except(left,
  right, item) = true) ->
  (forall e:int. ((in_range1(e) and (contains(left, e) = true)) ->
  ((contains(right, e) = true) or (e = item))))))))

axiom included_except__post_axiom1 :
  (forall left:us_rep. forall right:us_rep.
  (forall item:int [included_except(left, right, item)].
  (dynamic_invariant(item, true, true, true, true) ->
  ((forall e:int. ((in_range1(e) and (contains(left, e) = true)) ->
   ((contains(right, e) = true) or (e = item)))) ->
  (included_except(left, right, item) = true)))))

 (* File "binary_trees.adb", line 10, characters 0-0 *)
goal defqtvc :
  (forall s:us_rep. (default_initial_assumption(s, false) ->
  (forall i:int. ((i = 1) -> ((andb((if (1 <= i) then true else false),
  (if (i <= 100) then true else false)) = true) ->
  (dynamic_invariant1(length(s), true, false, true, true) ->
  (forall s1:us_rep. forall i1:int. (((length(s1) = (i1 - 1)) and
  ((forall j:int. (((1 <= j) and (j <= (i1 - 1))) -> (contains(s1,
   j) = true))) and
  (forall j:int. ((in_range1(j) and (contains(s1, j) = true)) -> (j <  i1))))) ->
  ((andb((if in_range3(i1) then true else false), (if ((1 <= i1) and
  (i1 <= 100)) then true else false)) = true) -> (let o = add(s1, i1)
  : us_rep in (((((length(o) = (length(s1) + 1)) and (contains(o,
  i1) = true)) and (ole(s1, o) = true)) and (included_except(o, s1,
  i1) = true)) ->
  (forall s2:us_rep. ((s2 = o) -> ((not (i1 = 100)) ->
  (forall i2:int. ((i2 = (i1 + 1)) -> (dynamic_invariant1(length(s2), true,
  false, true, true) -> (length(s2) = (i2 - 1)))))))))))))))))))
