(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq2 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type sequence__ref = { sequence__content : us_rep
}

function sequence__ref_sequence__content__2__projection(a: sequence__ref) : us_rep =
  (a).sequence__content

logic get : us_rep, int -> int

logic get__function_guard : int, us_rep, int -> prop

type element_type

logic element_typeqtint : element_type -> int

axiom element_typeqtaxiom :
  (forall i:element_type. ((- 2147483648) <= element_typeqtint(i)))

axiom element_typeqtaxiom1 :
  (forall i:element_type. (element_typeqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : element_type, element_type -> bool

logic dummy2 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_element_type__content__10__projection(a: element_type__ref) : element_type =
  (a).element_type__content

predicate dynamic_invariant(temp___expr_593: int, temp___is_init_589: bool,
  temp___skip_constant_590: bool, temp___do_toplevel_591: bool,
  temp___do_typ_inv_592: bool) = (((temp___is_init_589 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range2(temp___expr_593))

axiom get__post_axiom :
  (forall s:us_rep. (forall n:int [get(s, n)]. in_range2(get(s, n))))

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

predicate dynamic_invariant1(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

axiom length__post_axiom :
  (forall s:us_rep [length(s)]. in_range1(length(s)))

logic s1 : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic s2 : us_rep

logic attr__ATTRIBUTE_ADDRESS1 : int

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep. oeq__function_guard(oeq(a, b), a, b))

axiom user_eq__def_axiom1 :
  (forall a:us_rep. forall b:us_rep [user_eq1(a, b)]. (user_eq1(a,
  b) = oeq(a, b)))

axiom oeq__def_axiom :
  (forall s11:us_rep. length__function_guard(length(s11), s11))

axiom oeq__def_axiom1 :
  (forall s21:us_rep. length__function_guard(length(s21), s21))

axiom oeq__def_axiom2 :
  (forall s11:us_rep. length__function_guard(length(s11), s11))

axiom oeq__def_axiom3 :
  (forall s11:us_rep. forall n:int. get__function_guard(get(s11, n), s11, n))

axiom oeq__def_axiom4 :
  (forall s21:us_rep. forall n:int. get__function_guard(get(s21, n), s21, n))

axiom oeq__def_axiom5 :
  (forall s11:us_rep. forall s21:us_rep [oeq(s11, s21)]. ((oeq(s11,
  s21) = true) -> (length(s11) = length(s21))))

axiom oeq__def_axiom6 :
  (forall s11:us_rep. forall s21:us_rep [oeq(s11, s21)]. ((oeq(s11,
  s21) = true) ->
  (forall n:int. (((0 <= n) and (n <= (length(s11) - 1))) -> (get(s11,
  n) = get(s21, n))))))

axiom oeq__def_axiom7 :
  (forall s11:us_rep. forall s21:us_rep [oeq(s11, s21)].
  (((length(s11) = length(s21)) and
  (forall n:int. (((0 <= n) and (n <= (length(s11) - 1))) -> (get(s11,
  n) = get(s21, n))))) -> (oeq(s11, s21) = true)))

 (* File "functional_sequences.ads", line 14, characters 0-0 *)
goal defqtvc : (let o = s2 : us_rep in (let o1 = length(o) : int in
  ((length__function_guard(o1, o) and dynamic_invariant1(o1, true, false,
  true, true)) -> (let o2 = s1 : us_rep in (let o3 = length(o2) : int in
  ((length__function_guard(o3, o2) and dynamic_invariant1(o3, true, false,
  true, true)) -> ((o3 = o1) -> (let o4 = s1 : us_rep in (let o5 = length(o4)
  : int in ((length__function_guard(o5, o4) and dynamic_invariant1(o5, true,
  false, true, true)) -> in_range1((o5 - 1))))))))))))
