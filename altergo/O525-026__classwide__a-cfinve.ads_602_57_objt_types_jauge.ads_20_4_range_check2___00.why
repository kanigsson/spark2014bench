(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type capacity_range

logic capacity_rangeqtint : capacity_range -> int

axiom capacity_rangeqtaxiom :
  (forall i:capacity_range. (0 <= capacity_rangeqtint(i)))

axiom capacity_rangeqtaxiom1 :
  (forall i:capacity_range. (capacity_rangeqtint(i) <= 4))

predicate in_range1(x: int) = ((0 <= x) and (x <= 4))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : capacity_range, capacity_range -> bool

logic dummy : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref_capacity_range__content__projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = {
rec__objt_types_jauge__objt_liste_jauge__vector__capacity : capacity_range
}

function us_split_discrs_rec__objt_types_jauge__objt_liste_jauge__vector__capacity__projection(a: us_split_discrs) : capacity_range =
  (a).rec__objt_types_jauge__objt_liste_jauge__vector__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__objt_types_jauge__objt_liste_jauge__vector :
us_main_type
}

function us_split_fields_rec__objt_types_jauge__objt_liste_jauge__vector__projection(a: us_split_fields) : us_main_type =
  (a).rec__objt_types_jauge__objt_liste_jauge__vector

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function to_rep(x: capacity_range) : int = capacity_rangeqtint(x)

logic of_rep : int -> capacity_range

axiom inversion_axiom :
  (forall x:capacity_range [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:capacity_range [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

predicate in_range2(rec__objt_types_jauge__objt_liste_jauge__vector__capacity1: int,
  a: us_split_discrs) =
  (rec__objt_types_jauge__objt_liste_jauge__vector__capacity1 = to_rep((a).rec__objt_types_jauge__objt_liste_jauge__vector__capacity))

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic objt_types_jauge__objt_liste_jauge__vector__capacity__first__bit : int

logic objt_types_jauge__objt_liste_jauge__vector__capacity__last__bit : int

logic objt_types_jauge__objt_liste_jauge__vector__capacity__position : int

axiom objt_types_jauge__objt_liste_jauge__vector__capacity__first__bit_axiom :
  (0 <= objt_types_jauge__objt_liste_jauge__vector__capacity__first__bit)

axiom objt_types_jauge__objt_liste_jauge__vector__capacity__last__bit_axiom :
  (objt_types_jauge__objt_liste_jauge__vector__capacity__first__bit <  objt_types_jauge__objt_liste_jauge__vector__capacity__last__bit)

axiom objt_types_jauge__objt_liste_jauge__vector__capacity__position_axiom :
  (0 <= objt_types_jauge__objt_liste_jauge__vector__capacity__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type vector__ref = { vector__content : us_rep
}

function vector__ref_vector__content__projection(a: vector__ref) : us_rep =
  (a).vector__content

logic length1 : us_rep -> int

logic length__function_guard : int, us_rep -> prop

function capacity(container: us_rep) : int =
  (if (of_int(1) = true) then to_rep(((container).us_split_discrs1).rec__objt_types_jauge__objt_liste_jauge__vector__capacity) else 4)

logic capacity__function_guard : int, us_rep -> prop

predicate dynamic_invariant(temp___expr_245: int, temp___is_init_241: bool,
  temp___skip_constant_242: bool, temp___do_toplevel_243: bool,
  temp___do_typ_inv_244: bool) = (((temp___is_init_241 = true) or
  (0 <= 4)) -> in_range1(temp___expr_245))

axiom length__post_axiom :
  (forall container:us_rep [length1(container)].
  in_range1(length1(container)))

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep1

logic bool_eq3 : us_rep1, us_rep1 -> bool

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy2 : us_rep1

type sequence__ref = { sequence__content : us_rep1
}

function sequence__ref_sequence__content__projection(a: sequence__ref) : us_rep1 =
  (a).sequence__content

logic model : us_rep -> us_rep1

logic model__function_guard : us_rep1, us_rep -> prop

logic length2 : us_rep1 -> int

logic length__function_guard1 : int, us_rep1 -> prop

type us_split_fields2 = { rec__ext__ : us_private
}

function us_split_fields_rec__ext____projection(a: us_split_fields2) : us_private =
  (a).rec__ext__

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep2 = { us_split_fields3 : us_split_fields2; attr__tag : int
}

function us_rep___split_fields__projection(a: us_rep2) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_attr__tag__projection(a: us_rep2) : int = (a).attr__tag

function bool_eq4(a: us_rep2, b: us_rep2) : bool =
  (if true then true else false)

logic us_dispatch_eq : us_rep2, us_rep2 -> bool

logic us_tag : int

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic user_eq3 : us_rep2, us_rep2 -> bool

logic dummy3 : us_rep2

type tinterface_jauge__ref = { tinterface_jauge__content : us_rep2
}

function tinterface_jauge__ref_tinterface_jauge__content__projection(a: tinterface_jauge__ref) : us_rep2 =
  (a).tinterface_jauge__content

logic oeqR : us_rep2, us_rep2 -> bool

logic oeqR__function_guard : bool, us_rep2, us_rep2 -> prop

function last(container: us_rep1) : int = (0 + length2(container))

logic last__function_guard : int, us_rep1 -> prop

logic get : us_rep1, int -> us_rep2

logic get__function_guard : us_rep2, us_rep1, int -> prop

function oeq(left: us_rep1, right: us_rep1) : bool =
  andb(bool_eq(length2(left), length2(right)),
  (if (forall n:int. (((1 <= n) and (n <= last(left))) -> (oeqR(get(left, n),
      get(right, n)) = true))) then true else false))

logic oeq__function_guard : bool, us_rep1, us_rep1 -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep1. forall b:us_rep1 [user_eq2(a, b)]. (user_eq2(a,
  b) = oeq(a, b)))

predicate default_initial_assumption(temp___expr_280: us_rep1,
  temp___skip_top_level_281: bool) =
  ((not (temp___skip_top_level_281 = true)) ->
  (length2(temp___expr_280) = 0))

function last_index(container: us_rep) : int = last(model(container))

logic last_index__function_guard : int, us_rep -> prop

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. (0 <= extended_indexqtint(i)))

axiom extended_indexqtaxiom1 :
  (forall i:extended_index. (extended_indexqtint(i) <= 5))

predicate in_range3(x: int) = ((0 <= x) and (x <= 5))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq4 : extended_index, extended_index -> bool

logic dummy4 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref_extended_index__content__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

predicate dynamic_invariant1(temp___expr_231: int, temp___is_init_227: bool,
  temp___skip_constant_228: bool, temp___do_toplevel_229: bool,
  temp___do_typ_inv_230: bool) = (((temp___is_init_227 = true) or
  (0 <= 5)) -> in_range3(temp___expr_231))

axiom last_index__post_axiom :
  (forall container:us_rep [last_index(container)].
  in_range3(last_index(container)))

logic oeq1 : us_rep, us_rep -> bool

logic oeq__function_guard1 : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom1 :
  (forall a:us_rep. forall b:us_rep [user_eq1(a, b)]. (user_eq1(a,
  b) = oeq1(a, b)))

logic first_index__function_guard : int, us_rep -> prop

type index_type

logic index_typeqtint : index_type -> int

axiom index_typeqtaxiom : (forall i:index_type. (1 <= index_typeqtint(i)))

axiom index_typeqtaxiom1 : (forall i:index_type. (index_typeqtint(i) <= 4))

predicate in_range4(x: int) = ((1 <= x) and (x <= 4))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq5 : index_type, index_type -> bool

logic dummy5 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref_index_type__content__projection(a: index_type__ref) : index_type =
  (a).index_type__content

predicate dynamic_invariant2(temp___expr_207: int, temp___is_init_203: bool,
  temp___skip_constant_204: bool, temp___do_toplevel_205: bool,
  temp___do_typ_inv_206: bool) = (((temp___is_init_203 = true) or
  (1 <= 4)) -> in_range4(temp___expr_207))

axiom first_index__post_axiom : in_range4(1)

logic container__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS : int

logic index : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic count : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range5(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq6 : count_type, count_type -> bool

logic dummy6 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

predicate dynamic_invariant3(temp___expr_238: int, temp___is_init_234: bool,
  temp___skip_constant_235: bool, temp___do_toplevel_236: bool,
  temp___do_typ_inv_237: bool) = (((temp___is_init_234 = true) or
  (0 <= 2147483647)) -> in_range5(temp___expr_238))

predicate default_initial_assumption1(temp___expr_215: us_rep2,
  temp___skip_top_level_216: bool) = ((temp___expr_215).attr__tag = us_tag)

axiom capacity__post_axiom :
  (forall container:us_rep [capacity(container)].
  in_range1(capacity(container)))

type extended_index1

logic extended_indexqtint1 : extended_index1 -> int

axiom extended_indexqtaxiom2 :
  (forall i:extended_index1. (0 <= extended_indexqtint1(i)))

axiom extended_indexqtaxiom3 :
  (forall i:extended_index1. (extended_indexqtint1(i) <= 4))

predicate in_range6(x: int) = ((0 <= x) and (x <= 4))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq7 : extended_index1, extended_index1 -> bool

logic dummy7 : extended_index1

type extended_index__ref1 = { extended_index__content1 : extended_index1
}

function extended_index__ref_extended_index__content__2__projection(a: extended_index__ref1) : extended_index1 =
  (a).extended_index__content1

predicate dynamic_invariant4(temp___expr_272: int, temp___is_init_268: bool,
  temp___skip_constant_269: bool, temp___do_toplevel_270: bool,
  temp___do_typ_inv_271: bool) = (((temp___is_init_268 = true) or
  (0 <= 4)) -> in_range6(temp___expr_272))

axiom length__post_axiom1 :
  (forall container:us_rep1 [length2(container)].
  in_range5(length2(container)))

axiom last__post_axiom :
  (forall container:us_rep1 [last(container)]. in_range6(last(container)))

 (* File "a-cfinve.ads", line 578, characters 0-0 *)
goal defqtvc :
  (forall container__split_fields:us_main_type. (dynamic_invariant1(index,
  true, false, true, true) -> (dynamic_invariant3(count, true, false, true,
  true) -> (((1 <= index) and (index <= last_index({ us_split_discrs1 =
  container__split_discrs; us_split_fields1 = {
  rec__objt_types_jauge__objt_liste_jauge__vector = container__split_fields }
  }))) -> in_range5((index - 1))))))
