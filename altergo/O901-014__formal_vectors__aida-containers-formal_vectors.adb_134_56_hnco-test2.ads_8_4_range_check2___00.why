(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type capacity_range

logic capacity_rangeqtint : capacity_range -> int

axiom capacity_rangeqtaxiom :
  (forall i:capacity_range. (0 <= capacity_rangeqtint(i)))

axiom capacity_rangeqtaxiom1 :
  (forall i:capacity_range. (capacity_rangeqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : capacity_range, capacity_range -> bool

logic dummy : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref_capacity_range__content__projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

type capacity_range1

logic capacity_rangeqtint1 : capacity_range1 -> int

axiom capacity_rangeqtaxiom2 :
  (forall i:capacity_range1. (0 <= capacity_rangeqtint1(i)))

axiom capacity_rangeqtaxiom3 :
  (forall i:capacity_range1. (capacity_rangeqtint1(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : capacity_range1, capacity_range1 -> bool

logic dummy1 : capacity_range1

type capacity_range__ref1 = { capacity_range__content1 : capacity_range1
}

function capacity_range__ref_capacity_range__content__2__projection(a: capacity_range__ref1) : capacity_range1 =
  (a).capacity_range__content1

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = {
rec__ada___hnco__test2__v_type_owner__vector_type_owner__vector__capacity :
capacity_range1
}

function us_split_discrs_rec__ada___hnco__test2__v_type_owner__vector_type_owner__vector__capacity__projection(a: us_split_discrs) : capacity_range1 =
  (a).rec__ada___hnco__test2__v_type_owner__vector_type_owner__vector__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = {
rec__ada___hnco__test2__v_type_owner__vector_type_owner__vector :
us_main_type
}

function us_split_fields_rec__ada___hnco__test2__v_type_owner__vector_type_owner__vector__projection(a: us_split_fields) : us_main_type =
  (a).rec__ada___hnco__test2__v_type_owner__vector_type_owner__vector

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic ada___hnco__test2__v_type_owner__vector_type_owner__vector__capacity__first__bit : int

logic ada___hnco__test2__v_type_owner__vector_type_owner__vector__capacity__last__bit : int

logic ada___hnco__test2__v_type_owner__vector_type_owner__vector__capacity__position : int

axiom ada___hnco__test2__v_type_owner__vector_type_owner__vector__capacity__first__bit_axiom :
  (0 <= ada___hnco__test2__v_type_owner__vector_type_owner__vector__capacity__first__bit)

axiom ada___hnco__test2__v_type_owner__vector_type_owner__vector__capacity__last__bit_axiom :
  (ada___hnco__test2__v_type_owner__vector_type_owner__vector__capacity__first__bit <  ada___hnco__test2__v_type_owner__vector_type_owner__vector__capacity__last__bit)

axiom ada___hnco__test2__v_type_owner__vector_type_owner__vector__capacity__position_axiom :
  (0 <= ada___hnco__test2__v_type_owner__vector_type_owner__vector__capacity__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type t172s__ref = { t172s__content : us_rep
}

function t172s__ref_t172s__content__projection(a: t172s__ref) : us_rep =
  (a).t172s__content

type us_split_discrs2 = {
rec__ada___hnco__test2__v_type_owner__vector_type__capacity : capacity_range
}

function us_split_discrs_rec__ada___hnco__test2__v_type_owner__vector_type__capacity__projection(a: us_split_discrs2) : capacity_range =
  (a).rec__ada___hnco__test2__v_type_owner__vector_type__capacity

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields2 = {
rec__ada___hnco__test2__v_type_owner__vector_type__hidden_vector : us_rep;
rec__ext__ : us_private
}

function us_split_fields_rec__ada___hnco__test2__v_type_owner__vector_type__hidden_vector__projection(a: us_split_fields2) : us_rep =
  (a).rec__ada___hnco__test2__v_type_owner__vector_type__hidden_vector

function us_split_fields_rec__ext____projection(a: us_split_fields2) : us_private =
  (a).rec__ext__

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs3 : us_split_discrs2; us_split_fields3 :
us_split_fields2; attr__tag : int
}

function us_rep___split_discrs__2__projection(a: us_rep1) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_attr__tag__projection(a: us_rep1) : int = (a).attr__tag

logic us_dispatch_eq : us_rep1, us_rep1 -> bool

function to_rep(x: capacity_range) : int = capacity_rangeqtint(x)

logic of_rep : int -> capacity_range

axiom inversion_axiom :
  (forall x:capacity_range [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:capacity_range [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

logic us_tag : int

predicate in_range2(rec__ada___hnco__test2__v_type_owner__vector_type__capacity1: int,
  a: us_split_discrs2) =
  (rec__ada___hnco__test2__v_type_owner__vector_type__capacity1 = to_rep((a).rec__ada___hnco__test2__v_type_owner__vector_type__capacity))

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic ada___hnco__test2__v_type_owner__vector_type__capacity__first__bit : int

logic ada___hnco__test2__v_type_owner__vector_type__capacity__last__bit : int

logic ada___hnco__test2__v_type_owner__vector_type__capacity__position : int

axiom ada___hnco__test2__v_type_owner__vector_type__capacity__first__bit_axiom :
  (0 <= ada___hnco__test2__v_type_owner__vector_type__capacity__first__bit)

axiom ada___hnco__test2__v_type_owner__vector_type__capacity__last__bit_axiom :
  (ada___hnco__test2__v_type_owner__vector_type__capacity__first__bit <  ada___hnco__test2__v_type_owner__vector_type__capacity__last__bit)

axiom ada___hnco__test2__v_type_owner__vector_type__capacity__position_axiom :
  (0 <= ada___hnco__test2__v_type_owner__vector_type__capacity__position)

logic ada___hnco__test2__v_type_owner__vector_type__hidden_vector__first__bit : int

logic ada___hnco__test2__v_type_owner__vector_type__hidden_vector__last__bit : int

logic ada___hnco__test2__v_type_owner__vector_type__hidden_vector__position : int

axiom ada___hnco__test2__v_type_owner__vector_type__hidden_vector__first__bit_axiom :
  (0 <= ada___hnco__test2__v_type_owner__vector_type__hidden_vector__first__bit)

axiom ada___hnco__test2__v_type_owner__vector_type__hidden_vector__last__bit_axiom :
  (ada___hnco__test2__v_type_owner__vector_type__hidden_vector__first__bit <  ada___hnco__test2__v_type_owner__vector_type__hidden_vector__last__bit)

axiom ada___hnco__test2__v_type_owner__vector_type__hidden_vector__position_axiom :
  (0 <= ada___hnco__test2__v_type_owner__vector_type__hidden_vector__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type vector_type__ref = { vector_type__content : us_rep1
}

function vector_type__ref_vector_type__content__projection(a: vector_type__ref) : us_rep1 =
  (a).vector_type__content

function to_rep1(x: capacity_range1) : int = capacity_rangeqtint1(x)

logic of_rep1 : int -> capacity_range1

axiom inversion_axiom1 :
  (forall x:capacity_range1 [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:capacity_range1 [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

predicate in_range3(rec__ada___hnco__test2__v_type_owner__vector_type_owner__vector__capacity1: int,
  a: us_split_discrs) =
  (rec__ada___hnco__test2__v_type_owner__vector_type_owner__vector__capacity1 = to_rep1((a).rec__ada___hnco__test2__v_type_owner__vector_type_owner__vector__capacity))

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic ada___hnco__test2__v_type_owner__vector_type_owner__vector__capacity__first__bit1 : int

logic ada___hnco__test2__v_type_owner__vector_type_owner__vector__capacity__last__bit1 : int

logic ada___hnco__test2__v_type_owner__vector_type_owner__vector__capacity__position1 : int

axiom ada___hnco__test2__v_type_owner__vector_type_owner__vector__capacity__first__bit_axiom1 :
  (0 <= ada___hnco__test2__v_type_owner__vector_type_owner__vector__capacity__first__bit1)

axiom ada___hnco__test2__v_type_owner__vector_type_owner__vector__capacity__last__bit_axiom1 :
  (ada___hnco__test2__v_type_owner__vector_type_owner__vector__capacity__first__bit1 <  ada___hnco__test2__v_type_owner__vector_type_owner__vector__capacity__last__bit1)

axiom ada___hnco__test2__v_type_owner__vector_type_owner__vector__capacity__position_axiom1 :
  (0 <= ada___hnco__test2__v_type_owner__vector_type_owner__vector__capacity__position1)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type vector__ref = { vector__content : us_rep
}

function vector__ref_vector__content__projection(a: vector__ref) : us_rep =
  (a).vector__content

predicate dynamic_invariant(temp___expr_308: us_rep1,
  temp___is_init_304: bool, temp___skip_constant_305: bool,
  temp___do_toplevel_306: bool, temp___do_typ_inv_307: bool) =
  in_range3(to_rep(((temp___expr_308).us_split_discrs3).rec__ada___hnco__test2__v_type_owner__vector_type__capacity),
  (((temp___expr_308).us_split_fields3).rec__ada___hnco__test2__v_type_owner__vector_type__hidden_vector).us_split_discrs1)

logic is_empty : us_rep1 -> bool

logic is_empty__function_guard : bool, us_rep1 -> prop

logic container : us_rep1

logic attr__ATTRIBUTE_ADDRESS : int

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep2

logic bool_eq2 : us_rep2, us_rep2 -> bool

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic user_eq5 : us_rep2, us_rep2 -> bool

logic dummy5 : us_rep2

type sequence__ref = { sequence__content : us_rep2
}

function sequence__ref_sequence__content__projection(a: sequence__ref) : us_rep2 =
  (a).sequence__content

logic model : us_rep -> us_rep2

logic model__function_guard : us_rep2, us_rep -> prop

logic get : us_rep2, int -> int

logic get__function_guard : int, us_rep2, int -> prop

logic is_empty1 : us_rep -> bool

logic is_empty__function_guard1 : bool, us_rep -> prop

function first_element(container1: us_rep) : int = get(model(container1), 1)

logic first_element__function_guard : int, us_rep -> prop

type element_type

logic element_typeqtint : element_type -> int

axiom element_typeqtaxiom :
  (forall i:element_type. ((- 2147483648) <= element_typeqtint(i)))

axiom element_typeqtaxiom1 :
  (forall i:element_type. (element_typeqtint(i) <= 2147483647))

predicate in_range4(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq6 : element_type, element_type -> bool

logic dummy6 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_element_type__content__2__projection(a: element_type__ref) : element_type =
  (a).element_type__content

predicate dynamic_invariant1(temp___expr_294: int, temp___is_init_290: bool,
  temp___skip_constant_291: bool, temp___do_toplevel_292: bool,
  temp___do_typ_inv_293: bool) = (((temp___is_init_290 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range4(temp___expr_294))

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range5(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq7 : count_type, count_type -> bool

logic dummy7 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

predicate dynamic_invariant2(temp___expr_238: int, temp___is_init_234: bool,
  temp___skip_constant_235: bool, temp___do_toplevel_236: bool,
  temp___do_typ_inv_237: bool) = (((temp___is_init_234 = true) or
  (0 <= 2147483647)) -> in_range5(temp___expr_238))

predicate dynamic_invariant3(temp___expr_245: int, temp___is_init_241: bool,
  temp___skip_constant_242: bool, temp___do_toplevel_243: bool,
  temp___do_typ_inv_244: bool) = (((temp___is_init_241 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_245))

predicate dynamic_invariant4(temp___expr_252: int, temp___is_init_248: bool,
  temp___skip_constant_249: bool, temp___do_toplevel_250: bool,
  temp___do_typ_inv_251: bool) = (((temp___is_init_248 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_252))

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq4(a, b)]. (user_eq4(a,
  b) = oeq(a, b)))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq5(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range6(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE4 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> bool

function capacity(container1: us_rep) : int =
  (if (of_int(1) = true) then to_rep1(((container1).us_split_discrs1).rec__ada___hnco__test2__v_type_owner__vector_type_owner__vector__capacity) else 2147483647)

logic capacity__function_guard : int, us_rep -> prop

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

axiom length__post_axiom :
  (forall container1:us_rep [length(container1)].
  (length(container1) <= capacity(container1)))

axiom length__post_axiom1 :
  (forall container1:us_rep [length(container1)].
  dynamic_invariant4(length(container1), true, false, true, true))

logic length1 : us_rep2 -> int

logic length__function_guard1 : int, us_rep2 -> prop

logic bool_eq6 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq6(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq6(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length2(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function last(container1: us_rep2) : int = (0 + length1(container1))

logic last__function_guard : int, us_rep2 -> prop

function oeq1(left: us_rep2, right: us_rep2) : bool =
  andb(bool_eq6(length1(left), length1(right)),
  (if (forall n:int. (((1 <= n) and (n <= last(left))) -> (get(left,
      n) = get(right, n)))) then true else false))

logic oeq__function_guard1 : bool, us_rep2, us_rep2 -> prop

axiom user_eq__def_axiom1 :
  (forall a:us_rep2. forall b:us_rep2 [user_eq5(a, b)]. (user_eq5(a,
  b) = oeq1(a, b)))

predicate default_initial_assumption(temp___expr_266: us_rep2,
  temp___skip_top_level_267: bool) =
  ((not (temp___skip_top_level_267 = true)) ->
  (length1(temp___expr_266) = 0))

axiom model__post_axiom :
  (forall container1:us_rep [model(container1)].
  (length1(model(container1)) = length(container1)))

axiom oeq__post_axiom :
  (forall left:us_rep. forall right:us_rep [oeq(left, right)]. ((oeq(left,
  right) = true) -> (oeq1(model(left), model(right)) = true)))

axiom oeq__post_axiom1 :
  (forall left:us_rep. forall right:us_rep [oeq(left, right)].
  ((oeq1(model(left), model(right)) = true) -> (oeq(left, right) = true)))

axiom is_empty__post_axiom :
  (forall container1:us_rep [is_empty1(container1)].
  ((is_empty1(container1) = true) -> (length(container1) = 0)))

axiom is_empty__post_axiom1 :
  (forall container1:us_rep [is_empty1(container1)].
  ((length(container1) = 0) -> (is_empty1(container1) = true)))

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. (0 <= extended_indexqtint(i)))

axiom extended_indexqtaxiom1 :
  (forall i:extended_index. (extended_indexqtint(i) <= 2147483647))

predicate in_range7(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq8 : extended_index, extended_index -> bool

logic dummy8 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref_extended_index__content__2__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

predicate dynamic_invariant5(temp___expr_287: int, temp___is_init_283: bool,
  temp___skip_constant_284: bool, temp___do_toplevel_285: bool,
  temp___do_typ_inv_286: bool) = (((temp___is_init_283 = true) or
  (0 <= 2147483647)) -> in_range7(temp___expr_287))

axiom length__post_axiom2 :
  (forall container1:us_rep2 [length1(container1)].
  ((0 + length1(container1)) <= 2147483647))

axiom length__post_axiom3 :
  (forall container1:us_rep2 [length1(container1)].
  dynamic_invariant2(length1(container1), true, false, true, true))

type element_type1

logic element_typeqtint1 : element_type1 -> int

axiom element_typeqtaxiom2 :
  (forall i:element_type1. ((- 2147483648) <= element_typeqtint1(i)))

axiom element_typeqtaxiom3 :
  (forall i:element_type1. (element_typeqtint1(i) <= 2147483647))

predicate in_range8(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq9 : element_type1, element_type1 -> bool

logic dummy9 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref_element_type__content__3__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

predicate dynamic_invariant6(temp___expr_301: int, temp___is_init_297: bool,
  temp___skip_constant_298: bool, temp___do_toplevel_299: bool,
  temp___do_typ_inv_300: bool) = (((temp___is_init_297 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range8(temp___expr_301))

axiom get__post_axiom :
  (forall container1:us_rep2.
  (forall position:int [get(container1, position)].
  ((dynamic_invariant5(position, true, true, true, true) and
  ((1 <= position) and (position <= last(container1)))) ->
  dynamic_invariant6(get(container1, position), true, false, true, true))))

axiom user_eq__def_axiom2 :
  (forall a:us_rep. forall b:us_rep [user_eq2(a, b)]. (user_eq2(a,
  b) = oeq(a, b)))

 (* File "aida-containers-formal_vectors.ads", line 127, characters 0-0 *)
goal defqtvc : (dynamic_invariant(container, true, false, true, true) ->
  (is_empty__function_guard(is_empty(container), container) ->
  ((not (is_empty(container) = true)) ->
  (forall o:int.
  ((to_rep(((container).us_split_discrs3).rec__ada___hnco__test2__v_type_owner__vector_type__capacity) = o) ->
  in_range1(o))))))
