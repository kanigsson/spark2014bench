(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

logic attr__ATTRIBUTE_ADDRESS : int

logic int__ : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : character, character -> bool

logic dummy1 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type r1

logic user_eq2 : r1, r1 -> bool

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic dummy2 : r1

type r1__ref = { r1__content : r1
}

function r1__ref_r1__content__projection(a: r1__ref) : r1 = (a).r1__content

logic attr__ATTRIBUTE_ADDRESS4 : int

type my_integer

logic my_integerqtint : my_integer -> int

axiom my_integerqtaxiom : (forall i:my_integer. (1 <= my_integerqtint(i)))

axiom my_integerqtaxiom1 : (forall i:my_integer. (my_integerqtint(i) <= 10))

predicate in_range3(x: int) = ((1 <= x) and (x <= 10))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : my_integer, my_integer -> bool

logic dummy3 : my_integer

type my_integer__ref = { my_integer__content : my_integer
}

function my_integer__ref_my_integer__content__projection(a: my_integer__ref) : my_integer =
  (a).my_integer__content

function to_rep1(x: my_integer) : int = my_integerqtint(x)

logic of_rep1 : int -> my_integer

axiom inversion_axiom1 :
  (forall x:my_integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:my_integer [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_discrs = { rec__alignment_attribute__r2__d1 : my_integer
}

function us_split_discrs_rec__alignment_attribute__r2__d1__projection(a: us_split_discrs) : my_integer =
  (a).rec__alignment_attribute__r2__d1

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__alignment_attribute__r2__d2 : bool
}

function us_split_fields_rec__alignment_attribute__r2__d2__projection(a: us_split_fields) : bool =
  (a).rec__alignment_attribute__r2__d2

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

predicate alignment_attribute__r2__d2__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__alignment_attribute__r2__d1) = 5)

function bool_eq5(a: us_rep, b: us_rep) : bool =
  (if ((to_rep1(((a).us_split_discrs1).rec__alignment_attribute__r2__d1) = to_rep1(((b).us_split_discrs1).rec__alignment_attribute__r2__d1)) and
  (alignment_attribute__r2__d2__pred(a) ->
  (to_int(((a).us_split_fields1).rec__alignment_attribute__r2__d2) = to_int(((b).us_split_fields1).rec__alignment_attribute__r2__d2)))) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic alignment_attribute__r2__d1__first__bit : int

logic alignment_attribute__r2__d1__last__bit : int

logic alignment_attribute__r2__d1__position : int

axiom alignment_attribute__r2__d1__first__bit_axiom :
  (0 <= alignment_attribute__r2__d1__first__bit)

axiom alignment_attribute__r2__d1__last__bit_axiom :
  (alignment_attribute__r2__d1__first__bit <  alignment_attribute__r2__d1__last__bit)

axiom alignment_attribute__r2__d1__position_axiom :
  (0 <= alignment_attribute__r2__d1__position)

logic alignment_attribute__r2__d2__first__bit : int

logic alignment_attribute__r2__d2__last__bit : int

logic alignment_attribute__r2__d2__position : int

axiom alignment_attribute__r2__d2__first__bit_axiom :
  (0 <= alignment_attribute__r2__d2__first__bit)

axiom alignment_attribute__r2__d2__last__bit_axiom :
  (alignment_attribute__r2__d2__first__bit <  alignment_attribute__r2__d2__last__bit)

axiom alignment_attribute__r2__d2__position_axiom :
  (0 <= alignment_attribute__r2__d2__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type trt2S__ref = { trt2S__content : us_rep
}

function trt2S__ref_trt2S__content__projection(a: trt2S__ref) : us_rep =
  (a).trt2S__content

predicate in_range4(rec__alignment_attribute__r2__d11: int,
  a: us_split_discrs) =
  (rec__alignment_attribute__r2__d11 = to_rep1((a).rec__alignment_attribute__r2__d1))

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic alignment_attribute__r2__d1__first__bit1 : int

logic alignment_attribute__r2__d1__last__bit1 : int

logic alignment_attribute__r2__d1__position1 : int

axiom alignment_attribute__r2__d1__first__bit_axiom1 :
  (0 <= alignment_attribute__r2__d1__first__bit1)

axiom alignment_attribute__r2__d1__last__bit_axiom1 :
  (alignment_attribute__r2__d1__first__bit1 <  alignment_attribute__r2__d1__last__bit1)

axiom alignment_attribute__r2__d1__position_axiom1 :
  (0 <= alignment_attribute__r2__d1__position1)

logic alignment_attribute__r2__d2__first__bit1 : int

logic alignment_attribute__r2__d2__last__bit1 : int

logic alignment_attribute__r2__d2__position1 : int

axiom alignment_attribute__r2__d2__first__bit_axiom1 :
  (0 <= alignment_attribute__r2__d2__first__bit1)

axiom alignment_attribute__r2__d2__last__bit_axiom1 :
  (alignment_attribute__r2__d2__first__bit1 <  alignment_attribute__r2__d2__last__bit1)

axiom alignment_attribute__r2__d2__position_axiom1 :
  (0 <= alignment_attribute__r2__d2__position1)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : us_rep

type r2__ref = { r2__content : us_rep
}

function r2__ref_r2__content__projection(a: r2__ref) : us_rep =
  (a).r2__content

logic rt2__split_discrs : us_split_discrs

logic rt2__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS5 : int

predicate dynamic_invariant1(temp___expr_239: us_rep,
  temp___is_init_235: bool, temp___skip_constant_236: bool,
  temp___do_toplevel_237: bool, temp___do_typ_inv_238: bool) =
  ((not (temp___skip_constant_236 = true)) -> in_range4(3,
  (temp___expr_239).us_split_discrs1))

predicate default_initial_assumption(temp___expr_241: us_rep,
  temp___skip_top_level_242: bool) =
  (to_rep1(((temp___expr_241).us_split_discrs1).rec__alignment_attribute__r2__d1) = 3)

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic alignment_attribute__r2__d1__first__bit2 : int

logic alignment_attribute__r2__d1__last__bit2 : int

logic alignment_attribute__r2__d1__position2 : int

axiom alignment_attribute__r2__d1__first__bit_axiom2 :
  (0 <= alignment_attribute__r2__d1__first__bit2)

axiom alignment_attribute__r2__d1__last__bit_axiom2 :
  (alignment_attribute__r2__d1__first__bit2 <  alignment_attribute__r2__d1__last__bit2)

axiom alignment_attribute__r2__d1__position_axiom2 :
  (0 <= alignment_attribute__r2__d1__position2)

logic alignment_attribute__r2__d2__first__bit2 : int

logic alignment_attribute__r2__d2__last__bit2 : int

logic alignment_attribute__r2__d2__position2 : int

axiom alignment_attribute__r2__d2__first__bit_axiom2 :
  (0 <= alignment_attribute__r2__d2__first__bit2)

axiom alignment_attribute__r2__d2__last__bit_axiom2 :
  (alignment_attribute__r2__d2__first__bit2 <  alignment_attribute__r2__d2__last__bit2)

axiom alignment_attribute__r2__d2__position_axiom2 :
  (0 <= alignment_attribute__r2__d2__position2)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy6 : us_rep

type sr2__ref = { sr2__content : us_rep
}

function sr2__ref_sr2__content__projection(a: sr2__ref) : us_rep =
  (a).sr2__content

logic rst2__split_discrs : us_split_discrs

logic rst2__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS6 : int

predicate dynamic_invariant2(temp___expr_186: us_rep,
  temp___is_init_182: bool, temp___skip_constant_183: bool,
  temp___do_toplevel_184: bool, temp___do_typ_inv_185: bool) =
  ((not (temp___skip_constant_183 = true)) -> in_range4(5,
  (temp___expr_186).us_split_discrs1))

predicate default_initial_assumption1(temp___expr_188: us_rep,
  temp___skip_top_level_189: bool) =
  (to_rep1(((temp___expr_188).us_split_discrs1).rec__alignment_attribute__r2__d1) = 5)

function to_rep2(x: integer) : int = integerqtint(x)

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range1(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range1(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields2 = { rec__alignment_attribute__r3__i : integer;
rec__ext__ : us_private
}

function us_split_fields_rec__alignment_attribute__r3__i__projection(a: us_split_fields2) : integer =
  (a).rec__alignment_attribute__r3__i

function us_split_fields_rec__ext____projection(a: us_split_fields2) : us_private =
  (a).rec__ext__

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag : int
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_attr__tag__projection(a: us_rep1) : int = (a).attr__tag

function bool_eq6(a: us_rep1, b: us_rep1) : bool =
  (if (to_rep2(((a).us_split_fields3).rec__alignment_attribute__r3__i) = to_rep2(((b).us_split_fields3).rec__alignment_attribute__r3__i)) then true else false)

logic us_dispatch_eq : us_rep1, us_rep1 -> bool

logic us_tag : int

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic alignment_attribute__r3__i__first__bit : int

logic alignment_attribute__r3__i__last__bit : int

logic alignment_attribute__r3__i__position : int

axiom alignment_attribute__r3__i__first__bit_axiom :
  (0 <= alignment_attribute__r3__i__first__bit)

axiom alignment_attribute__r3__i__last__bit_axiom :
  (alignment_attribute__r3__i__first__bit <  alignment_attribute__r3__i__last__bit)

axiom alignment_attribute__r3__i__position_axiom :
  (0 <= alignment_attribute__r3__i__position)

logic user_eq7 : us_rep1, us_rep1 -> bool

logic dummy7 : us_rep1

type r3__ref = { r3__content : us_rep1
}

function r3__ref_r3__content__projection(a: r3__ref) : us_rep1 =
  (a).r3__content

logic rt3__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS7 : int

predicate default_initial_assumption2(temp___expr_197: us_rep1,
  temp___skip_top_level_198: bool) = ((temp___expr_197).attr__tag = us_tag)

type us_split_fields4 = { rec__alignment_attribute__r4__j : integer;
rec__alignment_attribute__r3__i1 : integer; rec__ext__1 : us_private
}

function us_split_fields_rec__alignment_attribute__r4__j__projection(a: us_split_fields4) : integer =
  (a).rec__alignment_attribute__r4__j

function us_split_fields_rec__alignment_attribute__r3__i__2__projection(a: us_split_fields4) : integer =
  (a).rec__alignment_attribute__r3__i1

function us_split_fields_rec__ext____2__projection(a: us_split_fields4) : us_private =
  (a).rec__ext__1

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4; attr__tag1 : int
}

function us_rep___split_fields__3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function us_rep_attr__tag__2__projection(a: us_rep2) : int = (a).attr__tag1

logic hide_ext__ : integer, us_private -> us_private

logic extract__alignment_attribute__r4__j : us_private -> integer

axiom extract__alignment_attribute__r4__j__conv :
  (forall alignment_attribute__r4__j:integer.
  (forall rec__ext__2:us_private.
  (extract__alignment_attribute__r4__j(hide_ext__(alignment_attribute__r4__j,
  rec__ext__2)) = alignment_attribute__r4__j)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep2) : us_rep1 = { us_split_fields3 = {
  rec__alignment_attribute__r3__i =
  ((a).us_split_fields5).rec__alignment_attribute__r3__i1; rec__ext__ =
  hide_ext__(((a).us_split_fields5).rec__alignment_attribute__r4__j,
  ((a).us_split_fields5).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep1) : us_rep2 = { us_split_fields5 = {
  rec__alignment_attribute__r4__j =
  extract__alignment_attribute__r4__j(((r).us_split_fields3).rec__ext__);
  rec__alignment_attribute__r3__i1 =
  ((r).us_split_fields3).rec__alignment_attribute__r3__i; rec__ext__1 =
  extract__ext__(((r).us_split_fields3).rec__ext__) }; attr__tag1 =
  (r).attr__tag }

function bool_eq7(a: us_rep2, b: us_rep2) : bool =
  (if ((to_rep2(((a).us_split_fields5).rec__alignment_attribute__r4__j) = to_rep2(((b).us_split_fields5).rec__alignment_attribute__r4__j)) and
  (to_rep2(((a).us_split_fields5).rec__alignment_attribute__r3__i1) = to_rep2(((b).us_split_fields5).rec__alignment_attribute__r3__i1))) then true else false)

logic us_tag1 : int

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic alignment_attribute__r4__j__first__bit : int

logic alignment_attribute__r4__j__last__bit : int

logic alignment_attribute__r4__j__position : int

axiom alignment_attribute__r4__j__first__bit_axiom :
  (0 <= alignment_attribute__r4__j__first__bit)

axiom alignment_attribute__r4__j__last__bit_axiom :
  (alignment_attribute__r4__j__first__bit <  alignment_attribute__r4__j__last__bit)

axiom alignment_attribute__r4__j__position_axiom :
  (0 <= alignment_attribute__r4__j__position)

logic alignment_attribute__r3__i__first__bit1 : int

logic alignment_attribute__r3__i__last__bit1 : int

logic alignment_attribute__r3__i__position1 : int

axiom alignment_attribute__r3__i__first__bit_axiom1 :
  (0 <= alignment_attribute__r3__i__first__bit1)

axiom alignment_attribute__r3__i__last__bit_axiom1 :
  (alignment_attribute__r3__i__first__bit1 <  alignment_attribute__r3__i__last__bit1)

axiom alignment_attribute__r3__i__position_axiom1 :
  (0 <= alignment_attribute__r3__i__position1)

logic user_eq8 : us_rep2, us_rep2 -> bool

logic dummy8 : us_rep2

type r4__ref = { r4__content : us_rep2
}

function r4__ref_r4__content__projection(a: r4__ref) : us_rep2 =
  (a).r4__content

logic rt4__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS8 : int

predicate default_initial_assumption3(temp___expr_205: us_rep2,
  temp___skip_top_level_206: bool) = ((temp___expr_205).attr__tag1 = us_tag1)

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range5(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq9 : natural, natural -> bool

logic dummy9 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep3(x: natural) : int = naturalqtint(x)

logic of_rep3 : int -> natural

axiom inversion_axiom3 :
  (forall x:natural [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:natural [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

type map__ref1 = { map__content1 : (int,natural) farray
}

logic slide1 : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq1 :
  (forall a:(int,natural) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq9(a: (int,natural) farray, a__first: int, a__last: int,
  b: (int,natural) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep3((a[temp___idx_155])) = to_rep3((b[((b__first - a__first) + temp___idx_155)])))))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep3((a[temp___idx_155])) = to_rep3((b[((b__first - a__first) + temp___idx_155)]))))))))

logic attr__ATTRIBUTE_ADDRESS9 : int

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range6(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq10 : positive, positive -> bool

logic dummy10 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

function to_rep4(x: positive) : int = positiveqtint(x)

logic of_rep4 : int -> positive

axiom inversion_axiom4 :
  (forall x:positive [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:positive [to_rep4(x)]. in_range6(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range6(x) ->
  (to_rep4(of_rep4(x)) = x)))

type map__ref2 = { map__content2 : (int,positive) farray
}

logic slide2 : (int,positive) farray, int, int -> (int,positive) farray

axiom slide_eq2 :
  (forall a:(int,positive) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,positive) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq11(a: (int,positive) farray, a__first: int, a__last: int,
  b: (int,positive) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep4((a[temp___idx_154])) = to_rep4((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev8 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev9 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev10 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev11 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep4((a[temp___idx_154])) = to_rep4((b[((b__first - a__first) + temp___idx_154)]))))))))

logic attr__ATTRIBUTE_ADDRESS10 : int

predicate dynamic_invariant3(temp___expr_162: int, temp___is_init_158: bool,
  temp___skip_constant_159: bool, temp___do_toplevel_160: bool,
  temp___do_typ_inv_161: bool) = (((temp___is_init_158 = true) or
  (1 <= 10)) -> in_range3(temp___expr_162))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep2(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep2(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range6(low) and in_range6(high)))))

type us_t = { elts : (int,natural) farray; rt : t
}

function to_array(a: us_t) : (int,natural) farray = (a).elts

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size6 : int

logic object__size6 : int

logic component__size : int

logic alignment6 : int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (0 <= object__size6)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom6 : (0 <= alignment6)

function bool_eq12(x: us_t, y: us_t) : bool = bool_eq9((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq11 : us_t, us_t -> bool

logic dummy11 : us_t

type unconstr_array__ref = { unconstr_array__content : us_t
}

function unconstr_array__ref_unconstr_array__content__projection(a: unconstr_array__ref) : us_t =
  (a).unconstr_array__content

logic temp___String_Literal_284 : unit -> (int,character) farray

axiom temp___String_Literal_284__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_284(us_void_param)].
  (to_rep((temp___String_Literal_284(us_void_param)[1])) = 116))

axiom temp___String_Literal_284__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_284(us_void_param)].
  (to_rep((temp___String_Literal_284(us_void_param)[2])) = 101))

axiom temp___String_Literal_284__def_axiom2 :
  (forall us_void_param:unit [temp___String_Literal_284(us_void_param)].
  (to_rep((temp___String_Literal_284(us_void_param)[3])) = 115))

axiom temp___String_Literal_284__def_axiom3 :
  (forall us_void_param:unit [temp___String_Literal_284(us_void_param)].
  (to_rep((temp___String_Literal_284(us_void_param)[4])) = 116))

logic alignment_attribute__ua__aggregate_def : int -> (int,natural) farray

logic alignment_attribute__ca__aggregate_def : int -> (int,positive) farray

predicate dynamic_invariant4(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range5(temp___expr_39))

predicate dynamic_invariant5(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range6(temp___expr_46))

predicate dynamic_invariant6(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range2(temp___expr_74))

predicate default_initial_assumption4(temp___expr_178: us_rep,
  temp___skip_top_level_179: bool) =
  (to_rep1(((temp___expr_178).us_split_discrs1).rec__alignment_attribute__r2__d1) = 1)

predicate dynamic_invariant7(temp___expr_223: us_t, temp___is_init_219: bool,
  temp___skip_constant_220: bool, temp___do_toplevel_221: bool,
  temp___do_typ_inv_222: bool) = ((not (temp___skip_constant_220 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_223),
  last1(temp___expr_223)))

axiom int____def_axiom : (int__ = 2)

logic rliteral : natural

axiom rliteral_axiom : (naturalqtint(rliteral) = 1)

axiom def_axiom :
  (forall temp___298:int. (dynamic_invariant4(temp___298, true, true, true,
  true) ->
  (forall temp___299:int.
  ((alignment_attribute__ua__aggregate_def(temp___298)[temp___299]) = rliteral))))

logic rliteral1 : positive

axiom rliteral_axiom1 : (positiveqtint(rliteral1) = 2)

axiom def_axiom1 :
  (forall temp___301:int. (dynamic_invariant5(temp___301, true, true, true,
  true) ->
  (forall temp___302:int.
  ((alignment_attribute__ca__aggregate_def(temp___301)[temp___302]) = rliteral1))))

 (* File "alignment_attribute.ads", line 1, characters 0-0 *)
goal defqtvc : (in_range3(5) -> (dynamic_invariant(int__, true, false, true,
  true) ->
  (forall s:(int,character) farray. ((s = temp___String_Literal_284(void)) ->
  (forall m:int. ((m = 10) -> (dynamic_invariant3(m, true, false, true,
  true) -> in_range3(3))))))))
