(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic offside_fd_on : bool

logic attr__ATTRIBUTE_ADDRESS : int

logic is_ap_engaged : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

logic fd_on : bool

logic attr__ATTRIBUTE_ADDRESS2 : int

logic modes_on : bool

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic attr__ATTRIBUTE_ADDRESS13 : int

 (* File "modes_on_iff_fd_on_or_ap_engaged.ads", line 17, characters 0-0 *)
goal defqtvc :
  (forall unit_delay_memory:bool.
  (forall unit_delay_out1:bool. ((unit_delay_out1 = unit_delay_memory) ->
  (forall fd_on_out1:bool. ((fd_on_out1 = fd_on) ->
  (forall is_ap_engaged_out1:bool. ((is_ap_engaged_out1 = is_ap_engaged) ->
  (forall modes_on_out1:bool. ((modes_on_out1 = modes_on) ->
  (forall offside_fd_on_out1:bool. ((offside_fd_on_out1 = offside_fd_on) ->
  (forall or1_out1:bool.
  ((or1_out1 = (if ((if (offside_fd_on_out1 = true) then true else is_ap_engaged_out1) = true) then true else fd_on_out1)) ->
  (forall equals_out1:bool.
  ((equals_out1 = (if (to_int(or1_out1) = to_int(modes_on_out1)) then true else false)) ->
  (forall or_out1:bool.
  ((or_out1 = (if (unit_delay_out1 = true) then true else equals_out1)) ->
  (or_out1 = true))))))))))))))))))
