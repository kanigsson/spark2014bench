(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic o_a : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic dummy1 : (int,integer) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq1 : (int,integer) farray, (int,integer) farray -> bool

type map__ref1 = { map__content1 : (int,(int,integer) farray) farray
}

logic slide1 : (int,(int,integer) farray) farray, int,
  int -> (int,(int,integer) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,integer) farray) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,(int,integer) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,(int,integer) farray) farray, a__first: int,
  a__last: int, b: (int,(int,integer) farray) farray, b__first: int,
  b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq2((a[temp___idx_155]), 1, 2,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 2) = true)))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,(int,integer) farray) farray.
  forall b:(int,(int,integer) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,(int,integer) farray) farray.
  forall b:(int,(int,integer) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,(int,integer) farray) farray.
  forall b:(int,(int,integer) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,(int,integer) farray) farray.
  forall b:(int,(int,integer) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq2((a[temp___idx_155]), 1, 2,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 2) = true))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic o_b : (int,(int,integer) farray) farray

logic attr__ATTRIBUTE_ADDRESS3 : int

type ta_tD1

logic ta_tD1qtint : ta_tD1 -> int

axiom ta_tD1qtaxiom : (forall i:ta_tD1. (1 <= ta_tD1qtint(i)))

axiom ta_tD1qtaxiom1 : (forall i:ta_tD1. (ta_tD1qtint(i) <= 2))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : ta_tD1, ta_tD1 -> bool

logic dummy2 : ta_tD1

type ta_tD1__ref = { ta_tD1__content : ta_tD1
}

function ta_tD1__ref_ta_tD1__content__projection(a: ta_tD1__ref) : ta_tD1 =
  (a).ta_tD1__content

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size1 : int

logic object__size1 : int

logic component__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom1 : (0 <= alignment1)

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq2((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type ta_tB__ref = { ta_tB__content : us_t
}

function ta_tB__ref_ta_tB__content__projection(a: ta_tB__ref) : us_t =
  (a).ta_tB__content

type tb_tD1

logic tb_tD1qtint : tb_tD1 -> int

axiom tb_tD1qtaxiom : (forall i:tb_tD1. (1 <= tb_tD1qtint(i)))

axiom tb_tD1qtaxiom1 : (forall i:tb_tD1. (tb_tD1qtint(i) <= 2))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : tb_tD1, tb_tD1 -> bool

logic dummy4 : tb_tD1

type tb_tD1__ref = { tb_tD1__content : tb_tD1
}

function tb_tD1__ref_tb_tD1__content__projection(a: tb_tD1__ref) : tb_tD1 =
  (a).tb_tD1__content

logic temp_____aggregate_def_200 : (int,integer) farray, int,
  int -> (int,integer) farray

logic update_proof__B_1__a__aggregate_def : int, int -> (int,integer) farray

logic temp_____aggregate_def_216 : int -> (int,integer) farray

logic temp_____aggregate_def_228 : int -> (int,integer) farray

logic temp_____aggregate_def_240 : (int,(int,integer) farray) farray, int,
  (int,integer) farray -> (int,(int,integer) farray) farray

logic temp_____aggregate_def_246 : int -> (int,integer) farray

logic temp_____aggregate_def_256 : int -> (int,integer) farray

logic update_proof__B_2__b__aggregate_def : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

logic temp_____aggregate_def_276 : int, int -> (int,integer) farray

logic temp_____aggregate_def_281 : int, int -> (int,integer) farray

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 1)

logic rliteral1 : integer

axiom rliteral_axiom1 : (integerqtint(rliteral1) = 2)

axiom def_axiom :
  (forall temp___213:int. forall temp___214:int.
  ((dynamic_invariant(temp___213, true, true, true, true) and
  dynamic_invariant(temp___214, true, true, true, true)) ->
  ((update_proof__B_1__a__aggregate_def(temp___213,
  temp___214)[1]) = rliteral)))

axiom def_axiom1 :
  (forall temp___213:int. forall temp___214:int.
  ((dynamic_invariant(temp___213, true, true, true, true) and
  dynamic_invariant(temp___214, true, true, true, true)) ->
  ((update_proof__B_1__a__aggregate_def(temp___213,
  temp___214)[2]) = rliteral1)))

logic rliteral2 : integer

axiom rliteral_axiom2 : (integerqtint(rliteral2) = 0)

axiom def_axiom2 :
  (forall temp___202:(int,integer) farray.
  (forall temp___203:int. forall temp___204:int. ((in_range2(temp___203) and
  dynamic_invariant(temp___204, true, true, true, true)) ->
  (forall temp___205:int. ((temp___205 = temp___203) ->
  ((temp_____aggregate_def_200(temp___202, temp___203,
  temp___204)[temp___205]) = rliteral2))))))

axiom def_axiom3 :
  (forall temp___202:(int,integer) farray.
  (forall temp___203:int. forall temp___204:int. ((in_range2(temp___203) and
  dynamic_invariant(temp___204, true, true, true, true)) ->
  (forall temp___205:int. ((not (temp___205 = temp___203)) ->
  ((temp_____aggregate_def_200(temp___202, temp___203,
  temp___204)[temp___205]) = (temp___202[temp___205])))))))

axiom def_axiom4 :
  (forall temp___273:(int,integer) farray.
  forall temp___274:(int,integer) farray.
  ((update_proof__B_2__b__aggregate_def(temp___273,
  temp___274)[1]) = temp___273))

axiom def_axiom5 :
  (forall temp___273:(int,integer) farray.
  forall temp___274:(int,integer) farray.
  ((update_proof__B_2__b__aggregate_def(temp___273,
  temp___274)[2]) = temp___274))

logic rliteral3 : integer

axiom rliteral_axiom3 : (integerqtint(rliteral3) = 11)

logic rliteral4 : integer

axiom rliteral_axiom4 : (integerqtint(rliteral4) = 12)

axiom def_axiom6 :
  (forall temp___278:int. forall temp___279:int.
  ((dynamic_invariant(temp___278, true, true, true, true) and
  dynamic_invariant(temp___279, true, true, true, true)) ->
  ((temp_____aggregate_def_276(temp___278, temp___279)[1]) = rliteral3)))

axiom def_axiom7 :
  (forall temp___278:int. forall temp___279:int.
  ((dynamic_invariant(temp___278, true, true, true, true) and
  dynamic_invariant(temp___279, true, true, true, true)) ->
  ((temp_____aggregate_def_276(temp___278, temp___279)[2]) = rliteral4)))

logic rliteral5 : integer

axiom rliteral_axiom5 : (integerqtint(rliteral5) = 21)

logic rliteral6 : integer

axiom rliteral_axiom6 : (integerqtint(rliteral6) = 22)

axiom def_axiom8 :
  (forall temp___283:int. forall temp___284:int.
  ((dynamic_invariant(temp___283, true, true, true, true) and
  dynamic_invariant(temp___284, true, true, true, true)) ->
  ((temp_____aggregate_def_281(temp___283, temp___284)[1]) = rliteral5)))

axiom def_axiom9 :
  (forall temp___283:int. forall temp___284:int.
  ((dynamic_invariant(temp___283, true, true, true, true) and
  dynamic_invariant(temp___284, true, true, true, true)) ->
  ((temp_____aggregate_def_281(temp___283, temp___284)[2]) = rliteral6)))

axiom def_axiom10 :
  (forall temp___218:int. (dynamic_invariant(temp___218, true, true, true,
  true) ->
  (forall temp___219:int.
  ((temp_____aggregate_def_216(temp___218)[temp___219]) = rliteral2))))

axiom def_axiom11 :
  (forall temp___230:int. (dynamic_invariant(temp___230, true, true, true,
  true) ->
  (forall temp___231:int.
  ((temp_____aggregate_def_228(temp___230)[temp___231]) = rliteral2))))

axiom def_axiom12 :
  (forall temp___242:(int,(int,integer) farray) farray.
  (forall temp___243:int.
  (forall temp___244:(int,integer) farray. (in_range3(temp___243) ->
  (forall temp___245:int. ((temp___245 = temp___243) ->
  ((temp_____aggregate_def_240(temp___242, temp___243,
  temp___244)[temp___245]) = temp___244)))))))

axiom def_axiom13 :
  (forall temp___242:(int,(int,integer) farray) farray.
  (forall temp___243:int.
  (forall temp___244:(int,integer) farray. (in_range3(temp___243) ->
  (forall temp___245:int. ((not (temp___245 = temp___243)) ->
  ((temp_____aggregate_def_240(temp___242, temp___243,
  temp___244)[temp___245]) = (temp___242[temp___245]))))))))

axiom def_axiom14 :
  (forall temp___248:int. (dynamic_invariant(temp___248, true, true, true,
  true) ->
  (forall temp___249:int.
  ((temp_____aggregate_def_246(temp___248)[temp___249]) = rliteral2))))

axiom def_axiom15 :
  (forall temp___258:int. (dynamic_invariant(temp___258, true, true, true,
  true) ->
  (forall temp___259:int.
  ((temp_____aggregate_def_256(temp___258)[temp___259]) = rliteral2))))

 (* File "update_proof.adb", line 1, characters 0-0 *)
goal defqtvc :
  (forall a:(int,integer) farray.
  ((a = update_proof__B_1__a__aggregate_def(1, 2)) -> ((a = o_a) ->
  (forall a1:(int,integer) farray. ((a1 = (a[2 <- rliteral2])) ->
  ((to_rep((a1[1])) = to_rep((o_a[1]))) -> (to_rep((a1[2])) = 0)))))))
