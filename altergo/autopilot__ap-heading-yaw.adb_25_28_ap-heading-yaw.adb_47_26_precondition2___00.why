(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (div(x, y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((-abs_int(y)) <  mod(x,
  y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (mod(x, y) <  abs_int(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <  y) then (x % y) else ((x % y) + y))

logic mach : int

logic attr__ATTRIBUTE_ADDRESS : int

logic slip : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic scale_movement : int, int, int, int -> int

logic scale_movement__function_guard : int, int, int, int, int -> prop

type machnumber

logic machnumberqtint : machnumber -> int

axiom machnumberqtaxiom : (forall i:machnumber. (0 <= machnumberqtint(i)))

axiom machnumberqtaxiom1 : (forall i:machnumber. (machnumberqtint(i) <= 100))

predicate in_range(x: int) = ((0 <= x) and (x <= 100))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : machnumber, machnumber -> bool

logic dummy : machnumber

type machnumber__ref = { machnumber__content : machnumber
}

function machnumber__ref_machnumber__content__projection(a: machnumber__ref) : machnumber =
  (a).machnumber__content

predicate dynamic_invariant(temp___expr_159: int, temp___is_init_155: bool,
  temp___skip_constant_156: bool, temp___do_toplevel_157: bool,
  temp___do_typ_inv_158: bool) = (((temp___is_init_155 = true) or
  (0 <= 100)) -> in_range(temp___expr_159))

type controlangle

logic controlangleqtint : controlangle -> int

axiom controlangleqtaxiom :
  (forall i:controlangle. ((- 45) <= controlangleqtint(i)))

axiom controlangleqtaxiom1 :
  (forall i:controlangle. (controlangleqtint(i) <= 45))

predicate in_range1(x: int) = (((- 45) <= x) and (x <= 45))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : controlangle, controlangle -> bool

logic dummy1 : controlangle

type controlangle__ref = { controlangle__content : controlangle
}

function controlangle__ref_controlangle__content__projection(a: controlangle__ref) : controlangle =
  (a).controlangle__content

predicate dynamic_invariant1(temp___expr_187: int, temp___is_init_183: bool,
  temp___skip_constant_184: bool, temp___do_toplevel_185: bool,
  temp___do_typ_inv_186: bool) = (((temp___is_init_183 = true) or
  ((- 45) <= 45)) -> in_range1(temp___expr_187))

type scaledata

logic scaledataqtint : scaledata -> int

axiom scaledataqtaxiom : (forall i:scaledata. ((- 100) <= scaledataqtint(i)))

axiom scaledataqtaxiom1 : (forall i:scaledata. (scaledataqtint(i) <= 100))

predicate in_range2(x: int) = (((- 100) <= x) and (x <= 100))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : scaledata, scaledata -> bool

logic dummy2 : scaledata

type scaledata__ref = { scaledata__content : scaledata
}

function scaledata__ref_scaledata__content__projection(a: scaledata__ref) : scaledata =
  (a).scaledata__content

predicate dynamic_invariant2(temp___expr_194: int, temp___is_init_190: bool,
  temp___skip_constant_191: bool, temp___do_toplevel_192: bool,
  temp___do_typ_inv_193: bool) = (((temp___is_init_190 = true) or
  ((- 100) <= 100)) -> in_range2(temp___expr_194))

axiom scale_movement__post_axiom :
  (forall mach1:int. forall present:int. forall target:int. forall max:int
  [scale_movement(mach1, present, target, max)].
  (((((dynamic_invariant(mach1, true, true, true, true) and
  dynamic_invariant2(present, true, true, true, true)) and
  dynamic_invariant2(target, true, true, true, true)) and
  dynamic_invariant1(max, true, true, true, true)) and (0 <  max)) ->
  (let result = scale_movement(mach1, present, target, max) : int in
  (scale_movement__function_guard(result, mach1, present, target, max) ->
  ((-max) <= result)))))

axiom scale_movement__post_axiom1 :
  (forall mach1:int. forall present:int. forall target:int. forall max:int
  [scale_movement(mach1, present, target, max)].
  (((((dynamic_invariant(mach1, true, true, true, true) and
  dynamic_invariant2(present, true, true, true, true)) and
  dynamic_invariant2(target, true, true, true, true)) and
  dynamic_invariant1(max, true, true, true, true)) and (0 <  max)) ->
  (let result = scale_movement(mach1, present, target, max) : int in
  (scale_movement__function_guard(result, mach1, present, target, max) ->
  (result <= max)))))

axiom scale_movement__post_axiom2 :
  (forall mach1:int. forall present:int. forall target:int. forall max:int
  [scale_movement(mach1, present, target, max)].
  (((((dynamic_invariant(mach1, true, true, true, true) and
  dynamic_invariant2(present, true, true, true, true)) and
  dynamic_invariant2(target, true, true, true, true)) and
  dynamic_invariant1(max, true, true, true, true)) and (0 <  max)) ->
  (let result = scale_movement(mach1, present, target, max) : int in
  (scale_movement__function_guard(result, mach1, present, target, max) ->
  dynamic_invariant1(result, true, false, true, true)))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type degreespersec

logic degreespersecqtint : degreespersec -> int

axiom degreespersecqtaxiom :
  (forall i:degreespersec. ((- 180) <= degreespersecqtint(i)))

axiom degreespersecqtaxiom1 :
  (forall i:degreespersec. (degreespersecqtint(i) <= 180))

predicate in_range3(x: int) = (((- 180) <= x) and (x <= 180))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : degreespersec, degreespersec -> bool

logic dummy3 : degreespersec

type degreespersec__ref = { degreespersec__content : degreespersec
}

function degreespersec__ref_degreespersec__content__projection(a: degreespersec__ref) : degreespersec =
  (a).degreespersec__content

predicate dynamic_invariant3(temp___expr_173: int, temp___is_init_169: bool,
  temp___skip_constant_170: bool, temp___do_toplevel_171: bool,
  temp___do_typ_inv_172: bool) = (((temp___is_init_169 = true) or
  ((- 180) <= 180)) -> in_range3(temp___expr_173))

logic c3b : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic c4b : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

type slipangle

logic slipangleqtint : slipangle -> int

axiom slipangleqtaxiom : (forall i:slipangle. ((- 25) <= slipangleqtint(i)))

axiom slipangleqtaxiom1 : (forall i:slipangle. (slipangleqtint(i) <= 25))

predicate in_range4(x: int) = (((- 25) <= x) and (x <= 25))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : slipangle, slipangle -> bool

logic dummy4 : slipangle

type slipangle__ref = { slipangle__content : slipangle
}

function slipangle__ref_slipangle__content__projection(a: slipangle__ref) : slipangle =
  (a).slipangle__content

predicate dynamic_invariant4(temp___expr_166: int, temp___is_init_162: bool,
  temp___skip_constant_163: bool, temp___do_toplevel_164: bool,
  temp___do_typ_inv_165: bool) = (((temp___is_init_162 = true) or
  ((- 25) <= 25)) -> in_range4(temp___expr_166))

type degreespersec1

logic degreespersecqtint1 : degreespersec1 -> int

axiom degreespersecqtaxiom2 :
  (forall i:degreespersec1. ((- 180) <= degreespersecqtint1(i)))

axiom degreespersecqtaxiom3 :
  (forall i:degreespersec1. (degreespersecqtint1(i) <= 180))

predicate in_range5(x: int) = (((- 180) <= x) and (x <= 180))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : degreespersec1, degreespersec1 -> bool

logic dummy5 : degreespersec1

type degreespersec__ref1 = { degreespersec__content1 : degreespersec1
}

function degreespersec__ref_degreespersec__content__2__projection(a: degreespersec__ref1) : degreespersec1 =
  (a).degreespersec__content1

predicate dynamic_invariant5(temp___expr_180: int, temp___is_init_176: bool,
  temp___skip_constant_177: bool, temp___do_toplevel_178: bool,
  temp___do_typ_inv_179: bool) = (((temp___is_init_176 = true) or
  ((- 180) <= 180)) -> in_range5(temp___expr_180))

axiom c4b__def_axiom : (c4b = mach)

axiom cdiv_cases :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((0 <  d) -> (div(n,
  d) = (n / d)))))

axiom cdiv_cases1 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((0 <  d) -> (div(n,
  d) = (-((-n) / d))))))

axiom cdiv_cases2 :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((d <  0) -> (div(n,
  d) = (-(n / (-d)))))))

axiom cdiv_cases3 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((d <  0) -> (div(n,
  d) = ((-n) / (-d))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))))

axiom cmod_cases1 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))))

axiom cmod_cases2 :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))))

axiom cmod_cases3 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d)))))))

 (* File "ap-heading-yaw.ads", line 7, characters 0-0 *)
goal defqtvc :
  (forall present_sliprate:int. forall rudder_movement:int.
  forall target_angle:int. (dynamic_invariant(mach, true, false, true,
  true) -> (dynamic_invariant4(slip, true, false, true, true) ->
  (dynamic_invariant5(present_sliprate, false, false, true, true) ->
  (dynamic_invariant1(rudder_movement, false, false, true, true) ->
  (forall ada___ada___ada___ap__heading__yaw__rate__calc_yawrate__present_yawrate:int.
  (dynamic_invariant3(ada___ada___ada___ap__heading__yaw__rate__calc_yawrate__present_yawrate,
  true, true, true, true) ->
  (forall present_sliprate1:int.
  ((present_sliprate1 = ada___ada___ada___ap__heading__yaw__rate__calc_yawrate__present_yawrate) ->
  ((present_sliprate1 = c3b) -> (dynamic_invariant5(c3b, true, false, true,
  true) -> ((mach = c4b) -> (dynamic_invariant(c4b, true, false, true,
  true) -> (dynamic_invariant1(target_angle, false, false, true, true) ->
  (0 <  20)))))))))))))))
