(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic v : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type mult_bit_boolean

function pos_to_rep(x: int) : int = (if (x = 1) then 43605 else 21930)

predicate in_range(x: int) = ((0 <= x) and (x <= 1))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : mult_bit_boolean, mult_bit_boolean -> bool

logic dummy : mult_bit_boolean

type mult_bit_boolean__ref = { mult_bit_boolean__content : mult_bit_boolean
}

function mult_bit_boolean__ref_mult_bit_boolean__content__projection(a: mult_bit_boolean__ref) : mult_bit_boolean =
  (a).mult_bit_boolean__content

predicate dynamic_invariant(temp___expr_158: int, temp___is_init_154: bool,
  temp___skip_constant_155: bool, temp___do_toplevel_156: bool,
  temp___do_typ_inv_157: bool) = (((temp___is_init_154 = true) or
  (0 <= 1)) -> in_range(temp___expr_158))

 (* File "no_optim.ads", line 5, characters 0-0 *)
goal defqtvc : (dynamic_invariant(v, true, false, true, true) ->
  (forall ret_val:int. ((ret_val = v) -> (dynamic_invariant(ret_val, true,
  false, true, true) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (ret_val = 1) then true else false)) ->
  ((not (spark__branch = true)) ->
  (forall spark__branch1:bool.
  ((spark__branch1 = (if (ret_val = 0) then true else false)) ->
  ((spark__branch1 = true) -> (ret_val = 0)))))))))))
