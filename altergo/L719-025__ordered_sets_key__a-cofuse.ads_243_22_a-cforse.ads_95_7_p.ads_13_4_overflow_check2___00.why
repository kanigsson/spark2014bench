(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq : us_rep, us_rep -> bool

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type set__ref = { set__content : us_rep
}

function set__ref_set__content__2__projection(a: set__ref) : us_rep =
  (a).set__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq1 : count_type, count_type -> bool

logic dummy1 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

predicate dynamic_invariant(temp___expr_304: int, temp___is_init_300: bool,
  temp___skip_constant_301: bool, temp___do_toplevel_302: bool,
  temp___do_typ_inv_303: bool) = (((temp___is_init_300 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_304))

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq(a, b)]. (user_eq(a, b) = oeq(a,
  b)))

predicate default_initial_assumption(temp___expr_342: us_rep,
  temp___skip_top_level_343: bool) =
  ((not (temp___skip_top_level_343 = true)) ->
  (is_empty(temp___expr_342) = true))

axiom length__post_axiom :
  (forall container:us_rep [length(container)].
  dynamic_invariant(length(container), true, false, true, true))

logic num_overlaps : us_rep, us_rep -> int

logic num_overlaps__function_guard : int, us_rep, us_rep -> prop

logic ole : us_rep, us_rep -> bool

logic ole__function_guard : bool, us_rep, us_rep -> prop

logic no_overlap : us_rep, us_rep -> bool

logic no_overlap__function_guard : bool, us_rep, us_rep -> prop

logic intersection : us_rep, us_rep -> us_rep

logic intersection__function_guard : us_rep, us_rep, us_rep -> prop

axiom num_overlaps__post_axiom :
  (forall left:us_rep. forall right:us_rep [num_overlaps(left, right)].
  (num_overlaps(left, right) = length(intersection(left, right))))

axiom num_overlaps__post_axiom1 :
  (forall left:us_rep. forall right:us_rep [num_overlaps(left, right)].
  ((ole(left, right) = true) -> (num_overlaps(left, right) = length(left))))

axiom num_overlaps__post_axiom2 :
  (forall left:us_rep. forall right:us_rep [num_overlaps(left, right)].
  ((not (ole(left, right) = true)) -> (num_overlaps(left,
  right) <  length(left))))

axiom num_overlaps__post_axiom3 :
  (forall left:us_rep. forall right:us_rep [num_overlaps(left, right)].
  ((ole(right, left) = true) -> (num_overlaps(left, right) = length(right))))

axiom num_overlaps__post_axiom4 :
  (forall left:us_rep. forall right:us_rep [num_overlaps(left, right)].
  ((not (ole(right, left) = true)) -> (num_overlaps(left,
  right) <  length(right))))

axiom num_overlaps__post_axiom5 :
  (forall left:us_rep. forall right:us_rep [num_overlaps(left, right)].
  ((num_overlaps(left, right) = 0) -> (no_overlap(left, right) = true)))

axiom num_overlaps__post_axiom6 :
  (forall left:us_rep. forall right:us_rep [num_overlaps(left, right)].
  ((no_overlap(left, right) = true) -> (num_overlaps(left, right) = 0)))

axiom num_overlaps__post_axiom7 :
  (forall left:us_rep. forall right:us_rep [num_overlaps(left, right)].
  dynamic_invariant(num_overlaps(left, right), true, false, true, true))

logic left : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic right : us_rep

logic attr__ATTRIBUTE_ADDRESS1 : int

type tcount_typeB

logic tcount_typeBqtint : tcount_typeB -> int

axiom tcount_typeBqtaxiom :
  (forall i:tcount_typeB. ((- 2147483648) <= tcount_typeBqtint(i)))

axiom tcount_typeBqtaxiom1 :
  (forall i:tcount_typeB. (tcount_typeBqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq2 : tcount_typeB, tcount_typeB -> bool

logic dummy2 : tcount_typeB

type tcount_typeB__ref = { tcount_typeB__content : tcount_typeB
}

function tcount_typeB__ref_tcount_typeB__content__projection(a: tcount_typeB__ref) : tcount_typeB =
  (a).tcount_typeB__content

type element_type

logic element_typeqtint : element_type -> int

axiom element_typeqtaxiom :
  (forall i:element_type. (1 <= element_typeqtint(i)))

axiom element_typeqtaxiom1 :
  (forall i:element_type. (element_typeqtint(i) <= 100))

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq3 : element_type, element_type -> bool

logic dummy3 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_element_type__content__projection(a: element_type__ref) : element_type =
  (a).element_type__content

predicate dynamic_invariant1(temp___expr_286: int, temp___is_init_282: bool,
  temp___skip_constant_283: bool, temp___do_toplevel_284: bool,
  temp___do_typ_inv_285: bool) = (((temp___is_init_282 = true) or
  (1 <= 100)) -> in_range2(temp___expr_286))

logic my_inf : int, int -> bool

logic my_inf__function_guard : bool, int, int -> prop

axiom my_inf__def_axiom :
  (forall i1:int. forall i2:int [my_inf(i1, i2)]. ((my_inf(i1, i2) = true) ->
  (i1 <  i2)))

axiom my_inf__def_axiom1 :
  (forall i1:int. forall i2:int [my_inf(i1, i2)]. ((i1 <  i2) -> (my_inf(i1,
  i2) = true)))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq4(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range3(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE3 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> bool

axiom temp___result_157qtdef :
  (forall left1:int. forall right1:int. my_inf__function_guard(my_inf(left1,
  right1), left1, right1))

axiom temp___result_158qtdef :
  (forall left1:int. forall right1:int. my_inf__function_guard(my_inf(right1,
  left1), right1, left1))

function equivalent_elements(left1: int, right1: int) : bool =
  andb(notb(my_inf(left1, right1)), notb(my_inf(right1, left1)))

logic equivalent_elements__function_guard : bool, int, int -> prop

logic contains : us_rep, int -> bool

logic contains__function_guard : bool, us_rep, int -> prop

type element_type1

logic element_typeqtint1 : element_type1 -> int

axiom element_typeqtaxiom2 :
  (forall i:element_type1. (1 <= element_typeqtint1(i)))

axiom element_typeqtaxiom3 :
  (forall i:element_type1. (element_typeqtint1(i) <= 100))

predicate in_range4(x: int) = ((1 <= x) and (x <= 100))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : element_type1, element_type1 -> bool

logic dummy4 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref_element_type__content__3__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

predicate dynamic_invariant2(temp___expr_334: int, temp___is_init_330: bool,
  temp___skip_constant_331: bool, temp___do_toplevel_332: bool,
  temp___do_typ_inv_333: bool) = (((temp___is_init_330 = true) or
  (1 <= 100)) -> in_range4(temp___expr_334))

axiom contains__post_axiom :
  (forall container:us_rep.
  (forall item:int [contains(container, item)]. (dynamic_invariant2(item,
  true, true, true, true) -> ((of_int(1) = true) ->
  ((exists e:int. ((in_range4(e) and (contains(container, e) = true)) and
   (equivalent_elements(e, item) = true))) ->
  (contains(container, item) = true))))))

axiom ole__post_axiom :
  (forall left1:us_rep. forall right1:us_rep [ole(left1, right1)].
  ((ole(left1, right1) = true) ->
  (forall item:int. ((in_range4(item) and (contains(left1, item) = true)) ->
  (contains(right1, item) = true)))))

axiom ole__post_axiom1 :
  (forall left1:us_rep. forall right1:us_rep [ole(left1, right1)].
  ((forall item:int. ((in_range4(item) and (contains(left1, item) = true)) ->
   (contains(right1, item) = true))) ->
  (ole(left1, right1) = true)))

axiom oeq__post_axiom :
  (forall left1:us_rep. forall right1:us_rep [oeq(left1, right1)].
  ((oeq(left1, right1) = true) -> (ole(left1, right1) = true)))

axiom oeq__post_axiom1 :
  (forall left1:us_rep. forall right1:us_rep [oeq(left1, right1)].
  ((oeq(left1, right1) = true) -> (ole(right1, left1) = true)))

axiom oeq__post_axiom2 :
  (forall left1:us_rep. forall right1:us_rep [oeq(left1, right1)].
  (((ole(left1, right1) = true) and (ole(right1, left1) = true)) ->
  (oeq(left1, right1) = true)))

axiom is_empty__post_axiom :
  (forall container:us_rep [is_empty(container)].
  ((is_empty(container) = true) ->
  (forall item:int. (not (in_range4(item) and (contains(container,
  item) = true))))))

axiom is_empty__post_axiom1 :
  (forall container:us_rep [is_empty(container)].
  ((forall item:int. (not (in_range4(item) and (contains(container,
   item) = true)))) ->
  (is_empty(container) = true)))

axiom is_empty__post_axiom2 :
  (forall container:us_rep [is_empty(container)].
  ((is_empty(container) = true) -> (length(container) = 0)))

axiom is_empty__post_axiom3 :
  (forall container:us_rep [is_empty(container)]. ((length(container) = 0) ->
  (is_empty(container) = true)))

logic includes_intersection : us_rep, us_rep, us_rep -> bool

logic includes_intersection__function_guard : bool, us_rep, us_rep,
  us_rep -> prop

axiom includes_intersection__post_axiom :
  (forall container:us_rep. forall left1:us_rep. forall right1:us_rep
  [includes_intersection(container, left1, right1)].
  ((includes_intersection(container, left1, right1) = true) ->
  (forall item:int. ((in_range4(item) and (contains(left1, item) = true)) ->
  ((contains(right1, item) = true) -> (contains(container, item) = true))))))

axiom includes_intersection__post_axiom1 :
  (forall container:us_rep. forall left1:us_rep. forall right1:us_rep
  [includes_intersection(container, left1, right1)].
  ((forall item:int. ((in_range4(item) and (contains(left1, item) = true)) ->
   ((contains(right1, item) = true) -> (contains(container, item) = true)))) ->
  (includes_intersection(container, left1, right1) = true)))

axiom no_overlap__post_axiom :
  (forall left1:us_rep. forall right1:us_rep [no_overlap(left1, right1)].
  ((no_overlap(left1, right1) = true) ->
  (forall item:int. ((in_range4(item) and (contains(left1, item) = true)) ->
  (not (contains(right1, item) = true))))))

axiom no_overlap__post_axiom1 :
  (forall left1:us_rep. forall right1:us_rep [no_overlap(left1, right1)].
  ((forall item:int. ((in_range4(item) and (contains(left1, item) = true)) ->
   (not (contains(right1, item) = true)))) ->
  (no_overlap(left1, right1) = true)))

axiom intersection__post_axiom :
  (forall left1:us_rep. forall right1:us_rep [intersection(left1, right1)].
  (ole(intersection(left1, right1), left1) = true))

axiom intersection__post_axiom1 :
  (forall left1:us_rep. forall right1:us_rep [intersection(left1, right1)].
  (ole(intersection(left1, right1), right1) = true))

axiom intersection__post_axiom2 :
  (forall left1:us_rep. forall right1:us_rep [intersection(left1, right1)].
  (includes_intersection(intersection(left1, right1), left1, right1) = true))

 (* File "a-cofuse.ads", line 238, characters 0-0 *)
goal defqtvc : (let o = length(right) : int in (dynamic_invariant(o, true,
  false, true, true) -> (in_range1((2147483647 - o)) -> (let o1 = right
  : us_rep in (let o2 = left : us_rep in (let o3 = num_overlaps(o2, o1)
  : int in ((dynamic_invariant(o3, true, false, true, true) and
  ((((o3 = length(intersection(o2, o1))) and (if (ole(o2,
  o1) = true) then (o3 = length(o2)) else (o3 <  length(o2)))) and
  (if (ole(o1,
  o2) = true) then (o3 = length(o1)) else (o3 <  length(o1)))) and
  ((o3 = 0) <-> (no_overlap(o2, o1) = true)))) -> (let o4 = length(left)
  : int in (dynamic_invariant(o4, true, false, true, true) ->
  in_range1((o4 - o3)))))))))))
