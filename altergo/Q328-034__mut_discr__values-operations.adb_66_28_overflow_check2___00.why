(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (div(x, y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((-abs_int(y)) <  mod(x,
  y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (mod(x, y) <  abs_int(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <  y) then (x % y) else ((x % y) + y))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

logic op : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic size : int -> int

logic size__function_guard : int, int -> prop

type tlastS

logic tlastSqtint : tlastS -> int

axiom tlastSqtaxiom : (forall i:tlastS. (0 <= tlastSqtint(i)))

axiom tlastSqtaxiom1 : (forall i:tlastS. (tlastSqtint(i) <= 200))

predicate in_range2(x: int) = ((0 <= x) and (x <= 200))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : tlastS, tlastS -> bool

logic dummy1 : tlastS

type tlastS__ref = { tlastS__content : tlastS
}

function tlastS__ref_tlastS__content__projection(a: tlastS__ref) : tlastS =
  (a).tlastS__content

predicate dynamic_invariant1(temp___expr_171: int, temp___is_init_167: bool,
  temp___skip_constant_168: bool, temp___do_toplevel_169: bool,
  temp___do_typ_inv_170: bool) = (((temp___is_init_167 = true) or
  (0 <= 200)) -> in_range2(temp___expr_171))

axiom size__post_axiom :
  (forall stack__last:int [size(stack__last)].
  (dynamic_invariant1(stack__last, true, true, true, true) -> (let result =
  size(stack__last) : int in (size__function_guard(result, stack__last) ->
  dynamic_invariant(result, true, false, true, true)))))

axiom size__def_axiom :
  (forall stack__last:int [size(stack__last)].
  (dynamic_invariant1(stack__last, true, true, true, true) ->
  (size(stack__last) = stack__last)))

type us_split_fields = { rec__types__value__e : integer
}

function us_split_fields_rec__types__value__e__projection(a: us_split_fields) : integer =
  (a).rec__types__value__e

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__types__value__e) = to_rep(((b).us_split_fields1).rec__types__value__e)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic types__value__e__first__bit : int

logic types__value__e__last__bit : int

logic types__value__e__position : int

axiom types__value__e__first__bit_axiom : (0 <= types__value__e__first__bit)

axiom types__value__e__last__bit_axiom :
  (types__value__e__first__bit <  types__value__e__last__bit)

axiom types__value__e__position_axiom : (0 <= types__value__e__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type value__ref = { value__content : us_rep
}

function value__ref_value__content__projection(a: value__ref) : us_rep =
  (a).value__content

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic empty : int -> bool

logic empty__function_guard : bool, int -> prop

logic full : int -> bool

logic full__function_guard : bool, int -> prop

type operation

predicate in_range3(x: int) = ((0 <= x) and (x <= 3))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : operation, operation -> bool

logic dummy3 : operation

type operation__ref = { operation__content : operation
}

function operation__ref_operation__content__projection(a: operation__ref) : operation =
  (a).operation__content

predicate dynamic_invariant2(temp___expr_162: int, temp___is_init_158: bool,
  temp___skip_constant_159: bool, temp___do_toplevel_160: bool,
  temp___do_typ_inv_161: bool) = (((temp___is_init_158 = true) or
  (0 <= 3)) -> in_range3(temp___expr_162))

axiom empty__def_axiom :
  (forall stack__last:int [empty(stack__last)].
  ((empty(stack__last) = true) -> (stack__last <  1)))

axiom empty__def_axiom1 :
  (forall stack__last:int [empty(stack__last)]. ((stack__last <  1) ->
  (empty(stack__last) = true)))

axiom full__def_axiom :
  (forall stack__last:int [full(stack__last)]. ((full(stack__last) = true) ->
  (200 <= stack__last)))

axiom full__def_axiom1 :
  (forall stack__last:int [full(stack__last)]. ((200 <= stack__last) ->
  (full(stack__last) = true)))

axiom cdiv_cases :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((0 <  d) -> (div(n,
  d) = (n / d)))))

axiom cdiv_cases1 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((0 <  d) -> (div(n,
  d) = (-((-n) / d))))))

axiom cdiv_cases2 :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((d <  0) -> (div(n,
  d) = (-(n / (-d)))))))

axiom cdiv_cases3 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((d <  0) -> (div(n,
  d) = ((-n) / (-d))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))))

axiom cmod_cases1 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))))

axiom cmod_cases2 :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))))

axiom cmod_cases3 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d)))))))

 (* File "values-operations.ads", line 16, characters 0-0 *)
goal defqtvc :
  (forall last:int. forall result__:int. (dynamic_invariant2(op, true, false,
  true, true) -> (dynamic_invariant1(last, true, false, true, true) ->
  ((forall last1:int. size__function_guard(size(last1), last1)) ->
  ((2 <= size(last)) -> (dynamic_invariant(result__, false, false, true,
  true) ->
  (forall last1:int. ((last1 = last) ->
  (forall last2:int. forall v2__split_fields:integer.
  ((forall last3:int. size__function_guard(size(last3), last3)) ->
  ((forall last3:int. size__function_guard(size(last3), last3)) ->
  (((size(last2) = (size(last1) - 1)) and dynamic_invariant1(last2, true,
  true, true, true)) ->
  (forall last3:int. ((last3 = last2) ->
  (forall last4:int. forall v1__split_fields:integer.
  ((forall last5:int. size__function_guard(size(last5), last5)) ->
  ((forall last5:int. size__function_guard(size(last5), last5)) ->
  (((size(last4) = (size(last3) - 1)) and dynamic_invariant1(last4, true,
  true, true, true)) ->
  (forall spark__branch:bool.
  ((exists o:bool.
   ((exists o1:bool.
    ((if (op = 0) then (o1 = true) else (not (o1 = true))) and
    (if (o1 = true) then (o = true) else (if (op = 3) then (o = true) else (not (o = true)))))) and
   (exists spark__branch1:bool. ((spark__branch1 = o) and
   (if (spark__branch1 = true) then (exists o1:int.
                                    ((to_rep(v1__split_fields) = o1) and
                                    (exists o2:int.
                                    ((to_rep(v1__split_fields) = o2) and
                                    (exists spark__branch2:bool.
                                    ((spark__branch2 = (if (andb((if ((- 1073741823) <= o2) then true else false),
                                    (if (o1 <= 1073741822) then true else false)) = true) then false else true)) and
                                    ((not (spark__branch2 = true)) and
                                    (exists o3:int.
                                    ((to_rep(v2__split_fields) = o3) and
                                    (exists o4:int.
                                    ((to_rep(v2__split_fields) = o4) and
                                    ((spark__branch = (if (andb((if ((- 1073741823) <= o4) then true else false),
                                    (if (o3 <= 1073741822) then true else false)) = true) then false else true)) and
                                    (not (spark__branch = true)))))))))))))) else 
   (exists spark__branch2:bool.
   ((spark__branch2 = (if (op = 1) then true else false)) and
   (if (spark__branch2 = true) then (exists o1:int.
                                    ((to_rep(v2__split_fields) = o1) and
                                    ((spark__branch = (if (o1 = 0) then true else false)) and
                                    (not (spark__branch = true))))) else (spark__branch = spark__branch2))))))))) ->
  (forall spark__branch1:bool.
  ((spark__branch1 = (if (op = 0) then true else false)) ->
  ((not (spark__branch1 = true)) ->
  (forall spark__branch2:bool.
  ((spark__branch2 = (if (op = 1) then true else false)) ->
  ((spark__branch2 = true) ->
  (forall o:int. ((to_rep(v2__split_fields) = o) ->
  (forall o1:int. ((to_rep(v1__split_fields) = o1) -> in_range1(div(o1, o))))))))))))))))))))))))))))))))
