(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_39))

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq1(a: (int,natural) farray, a__first: int, a__last: int,
  b: (int,natural) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic attr__ATTRIBUTE_ADDRESS : int

type us_split_fields = { rec__my_container__cursor__index : natural
}

function us_split_fields_rec__my_container__cursor__index__projection(a: us_split_fields) : natural =
  (a).rec__my_container__cursor__index

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__my_container__cursor__index) = to_rep(((b).us_split_fields1).rec__my_container__cursor__index)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic my_container__cursor__index__first__bit : int

logic my_container__cursor__index__last__bit : int

logic my_container__cursor__index__position : int

axiom my_container__cursor__index__first__bit_axiom :
  (0 <= my_container__cursor__index__first__bit)

axiom my_container__cursor__index__last__bit_axiom :
  (my_container__cursor__index__first__bit <  my_container__cursor__index__last__bit)

axiom my_container__cursor__index__position_axiom :
  (0 <= my_container__cursor__index__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type cursor__ref = { cursor__content : us_rep
}

function cursor__ref_cursor__content__projection(a: cursor__ref) : us_rep =
  (a).cursor__content

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic has_element : (int,natural) farray, us_rep -> bool

logic has_element__function_guard : bool, (int,natural) farray,
  us_rep -> prop

logic element : (int,natural) farray, us_rep -> int

logic element__function_guard : int, (int,natural) farray, us_rep -> prop

axiom element__post_axiom :
  (forall c:(int,natural) farray. forall p:us_rep.
  has_element__function_guard(has_element(c, p), c, p))

axiom element__post_axiom1 :
  (forall c:(int,natural) farray.
  (forall p:us_rep [element(c, p)]. ((has_element(c, p) = true) ->
  (let result = element(c, p) : int in (element__function_guard(result, c,
  p) -> dynamic_invariant(result, true, false, true, true))))))

logic valid : int -> bool

logic valid__function_guard : bool, int -> prop

logic mem : (int,natural) farray, int -> bool

logic mem__function_guard : bool, (int,natural) farray, int -> prop

logic valid1 : int -> bool

logic valid__function_guard1 : bool, int -> prop

logic valid2 : int -> bool

logic valid__function_guard2 : bool, int -> prop

logic m_has_element : (int,natural) farray, int -> bool

logic m_has_element__function_guard : bool, (int,natural) farray, int -> prop

logic m_element : (int,natural) farray, int -> int

logic m_element__function_guard : int, (int,natural) farray, int -> prop

logic get_model : (int,natural) farray -> (int,natural) farray

logic get_model__function_guard : (int,natural) farray,
  (int,natural) farray -> prop

axiom m_element__post_axiom :
  (forall c:(int,natural) farray. forall p:int.
  m_has_element__function_guard(m_has_element(c, p), c, p))

axiom m_element__post_axiom1 :
  (forall c:(int,natural) farray.
  (forall p:int [m_element(c, p)]. ((dynamic_invariant(p, true, true, true,
  true) and (m_has_element(c, p) = true)) -> (let result = m_element(c, p)
  : int in (m_element__function_guard(result, c, p) ->
  dynamic_invariant(result, true, false, true, true))))))

 (* File "test_containers.adb", line 4, characters 0-0 *)
goal defqtvc :
  (forall p1__split_fields:natural. forall p2:int. forall p3:int.
  (dynamic_invariant(p2, false, false, true, true) -> (dynamic_invariant(p3,
  false, false, true, true) ->
  (forall c1:(int,natural) farray.
  ((forall c11:(int,natural) farray. forall temp___268:us_rep.
   has_element__function_guard(has_element(c11, temp___268), c11,
   temp___268)) ->
  ((forall c11:(int,natural) farray. forall temp___268:us_rep.
   element__function_guard(element(c11, temp___268), c11, temp___268)) ->
  ((forall e:int. valid__function_guard(valid(e), e)) ->
  ((forall temp___268:us_rep. ((has_element(c1, temp___268) = true) ->
   (valid(element(c1, temp___268)) = true))) ->
  ((forall p1__split_fields1:natural. forall c11:(int,natural) farray.
   has_element__function_guard(has_element(c11, { us_split_fields1 = {
   rec__my_container__cursor__index = p1__split_fields1 } }), c11, {
   us_split_fields1 = { rec__my_container__cursor__index = p1__split_fields1
   } })) ->
  ((has_element(c1, { us_split_fields1 = { rec__my_container__cursor__index =
  p1__split_fields } }) = true) ->
  ((forall c11:(int,natural) farray. forall o:us_rep.
   has_element__function_guard(has_element(c11, o), c11, o)) ->
  (has_element(c1, { us_split_fields1 = { rec__my_container__cursor__index =
  p1__split_fields } }) = true))))))))))))
