(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))))

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

logic to_string : us_image, int -> us_t

logic from_string : us_t -> us_image

axiom to_string__first :
  (forall x:us_image.
  (forall s:int [to_string(x, s)]. (first1(to_string(x, s)) = 1)))

axiom to_string__length :
  (forall x:us_image.
  (forall s:int [to_string(x, s)]. ((0 <= s) -> (length(to_string(x,
  s)) <= s))))

type opt_index_type

logic opt_index_typeqtint : opt_index_type -> int

axiom opt_index_typeqtaxiom :
  (forall i:opt_index_type. (0 <= opt_index_typeqtint(i)))

axiom opt_index_typeqtaxiom1 :
  (forall i:opt_index_type. (opt_index_typeqtint(i) <= 32))

predicate in_range4(x: int) = ((0 <= x) and (x <= 32))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : opt_index_type, opt_index_type -> bool

logic dummy4 : opt_index_type

type opt_index_type__ref = { opt_index_type__content : opt_index_type
}

function opt_index_type__ref_opt_index_type__content__projection(a: opt_index_type__ref) : opt_index_type =
  (a).opt_index_type__content

function to_rep2(x: opt_index_type) : int = opt_index_typeqtint(x)

logic of_rep2 : int -> opt_index_type

axiom inversion_axiom2 :
  (forall x:opt_index_type [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:opt_index_type [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type elem_type

logic elem_typeqtint : elem_type -> int

axiom elem_typeqtaxiom :
  (forall i:elem_type. ((- 2147483648) <= elem_typeqtint(i)))

axiom elem_typeqtaxiom1 :
  (forall i:elem_type. (elem_typeqtint(i) <= 2147483647))

predicate in_range5(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : elem_type, elem_type -> bool

logic dummy5 : elem_type

type elem_type__ref = { elem_type__content : elem_type
}

function elem_type__ref_elem_type__content__projection(a: elem_type__ref) : elem_type =
  (a).elem_type__content

function to_rep3(x: elem_type) : int = elem_typeqtint(x)

logic of_rep3 : int -> elem_type

axiom inversion_axiom3 :
  (forall x:elem_type [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:elem_type [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

type map__ref1 = { map__content1 : (int,elem_type) farray
}

logic slide1 : (int,elem_type) farray, int, int -> (int,elem_type) farray

axiom slide_eq1 :
  (forall a:(int,elem_type) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,elem_type) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq8(a: (int,elem_type) farray, a__first: int, a__last: int,
  b: (int,elem_type) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep3((a[temp___idx_156])) = to_rep3((b[((b__first - a__first) + temp___idx_156)])))))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,elem_type) farray. forall b:(int,elem_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,elem_type) farray. forall b:(int,elem_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,elem_type) farray. forall b:(int,elem_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,elem_type) farray. forall b:(int,elem_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep3((a[temp___idx_156])) = to_rep3((b[((b__first - a__first) + temp___idx_156)]))))))))

logic dummy6 : (int,elem_type) farray

logic value__size1 : int

logic object__size1 : int

logic component__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq6 : (int,elem_type) farray, (int,elem_type) farray -> bool

type us_split_fields = { rec__repro_main__int_table__t__elems :
(int,elem_type) farray; rec__repro_main__int_table__t__last : opt_index_type
}

function us_split_fields_rec__repro_main__int_table__t__elems__projection(a: us_split_fields) : (int,elem_type) farray =
  (a).rec__repro_main__int_table__t__elems

function us_split_fields_rec__repro_main__int_table__t__last__projection(a: us_split_fields) : opt_index_type =
  (a).rec__repro_main__int_table__t__last

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq9(a: us_rep, b: us_rep) : bool =
  (if ((bool_eq8(((a).us_split_fields1).rec__repro_main__int_table__t__elems,
  1, 32, ((b).us_split_fields1).rec__repro_main__int_table__t__elems, 1,
  32) = true) and
  (to_rep2(((a).us_split_fields1).rec__repro_main__int_table__t__last) = to_rep2(((b).us_split_fields1).rec__repro_main__int_table__t__last))) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic repro_main__int_table__t__elems__first__bit : int

logic repro_main__int_table__t__elems__last__bit : int

logic repro_main__int_table__t__elems__position : int

axiom repro_main__int_table__t__elems__first__bit_axiom :
  (0 <= repro_main__int_table__t__elems__first__bit)

axiom repro_main__int_table__t__elems__last__bit_axiom :
  (repro_main__int_table__t__elems__first__bit <  repro_main__int_table__t__elems__last__bit)

axiom repro_main__int_table__t__elems__position_axiom :
  (0 <= repro_main__int_table__t__elems__position)

logic repro_main__int_table__t__last__first__bit : int

logic repro_main__int_table__t__last__last__bit : int

logic repro_main__int_table__t__last__position : int

axiom repro_main__int_table__t__last__first__bit_axiom :
  (0 <= repro_main__int_table__t__last__first__bit)

axiom repro_main__int_table__t__last__last__bit_axiom :
  (repro_main__int_table__t__last__first__bit <  repro_main__int_table__t__last__last__bit)

axiom repro_main__int_table__t__last__position_axiom :
  (0 <= repro_main__int_table__t__last__position)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy7 : us_rep

type t__ref = { t__content : us_rep
}

function t__ref_t__content__projection(a: t__ref) : us_rep = (a).t__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range6(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : natural, natural -> bool

logic dummy8 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def2 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first2(mk1(f, l))) = f))))

axiom mk_def3 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last2(mk1(f, l))) = l))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range6(low) and in_range6(high)))))

type us_t1 = { elts1 : (int,elem_type) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,elem_type) farray = (a).elts1

function of_array1(a: (int,elem_type) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

function length1(a: us_t1) : int =
  (if (first3(a) <= last3(a)) then ((last3(a) - first3(a)) + 1) else 0)

logic value__size3 : int

logic object__size3 : int

logic component__size2 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom component__size_axiom2 : (0 <= component__size2)

axiom alignment_axiom3 : (0 <= alignment3)

function bool_eq11(x: us_t1, y: us_t1) : bool = bool_eq8((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq9 : us_t1, us_t1 -> bool

logic dummy9 : us_t1

type model_type__ref = { model_type__content : us_t1
}

function model_type__ref_model_type__content__projection(a: model_type__ref) : us_t1 =
  (a).model_type__content

logic model : us_rep -> us_t1

logic model__function_guard : us_t1, us_rep -> prop

logic empty_table : unit -> us_rep

logic empty_table__function_guard : us_rep, unit -> prop

logic temp_____aggregate_def_260 : int -> (int,elem_type) farray

axiom empty_table__post_axiom :
  (forall result:us_rep. model__function_guard(model(result), result))

axiom empty_table__post_axiom1 :
  (forall us_void_param:unit [empty_table(us_void_param)]. (let result =
  empty_table(us_void_param) : us_rep in (empty_table__function_guard(result,
  us_void_param) -> (length1(model(result)) = 0))))

logic rliteral : opt_index_type

axiom rliteral_axiom : (opt_index_typeqtint(rliteral) = 0)

axiom empty_table__def_axiom :
  (forall us_void_param:unit [empty_table(us_void_param)].
  (empty_table(us_void_param) = { us_split_fields1 = {
  rec__repro_main__int_table__t__elems = temp_____aggregate_def_260(0);
  rec__repro_main__int_table__t__last = rliteral } }))

logic first4 : us_rep -> int

logic first__function_guard : int, us_rep -> prop

logic first5 : us_rep -> int

logic first__function_guard1 : int, us_rep -> prop

type cursor_type

logic cursor_typeqtint : cursor_type -> int

axiom cursor_typeqtaxiom : (forall i:cursor_type. (1 <= cursor_typeqtint(i)))

axiom cursor_typeqtaxiom1 :
  (forall i:cursor_type. (cursor_typeqtint(i) <= 33))

predicate in_range7(x: int) = ((1 <= x) and (x <= 33))

function bool_eq12(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq10 : cursor_type, cursor_type -> bool

logic dummy10 : cursor_type

type cursor_type__ref = { cursor_type__content : cursor_type
}

function cursor_type__ref_cursor_type__content__projection(a: cursor_type__ref) : cursor_type =
  (a).cursor_type__content

predicate dynamic_invariant(temp___expr_206: int, temp___is_init_202: bool,
  temp___skip_constant_203: bool, temp___do_toplevel_204: bool,
  temp___do_typ_inv_205: bool) = (((temp___is_init_202 = true) or
  (1 <= 33)) -> in_range7(temp___expr_206))

axiom first__post_axiom :
  (forall table:us_rep [first4(table)]. (let result = first4(table) : int in
  (first__function_guard(result, table) -> dynamic_invariant(result, true,
  false, true, true))))

axiom first__post_refine_axiom :
  (forall table:us_rep [first5(table)]. (let result = first5(table) : int in
  (first__function_guard1(result, table) -> (result = 1))))

axiom first__post_refine_axiom1 :
  (forall table:us_rep [first5(table)]. (let result = first5(table) : int in
  (first__function_guard1(result, table) -> dynamic_invariant(result, true,
  false, true, true))))

logic has_element : us_rep, int -> bool

logic has_element__function_guard : bool, us_rep, int -> prop

axiom has_element__def_axiom :
  (forall table:us_rep.
  (forall cursor:int [has_element(table, cursor)]. ((has_element(table,
  cursor) = true) -> (cursor <  33))))

axiom has_element__def_axiom1 :
  (forall table:us_rep.
  (forall cursor:int [has_element(table, cursor)]. ((has_element(table,
  cursor) = true) ->
  (cursor <= to_rep2(((table).us_split_fields1).rec__repro_main__int_table__t__last)))))

axiom has_element__def_axiom2 :
  (forall table:us_rep.
  (forall cursor:int [has_element(table, cursor)]. (((cursor <  33) and
  (cursor <= to_rep2(((table).us_split_fields1).rec__repro_main__int_table__t__last))) ->
  (has_element(table, cursor) = true))))

logic index_of : int -> int

logic index_of__function_guard : int, int -> prop

predicate dynamic_invariant1(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range6(temp___expr_39))

axiom index_of__post_axiom :
  (forall cursor:int [index_of(cursor)]. (dynamic_invariant(cursor, true,
  true, true, true) -> (let result = index_of(cursor) : int in
  (index_of__function_guard(result, cursor) -> dynamic_invariant1(result,
  true, false, true, true)))))

axiom index_of__def_axiom :
  (forall cursor:int [index_of(cursor)]. (dynamic_invariant(cursor, true,
  true, true, true) -> (index_of(cursor) = cursor)))

logic next : us_rep, int -> int

logic next__function_guard : int, us_rep, int -> prop

logic next1 : us_rep, int -> int

logic next__function_guard1 : int, us_rep, int -> prop

axiom next__post_axiom :
  (forall table:us_rep. forall cursor:int.
  has_element__function_guard(has_element(table, cursor), table, cursor))

axiom next__post_axiom1 :
  (forall table:us_rep.
  (forall cursor:int [next(table, cursor)]. ((dynamic_invariant(cursor, true,
  true, true, true) and (has_element(table, cursor) = true)) ->
  (forall table1:us_rep. forall result:int.
  has_element__function_guard(has_element(table1, result), table1, result)))))

axiom next__post_axiom2 :
  (forall table:us_rep.
  (forall cursor:int [next(table, cursor)]. ((dynamic_invariant(cursor, true,
  true, true, true) and (has_element(table, cursor) = true)) ->
  (forall cursor1:int. index_of__function_guard(index_of(cursor1), cursor1)))))

axiom next__post_axiom3 :
  (forall table:us_rep.
  (forall cursor:int [next(table, cursor)]. ((dynamic_invariant(cursor, true,
  true, true, true) and (has_element(table, cursor) = true)) ->
  (forall result:int. index_of__function_guard(index_of(result), result)))))

axiom next__post_axiom4 :
  (forall table:us_rep.
  (forall cursor:int [next(table, cursor)]. ((dynamic_invariant(cursor, true,
  true, true, true) and (has_element(table, cursor) = true)) -> (let result =
  next(table, cursor) : int in (next__function_guard(result, table,
  cursor) -> ((has_element(table, result) = true) ->
  (index_of(cursor) <  index_of(result))))))))

axiom next__post_axiom5 :
  (forall table:us_rep.
  (forall cursor:int [next(table, cursor)]. ((dynamic_invariant(cursor, true,
  true, true, true) and (has_element(table, cursor) = true)) -> (let result =
  next(table, cursor) : int in (next__function_guard(result, table,
  cursor) -> dynamic_invariant(result, true, false, true, true))))))

axiom next__post_refine_axiom :
  (forall table:us_rep. forall cursor:int.
  has_element__function_guard(has_element(table, cursor), table, cursor))

axiom next__post_refine_axiom1 :
  (forall table:us_rep.
  (forall cursor:int [next1(table, cursor)]. ((dynamic_invariant(cursor,
  true, true, true, true) and (has_element(table, cursor) = true)) ->
  (let result = next1(table, cursor) : int in (next__function_guard1(result,
  table, cursor) -> (cursor <  result))))))

axiom next__post_refine_axiom2 :
  (forall table:us_rep.
  (forall cursor:int [next1(table, cursor)]. ((dynamic_invariant(cursor,
  true, true, true, true) and (has_element(table, cursor) = true)) ->
  (let result = next1(table, cursor) : int in (next__function_guard1(result,
  table, cursor) -> dynamic_invariant(result, true, false, true, true))))))

axiom next__def_axiom :
  (forall table:us_rep.
  (forall cursor:int [next1(table, cursor)]. (dynamic_invariant(cursor, true,
  true, true, true) -> (next1(table, cursor) = (cursor + 1)))))

logic element : us_rep, int -> int

logic element__function_guard : int, us_rep, int -> prop

predicate dynamic_invariant2(temp___expr_199: int, temp___is_init_195: bool,
  temp___skip_constant_196: bool, temp___do_toplevel_197: bool,
  temp___do_typ_inv_198: bool) = (((temp___is_init_195 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range5(temp___expr_199))

axiom element__post_axiom :
  (forall table:us_rep. forall cursor:int.
  has_element__function_guard(has_element(table, cursor), table, cursor))

axiom element__post_axiom1 :
  (forall table:us_rep.
  (forall cursor:int [element(table, cursor)]. ((dynamic_invariant(cursor,
  true, true, true, true) and (has_element(table, cursor) = true)) ->
  (let result = element(table, cursor) : int in
  (element__function_guard(result, table, cursor) ->
  dynamic_invariant2(result, true, false, true, true))))))

axiom element__def_axiom :
  (forall table:us_rep.
  (forall cursor:int [element(table, cursor)]. (dynamic_invariant(cursor,
  true, true, true, true) -> (element(table,
  cursor) = to_rep3((((table).us_split_fields1).rec__repro_main__int_table__t__elems[cursor]))))))

logic length2 : us_rep -> int

logic length__function_guard : int, us_rep -> prop

logic member : us_rep, int -> bool

logic member__function_guard : bool, us_rep, int -> prop

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic line_length : us_private, us_private, us_private, us_private,
  us_private, us_private, us_private -> int

logic line_length__function_guard : int, us_private, us_private, us_private,
  us_private, us_private, us_private, us_private -> prop

logic page_length : us_private, us_private, us_private, us_private,
  us_private, us_private, us_private -> int

logic page_length__function_guard : int, us_private, us_private, us_private,
  us_private, us_private, us_private, us_private -> prop

predicate dynamic_invariant3(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range2(temp___expr_46))

predicate dynamic_invariant4(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range3(temp___expr_74))

predicate dynamic_invariant5(temp___expr_96: us_t, temp___is_init_92: bool,
  temp___skip_constant_93: bool, temp___do_toplevel_94: bool,
  temp___do_typ_inv_95: bool) = ((not (temp___skip_constant_93 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_96),
  last1(temp___expr_96)))

predicate dynamic_invariant6(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

type count

logic countqtint : count -> int

axiom countqtaxiom : (forall i:count. (0 <= countqtint(i)))

axiom countqtaxiom1 : (forall i:count. (countqtint(i) <= 2147483647))

predicate in_range8(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq13(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq11 : count, count -> bool

logic dummy11 : count

type count__ref = { count__content : count
}

function count__ref_count__content__projection(a: count__ref) : count =
  (a).count__content

predicate dynamic_invariant7(temp___expr_171: int, temp___is_init_167: bool,
  temp___skip_constant_168: bool, temp___do_toplevel_169: bool,
  temp___do_typ_inv_170: bool) = (((temp___is_init_167 = true) or
  (0 <= 2147483647)) -> in_range8(temp___expr_171))

axiom line_length__post_axiom :
  (forall ada___ada__text_io__standard_in:us_private.
  forall ada___ada__text_io__file_system:us_private.
  forall ada___ada__text_io__standard_out:us_private.
  forall ada___ada__text_io__standard_err:us_private.
  forall ada___ada__text_io__current_in:us_private.
  forall ada___ada__text_io__current_out:us_private.
  forall ada___ada__text_io__current_err:us_private
  [line_length(ada___ada__text_io__standard_in,
  ada___ada__text_io__file_system, ada___ada__text_io__standard_out,
  ada___ada__text_io__standard_err, ada___ada__text_io__current_in,
  ada___ada__text_io__current_out, ada___ada__text_io__current_err)].
  dynamic_invariant7(line_length(ada___ada__text_io__standard_in,
  ada___ada__text_io__file_system, ada___ada__text_io__standard_out,
  ada___ada__text_io__standard_err, ada___ada__text_io__current_in,
  ada___ada__text_io__current_out, ada___ada__text_io__current_err), true,
  false, true, true))

axiom page_length__post_axiom :
  (forall ada___ada__text_io__standard_in:us_private.
  forall ada___ada__text_io__file_system:us_private.
  forall ada___ada__text_io__standard_out:us_private.
  forall ada___ada__text_io__standard_err:us_private.
  forall ada___ada__text_io__current_in:us_private.
  forall ada___ada__text_io__current_out:us_private.
  forall ada___ada__text_io__current_err:us_private
  [page_length(ada___ada__text_io__standard_in,
  ada___ada__text_io__file_system, ada___ada__text_io__standard_out,
  ada___ada__text_io__standard_err, ada___ada__text_io__current_in,
  ada___ada__text_io__current_out, ada___ada__text_io__current_err)].
  dynamic_invariant7(page_length(ada___ada__text_io__standard_in,
  ada___ada__text_io__file_system, ada___ada__text_io__standard_out,
  ada___ada__text_io__standard_err, ada___ada__text_io__current_in,
  ada___ada__text_io__current_out, ada___ada__text_io__current_err), true,
  false, true, true))

predicate dynamic_invariant8(temp___expr_249: us_t1,
  temp___is_init_245: bool, temp___skip_constant_246: bool,
  temp___do_toplevel_247: bool, temp___do_typ_inv_248: bool) =
  ((not (temp___skip_constant_246 = true)) -> dynamic_property1(0,
  2147483647, first3(temp___expr_249), last3(temp___expr_249)))

type index_type

logic index_typeqtint : index_type -> int

axiom index_typeqtaxiom : (forall i:index_type. (1 <= index_typeqtint(i)))

axiom index_typeqtaxiom1 : (forall i:index_type. (index_typeqtint(i) <= 32))

predicate in_range9(x: int) = ((1 <= x) and (x <= 32))

function bool_eq14(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq12 : index_type, index_type -> bool

logic dummy12 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref_index_type__content__projection(a: index_type__ref) : index_type =
  (a).index_type__content

type t2

logic first6 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def4 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first6(mk2(f, l))) = f))))

axiom mk_def5 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last4(mk2(f, l))) = l))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range9(low) and in_range9(high)))))

type us_t2 = { elts2 : (int,elem_type) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,elem_type) farray = (a).elts2

function of_array2(a: (int,elem_type) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first7(a: us_t2) : int = to_rep1(first6((a).rt2))

function last5(a: us_t2) : int = to_rep1(last4((a).rt2))

function length3(a: us_t2) : int =
  (if (first7(a) <= last5(a)) then ((last5(a) - first7(a)) + 1) else 0)

logic value__size4 : int

logic object__size4 : int

logic component__size3 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom component__size_axiom3 : (0 <= component__size3)

axiom alignment_axiom4 : (0 <= alignment4)

function bool_eq15(x: us_t2, y: us_t2) : bool = bool_eq8((x).elts2,
  to_rep1(first6((x).rt2)), to_rep1(last4((x).rt2)), (y).elts2,
  to_rep1(first6((y).rt2)), to_rep1(last4((y).rt2)))

logic user_eq13 : us_t2, us_t2 -> bool

logic dummy13 : us_t2

type telem_arrayB__ref = { telem_arrayB__content : us_t2
}

function telem_arrayB__ref_telem_arrayB__content__projection(a: telem_arrayB__ref) : us_t2 =
  (a).telem_arrayB__content

type t38b__ref = { t38b__content : us_t2
}

function t38b__ref_t38b__content__projection(a: t38b__ref) : us_t2 =
  (a).t38b__content

axiom model__post_axiom :
  (forall table:us_rep [model(table)]. (let result = model(table) : us_t1 in
  (model__function_guard(result, table) -> dynamic_invariant8(result, true,
  false, true, true))))

axiom model__def_axiom :
  (forall table:us_rep [model(table)].
  (model(table) = of_array1(to_array2(of_array2(((table).us_split_fields1).rec__repro_main__int_table__t__elems,
  1,
  to_rep2(((table).us_split_fields1).rec__repro_main__int_table__t__last))),
  first7(of_array2(((table).us_split_fields1).rec__repro_main__int_table__t__elems,
  1,
  to_rep2(((table).us_split_fields1).rec__repro_main__int_table__t__last))),
  last5(of_array2(((table).us_split_fields1).rec__repro_main__int_table__t__elems,
  1,
  to_rep2(((table).us_split_fields1).rec__repro_main__int_table__t__last))))))

axiom length__post_axiom :
  (forall table:us_rep. model__function_guard(model(table), table))

axiom length__post_axiom1 :
  (forall table:us_rep [length2(table)]. (let result = length2(table)
  : int in (length__function_guard(result, table) ->
  (result = length1(model(table))))))

axiom length__post_axiom2 :
  (forall table:us_rep [length2(table)]. (let result = length2(table)
  : int in (length__function_guard(result, table) ->
  dynamic_invariant1(result, true, false, true, true))))

axiom length__def_axiom :
  (forall table:us_rep [length2(table)].
  (length2(table) = to_rep2(((table).us_split_fields1).rec__repro_main__int_table__t__last)))

axiom member__post_axiom :
  (forall table:us_rep.
  (forall elem:int [member(table, elem)]. (dynamic_invariant2(elem, true,
  true, true, true) ->
  (forall table1:us_rep. forall e:int. member__function_guard(member(table1,
  e), table1, e)))))

axiom member__post_axiom1 :
  (forall table:us_rep.
  (forall elem:int [member(table, elem)]. (dynamic_invariant2(elem, true,
  true, true, true) -> (let result = member(table, elem) : bool in
  (member__function_guard(result, table, elem) -> ((result = true) ->
  (exists e:int. ((in_range5(e) and (member(table, e) = true)) and
  (e = elem)))))))))

axiom member__post_axiom2 :
  (forall table:us_rep.
  (forall elem:int [member(table, elem)]. (dynamic_invariant2(elem, true,
  true, true, true) -> (let result = member(table, elem) : bool in
  (member__function_guard(result, table, elem) ->
  ((exists e:int. ((in_range5(e) and (member(table, e) = true)) and
   (e = elem))) ->
  (result = true)))))))

axiom member__def_axiom :
  (forall table:us_rep.
  (forall elem:int [member(table, elem)]. ((member(table, elem) = true) ->
  (exists i:int. (((1 <= i) and
  (i <= to_rep2(((table).us_split_fields1).rec__repro_main__int_table__t__last))) and
  (to_rep3((((table).us_split_fields1).rec__repro_main__int_table__t__elems[i])) = elem))))))

axiom member__def_axiom1 :
  (forall table:us_rep.
  (forall elem:int [member(table, elem)].
  ((exists i:int. (((1 <= i) and
   (i <= to_rep2(((table).us_split_fields1).rec__repro_main__int_table__t__last))) and
   (to_rep3((((table).us_split_fields1).rec__repro_main__int_table__t__elems[i])) = elem))) ->
  (member(table, elem) = true))))

predicate dynamic_invariant9(temp___expr_213: int, temp___is_init_209: bool,
  temp___skip_constant_210: bool, temp___do_toplevel_211: bool,
  temp___do_typ_inv_212: bool) = (((temp___is_init_209 = true) or
  (0 <= 32)) -> in_range4(temp___expr_213))

logic rliteral1 : elem_type

axiom rliteral_axiom1 : (elem_typeqtint(rliteral1) = 0)

axiom def_axiom :
  (forall temp___262:int. (dynamic_invariant2(temp___262, true, true, true,
  true) ->
  (forall temp___263:int.
  ((temp_____aggregate_def_260(temp___262)[temp___263]) = rliteral1))))

 (* File "repro_main.adb", line 4, characters 0-0 *)
goal defqtvc : (let repro_main__table__assume = empty_table(void) : us_rep in
  ((forall repro_main__table__assume1:us_rep.
   model__function_guard(model(repro_main__table__assume1),
   repro_main__table__assume1)) ->
  ((empty_table__function_guard(repro_main__table__assume, void) and
  ((repro_main__table__assume = { us_split_fields1 = {
  rec__repro_main__int_table__t__elems = temp_____aggregate_def_260(0);
  rec__repro_main__int_table__t__last = rliteral } }) and
  (length1(model(repro_main__table__assume)) = 0))) ->
  (forall table__split_fields:us_split_fields.
  ((table__split_fields = (repro_main__table__assume).us_split_fields1) ->
  (forall table__split_fields1:us_split_fields.
  ((forall table__split_fields2:us_split_fields.
   length__function_guard(length2({ us_split_fields1 = table__split_fields2
   }), { us_split_fields1 = table__split_fields2 })) ->
  ((forall table__split_fields2:us_split_fields.
   length__function_guard(length2({ us_split_fields1 = table__split_fields2
   }), { us_split_fields1 = table__split_fields2 })) ->
  ((forall table__split_fields2:us_split_fields.
   member__function_guard(member({ us_split_fields1 = table__split_fields2 },
   2), { us_split_fields1 = table__split_fields2 }, 2)) ->
  ((forall temp___289:us_rep. forall e:int.
   member__function_guard(member(temp___289, e), temp___289, e)) ->
  ((forall table__split_fields2:us_split_fields. forall e:int.
   member__function_guard(member({ us_split_fields1 = table__split_fields2 },
   e), { us_split_fields1 = table__split_fields2 }, e)) ->
  ((forall temp___292:us_rep. forall e:int.
   member__function_guard(member(temp___292, e), temp___292, e)) ->
  ((forall table__split_fields2:us_split_fields. forall e:int.
   member__function_guard(member({ us_split_fields1 = table__split_fields2 },
   e), { us_split_fields1 = table__split_fields2 }, e)) ->
  (((((length2({ us_split_fields1 = table__split_fields1 }) = (length2({
  us_split_fields1 = table__split_fields }) + 1)) and (member({
  us_split_fields1 = table__split_fields1 }, 2) = true)) and
  (forall e:int. ((in_range5(e) and (member({ us_split_fields1 =
  table__split_fields }, e) = true)) -> (member({ us_split_fields1 =
  table__split_fields1 }, e) = true)))) and
  (forall e:int. ((in_range5(e) and (member({ us_split_fields1 =
  table__split_fields1 }, e) = true)) -> ((e = 2) or (member({
  us_split_fields1 = table__split_fields }, e) = true))))) ->
  ((forall table__split_fields2:us_split_fields.
   length__function_guard(length2({ us_split_fields1 = table__split_fields2
   }), { us_split_fields1 = table__split_fields2 })) ->
  (length2({ us_split_fields1 = table__split_fields1 }) <  32))))))))))))))))
