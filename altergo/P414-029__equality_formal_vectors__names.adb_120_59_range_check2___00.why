(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : positive, positive -> bool

logic dummy : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_invariant(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range1(temp___expr_46))

function to_rep(x: positive) : int = positiveqtint(x)

logic of_rep : int -> positive

axiom inversion_axiom :
  (forall x:positive [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:positive [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : character, character -> bool

logic dummy1 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep1 : character -> int

logic of_rep1 : int -> character

axiom inversion_axiom1 :
  (forall x:character [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:character [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep1((a[temp___idx_91])) = to_rep1((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep1((a[temp___idx_91])) = to_rep1((b[((b__first - a__first) + temp___idx_91)]))))))))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep2(x: integer) : int = integerqtint(x)

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  (to_rep2(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  (to_rep2(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

logic invariant__ : unit -> bool

logic invariant____function_guard : bool, unit -> prop

axiom invariant____def_axiom :
  (forall us_void_param:unit [invariant__(us_void_param)].
  (invariant__(us_void_param) = true))

logic n : int

logic attr__ATTRIBUTE_ADDRESS : int

type capacity_range

logic capacity_rangeqtint : capacity_range -> int

axiom capacity_rangeqtaxiom :
  (forall i:capacity_range. (0 <= capacity_rangeqtint(i)))

axiom capacity_rangeqtaxiom1 :
  (forall i:capacity_range. (capacity_rangeqtint(i) <= 2147483647))

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : capacity_range, capacity_range -> bool

logic dummy4 : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref_capacity_range__content__projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__names__char_tables__vector__capacity :
capacity_range
}

function us_split_discrs_rec__names__char_tables__vector__capacity__projection(a: us_split_discrs) : capacity_range =
  (a).rec__names__char_tables__vector__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__names__char_tables__vector : us_main_type
}

function us_split_fields_rec__names__char_tables__vector__projection(a: us_split_fields) : us_main_type =
  (a).rec__names__char_tables__vector

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic names__char_tables__vector__capacity__first__bit : int

logic names__char_tables__vector__capacity__last__bit : int

logic names__char_tables__vector__capacity__position : int

axiom names__char_tables__vector__capacity__first__bit_axiom :
  (0 <= names__char_tables__vector__capacity__first__bit)

axiom names__char_tables__vector__capacity__last__bit_axiom :
  (names__char_tables__vector__capacity__first__bit <  names__char_tables__vector__capacity__last__bit)

axiom names__char_tables__vector__capacity__position_axiom :
  (0 <= names__char_tables__vector__capacity__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : us_rep

type vector__ref = { vector__content : us_rep
}

function vector__ref_vector__content__projection(a: vector__ref) : us_rep =
  (a).vector__content

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep1

logic bool_eq7 : us_rep1, us_rep1 -> bool

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy6 : us_rep1

type sequence__ref = { sequence__content : us_rep1
}

function sequence__ref_sequence__content__projection(a: sequence__ref) : us_rep1 =
  (a).sequence__content

logic get : us_rep1, int -> int

logic get__function_guard : int, us_rep1, int -> prop

logic model : us_rep -> us_rep1

logic model__function_guard : us_rep1, us_rep -> prop

logic length1 : us_rep1 -> int

logic length__function_guard : int, us_rep1 -> prop

function last2(container: us_rep1) : int = ((- 1) + length1(container))

logic last__function_guard : int, us_rep1 -> prop

function last_index(container: us_rep) : int = last2(model(container))

logic last_index__function_guard : int, us_rep -> prop

logic first_index__function_guard : int, us_rep -> prop

function element(container: us_rep, index: int) : int = get(model(container),
  index)

logic element__function_guard : int, us_rep, int -> prop

type element_type

predicate in_range5(x: int) = ((0 <= x) and (x <= 255))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq7 : element_type, element_type -> bool

logic dummy7 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_element_type__content__projection(a: element_type__ref) : element_type =
  (a).element_type__content

predicate dynamic_invariant1(temp___expr_351: int, temp___is_init_347: bool,
  temp___skip_constant_348: bool, temp___do_toplevel_349: bool,
  temp___do_typ_inv_350: bool) = (((temp___is_init_347 = true) or
  (0 <= 255)) -> in_range5(temp___expr_351))

function to_rep3(x: capacity_range) : int = capacity_rangeqtint(x)

logic of_rep3 : int -> capacity_range

axiom inversion_axiom3 :
  (forall x:capacity_range [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:capacity_range [to_rep3(x)]. in_range4(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range4(x) ->
  (to_rep3(of_rep3(x)) = x)))

predicate in_range6(rec__names__char_tables__vector__capacity1: int,
  a: us_rep) =
  (rec__names__char_tables__vector__capacity1 = to_rep3(((a).us_split_discrs1).rec__names__char_tables__vector__capacity))

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic names__char_tables__vector__capacity__first__bit1 : int

logic names__char_tables__vector__capacity__last__bit1 : int

logic names__char_tables__vector__capacity__position1 : int

axiom names__char_tables__vector__capacity__first__bit_axiom1 :
  (0 <= names__char_tables__vector__capacity__first__bit1)

axiom names__char_tables__vector__capacity__last__bit_axiom1 :
  (names__char_tables__vector__capacity__first__bit1 <  names__char_tables__vector__capacity__last__bit1)

axiom names__char_tables__vector__capacity__position_axiom1 :
  (0 <= names__char_tables__vector__capacity__position1)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy8 : us_rep

type tchar_tableS__ref = { tchar_tableS__content : us_rep
}

function tchar_tableS__ref_tchar_tableS__content__projection(a: tchar_tableS__ref) : us_rep =
  (a).tchar_tableS__content

logic char_table__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS1 : int

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq8(a, b)]. (user_eq8(a,
  b) = oeq(a, b)))

predicate dynamic_invariant2(temp___expr_414: us_rep,
  temp___is_init_410: bool, temp___skip_constant_411: bool,
  temp___do_toplevel_412: bool, temp___do_typ_inv_413: bool) =
  ((not (temp___skip_constant_411 = true)) -> in_range6(1024,
  temp___expr_414))

predicate default_initial_assumption(temp___expr_416: us_rep,
  temp___skip_top_level_417: bool) =
  ((to_rep3(((temp___expr_416).us_split_discrs1).rec__names__char_tables__vector__capacity) = 1024) and
  ((not (temp___skip_top_level_417 = true)) ->
  (is_empty(temp___expr_416) = true)))

type name_id

logic name_idqtint : name_id -> int

axiom name_idqtaxiom : (forall i:name_id. (0 <= name_idqtint(i)))

axiom name_idqtaxiom1 : (forall i:name_id. (name_idqtint(i) <= 2147483647))

predicate in_range7(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq9 : name_id, name_id -> bool

logic dummy9 : name_id

type name_id__ref = { name_id__content : name_id
}

function name_id__ref_name_id__content__projection(a: name_id__ref) : name_id =
  (a).name_id__content

function to_rep4(x: name_id) : int = name_idqtint(x)

logic of_rep4 : int -> name_id

axiom inversion_axiom4 :
  (forall x:name_id [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:name_id [to_rep4(x)]. in_range7(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range7(x) ->
  (to_rep4(of_rep4(x)) = x)))

type char_table_index

logic char_table_indexqtint : char_table_index -> int

axiom char_table_indexqtaxiom :
  (forall i:char_table_index. (0 <= char_table_indexqtint(i)))

axiom char_table_indexqtaxiom1 :
  (forall i:char_table_index. (char_table_indexqtint(i) <= 2147483646))

predicate in_range8(x: int) = ((0 <= x) and (x <= 2147483646))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq10 : char_table_index, char_table_index -> bool

logic dummy10 : char_table_index

type char_table_index__ref = { char_table_index__content : char_table_index
}

function char_table_index__ref_char_table_index__content__projection(a: char_table_index__ref) : char_table_index =
  (a).char_table_index__content

function to_rep5(x: char_table_index) : int = char_table_indexqtint(x)

logic of_rep5 : int -> char_table_index

axiom inversion_axiom5 :
  (forall x:char_table_index [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 :
  (forall x:char_table_index [to_rep5(x)]. in_range8(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range8(x) ->
  (to_rep5(of_rep5(x)) = x)))

type us_split_fields2 = { rec__names__name_entry__table_index :
char_table_index; rec__names__name_entry__length : positive;
rec__names__name_entry__next_hash : name_id
}

function us_split_fields_rec__names__name_entry__table_index__projection(a: us_split_fields2) : char_table_index =
  (a).rec__names__name_entry__table_index

function us_split_fields_rec__names__name_entry__length__projection(a: us_split_fields2) : positive =
  (a).rec__names__name_entry__length

function us_split_fields_rec__names__name_entry__next_hash__projection(a: us_split_fields2) : name_id =
  (a).rec__names__name_entry__next_hash

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep2 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__2__projection(a: us_rep2) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq11(a: us_rep2, b: us_rep2) : bool =
  (if (((to_rep5(((a).us_split_fields3).rec__names__name_entry__table_index) = to_rep5(((b).us_split_fields3).rec__names__name_entry__table_index)) and
  (to_rep(((a).us_split_fields3).rec__names__name_entry__length) = to_rep(((b).us_split_fields3).rec__names__name_entry__length))) and
  (to_rep4(((a).us_split_fields3).rec__names__name_entry__next_hash) = to_rep4(((b).us_split_fields3).rec__names__name_entry__next_hash))) then true else false)

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic names__name_entry__table_index__first__bit : int

logic names__name_entry__table_index__last__bit : int

logic names__name_entry__table_index__position : int

axiom names__name_entry__table_index__first__bit_axiom :
  (0 <= names__name_entry__table_index__first__bit)

axiom names__name_entry__table_index__last__bit_axiom :
  (names__name_entry__table_index__first__bit <  names__name_entry__table_index__last__bit)

axiom names__name_entry__table_index__position_axiom :
  (0 <= names__name_entry__table_index__position)

logic names__name_entry__length__first__bit : int

logic names__name_entry__length__last__bit : int

logic names__name_entry__length__position : int

axiom names__name_entry__length__first__bit_axiom :
  (0 <= names__name_entry__length__first__bit)

axiom names__name_entry__length__last__bit_axiom :
  (names__name_entry__length__first__bit <  names__name_entry__length__last__bit)

axiom names__name_entry__length__position_axiom :
  (0 <= names__name_entry__length__position)

logic names__name_entry__next_hash__first__bit : int

logic names__name_entry__next_hash__last__bit : int

logic names__name_entry__next_hash__position : int

axiom names__name_entry__next_hash__first__bit_axiom :
  (0 <= names__name_entry__next_hash__first__bit)

axiom names__name_entry__next_hash__last__bit_axiom :
  (names__name_entry__next_hash__first__bit <  names__name_entry__next_hash__last__bit)

axiom names__name_entry__next_hash__position_axiom :
  (0 <= names__name_entry__next_hash__position)

logic user_eq11 : us_rep2, us_rep2 -> bool

logic dummy11 : us_rep2

type name_entry__ref = { name_entry__content : us_rep2
}

function name_entry__ref_name_entry__content__projection(a: name_entry__ref) : us_rep2 =
  (a).name_entry__content

type element_type__ref1 = { element_type__content1 : us_rep2
}

function element_type__ref_element_type__content__3__projection(a: element_type__ref1) : us_rep2 =
  (a).element_type__content1

type capacity_range1

logic capacity_rangeqtint1 : capacity_range1 -> int

axiom capacity_rangeqtaxiom2 :
  (forall i:capacity_range1. (0 <= capacity_rangeqtint1(i)))

axiom capacity_rangeqtaxiom3 :
  (forall i:capacity_range1. (capacity_rangeqtint1(i) <= 2147483647))

predicate in_range9(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq12(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq12 : capacity_range1, capacity_range1 -> bool

logic dummy12 : capacity_range1

type capacity_range__ref1 = { capacity_range__content1 : capacity_range1
}

function capacity_range__ref_capacity_range__content__2__projection(a: capacity_range__ref1) : capacity_range1 =
  (a).capacity_range__content1

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_split_discrs2 = { rec__names__entry_tables__vector__capacity :
capacity_range1
}

function us_split_discrs_rec__names__entry_tables__vector__capacity__projection(a: us_split_discrs2) : capacity_range1 =
  (a).rec__names__entry_tables__vector__capacity

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields4 = { rec__names__entry_tables__vector : us_main_type2
}

function us_split_fields_rec__names__entry_tables__vector__projection(a: us_split_fields4) : us_main_type2 =
  (a).rec__names__entry_tables__vector

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep3 = { us_split_discrs3 : us_split_discrs2; us_split_fields5 :
us_split_fields4
}

function us_rep___split_discrs__2__projection(a: us_rep3) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___split_fields__3__projection(a: us_rep3) : us_split_fields4 =
  (a).us_split_fields5

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic names__entry_tables__vector__capacity__first__bit : int

logic names__entry_tables__vector__capacity__last__bit : int

logic names__entry_tables__vector__capacity__position : int

axiom names__entry_tables__vector__capacity__first__bit_axiom :
  (0 <= names__entry_tables__vector__capacity__first__bit)

axiom names__entry_tables__vector__capacity__last__bit_axiom :
  (names__entry_tables__vector__capacity__first__bit <  names__entry_tables__vector__capacity__last__bit)

axiom names__entry_tables__vector__capacity__position_axiom :
  (0 <= names__entry_tables__vector__capacity__position)

logic user_eq13 : us_rep3, us_rep3 -> bool

logic dummy13 : us_rep3

type vector__ref1 = { vector__content1 : us_rep3
}

function vector__ref_vector__content__2__projection(a: vector__ref1) : us_rep3 =
  (a).vector__content1

type us_main_type3

logic us_main_eq3 : us_main_type3, us_main_type3 -> bool

type us_rep4

logic bool_eq13 : us_rep4, us_rep4 -> bool

logic value__size6 : int

logic object__size6 : int

logic alignment6 : int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (0 <= object__size6)

axiom alignment_axiom6 : (0 <= alignment6)

logic user_eq14 : us_rep4, us_rep4 -> bool

logic dummy14 : us_rep4

type sequence__ref1 = { sequence__content1 : us_rep4
}

function sequence__ref_sequence__content__2__projection(a: sequence__ref1) : us_rep4 =
  (a).sequence__content1

type element_type__ref2 = { element_type__content2 : us_rep2
}

function element_type__ref_element_type__content__4__projection(a: element_type__ref2) : us_rep2 =
  (a).element_type__content2

logic get1 : us_rep4, int -> us_rep2

logic get__function_guard1 : us_rep2, us_rep4, int -> prop

logic model1 : us_rep3 -> us_rep4

logic model__function_guard1 : us_rep4, us_rep3 -> prop

logic length2 : us_rep4 -> int

logic length__function_guard1 : int, us_rep4 -> prop

function last3(container: us_rep4) : int = (0 + length2(container))

logic last__function_guard1 : int, us_rep4 -> prop

function last_index1(container: us_rep3) : int = last3(model1(container))

logic last_index__function_guard1 : int, us_rep3 -> prop

logic first_index__function_guard1 : int, us_rep3 -> prop

function element1(container: us_rep3, index: int) : us_rep2 =
  get1(model1(container), index)

logic element__function_guard1 : us_rep2, us_rep3, int -> prop

function to_rep6(x: capacity_range1) : int = capacity_rangeqtint1(x)

logic of_rep6 : int -> capacity_range1

axiom inversion_axiom6 :
  (forall x:capacity_range1 [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom6 :
  (forall x:capacity_range1 [to_rep6(x)]. in_range9(to_rep6(x)))

axiom coerce_axiom6 :
  (forall x:int [to_rep6(of_rep6(x))]. (in_range9(x) ->
  (to_rep6(of_rep6(x)) = x)))

predicate in_range10(rec__names__entry_tables__vector__capacity1: int,
  a: us_rep3) =
  (rec__names__entry_tables__vector__capacity1 = to_rep6(((a).us_split_discrs3).rec__names__entry_tables__vector__capacity))

logic value__size7 : int

logic object__size7 : int

logic alignment7 : int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 : (0 <= object__size7)

axiom alignment_axiom7 : (0 <= alignment7)

logic names__entry_tables__vector__capacity__first__bit1 : int

logic names__entry_tables__vector__capacity__last__bit1 : int

logic names__entry_tables__vector__capacity__position1 : int

axiom names__entry_tables__vector__capacity__first__bit_axiom1 :
  (0 <= names__entry_tables__vector__capacity__first__bit1)

axiom names__entry_tables__vector__capacity__last__bit_axiom1 :
  (names__entry_tables__vector__capacity__first__bit1 <  names__entry_tables__vector__capacity__last__bit1)

axiom names__entry_tables__vector__capacity__position_axiom1 :
  (0 <= names__entry_tables__vector__capacity__position1)

logic user_eq15 : us_rep3, us_rep3 -> bool

logic dummy15 : us_rep3

type tentry_tableS__ref = { tentry_tableS__content : us_rep3
}

function tentry_tableS__ref_tentry_tableS__content__projection(a: tentry_tableS__ref) : us_rep3 =
  (a).tentry_tableS__content

logic entry_table__split_discrs : us_split_discrs2

logic attr__ATTRIBUTE_ADDRESS2 : int

logic oeq1 : us_rep3, us_rep3 -> bool

logic oeq__function_guard1 : bool, us_rep3, us_rep3 -> prop

logic is_empty1 : us_rep3 -> bool

logic is_empty__function_guard1 : bool, us_rep3 -> prop

axiom user_eq__def_axiom1 :
  (forall a:us_rep3. forall b:us_rep3 [user_eq15(a, b)]. (user_eq15(a,
  b) = oeq1(a, b)))

predicate dynamic_invariant3(temp___expr_611: us_rep3,
  temp___is_init_607: bool, temp___skip_constant_608: bool,
  temp___do_toplevel_609: bool, temp___do_typ_inv_610: bool) =
  ((not (temp___skip_constant_608 = true)) -> in_range10(128,
  temp___expr_611))

predicate default_initial_assumption1(temp___expr_613: us_rep3,
  temp___skip_top_level_614: bool) =
  ((to_rep6(((temp___expr_613).us_split_discrs3).rec__names__entry_tables__vector__capacity) = 128) and
  ((not (temp___skip_top_level_614 = true)) ->
  (is_empty1(temp___expr_613) = true)))

logic e : us_rep2

logic attr__ATTRIBUTE_ADDRESS3 : int

logic l : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic s__first : integer

logic s__last : integer

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

predicate dynamic_invariant4(temp___expr_282: int, temp___is_init_278: bool,
  temp___skip_constant_279: bool, temp___do_toplevel_280: bool,
  temp___do_typ_inv_281: bool) = (((temp___is_init_278 = true) or
  (0 <= 2147483647)) -> in_range7(temp___expr_282))

type tchar_table_indexB

logic tchar_table_indexBqtint : tchar_table_indexB -> int

axiom tchar_table_indexBqtaxiom :
  (forall i:tchar_table_indexB.
  ((- 2147483648) <= tchar_table_indexBqtint(i)))

axiom tchar_table_indexBqtaxiom1 :
  (forall i:tchar_table_indexB. (tchar_table_indexBqtint(i) <= 2147483647))

predicate in_range11(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq14(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq16 : tchar_table_indexB, tchar_table_indexB -> bool

logic dummy16 : tchar_table_indexB

type tchar_table_indexB__ref = { tchar_table_indexB__content :
tchar_table_indexB
}

function tchar_table_indexB__ref_tchar_table_indexB__content__projection(a: tchar_table_indexB__ref) : tchar_table_indexB =
  (a).tchar_table_indexB__content

type index_type

logic index_typeqtint : index_type -> int

axiom index_typeqtaxiom : (forall i:index_type. (0 <= index_typeqtint(i)))

axiom index_typeqtaxiom1 :
  (forall i:index_type. (index_typeqtint(i) <= 2147483646))

predicate in_range12(x: int) = ((0 <= x) and (x <= 2147483646))

function bool_eq15(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq17 : index_type, index_type -> bool

logic dummy17 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref_index_type__content__projection(a: index_type__ref) : index_type =
  (a).index_type__content

type index_type1

logic index_typeqtint1 : index_type1 -> int

axiom index_typeqtaxiom2 : (forall i:index_type1. (1 <= index_typeqtint1(i)))

axiom index_typeqtaxiom3 :
  (forall i:index_type1. (index_typeqtint1(i) <= 2147483647))

predicate in_range13(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq16(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq18 : index_type1, index_type1 -> bool

logic dummy18 : index_type1

type index_type__ref1 = { index_type__content1 : index_type1
}

function index_type__ref_index_type__content__3__projection(a: index_type__ref1) : index_type1 =
  (a).index_type__content1

type tsS__ref = { tsS__content : us_t
}

function tsS__ref_tsS__content__projection(a: tsS__ref) : us_t =
  (a).tsS__content

predicate dynamic_invariant5(temp___expr_633: us_t, temp___is_init_629: bool,
  temp___skip_constant_630: bool, temp___do_toplevel_631: bool,
  temp___do_typ_inv_632: bool) = ((not (temp___skip_constant_630 = true)) ->
  (dynamic_property(1, l, first1(temp___expr_633),
  last1(temp___expr_633)) and ((first1(temp___expr_633) = 1) and
  (last1(temp___expr_633) = l))))

predicate default_initial_assumption2(temp___expr_635: us_t,
  temp___skip_top_level_636: bool) = ((first1(temp___expr_635) = 1) and
  (last1(temp___expr_635) = l))

logic temp___String_Literal_674 : unit -> (int,character) farray

predicate dynamic_invariant6(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range2(temp___expr_74))

predicate dynamic_invariant7(temp___expr_96: us_t, temp___is_init_92: bool,
  temp___skip_constant_93: bool, temp___do_toplevel_94: bool,
  temp___do_typ_inv_95: bool) = ((not (temp___skip_constant_93 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_96),
  last1(temp___expr_96)))

predicate dynamic_invariant8(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range3(temp___expr_18))

predicate dynamic_invariant9(temp___expr_337: int, temp___is_init_333: bool,
  temp___skip_constant_334: bool, temp___do_toplevel_335: bool,
  temp___do_typ_inv_336: bool) = (((temp___is_init_333 = true) or
  (0 <= 2147483646)) -> in_range8(temp___expr_337))

axiom l__def_axiom :
  (l = to_rep(((e).us_split_fields3).rec__names__name_entry__length))

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range14(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq17(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq19 : count_type, count_type -> bool

logic dummy19 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

predicate dynamic_invariant10(temp___expr_365: int, temp___is_init_361: bool,
  temp___skip_constant_362: bool, temp___do_toplevel_363: bool,
  temp___do_typ_inv_364: bool) = (((temp___is_init_361 = true) or
  (0 <= 2147483647)) -> in_range14(temp___expr_365))

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. ((- 1) <= extended_indexqtint(i)))

axiom extended_indexqtaxiom1 :
  (forall i:extended_index. (extended_indexqtint(i) <= 2147483647))

predicate in_range15(x: int) = (((- 1) <= x) and (x <= 2147483647))

function bool_eq18(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq20 : extended_index, extended_index -> bool

logic dummy20 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref_extended_index__content__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

predicate dynamic_invariant11(temp___expr_358: int, temp___is_init_354: bool,
  temp___skip_constant_355: bool, temp___do_toplevel_356: bool,
  temp___do_typ_inv_357: bool) = (((temp___is_init_354 = true) or
  ((- 1) <= 2147483647)) -> in_range15(temp___expr_358))

predicate dynamic_invariant12(temp___expr_372: int, temp___is_init_368: bool,
  temp___skip_constant_369: bool, temp___do_toplevel_370: bool,
  temp___do_typ_inv_371: bool) = (((temp___is_init_368 = true) or
  (0 <= 2147483647)) -> in_range4(temp___expr_372))

axiom user_eq__def_axiom2 :
  (forall a:us_rep. forall b:us_rep [user_eq5(a, b)]. (user_eq5(a,
  b) = oeq(a, b)))

function capacity(container: us_rep) : int =
  (if (of_int(0) = true) then to_rep3(((container).us_split_discrs1).rec__names__char_tables__vector__capacity) else 2147483647)

logic capacity__function_guard : int, us_rep -> prop

logic length3 : us_rep -> int

logic length__function_guard2 : int, us_rep -> prop

axiom length__post_axiom :
  (forall container:us_rep [length3(container)].
  (length3(container) <= capacity(container)))

axiom length__post_axiom1 :
  (forall container:us_rep [length3(container)].
  dynamic_invariant12(length3(container), true, false, true, true))

logic bool_eq19 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq19(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq19(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length4(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function oeq2(left: us_rep1, right: us_rep1) : bool =
  andb(bool_eq19(length1(left), length1(right)),
  (if (forall n1:int. (((0 <= n1) and (n1 <= last2(left))) -> (get(left,
      n1) = get(right, n1)))) then true else false))

logic oeq__function_guard2 : bool, us_rep1, us_rep1 -> prop

axiom user_eq__def_axiom3 :
  (forall a:us_rep1. forall b:us_rep1 [user_eq6(a, b)]. (user_eq6(a,
  b) = oeq2(a, b)))

predicate default_initial_assumption3(temp___expr_407: us_rep1,
  temp___skip_top_level_408: bool) =
  ((not (temp___skip_top_level_408 = true)) ->
  (length1(temp___expr_407) = 0))

axiom model__post_axiom :
  (forall container:us_rep [model(container)].
  (length1(model(container)) = length3(container)))

axiom oeq__post_axiom :
  (forall left:us_rep. forall right:us_rep [oeq(left, right)]. ((oeq(left,
  right) = true) -> (oeq2(model(left), model(right)) = true)))

axiom oeq__post_axiom1 :
  (forall left:us_rep. forall right:us_rep [oeq(left, right)].
  ((oeq2(model(left), model(right)) = true) -> (oeq(left, right) = true)))

axiom is_empty__post_axiom :
  (forall container:us_rep [is_empty(container)].
  ((is_empty(container) = true) -> (length3(container) = 0)))

axiom is_empty__post_axiom1 :
  (forall container:us_rep [is_empty(container)].
  ((length3(container) = 0) -> (is_empty(container) = true)))

predicate dynamic_invariant13(temp___expr_344: int, temp___is_init_340: bool,
  temp___skip_constant_341: bool, temp___do_toplevel_342: bool,
  temp___do_typ_inv_343: bool) = (((temp___is_init_340 = true) or
  (0 <= 2147483646)) -> in_range12(temp___expr_344))

type extended_index1

logic extended_indexqtint1 : extended_index1 -> int

axiom extended_indexqtaxiom2 :
  (forall i:extended_index1. ((- 1) <= extended_indexqtint1(i)))

axiom extended_indexqtaxiom3 :
  (forall i:extended_index1. (extended_indexqtint1(i) <= 2147483646))

predicate in_range16(x: int) = (((- 1) <= x) and (x <= 2147483646))

function bool_eq20(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE14 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> int

logic user_eq21 : extended_index1, extended_index1 -> bool

logic dummy21 : extended_index1

type extended_index__ref1 = { extended_index__content1 : extended_index1
}

function extended_index__ref_extended_index__content__2__projection(a: extended_index__ref1) : extended_index1 =
  (a).extended_index__content1

predicate dynamic_invariant14(temp___expr_399: int, temp___is_init_395: bool,
  temp___skip_constant_396: bool, temp___do_toplevel_397: bool,
  temp___do_typ_inv_398: bool) = (((temp___is_init_395 = true) or
  ((- 1) <= 2147483646)) -> in_range16(temp___expr_399))

axiom length__post_axiom2 :
  (forall container:us_rep1 [length1(container)].
  (((- 1) + length1(container)) <= 2147483646))

axiom length__post_axiom3 :
  (forall container:us_rep1 [length1(container)].
  dynamic_invariant10(length1(container), true, false, true, true))

type element_type1

predicate in_range17(x: int) = ((0 <= x) and (x <= 255))

function bool_eq21(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE15 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check15 : us_image -> prop

logic attr__ATTRIBUTE_VALUE15 : us_image -> int

logic user_eq22 : element_type1, element_type1 -> bool

logic dummy22 : element_type1

type element_type__ref3 = { element_type__content3 : element_type1
}

function element_type__ref_element_type__content__2__projection(a: element_type__ref3) : element_type1 =
  (a).element_type__content3

predicate dynamic_invariant15(temp___expr_392: int, temp___is_init_388: bool,
  temp___skip_constant_389: bool, temp___do_toplevel_390: bool,
  temp___do_typ_inv_391: bool) = (((temp___is_init_388 = true) or
  (0 <= 255)) -> in_range17(temp___expr_392))

axiom get__post_axiom :
  (forall container:us_rep1.
  (forall position:int [get(container, position)].
  ((dynamic_invariant14(position, true, true, true, true) and
  ((0 <= position) and (position <= last2(container)))) ->
  dynamic_invariant15(get(container, position), true, false, true, true))))

type extended_index2

logic extended_indexqtint2 : extended_index2 -> int

axiom extended_indexqtaxiom4 :
  (forall i:extended_index2. (0 <= extended_indexqtint2(i)))

axiom extended_indexqtaxiom5 :
  (forall i:extended_index2. (extended_indexqtint2(i) <= 2147483647))

predicate in_range18(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq22(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE16 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check16 : us_image -> prop

logic attr__ATTRIBUTE_VALUE16 : us_image -> int

logic user_eq23 : extended_index2, extended_index2 -> bool

logic dummy23 : extended_index2

type extended_index__ref2 = { extended_index__content2 : extended_index2
}

function extended_index__ref_extended_index__content__3__projection(a: extended_index__ref2) : extended_index2 =
  (a).extended_index__content2

predicate dynamic_invariant16(temp___expr_451: int, temp___is_init_447: bool,
  temp___skip_constant_448: bool, temp___do_toplevel_449: bool,
  temp___do_typ_inv_450: bool) = (((temp___is_init_447 = true) or
  (0 <= 2147483647)) -> in_range18(temp___expr_451))

predicate dynamic_invariant17(temp___expr_458: int, temp___is_init_454: bool,
  temp___skip_constant_455: bool, temp___do_toplevel_456: bool,
  temp___do_typ_inv_457: bool) = (((temp___is_init_454 = true) or
  (0 <= 2147483647)) -> in_range9(temp___expr_458))

axiom user_eq__def_axiom4 :
  (forall a:us_rep3. forall b:us_rep3 [user_eq13(a, b)]. (user_eq13(a,
  b) = oeq1(a, b)))

function capacity1(container: us_rep3) : int =
  (if (of_int(0) = true) then to_rep6(((container).us_split_discrs3).rec__names__entry_tables__vector__capacity) else 2147483647)

logic capacity__function_guard1 : int, us_rep3 -> prop

logic length5 : us_rep3 -> int

logic length__function_guard3 : int, us_rep3 -> prop

axiom length__post_axiom4 :
  (forall container:us_rep3 [length5(container)].
  (length5(container) <= capacity1(container)))

axiom length__post_axiom5 :
  (forall container:us_rep3 [length5(container)].
  dynamic_invariant17(length5(container), true, false, true, true))

function oeq3(left: us_rep4, right: us_rep4) : bool =
  andb(bool_eq19(length2(left), length2(right)),
  (if (forall n1:int. (((1 <= n1) and (n1 <= last3(left))) ->
      (bool_eq11(get1(left, n1), get1(right, n1)) = true))) then true else false))

logic oeq__function_guard3 : bool, us_rep4, us_rep4 -> prop

axiom user_eq__def_axiom5 :
  (forall a:us_rep4. forall b:us_rep4 [user_eq14(a, b)]. (user_eq14(a,
  b) = oeq3(a, b)))

predicate default_initial_assumption4(temp___expr_496: us_rep4,
  temp___skip_top_level_497: bool) =
  ((not (temp___skip_top_level_497 = true)) ->
  (length2(temp___expr_496) = 0))

axiom model__post_axiom1 :
  (forall container:us_rep3 [model1(container)].
  (length2(model1(container)) = length5(container)))

axiom oeq__post_axiom2 :
  (forall left:us_rep3. forall right:us_rep3 [oeq1(left, right)].
  ((oeq1(left, right) = true) -> (oeq3(model1(left), model1(right)) = true)))

axiom oeq__post_axiom3 :
  (forall left:us_rep3. forall right:us_rep3 [oeq1(left, right)].
  ((oeq3(model1(left), model1(right)) = true) -> (oeq1(left, right) = true)))

axiom is_empty__post_axiom2 :
  (forall container:us_rep3 [is_empty1(container)].
  ((is_empty1(container) = true) -> (length5(container) = 0)))

axiom is_empty__post_axiom3 :
  (forall container:us_rep3 [is_empty1(container)].
  ((length5(container) = 0) -> (is_empty1(container) = true)))

predicate dynamic_invariant18(temp___expr_434: int, temp___is_init_430: bool,
  temp___skip_constant_431: bool, temp___do_toplevel_432: bool,
  temp___do_typ_inv_433: bool) = (((temp___is_init_430 = true) or
  (1 <= 2147483647)) -> in_range13(temp___expr_434))

type extended_index3

logic extended_indexqtint3 : extended_index3 -> int

axiom extended_indexqtaxiom6 :
  (forall i:extended_index3. (0 <= extended_indexqtint3(i)))

axiom extended_indexqtaxiom7 :
  (forall i:extended_index3. (extended_indexqtint3(i) <= 2147483647))

predicate in_range19(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq23(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE17 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check17 : us_image -> prop

logic attr__ATTRIBUTE_VALUE17 : us_image -> int

logic user_eq24 : extended_index3, extended_index3 -> bool

logic dummy24 : extended_index3

type extended_index__ref3 = { extended_index__content3 : extended_index3
}

function extended_index__ref_extended_index__content__4__projection(a: extended_index__ref3) : extended_index3 =
  (a).extended_index__content3

predicate dynamic_invariant19(temp___expr_488: int, temp___is_init_484: bool,
  temp___skip_constant_485: bool, temp___do_toplevel_486: bool,
  temp___do_typ_inv_487: bool) = (((temp___is_init_484 = true) or
  (0 <= 2147483647)) -> in_range19(temp___expr_488))

axiom length__post_axiom6 :
  (forall container:us_rep4 [length2(container)].
  ((0 + length2(container)) <= 2147483647))

axiom length__post_axiom7 :
  (forall container:us_rep4 [length2(container)].
  dynamic_invariant10(length2(container), true, false, true, true))

 (* File "names.ads", line 15, characters 0-0 *)
goal defqtvc :
  (forall char_table__split_fields:us_main_type.
  forall entry_table__split_fields:us_main_type2. (dynamic_invariant2({
  us_split_discrs1 = char_table__split_discrs; us_split_fields1 = {
  rec__names__char_tables__vector = char_table__split_fields } }, true,
  false, true, true) -> (dynamic_invariant3({ us_split_discrs3 =
  entry_table__split_discrs; us_split_fields5 = {
  rec__names__entry_tables__vector = entry_table__split_fields } }, true,
  false, true, true) -> (dynamic_invariant4(n, true, false, true, true) ->
  (invariant____function_guard(invariant__(void), void) ->
  ((invariant__(void) = true) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (n = 0) then true else false)) ->
  ((not (spark__branch = true)) -> in_range13(n))))))))))
