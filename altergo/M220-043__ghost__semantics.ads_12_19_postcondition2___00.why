(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

logic ghost_func : unit -> int

logic ghost_func__function_guard : int, unit -> prop

axiom ghost_func__post_axiom :
  (forall us_void_param:unit [ghost_func(us_void_param)]. (let result =
  ghost_func(us_void_param) : int in (ghost_func__function_guard(result,
  us_void_param) -> dynamic_invariant(result, true, false, true, true))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type t1b

logic t1bqtint : t1b -> int

axiom t1bqtaxiom : (forall i:t1b. (1 <= t1bqtint(i)))

axiom t1bqtaxiom1 : (forall i:t1b. (t1bqtint(i) <= 2))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : t1b, t1b -> bool

logic dummy1 : t1b

type t1b__ref = { t1b__content : t1b
}

function t1b__ref_t1b__content__projection(a: t1b__ref) : t1b =
  (a).t1b__content

 (* File "semantics.ads", line 10, characters 0-0 *)
goal defqtvc :
  (forall formal:int. (dynamic_invariant(formal, true, false, true, true) ->
  (ghost_func__function_guard(ghost_func(void), void) ->
  ((formal = ghost_func(void)) -> (let usf = bool_eq(formal, 0) : bool in
  (ghost_func__function_guard(ghost_func(void), void) ->
  ((0 <  (formal + ghost_func(void))) ->
  (ghost_func__function_guard(ghost_func(void), void) ->
  ((0 <  (formal + ghost_func(void))) ->
  (forall formal1:int. (ghost_func__function_guard(ghost_func(void), void) ->
  (ghost_func__function_guard(ghost_func(void), void) ->
  ((exists i:int. ((i = 1) and (if (andb((if (1 <= i) then true else false),
   (if (i <= 2) then true else false)) = true) then (let o = (formal + 1)
   : int in (in_range1(o) and
   (exists formal2:int. ((formal2 = o) and (let o1 = ghost_func(void)
   : int in ((ghost_func__function_guard(o1, void) and dynamic_invariant(o1,
   true, false, true, true)) and (in_range1((formal2 + o1)) and
   (exists i1:int. ((0 <  (formal1 + ghost_func(void))) and
   ((andb((if (dynamic_invariant(formal1, true, true, true, true) and
   in_range2(i1)) then true else false), (if ((1 <= i1) and
   (i1 <= 2)) then true else false)) = true) and
   (exists temp___172:int. ((temp___172 = (formal1 + ghost_func(void))) and
   (i1 = 2))))))))))))) else (formal1 = formal)))) ->
  (ghost_func__function_guard(ghost_func(void), void) -> (((usf = true) ->
  (formal1 = ghost_func(void))) ->
  (ghost_func__function_guard(ghost_func(void), void) ->
  (((not (usf = true)) -> (formal1 = (ghost_func(void) + 1))) ->
  (ghost_func__function_guard(ghost_func(void), void) ->
  (formal1 = (ghost_func(void) + 1))))))))))))))))))))
