(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq1(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

type tindexB

logic tindexBqtint : tindexB -> int

axiom tindexBqtaxiom : (forall i:tindexB. ((- 128) <= tindexBqtint(i)))

axiom tindexBqtaxiom1 : (forall i:tindexB. (tindexBqtint(i) <= 127))

predicate in_range1(x: int) = (((- 128) <= x) and (x <= 127))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : tindexB, tindexB -> bool

logic dummy1 : tindexB

type tindexB__ref = { tindexB__content : tindexB
}

function tindexB__ref_tindexB__content__projection(a: tindexB__ref) : tindexB =
  (a).tindexB__content

logic a__first : tindexB

logic a__last : tindexB

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic new_val : int

logic attr__ATTRIBUTE_ADDRESS2 : int

function to_rep1(x: tindexB) : int = tindexBqtint(x)

logic of_rep1 : int -> tindexB

axiom inversion_axiom1 :
  (forall x:tindexB [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:tindexB [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type index

logic indexqtint : index -> int

axiom indexqtaxiom : (forall i1:index. (1 <= indexqtint(i1)))

axiom indexqtaxiom1 : (forall i1:index. (indexqtint(i1) <= 8))

predicate in_range2(x: int) = ((1 <= x) and (x <= 8))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : index, index -> bool

logic dummy2 : index

type index__ref = { index__content : index
}

function index__ref_index__content__projection(a: index__ref) : index =
  (a).index__content

predicate dynamic_invariant1(temp___expr_159: int, temp___is_init_155: bool,
  temp___skip_constant_156: bool, temp___do_toplevel_157: bool,
  temp___do_typ_inv_158: bool) = (((temp___is_init_155 = true) or
  (1 <= 8)) -> in_range2(temp___expr_159))

type t

logic first : t -> tindexB

logic last : t -> tindexB

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq4(x: us_t, y: us_t) : bool = bool_eq1((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type array_u__ref = { array_u__content : us_t
}

function array_u__ref_array_u__content__projection(a: array_u__ref) : us_t =
  (a).array_u__content

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : tindexB, tindexB -> bool

logic dummy4 : tindexB

type tS1bP1__ref = { tS1bP1__content : tindexB
}

function tS1bP1__ref_tS1bP1__content__projection(a: tS1bP1__ref) : tindexB =
  (a).tS1bP1__content

logic temp_____aggregate_def_311 : us_t, int, int -> us_t

predicate dynamic_invariant2(temp___expr_166: us_t, temp___is_init_162: bool,
  temp___skip_constant_163: bool, temp___do_toplevel_164: bool,
  temp___do_typ_inv_165: bool) = ((not (temp___skip_constant_163 = true)) ->
  dynamic_property(1, 8, first1(temp___expr_166), last1(temp___expr_166)))

axiom def_axiom :
  (forall temp___313:us_t.
  (forall temp___314:int. forall temp___315:int.
  (((dynamic_invariant2(temp___313, true, true, true, true) and
  dynamic_invariant1(temp___314, true, true, true, true)) and
  dynamic_invariant(temp___315, true, true, true, true)) ->
  (first1(temp_____aggregate_def_311(temp___313, temp___314,
  temp___315)) = first1(temp___313)))))

axiom def_axiom1 :
  (forall temp___313:us_t.
  (forall temp___314:int. forall temp___315:int.
  (((dynamic_invariant2(temp___313, true, true, true, true) and
  dynamic_invariant1(temp___314, true, true, true, true)) and
  dynamic_invariant(temp___315, true, true, true, true)) ->
  (last1(temp_____aggregate_def_311(temp___313, temp___314,
  temp___315)) = last1(temp___313)))))

axiom def_axiom2 :
  (forall temp___313:us_t.
  (forall temp___314:int. forall temp___315:int.
  (((dynamic_invariant2(temp___313, true, true, true, true) and
  dynamic_invariant1(temp___314, true, true, true, true)) and
  dynamic_invariant(temp___315, true, true, true, true)) ->
  (forall temp___316:int. ((temp___316 = temp___314) ->
  (to_rep((to_array(temp_____aggregate_def_311(temp___313, temp___314,
  temp___315))[temp___316])) = temp___315))))))

axiom def_axiom3 :
  (forall temp___313:us_t.
  (forall temp___314:int. forall temp___315:int.
  (((dynamic_invariant2(temp___313, true, true, true, true) and
  dynamic_invariant1(temp___314, true, true, true, true)) and
  dynamic_invariant(temp___315, true, true, true, true)) ->
  (forall temp___316:int. ((not (temp___316 = temp___314)) ->
  ((to_array(temp_____aggregate_def_311(temp___313, temp___314,
  temp___315))[temp___316]) = (to_array(temp___313)[temp___316])))))))

 (* File "update_checks_1.ads", line 5, characters 0-0 *)
goal defqtvc :
  (forall a:(int,integer) farray.
  (forall a1:(int,integer) farray. ((a1 = a) -> (dynamic_property(1, 8,
  to_rep1(a__first), to_rep1(a__last)) -> (dynamic_invariant1(i, true, false,
  true, true) -> (dynamic_invariant(new_val, true, false, true, true) ->
  (forall o:int. ((to_rep1(a__last) = o) ->
  (forall o1:int. ((to_rep1(a__first) = o1) -> dynamic_property1(o1, o, i)))))))))))
