(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic size : int -> int

logic size__function_guard : int, int -> prop

logic size1 : int -> int

logic size__function_guard1 : int, int -> prop

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

logic attr__ATTRIBUTE_ADDRESS : int

type index_type

logic index_typeqtint : index_type -> int

axiom index_typeqtaxiom : (forall i:index_type. (0 <= index_typeqtint(i)))

axiom index_typeqtaxiom1 : (forall i:index_type. (index_typeqtint(i) <= 128))

predicate in_range2(x: int) = ((0 <= x) and (x <= 128))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : index_type, index_type -> bool

logic dummy1 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref_index_type__content__projection(a: index_type__ref) : index_type =
  (a).index_type__content

predicate dynamic_invariant1(temp___expr_180: int, temp___is_init_176: bool,
  temp___skip_constant_177: bool, temp___do_toplevel_178: bool,
  temp___do_typ_inv_179: bool) = (((temp___is_init_176 = true) or
  (0 <= 128)) -> in_range2(temp___expr_180))

axiom size__post_axiom :
  (forall list_handler__integer_list__count:int
  [size(list_handler__integer_list__count)].
  (dynamic_invariant1(list_handler__integer_list__count, true, true, true,
  true) -> (let result = size(list_handler__integer_list__count) : int in
  (size__function_guard(result, list_handler__integer_list__count) ->
  dynamic_invariant(result, true, false, true, true)))))

axiom size__post_refine_axiom :
  (forall list_handler__integer_list__count:int
  [size1(list_handler__integer_list__count)].
  (dynamic_invariant1(list_handler__integer_list__count, true, true, true,
  true) -> (let result = size1(list_handler__integer_list__count) : int in
  (size__function_guard1(result, list_handler__integer_list__count) ->
  (result = list_handler__integer_list__count)))))

axiom size__post_refine_axiom1 :
  (forall list_handler__integer_list__count:int
  [size1(list_handler__integer_list__count)].
  (dynamic_invariant1(list_handler__integer_list__count, true, true, true,
  true) -> (let result = size1(list_handler__integer_list__count) : int in
  (size__function_guard1(result, list_handler__integer_list__count) ->
  dynamic_invariant(result, true, false, true, true)))))

type element_type

logic element_typeqtint : element_type -> int

axiom element_typeqtaxiom :
  (forall i:element_type. ((- 2147483648) <= element_typeqtint(i)))

axiom element_typeqtaxiom1 :
  (forall i:element_type. (element_typeqtint(i) <= 2147483647))

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : element_type, element_type -> bool

logic dummy2 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_element_type__content__projection(a: element_type__ref) : element_type =
  (a).element_type__content

function to_rep(x: element_type) : int = element_typeqtint(x)

logic of_rep : int -> element_type

axiom inversion_axiom :
  (forall x:element_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:element_type [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

function to_rep1(x: index_type) : int = index_typeqtint(x)

logic of_rep1 : int -> index_type

axiom inversion_axiom1 :
  (forall x:index_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:index_type [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__list_handler__integer_list__list_node__value :
element_type; rec__list_handler__integer_list__list_node__next : index_type;
rec__list_handler__integer_list__list_node__previous : index_type
}

function us_split_fields_rec__list_handler__integer_list__list_node__value__projection(a: us_split_fields) : element_type =
  (a).rec__list_handler__integer_list__list_node__value

function us_split_fields_rec__list_handler__integer_list__list_node__next__projection(a: us_split_fields) : index_type =
  (a).rec__list_handler__integer_list__list_node__next

function us_split_fields_rec__list_handler__integer_list__list_node__previous__projection(a: us_split_fields) : index_type =
  (a).rec__list_handler__integer_list__list_node__previous

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq4(a: us_rep, b: us_rep) : bool =
  (if (((to_rep(((a).us_split_fields1).rec__list_handler__integer_list__list_node__value) = to_rep(((b).us_split_fields1).rec__list_handler__integer_list__list_node__value)) and
  (to_rep1(((a).us_split_fields1).rec__list_handler__integer_list__list_node__next) = to_rep1(((b).us_split_fields1).rec__list_handler__integer_list__list_node__next))) and
  (to_rep1(((a).us_split_fields1).rec__list_handler__integer_list__list_node__previous) = to_rep1(((b).us_split_fields1).rec__list_handler__integer_list__list_node__previous))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic list_handler__integer_list__list_node__value__first__bit : int

logic list_handler__integer_list__list_node__value__last__bit : int

logic list_handler__integer_list__list_node__value__position : int

axiom list_handler__integer_list__list_node__value__first__bit_axiom :
  (0 <= list_handler__integer_list__list_node__value__first__bit)

axiom list_handler__integer_list__list_node__value__last__bit_axiom :
  (list_handler__integer_list__list_node__value__first__bit <  list_handler__integer_list__list_node__value__last__bit)

axiom list_handler__integer_list__list_node__value__position_axiom :
  (0 <= list_handler__integer_list__list_node__value__position)

logic list_handler__integer_list__list_node__next__first__bit : int

logic list_handler__integer_list__list_node__next__last__bit : int

logic list_handler__integer_list__list_node__next__position : int

axiom list_handler__integer_list__list_node__next__first__bit_axiom :
  (0 <= list_handler__integer_list__list_node__next__first__bit)

axiom list_handler__integer_list__list_node__next__last__bit_axiom :
  (list_handler__integer_list__list_node__next__first__bit <  list_handler__integer_list__list_node__next__last__bit)

axiom list_handler__integer_list__list_node__next__position_axiom :
  (0 <= list_handler__integer_list__list_node__next__position)

logic list_handler__integer_list__list_node__previous__first__bit : int

logic list_handler__integer_list__list_node__previous__last__bit : int

logic list_handler__integer_list__list_node__previous__position : int

axiom list_handler__integer_list__list_node__previous__first__bit_axiom :
  (0 <= list_handler__integer_list__list_node__previous__first__bit)

axiom list_handler__integer_list__list_node__previous__last__bit_axiom :
  (list_handler__integer_list__list_node__previous__first__bit <  list_handler__integer_list__list_node__previous__last__bit)

axiom list_handler__integer_list__list_node__previous__position_axiom :
  (0 <= list_handler__integer_list__list_node__previous__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type list_node__ref = { list_node__content : us_rep
}

function list_node__ref_list_node__content__projection(a: list_node__ref) : us_rep =
  (a).list_node__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq5(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) -> (bool_eq4((a[temp___idx_156]),
  (b[((b__first - a__first) + temp___idx_156)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) -> (bool_eq4((a[temp___idx_156]),
  (b[((b__first - a__first) + temp___idx_156)])) = true))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

type map__ref1 = { map__content1 : (int,index_type) farray
}

logic slide1 : (int,index_type) farray, int, int -> (int,index_type) farray

axiom slide_eq1 :
  (forall a:(int,index_type) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,index_type) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq6(a: (int,index_type) farray, a__first: int, a__last: int,
  b: (int,index_type) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) ->
  (to_rep1((a[temp___idx_157])) = to_rep1((b[((b__first - a__first) + temp___idx_157)])))))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,index_type) farray. forall b:(int,index_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,index_type) farray. forall b:(int,index_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,index_type) farray. forall b:(int,index_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,index_type) farray. forall b:(int,index_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) ->
  (to_rep1((a[temp___idx_157])) = to_rep1((b[((b__first - a__first) + temp___idx_157)]))))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic temp_____aggregate_def_250 : us_rep -> (int,us_rep) farray

logic temp_____aggregate_def_254 : int -> (int,index_type) farray

predicate dynamic_invariant2(temp___expr_166: int, temp___is_init_162: bool,
  temp___skip_constant_163: bool, temp___do_toplevel_164: bool,
  temp___do_typ_inv_165: bool) = (((temp___is_init_162 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range3(temp___expr_166))

axiom def_axiom :
  (forall temp___252:us_rep.
  (forall temp___253:int.
  ((temp_____aggregate_def_250(temp___252)[temp___253]) = temp___252)))

logic rliteral : index_type

axiom rliteral_axiom : (index_typeqtint(rliteral) = 0)

axiom def_axiom1 :
  (forall temp___256:int. (dynamic_invariant1(temp___256, true, true, true,
  true) ->
  (forall temp___257:int.
  ((temp_____aggregate_def_254(temp___256)[temp___257]) = rliteral))))

 (* File "double_list.ads", line 14, characters 0-0 *)
goal defqtvc :
  (forall count:int. forall free:int. (dynamic_invariant1(count, false,
  false, true, true) -> (dynamic_invariant1(free, false, false, true,
  true) ->
  (forall count1:int. ((count1 = 0) ->
  (forall free_list:(int,index_type) farray.
  ((free_list = temp_____aggregate_def_254(0)) ->
  ((exists index:int. ((index = 1) and
   ((not (andb((if (1 <= index) then true else false),
   (if (index <= 127) then true else false)) = true)) or
   (exists free_list1:(int,index_type) farray. exists index1:int.
   ((andb((if (forall temp___261:int. (((0 <= temp___261) and
              (temp___261 <= 128)) -> (((127 <  temp___261) or
              ((temp___261 <  1) or (index1 <= temp___261))) ->
              ((free_list1[temp___261]) = (free_list[temp___261]))))) then true else false),
   (if ((1 <= index1) and (index1 <= 127)) then true else false)) = true) and
   (exists o:index_type. ((to_rep1(o) = (index1 + 1)) and (index1 = 127)))))))) ->
  (count1 = 0)))))))))
