(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

function to_rep(x: positive) : int = positiveqtint(x)

logic of_rep : int -> positive

axiom inversion_axiom :
  (forall x:positive [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:positive [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

logic c : int

logic attr__ATTRIBUTE_ADDRESS : int

type us_split_discrs = { rec__test_dic__nested__t__x : bool
}

function us_split_discrs_rec__test_dic__nested__t__x__projection(a: us_split_discrs) : bool =
  (a).rec__test_dic__nested__t__x

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__test_dic__nested__t__f : positive
}

function us_split_fields_rec__test_dic__nested__t__f__projection(a: us_split_fields) : positive =
  (a).rec__test_dic__nested__t__f

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

predicate test_dic__nested__t__f__pred(a: us_rep) =
  (to_int(((a).us_split_discrs1).rec__test_dic__nested__t__x) = 1)

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if ((to_int(((a).us_split_discrs1).rec__test_dic__nested__t__x) = to_int(((b).us_split_discrs1).rec__test_dic__nested__t__x)) and
  (test_dic__nested__t__f__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__test_dic__nested__t__f) = to_rep(((b).us_split_fields1).rec__test_dic__nested__t__f)))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic test_dic__nested__t__x__first__bit : int

logic test_dic__nested__t__x__last__bit : int

logic test_dic__nested__t__x__position : int

axiom test_dic__nested__t__x__first__bit_axiom :
  (0 <= test_dic__nested__t__x__first__bit)

axiom test_dic__nested__t__x__last__bit_axiom :
  (test_dic__nested__t__x__first__bit <  test_dic__nested__t__x__last__bit)

axiom test_dic__nested__t__x__position_axiom :
  (0 <= test_dic__nested__t__x__position)

logic test_dic__nested__t__f__first__bit : int

logic test_dic__nested__t__f__last__bit : int

logic test_dic__nested__t__f__position : int

axiom test_dic__nested__t__f__first__bit_axiom :
  (0 <= test_dic__nested__t__f__first__bit)

axiom test_dic__nested__t__f__last__bit_axiom :
  (test_dic__nested__t__f__first__bit <  test_dic__nested__t__f__last__bit)

axiom test_dic__nested__t__f__position_axiom :
  (0 <= test_dic__nested__t__f__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type txS__ref = { txS__content : us_rep
}

function txS__ref_txS__content__projection(a: txS__ref) : us_rep =
  (a).txS__content

predicate in_range3(rec__test_dic__nested__t__x1: bool, a: us_split_discrs) =
  (rec__test_dic__nested__t__x1 = (a).rec__test_dic__nested__t__x)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic test_dic__nested__t__x__first__bit1 : int

logic test_dic__nested__t__x__last__bit1 : int

logic test_dic__nested__t__x__position1 : int

axiom test_dic__nested__t__x__first__bit_axiom1 :
  (0 <= test_dic__nested__t__x__first__bit1)

axiom test_dic__nested__t__x__last__bit_axiom1 :
  (test_dic__nested__t__x__first__bit1 <  test_dic__nested__t__x__last__bit1)

axiom test_dic__nested__t__x__position_axiom1 :
  (0 <= test_dic__nested__t__x__position1)

logic test_dic__nested__t__f__first__bit1 : int

logic test_dic__nested__t__f__last__bit1 : int

logic test_dic__nested__t__f__position1 : int

axiom test_dic__nested__t__f__first__bit_axiom1 :
  (0 <= test_dic__nested__t__f__first__bit1)

axiom test_dic__nested__t__f__last__bit_axiom1 :
  (test_dic__nested__t__f__first__bit1 <  test_dic__nested__t__f__last__bit1)

axiom test_dic__nested__t__f__position_axiom1 :
  (0 <= test_dic__nested__t__f__position1)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type t__ref = { t__content : us_rep
}

function t__ref_t__content__projection(a: t__ref) : us_rep = (a).t__content

logic x__split_discrs : us_split_discrs

logic x__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate default_initial_assumption(temp___expr_160: us_rep,
  temp___skip_top_level_161: bool) =
  (((((temp___expr_160).us_split_discrs1).rec__test_dic__nested__t__x = of_int(0)) and
  (test_dic__nested__t__f__pred(temp___expr_160) ->
  (to_rep(((temp___expr_160).us_split_fields1).rec__test_dic__nested__t__f) = c))) and
  ((not (temp___skip_top_level_161 = true)) ->
  ((((temp___expr_160).us_split_discrs1).rec__test_dic__nested__t__x = true) ->
  (not (c = 0)))))

logic y__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS2 : int

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic test_dic__nested__t__x__first__bit2 : int

logic test_dic__nested__t__x__last__bit2 : int

logic test_dic__nested__t__x__position2 : int

axiom test_dic__nested__t__x__first__bit_axiom2 :
  (0 <= test_dic__nested__t__x__first__bit2)

axiom test_dic__nested__t__x__last__bit_axiom2 :
  (test_dic__nested__t__x__first__bit2 <  test_dic__nested__t__x__last__bit2)

axiom test_dic__nested__t__x__position_axiom2 :
  (0 <= test_dic__nested__t__x__position2)

logic test_dic__nested__t__f__first__bit2 : int

logic test_dic__nested__t__f__last__bit2 : int

logic test_dic__nested__t__f__position2 : int

axiom test_dic__nested__t__f__first__bit_axiom2 :
  (0 <= test_dic__nested__t__f__first__bit2)

axiom test_dic__nested__t__f__last__bit_axiom2 :
  (test_dic__nested__t__f__first__bit2 <  test_dic__nested__t__f__last__bit2)

axiom test_dic__nested__t__f__position_axiom2 :
  (0 <= test_dic__nested__t__f__position2)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type tzS__ref = { tzS__content : us_rep
}

function tzS__ref_tzS__content__projection(a: tzS__ref) : us_rep =
  (a).tzS__content

logic z__split_discrs : us_split_discrs

logic z__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_invariant1(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range2(temp___expr_46))

 (* File "test_dic.adb", line 1, characters 0-0 *)
goal defqtvc :
  (forall x__split_fields:positive. (dynamic_invariant(c, true, false, true,
  true) -> ((x__attr__constrained = true) ->
  (((((x__split_discrs).rec__test_dic__nested__t__x = of_int(0)) and
  (test_dic__nested__t__f__pred({ us_split_discrs1 = x__split_discrs;
  us_split_fields1 = { rec__test_dic__nested__t__f = x__split_fields } }) ->
  (to_rep(x__split_fields) = c))) and
  (((x__split_discrs).rec__test_dic__nested__t__x = true) ->
  (not (c = 0)))) -> (in_range3(of_int(0), ({ us_split_discrs1 =
  x__split_discrs; us_split_fields1 = { rec__test_dic__nested__t__f =
  x__split_fields } }).us_split_discrs1) ->
  (forall usf:us_rep.
  ((of_int(0) = ((usf).us_split_discrs1).rec__test_dic__nested__t__x) ->
  ((((usf).us_split_discrs1).rec__test_dic__nested__t__x = true) ->
  (not (c = 0))))))))))
