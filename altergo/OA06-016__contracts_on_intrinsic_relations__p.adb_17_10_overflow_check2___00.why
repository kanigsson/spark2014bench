(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic x : int

logic attr__ATTRIBUTE_ADDRESS : int

type ttime_spanB

logic ttime_spanBqtint : ttime_spanB -> int

axiom ttime_spanBqtaxiom :
  (forall i:ttime_spanB. ((- 128) <= ttime_spanBqtint(i)))

axiom ttime_spanBqtaxiom1 :
  (forall i:ttime_spanB. (ttime_spanBqtint(i) <= 127))

predicate in_range1(x1: int) = (((- 128) <= x1) and (x1 <= 127))

function bool_eq1(x1: int, y: int) : bool =
  (if (x1 = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : ttime_spanB, ttime_spanB -> bool

logic dummy : ttime_spanB

type ttime_spanB__ref = { ttime_spanB__content : ttime_spanB
}

function ttime_spanB__ref_ttime_spanB__content__projection(a: ttime_spanB__ref) : ttime_spanB =
  (a).ttime_spanB__content

type time_span

logic time_spanqtint : time_span -> int

axiom time_spanqtaxiom : (forall i:time_span. ((- 10) <= time_spanqtint(i)))

axiom time_spanqtaxiom1 : (forall i:time_span. (time_spanqtint(i) <= 10))

predicate in_range2(x1: int) = (((- 10) <= x1) and (x1 <= 10))

function bool_eq2(x1: int, y: int) : bool =
  (if (x1 = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : time_span, time_span -> bool

logic dummy1 : time_span

type time_span__ref = { time_span__content : time_span
}

function time_span__ref_time_span__content__projection(a: time_span__ref) : time_span =
  (a).time_span__content

predicate dynamic_invariant(temp___expr_160: int, temp___is_init_156: bool,
  temp___skip_constant_157: bool, temp___do_toplevel_158: bool,
  temp___do_typ_inv_159: bool) = (((temp___is_init_156 = true) or
  ((- 10) <= 10)) -> in_range2(temp___expr_160))

 (* File "p.ads", line 15, characters 0-0 *)
goal defqtvc : (dynamic_invariant(x, true, false, true, true) ->
  in_range1(abs_int(x)))
