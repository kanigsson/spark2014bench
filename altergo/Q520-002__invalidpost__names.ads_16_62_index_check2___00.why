(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : character, character -> bool

logic dummy1 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

predicate dynamic_invariant(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range2(temp___expr_74))

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

predicate dynamic_invariant1(temp___expr_96: us_t, temp___is_init_92: bool,
  temp___skip_constant_93: bool, temp___do_toplevel_94: bool,
  temp___do_typ_inv_95: bool) = ((not (temp___skip_constant_93 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_96),
  last1(temp___expr_96)))

logic name : us_t

logic attr__ATTRIBUTE_ADDRESS : int

logic is_letter : int -> bool

logic is_letter__function_guard : bool, int -> prop

logic is_digit : int -> bool

logic is_digit__function_guard : bool, int -> prop

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type state_type

predicate in_range4(x: int) = ((0 <= x) and (x <= 2))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : state_type, state_type -> bool

logic dummy4 : state_type

type state_type__ref = { state_type__content : state_type
}

function state_type__ref_state_type__content__projection(a: state_type__ref) : state_type =
  (a).state_type__content

predicate dynamic_invariant2(temp___expr_187: int, temp___is_init_183: bool,
  temp___skip_constant_184: bool, temp___do_toplevel_185: bool,
  temp___do_typ_inv_186: bool) = (((temp___is_init_183 = true) or
  (0 <= 2)) -> in_range4(temp___expr_187))

type length_type

logic length_typeqtint : length_type -> int

axiom length_typeqtaxiom : (forall i:length_type. (0 <= length_typeqtint(i)))

axiom length_typeqtaxiom1 :
  (forall i:length_type. (length_typeqtint(i) <= 255))

predicate in_range5(x: int) = ((0 <= x) and (x <= 255))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : length_type, length_type -> bool

logic dummy5 : length_type

type length_type__ref = { length_type__content : length_type
}

function length_type__ref_length_type__content__projection(a: length_type__ref) : length_type =
  (a).length_type__content

predicate dynamic_invariant3(temp___expr_194: int, temp___is_init_190: bool,
  temp___skip_constant_191: bool, temp___do_toplevel_192: bool,
  temp___do_typ_inv_193: bool) = (((temp___is_init_190 = true) or
  (0 <= 255)) -> in_range5(temp___expr_194))

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy6 : integer

type t3b__ref = { t3b__content : integer
}

function t3b__ref_t3b__content__projection(a: t3b__ref) : integer =
  (a).t3b__content

type iso_646

predicate in_range6(x: int) = ((0 <= x) and (x <= 127))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : iso_646, iso_646 -> bool

logic dummy7 : iso_646

type iso_646__ref = { iso_646__content : iso_646
}

function iso_646__ref_iso_646__content__projection(a: iso_646__ref) : iso_646 =
  (a).iso_646__content

predicate dynamic_invariant4(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_46))

predicate dynamic_invariant5(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate dynamic_invariant6(temp___expr_201: int, temp___is_init_197: bool,
  temp___skip_constant_198: bool, temp___do_toplevel_199: bool,
  temp___do_typ_inv_200: bool) = (((temp___is_init_197 = true) or
  (0 <= 127)) -> in_range6(temp___expr_201))

 (* File "names.ads", line 12, characters 0-0 *)
goal defqtvc :
  (forall state:int. forall label_length:int. forall ch:int.
  forall names__is_domain_name__result:bool. (dynamic_invariant1(name, true,
  false, true, true) ->
  (forall names__is_domain_name__result1:bool. ((dynamic_invariant2(state,
  false, false, true, true) and (dynamic_invariant3(label_length, false,
  false, true, true) and (dynamic_invariant(ch, false, false, true, true) and
  (exists state1:int. ((state1 = 0) and
  (exists label_length1:int. ((label_length1 = 0) and
  (exists spark__branch:bool.
  ((spark__branch = orb((if (length(name) <  1) then true else false),
  (if (255 <  length(name)) then true else false))) and
  (if (spark__branch = true) then (names__is_domain_name__result1 = of_int(0)) else ((let temp___204 =
  first1(name) : int in
  (exists i:int. ((i = temp___204) and
  ((andb((if (temp___204 <= i) then true else false),
  (if (i <= last1(name)) then true else false)) = true) and (let o =
  (i - first1(name)) : int in (in_range1(o) and (in_range1((o + 1)) and
  (exists state2:int. exists label_length2:int. exists ch1:int.
  exists i1:int. ((label_length2 <  ((i1 - first1(name)) + 1)) and
  ((andb((if (((dynamic_property1(first1(name), last1(name), i1) and
  dynamic_invariant2(state2, false, true, true, true)) and
  dynamic_invariant3(label_length2, false, true, true, true)) and
  dynamic_invariant(ch1, false, true, true, true)) then true else false),
  (if ((first1(name) <= i1) and
  (i1 <= last1(name))) then true else false)) = true) and
  (exists o1:int. ((to_rep((to_array(name)[i1])) = o1) and
  (exists ch2:int. ((ch2 = o1) and
  (exists spark__branch1:bool.
  ((spark__branch1 = (if in_range6(ch2) then false else true)) and
  (if (spark__branch1 = true) then (names__is_domain_name__result1 = of_int(0)) else 
  (exists spark__branch2:bool.
  ((spark__branch2 = (if (state2 = 0) then true else false)) and
  (if (spark__branch2 = true) then (exists spark__branch3:bool.
                                   ((spark__branch3 = (if (is_letter(ch2) = true) then false else true)) and
                                   ((spark__branch3 = true) and
                                   (names__is_domain_name__result1 = of_int(0))))) else 
  (exists spark__branch3:bool.
  ((spark__branch3 = (if (state2 = 1) then true else false)) and
  (if (spark__branch3 = true) then (exists spark__branch4:bool.
                                   ((spark__branch4 = (if (ch2 = 46) then true else false)) and
                                   (if (spark__branch4 = true) then (exists spark__branch5:bool.
                                                                    ((spark__branch5 = (if (63 <  label_length2) then true else false)) and
                                                                    ((spark__branch5 = true) and
                                                                    (names__is_domain_name__result1 = of_int(0))))) else 
                                   (exists spark__branch5:bool.
                                   ((spark__branch5 = (if (ch2 = 45) then true else false)) and
                                   ((not (spark__branch5 = true)) and
                                   (exists spark__branch6:bool.
                                   ((spark__branch6 = (if (orb(is_letter(ch2),
                                   is_digit(ch2)) = true) then false else true)) and
                                   ((spark__branch6 = true) and
                                   (names__is_domain_name__result1 = of_int(0))))))))))) else 
  (exists spark__branch4:bool.
  ((spark__branch4 = (if (ch2 = 45) then true else false)) and
  ((not (spark__branch4 = true)) and
  (exists spark__branch5:bool. ((spark__branch5 = (if (orb(is_letter(ch2),
  is_digit(ch2)) = true) then false else true)) and
  ((spark__branch5 = true) and
  (names__is_domain_name__result1 = of_int(0))))))))))))))))))))))))))))))) or
  (exists spark__branch1:bool. exists state2:int.
  exists names__is_domain_name__result2:bool. ((let temp___204 = first1(name)
  : int in (let temp___205 = last1(name) : int in
  (exists i:int. ((i = temp___204) and
  (if (andb((if (temp___204 <= i) then true else false),
  (if (i <= temp___205) then true else false)) = true) then (let o =
  (i - first1(name)) : int in (in_range1(o) and (in_range1((o + 1)) and
  (exists state3:int. exists label_length2:int. exists ch1:int.
  exists i1:int. ((label_length2 <  ((i1 - first1(name)) + 1)) and
  ((andb((if (((dynamic_property1(first1(name), last1(name), i1) and
  dynamic_invariant2(state3, false, true, true, true)) and
  dynamic_invariant3(label_length2, false, true, true, true)) and
  dynamic_invariant(ch1, false, true, true, true)) then true else false),
  (if ((first1(name) <= i1) and
  (i1 <= last1(name))) then true else false)) = true) and
  (exists o1:int. ((to_rep((to_array(name)[i1])) = o1) and
  (exists ch2:int. ((ch2 = o1) and
  (exists spark__branch2:bool.
  ((spark__branch2 = (if in_range6(ch2) then false else true)) and
  ((not (spark__branch2 = true)) and
  (exists label_length3:int.
  ((exists spark__branch3:bool.
   ((spark__branch3 = (if (state3 = 0) then true else false)) and
   (if (spark__branch3 = true) then ((spark__branch1 = (if (is_letter(ch2) = true) then false else true)) and
   ((not (spark__branch1 = true)) and ((state2 = 1) and (let o2 =
   (label_length2 + 1) : int in (in_range5(o2) and
   (label_length3 = o2)))))) else (exists spark__branch4:bool.
                                  ((spark__branch4 = (if (state3 = 1) then true else false)) and
                                  (if (spark__branch4 = true) then (exists spark__branch5:bool.
                                                                   ((spark__branch5 = (if (ch2 = 46) then true else false)) and
                                                                   (if (spark__branch5 = true) then ((spark__branch1 = (if (63 <  label_length2) then true else false)) and
                                                                   ((not (spark__branch1 = true)) and
                                                                   ((state2 = 0) and
                                                                   (label_length3 = 0)))) else 
                                                                   (exists spark__branch6:bool.
                                                                   ((spark__branch6 = (if (ch2 = 45) then true else false)) and
                                                                   (if (spark__branch6 = true) then (((state2 = 2) and
                                                                   (let o2 =
                                                                   (label_length2 + 1)
                                                                   : int in
                                                                   (in_range5(o2) and
                                                                   (label_length3 = o2)))) and
                                                                   (spark__branch1 = spark__branch6)) else (((spark__branch1 = (if (orb(is_letter(ch2),
                                                                   is_digit(ch2)) = true) then false else true)) and
                                                                   ((not (spark__branch1 = true)) and
                                                                   (let o2 =
                                                                   (label_length2 + 1)
                                                                   : int in
                                                                   (in_range5(o2) and
                                                                   (label_length3 = o2))))) and
                                                                   (state2 = state3)))))))) else 
                                  (exists spark__branch5:bool.
                                  ((spark__branch5 = (if (ch2 = 45) then true else false)) and
                                  (if (spark__branch5 = true) then (((let o2 =
                                  (label_length2 + 1) : int in
                                  (in_range5(o2) and
                                  (label_length3 = o2))) and
                                  (spark__branch1 = spark__branch5)) and
                                  (state2 = state3)) else ((spark__branch1 = (if (orb(is_letter(ch2),
                                  is_digit(ch2)) = true) then false else true)) and
                                  ((not (spark__branch1 = true)) and
                                  ((state2 = 1) and (let o2 =
                                  (label_length2 + 1) : int in
                                  (in_range5(o2) and
                                  (label_length3 = o2))))))))))))))) and
  (i1 = temp___205)))))))))))))))) else (((spark__branch1 = spark__branch) and
  (state2 = state1)) and
  (names__is_domain_name__result2 = names__is_domain_name__result))))))) and
  (exists spark__branch2:bool.
  ((spark__branch2 = (if (state2 = 0) then true else false)) and
  (if (spark__branch2 = true) then (names__is_domain_name__result1 = of_int(0)) else 
  (exists spark__branch3:bool.
  ((spark__branch3 = (if (state2 = 1) then true else false)) and
  (if (spark__branch3 = true) then (names__is_domain_name__result1 = of_int(1)) else (names__is_domain_name__result1 = of_int(0))))))))))))))))))))) ->
  ((names__is_domain_name__result1 = true) ->
  (forall usf:int. ((andb((if (first1(name) <= usf) then true else false),
  (if (usf <= last1(name)) then true else false)) = true) ->
  (first1(name) <= usf))))))))
