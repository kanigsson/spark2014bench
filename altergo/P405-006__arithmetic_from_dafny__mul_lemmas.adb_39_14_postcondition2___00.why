(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

logic x : int

logic attr__ATTRIBUTE_ADDRESS : int

logic y : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic z : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type small_integer

logic small_integerqtint : small_integer -> int

axiom small_integerqtaxiom :
  (forall i:small_integer. ((- 1000) <= small_integerqtint(i)))

axiom small_integerqtaxiom1 :
  (forall i:small_integer. (small_integerqtint(i) <= 1000))

predicate in_range1(x1: int) = (((- 1000) <= x1) and (x1 <= 1000))

function bool_eq1(x1: int, y1: int) : bool =
  (if (x1 = y1) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : small_integer, small_integer -> bool

logic dummy1 : small_integer

type small_integer__ref = { small_integer__content : small_integer
}

function small_integer__ref_small_integer__content__projection(a: small_integer__ref) : small_integer =
  (a).small_integer__content

predicate dynamic_invariant1(temp___expr_180: int, temp___is_init_176: bool,
  temp___skip_constant_177: bool, temp___do_toplevel_178: bool,
  temp___do_typ_inv_179: bool) = (((temp___is_init_176 = true) or
  ((- 1000) <= 1000)) -> in_range1(temp___expr_180))

 (* File "mul_lemmas.adb", line 38, characters 0-0 *)
goal defqtvc :
  (forall res1:int. forall res2:int. (dynamic_invariant1(x, true, false,
  true, true) -> (dynamic_invariant1(y, true, false, true, true) ->
  (dynamic_invariant1(z, true, false, true, true) -> (dynamic_invariant(res1,
  false, false, true, true) -> (dynamic_invariant(res2, false, false, true,
  true) -> (let o = (x * (y + z)) : int in (in_range(o) ->
  (forall res11:int. ((res11 = o) -> (let o1 = (x * z) : int in
  (in_range(o1) -> (let o2 = (x * y) : int in (in_range(o2) -> (let o3 =
  (o2 + o1) : int in (in_range(o3) ->
  (forall res21:int. ((res21 = o3) -> (res11 = res21)))))))))))))))))))
