(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type et1

logic et1qtint : et1 -> int

axiom et1qtaxiom : (forall i:et1. (0 <= et1qtint(i)))

axiom et1qtaxiom1 : (forall i:et1. (et1qtint(i) <= 99))

predicate in_range(x: int) = ((0 <= x) and (x <= 99))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : et1, et1 -> bool

logic dummy : et1

type et1__ref = { et1__content : et1
}

function et1__ref_et1__content__projection(a: et1__ref) : et1 =
  (a).et1__content

function to_rep(x: et1) : int = et1qtint(x)

logic of_rep : int -> et1

axiom inversion_axiom : (forall x:et1 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:et1 [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map

type map__ref = { map__content : map
}

logic get : map, int, int, int -> et1

logic set : map, int, int, int, et1 -> map

axiom Select_eq :
  (forall m:map.
  (forall i:int.
  (forall j:int.
  (forall k:int.
  (forall a:et1 [set(m, i, j, k, a)]. (get(set(m, i, j, k, a), i, j, k) = a))))))

axiom Select_neq :
  (forall m:map.
  (forall i:int. forall i2:int.
  (forall j:int. forall j2:int.
  (forall k:int. forall k2:int.
  (forall a:et1 [get(set(m, i, j, k, a), i2, j2, k2)| set(m, i, j, k, a),
  get(m, i2, j2, k2)]. ((not ((i = i2) and ((j = j2) and (k = k2)))) ->
  (get(set(m, i, j, k, a), i2, j2, k2) = get(m, i2, j2, k2))))))))

logic slide : map, int, int, int, int, int, int -> map

axiom slide_def :
  (forall a:map.
  (forall old_first:int. forall new_first:int.
  (forall old_first_2:int. forall new_first_2:int.
  (forall old_first_3:int. forall new_first_3:int.
  (forall i:int.
  (forall j:int.
  (forall k:int [get(slide(a, old_first, new_first, old_first_2, new_first_2,
  old_first_3, new_first_3), i, j, k)]. (get(slide(a, old_first, new_first,
  old_first_2, new_first_2, old_first_3, new_first_3), i, j, k) = get(a,
  (i - (new_first - old_first)), (j - (new_first_2 - old_first_2)),
  (k - (new_first_3 - old_first_3)))))))))))

function bool_eq1(a: map, a__first: int, a__last: int, a__first_2: int,
  a__last_2: int, a__first_3: int, a__last_3: int, b: map, b__first: int,
  b__last: int, b__first_2: int, b__last_2: int, b__first_3: int,
  b__last_3: int) : bool =
  (if ((((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (if (a__first_2 <= a__last_2) then ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2))) else (b__last_2 <  b__first_2))) and
  (if (a__first_3 <= a__last_3) then ((b__first_3 <= b__last_3) and
  ((a__last_3 - a__first_3) = (b__last_3 - b__first_3))) else (b__last_3 <  b__first_3))) and
  (forall temp___idx_154:int. forall temp___idx_155:int.
  forall temp___idx_156:int. (((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and ((a__first_2 <= temp___idx_155) and
  (temp___idx_155 <= a__last_2))) and ((a__first_3 <= temp___idx_156) and
  (temp___idx_156 <= a__last_3))) -> (to_rep(get(a, temp___idx_154,
  temp___idx_155, temp___idx_156)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_154),
  ((b__first_2 - a__first_2) + temp___idx_155),
  ((b__first_3 - a__first_3) + temp___idx_156))))))) then true else false)

axiom bool_eq_rev :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int. forall b__first_3:int. forall b__last_3:int.
  ((bool_eq1(b, b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3, a, a__first, a__last, a__first_2, a__last_2, a__first_3,
  a__last_3) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int. forall b__first_3:int. forall b__last_3:int.
  ((bool_eq1(b, b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3, a, a__first, a__last, a__first_2, a__last_2, a__first_3,
  a__last_3) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int. forall b__first_3:int. forall b__last_3:int.
  ((bool_eq1(b, b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3, a, a__first, a__last, a__first_2, a__last_2, a__first_3,
  a__last_3) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int. forall b__first_3:int. forall b__last_3:int.
  ((bool_eq1(b, b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3, a, a__first, a__last, a__first_2, a__last_2, a__first_3,
  a__last_3) = true) -> ((a__first_2 <= a__last_2) ->
  (b__first_2 <= b__last_2)))))

axiom bool_eq_rev4 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int. forall b__first_3:int. forall b__last_3:int.
  ((bool_eq1(b, b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3, a, a__first, a__last, a__first_2, a__last_2, a__first_3,
  a__last_3) = true) -> ((a__first_2 <= a__last_2) ->
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2))))))

axiom bool_eq_rev5 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int. forall b__first_3:int. forall b__last_3:int.
  ((bool_eq1(b, b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3, a, a__first, a__last, a__first_2, a__last_2, a__first_3,
  a__last_3) = true) -> ((not (a__first_2 <= a__last_2)) ->
  (b__last_2 <  b__first_2)))))

axiom bool_eq_rev6 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int. forall b__first_3:int. forall b__last_3:int.
  ((bool_eq1(b, b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3, a, a__first, a__last, a__first_2, a__last_2, a__first_3,
  a__last_3) = true) -> ((a__first_3 <= a__last_3) ->
  (b__first_3 <= b__last_3)))))

axiom bool_eq_rev7 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int. forall b__first_3:int. forall b__last_3:int.
  ((bool_eq1(b, b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3, a, a__first, a__last, a__first_2, a__last_2, a__first_3,
  a__last_3) = true) -> ((a__first_3 <= a__last_3) ->
  ((a__last_3 - a__first_3) = (b__last_3 - b__first_3))))))

axiom bool_eq_rev8 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int. forall b__first_3:int. forall b__last_3:int.
  ((bool_eq1(b, b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3, a, a__first, a__last, a__first_2, a__last_2, a__first_3,
  a__last_3) = true) -> ((not (a__first_3 <= a__last_3)) ->
  (b__last_3 <  b__first_3)))))

axiom bool_eq_rev9 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int. forall b__first_3:int. forall b__last_3:int.
  ((bool_eq1(b, b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3, a, a__first, a__last, a__first_2, a__last_2, a__first_3,
  a__last_3) = true) ->
  (forall temp___idx_154:int. forall temp___idx_155:int.
  forall temp___idx_156:int. (((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and ((a__first_2 <= temp___idx_155) and
  (temp___idx_155 <= a__last_2))) and ((a__first_3 <= temp___idx_156) and
  (temp___idx_156 <= a__last_3))) -> (to_rep(get(a, temp___idx_154,
  temp___idx_155, temp___idx_156)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_154),
  ((b__first_2 - a__first_2) + temp___idx_155),
  ((b__first_3 - a__first_3) + temp___idx_156)))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic x1 : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic x2 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic x3 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic y1 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic y2 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic y3 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic z1 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic z2 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic z3 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic new_val_1 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic new_val_2 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

type it1

logic it1qtint : it1 -> int

axiom it1qtaxiom : (forall i:it1. (1 <= it1qtint(i)))

axiom it1qtaxiom1 : (forall i:it1. (it1qtint(i) <= 3))

predicate in_range1(x: int) = ((1 <= x) and (x <= 3))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : it1, it1 -> bool

logic dummy1 : it1

type it1__ref = { it1__content : it1
}

function it1__ref_it1__content__projection(a: it1__ref) : it1 =
  (a).it1__content

predicate dynamic_invariant(temp___expr_168: int, temp___is_init_164: bool,
  temp___skip_constant_165: bool, temp___do_toplevel_166: bool,
  temp___do_typ_inv_167: bool) = (((temp___is_init_164 = true) or
  (1 <= 3)) -> in_range1(temp___expr_168))

type it2

logic it2qtint : it2 -> int

axiom it2qtaxiom : (forall i:it2. (1 <= it2qtint(i)))

axiom it2qtaxiom1 : (forall i:it2. (it2qtint(i) <= 5))

predicate in_range2(x: int) = ((1 <= x) and (x <= 5))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : it2, it2 -> bool

logic dummy2 : it2

type it2__ref = { it2__content : it2
}

function it2__ref_it2__content__projection(a: it2__ref) : it2 =
  (a).it2__content

predicate dynamic_invariant1(temp___expr_175: int, temp___is_init_171: bool,
  temp___skip_constant_172: bool, temp___do_toplevel_173: bool,
  temp___do_typ_inv_174: bool) = (((temp___is_init_171 = true) or
  (1 <= 5)) -> in_range2(temp___expr_175))

type it3

logic it3qtint : it3 -> int

axiom it3qtaxiom : (forall i:it3. (1 <= it3qtint(i)))

axiom it3qtaxiom1 : (forall i:it3. (it3qtint(i) <= 10))

predicate in_range3(x: int) = ((1 <= x) and (x <= 10))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : it3, it3 -> bool

logic dummy3 : it3

type it3__ref = { it3__content : it3
}

function it3__ref_it3__content__projection(a: it3__ref) : it3 =
  (a).it3__content

predicate dynamic_invariant2(temp___expr_182: int, temp___is_init_178: bool,
  temp___skip_constant_179: bool, temp___do_toplevel_180: bool,
  temp___do_typ_inv_181: bool) = (((temp___is_init_178 = true) or
  (1 <= 10)) -> in_range3(temp___expr_182))

predicate dynamic_invariant3(temp___expr_189: int, temp___is_init_185: bool,
  temp___skip_constant_186: bool, temp___do_toplevel_187: bool,
  temp___do_typ_inv_188: bool) = (((temp___is_init_185 = true) or
  (0 <= 99)) -> in_range(temp___expr_189))

logic temp_____aggregate_def_317 : map, int, int, int, int, int, int, int,
  int, int, int, int -> map

axiom def_axiom :
  (forall temp___319:map.
  (forall temp___320:int. forall temp___321:int. forall temp___322:int.
  forall temp___323:int. forall temp___324:int. forall temp___325:int.
  forall temp___326:int. forall temp___327:int. forall temp___328:int.
  forall temp___329:int. forall temp___330:int.
  ((dynamic_invariant(temp___320, true, true, true, true) and
  ((((dynamic_invariant1(temp___321, true, true, true, true) and
  dynamic_invariant2(temp___322, true, true, true, true)) and
  dynamic_invariant(temp___323, true, true, true, true)) and
  (dynamic_invariant1(temp___324, true, true, true, true) and
  dynamic_invariant2(temp___325, true, true, true, true))) and
  (((dynamic_invariant3(temp___326, true, true, true, true) and
  dynamic_invariant(temp___327, true, true, true, true)) and
  dynamic_invariant1(temp___328, true, true, true, true)) and
  (dynamic_invariant2(temp___329, true, true, true, true) and
  dynamic_invariant3(temp___330, true, true, true, true))))) ->
  (forall temp___331:int. forall temp___332:int. forall temp___333:int.
  ((((temp___331 = temp___327) and (temp___332 = temp___328)) and
  (temp___333 = temp___329)) ->
  (to_rep(get(temp_____aggregate_def_317(temp___319, temp___320, temp___321,
  temp___322, temp___323, temp___324, temp___325, temp___326, temp___327,
  temp___328, temp___329, temp___330), temp___331, temp___332,
  temp___333)) = temp___330))))))

axiom def_axiom1 :
  (forall temp___319:map.
  (forall temp___320:int. forall temp___321:int. forall temp___322:int.
  forall temp___323:int. forall temp___324:int. forall temp___325:int.
  forall temp___326:int. forall temp___327:int. forall temp___328:int.
  forall temp___329:int. forall temp___330:int.
  ((dynamic_invariant(temp___320, true, true, true, true) and
  ((((dynamic_invariant1(temp___321, true, true, true, true) and
  dynamic_invariant2(temp___322, true, true, true, true)) and
  dynamic_invariant(temp___323, true, true, true, true)) and
  (dynamic_invariant1(temp___324, true, true, true, true) and
  dynamic_invariant2(temp___325, true, true, true, true))) and
  (((dynamic_invariant3(temp___326, true, true, true, true) and
  dynamic_invariant(temp___327, true, true, true, true)) and
  dynamic_invariant1(temp___328, true, true, true, true)) and
  (dynamic_invariant2(temp___329, true, true, true, true) and
  dynamic_invariant3(temp___330, true, true, true, true))))) ->
  (forall temp___331:int. forall temp___332:int. forall temp___333:int.
  ((not (((temp___331 = temp___327) and (temp___332 = temp___328)) and
  (temp___333 = temp___329))) -> (((((temp___331 = temp___320) and
  (temp___332 = temp___321)) and (temp___333 = temp___322)) or
  (((temp___331 = temp___323) and (temp___332 = temp___324)) and
  (temp___333 = temp___325))) ->
  (to_rep(get(temp_____aggregate_def_317(temp___319, temp___320, temp___321,
  temp___322, temp___323, temp___324, temp___325, temp___326, temp___327,
  temp___328, temp___329, temp___330), temp___331, temp___332,
  temp___333)) = temp___326)))))))

axiom def_axiom2 :
  (forall temp___319:map.
  (forall temp___320:int. forall temp___321:int. forall temp___322:int.
  forall temp___323:int. forall temp___324:int. forall temp___325:int.
  forall temp___326:int. forall temp___327:int. forall temp___328:int.
  forall temp___329:int. forall temp___330:int.
  ((dynamic_invariant(temp___320, true, true, true, true) and
  ((((dynamic_invariant1(temp___321, true, true, true, true) and
  dynamic_invariant2(temp___322, true, true, true, true)) and
  dynamic_invariant(temp___323, true, true, true, true)) and
  (dynamic_invariant1(temp___324, true, true, true, true) and
  dynamic_invariant2(temp___325, true, true, true, true))) and
  (((dynamic_invariant3(temp___326, true, true, true, true) and
  dynamic_invariant(temp___327, true, true, true, true)) and
  dynamic_invariant1(temp___328, true, true, true, true)) and
  (dynamic_invariant2(temp___329, true, true, true, true) and
  dynamic_invariant3(temp___330, true, true, true, true))))) ->
  (forall temp___331:int. forall temp___332:int. forall temp___333:int.
  ((not (((temp___331 = temp___327) and (temp___332 = temp___328)) and
  (temp___333 = temp___329))) -> ((not ((((temp___331 = temp___320) and
  (temp___332 = temp___321)) and (temp___333 = temp___322)) or
  (((temp___331 = temp___323) and (temp___332 = temp___324)) and
  (temp___333 = temp___325)))) -> (get(temp_____aggregate_def_317(temp___319,
  temp___320, temp___321, temp___322, temp___323, temp___324, temp___325,
  temp___326, temp___327, temp___328, temp___329, temp___330), temp___331,
  temp___332, temp___333) = get(temp___319, temp___331, temp___332,
  temp___333))))))))

 (* File "update_checks.adb", line 91, characters 0-0 *)
goal defqtvc : (dynamic_invariant(x1, true, false, true, true) ->
  (dynamic_invariant(x2, true, false, true, true) -> (dynamic_invariant(x3,
  true, false, true, true) -> (dynamic_invariant1(y1, true, false, true,
  true) -> (dynamic_invariant1(y2, true, false, true, true) ->
  (dynamic_invariant1(y3, true, false, true, true) -> (dynamic_invariant2(z1,
  true, false, true, true) -> (dynamic_invariant2(z2, true, false, true,
  true) -> (dynamic_invariant2(z3, true, false, true, true) ->
  (dynamic_invariant3(new_val_1, true, false, true, true) ->
  (dynamic_invariant3(new_val_2, true, false, true, true) ->
  (in_range((new_val_2 - 1)) -> (in_range3((z3 + 1)) ->
  (in_range2((y3 + 1)) -> (in_range1((x3 + 1)) ->
  (in_range((new_val_1 + 1)) -> (in_range3((z2 + 1)) ->
  (in_range2((y2 + 1)) -> in_range1((x2 + 1))))))))))))))))))))
