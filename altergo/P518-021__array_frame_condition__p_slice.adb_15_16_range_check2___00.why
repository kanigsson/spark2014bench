(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic dummy1 : (int,integer) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq1 : (int,integer) farray, (int,integer) farray -> bool

type map

type map__ref1 = { map__content1 : map
}

logic get : map, int, int -> (int,integer) farray

logic set : map, int, int, (int,integer) farray -> map

axiom Select_eq :
  (forall m:map.
  (forall i:int.
  (forall j:int.
  (forall a:(int,integer) farray [set(m, i, j, a)]. (get(set(m, i, j, a), i,
  j) = a)))))

axiom Select_neq :
  (forall m:map.
  (forall i:int. forall i2:int.
  (forall j:int. forall j2:int.
  (forall a:(int,integer) farray [get(set(m, i, j, a), i2, j2)| set(m, i, j,
  a), get(m, i2, j2)]. ((not ((i = i2) and (j = j2))) -> (get(set(m, i, j,
  a), i2, j2) = get(m, i2, j2)))))))

logic slide1 : map, int, int, int, int -> map

axiom slide_def1 :
  (forall a:map.
  (forall new_first:int. forall old_first:int.
  (forall new_first_2:int. forall old_first_2:int.
  (forall i:int.
  (forall j:int [get(slide1(a, old_first, new_first, old_first_2,
  new_first_2), i, j)]. (get(slide1(a, old_first, new_first, old_first_2,
  new_first_2), i, j) = get(a, (i - (new_first - old_first)),
  (j - (new_first_2 - old_first_2)))))))))

function bool_eq3(a: map, a__first: int, a__last: int, a__first_2: int,
  a__last_2: int, b: map, b__first: int, b__last: int, b__first_2: int,
  b__last_2: int) : bool =
  (if (((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (if (a__first_2 <= a__last_2) then ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2))) else (b__last_2 <  b__first_2))) and
  (forall temp___idx_155:int. forall temp___idx_156:int.
  ((((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)) and
  ((a__first_2 <= temp___idx_156) and (temp___idx_156 <= a__last_2))) ->
  (bool_eq2(get(a, temp___idx_155, temp___idx_156), 1, 3, get(b,
  ((b__first - a__first) + temp___idx_155),
  ((b__first_2 - a__first_2) + temp___idx_156)), 1, 3) = true)))) then true else false)

axiom bool_eq_rev4 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq3(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq3(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq3(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq3(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first_2 <= a__last_2) ->
  (b__first_2 <= b__last_2)))))

axiom bool_eq_rev8 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq3(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first_2 <= a__last_2) ->
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2))))))

axiom bool_eq_rev9 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq3(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((not (a__first_2 <= a__last_2)) ->
  (b__last_2 <  b__first_2)))))

axiom bool_eq_rev10 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq3(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) ->
  (forall temp___idx_155:int. forall temp___idx_156:int.
  ((((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)) and
  ((a__first_2 <= temp___idx_156) and (temp___idx_156 <= a__last_2))) ->
  (bool_eq2(get(a, temp___idx_155, temp___idx_156), 1, 3, get(b,
  ((b__first - a__first) + temp___idx_155),
  ((b__first_2 - a__first_2) + temp___idx_156)), 1, 3) = true))))))

logic dummy2 : map

logic value__size1 : int

logic object__size1 : int

logic component__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq2 : map, map -> bool

type map__ref2 = { map__content2 : (int,map) farray
}

logic slide2 : (int,map) farray, int, int -> (int,map) farray

axiom slide_eq1 :
  (forall a:(int,map) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,map) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,map) farray, a__first: int, a__last: int,
  b: (int,map) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) -> (bool_eq3((a[temp___idx_157]), 1, 3, 1, 3,
  (b[((b__first - a__first) + temp___idx_157)]), 1, 3, 1, 3) = true)))) then true else false)

axiom bool_eq_rev11 :
  (forall a:(int,map) farray. forall b:(int,map) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev12 :
  (forall a:(int,map) farray. forall b:(int,map) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev13 :
  (forall a:(int,map) farray. forall b:(int,map) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev14 :
  (forall a:(int,map) farray. forall b:(int,map) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) -> (bool_eq3((a[temp___idx_157]), 1, 3, 1, 3,
  (b[((b__first - a__first) + temp___idx_157)]), 1, 3, 1, 3) = true))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic y : (int,map) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

type index

logic indexqtint : index -> int

axiom indexqtaxiom : (forall i:index. (1 <= indexqtint(i)))

axiom indexqtaxiom1 : (forall i:index. (indexqtint(i) <= 3))

predicate in_range2(x: int) = ((1 <= x) and (x <= 3))

function bool_eq5(x: int, y1: int) : bool =
  (if (x = y1) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq3 : index, index -> bool

logic dummy3 : index

type index__ref = { index__content : index
}

function index__ref_index__content__projection(a: index__ref) : index =
  (a).index__content

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size2 : int

logic object__size2 : int

logic component__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom component__size_axiom2 : (0 <= component__size2)

axiom alignment_axiom2 : (0 <= alignment2)

function bool_eq6(x: us_t, y1: us_t) : bool = bool_eq2((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y1).elts,
  to_rep(first((y1).rt)), to_rep(last((y1).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : us_t

type tt1B__ref = { tt1B__content : us_t
}

function tt1B__ref_tt1B__content__projection(a: tt1B__ref) : us_t =
  (a).tt1B__content

type t13b__ref = { t13b__content : us_t
}

function t13b__ref_t13b__content__projection(a: t13b__ref) : us_t =
  (a).t13b__content

type t15b__ref = { t15b__content : us_t
}

function t15b__ref_t15b__content__projection(a: t15b__ref) : us_t =
  (a).t15b__content

logic p_slice__x__aggregate_def : map -> (int,map) farray

logic temp_____aggregate_def_232 : (int,integer) farray -> map

logic temp_____aggregate_def_237 : int -> (int,integer) farray

logic temp_____aggregate_def_249 : int, int, int -> us_t

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate dynamic_invariant1(temp___expr_183: int, temp___is_init_179: bool,
  temp___skip_constant_180: bool, temp___do_toplevel_181: bool,
  temp___do_typ_inv_182: bool) = (((temp___is_init_179 = true) or
  (1 <= 3)) -> in_range2(temp___expr_183))

axiom def_axiom :
  (forall temp___230:map.
  (forall temp___231:int.
  ((p_slice__x__aggregate_def(temp___230)[temp___231]) = temp___230)))

axiom def_axiom1 :
  (forall temp___234:(int,integer) farray.
  (forall temp___235:int. forall temp___236:int.
  (get(temp_____aggregate_def_232(temp___234), temp___235,
  temp___236) = temp___234)))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 0)

axiom def_axiom2 :
  (forall temp___239:int. (dynamic_invariant(temp___239, true, true, true,
  true) ->
  (forall temp___240:int.
  ((temp_____aggregate_def_237(temp___239)[temp___240]) = rliteral))))

logic rliteral1 : integer

axiom rliteral_axiom1 : (integerqtint(rliteral1) = 1)

axiom def_axiom3 :
  (forall temp___251:int. forall temp___252:int. forall temp___253:int.
  (dynamic_invariant(temp___251, true, true, true, true) ->
  (dynamic_property(1, 3, temp___252, temp___253) ->
  (first1(temp_____aggregate_def_249(temp___251, temp___252,
  temp___253)) = temp___252))))

axiom def_axiom4 :
  (forall temp___251:int. forall temp___252:int. forall temp___253:int.
  (dynamic_invariant(temp___251, true, true, true, true) ->
  (dynamic_property(1, 3, temp___252, temp___253) ->
  (last1(temp_____aggregate_def_249(temp___251, temp___252,
  temp___253)) = temp___253))))

axiom def_axiom5 :
  (forall temp___251:int. forall temp___252:int. forall temp___253:int.
  (dynamic_invariant(temp___251, true, true, true, true) ->
  (forall temp___254:int. ((to_array(temp_____aggregate_def_249(temp___251,
  temp___252, temp___253))[temp___254]) = rliteral1))))

 (* File "p_slice.adb", line 1, characters 0-0 *)
goal defqtvc :
  (forall x:(int,map) farray.
  ((x = p_slice__x__aggregate_def(temp_____aggregate_def_232(temp_____aggregate_def_237(0)))) ->
  ((x = y) ->
  (forall i3:int. ((i3 = 1) -> ((andb((if (1 <= i3) then true else false),
  (if (i3 <= 3) then true else false)) = true) ->
  (forall x1:(int,map) farray. forall i31:int.
  ((andb((if (forall temp___303:int. (((1 <= temp___303) and
             (temp___303 <= 3)) -> (if ((3 <  temp___303) or
             ((temp___303 <  1) or
             (i31 <= temp___303))) then ((x1[temp___303]) = (x[temp___303])) else 
             (forall temp___304:int. forall temp___305:int.
             ((((1 <= temp___304) and (temp___304 <= 3)) and
             ((1 <= temp___305) and (temp___305 <= 3))) ->
             (forall temp___306:int. (((1 <= temp___306) and
             (temp___306 <= 3)) -> ((2 <  temp___306) ->
             ((get((x1[temp___303]), temp___304,
             temp___305)[temp___306]) = (get((x[temp___303]), temp___304,
             temp___305)[temp___306])))))))))) then true else false),
  (if ((1 <= i31) and (i31 <= 3)) then true else false)) = true) ->
  (forall i21:int. ((i21 = 1) -> ((andb((if (1 <= i21) then true else false),
  (if (i21 <= 3) then true else false)) = true) ->
  (forall x2:(int,map) farray. forall i211:int.
  ((andb((if (forall temp___278:int. (((1 <= temp___278) and
             (temp___278 <= 3)) ->
             (if (not (i31 = temp___278)) then ((x2[temp___278]) = (x1[temp___278])) else 
             (forall temp___279:int. forall temp___280:int.
             ((((1 <= temp___279) and (temp___279 <= 3)) and
             ((1 <= temp___280) and (temp___280 <= 3))) ->
             (if ((3 <  temp___279) or ((temp___279 <  1) or
             (i211 <= temp___279))) then (get((x2[temp___278]), temp___279,
             temp___280) = get((x1[temp___278]), temp___279,
             temp___280)) else (forall temp___281:int.
                               (((1 <= temp___281) and (temp___281 <= 3)) ->
                               ((2 <  temp___281) -> ((get((x2[temp___278]),
                               temp___279,
                               temp___280)[temp___281]) = (get((x1[temp___278]),
                               temp___279, temp___280)[temp___281]))))))))))) then true else false),
  (if ((1 <= i211) and (i211 <= 3)) then true else false)) = true) ->
  (forall i22:int. ((i22 = 1) -> ((andb((if (1 <= i22) then true else false),
  (if (i22 <= 3) then true else false)) = true) ->
  (forall x3:(int,map) farray. forall i221:int.
  ((andb((if (forall temp___273:int. (((1 <= temp___273) and
             (temp___273 <= 3)) ->
             (if (not (i31 = temp___273)) then ((x3[temp___273]) = (x2[temp___273])) else 
             (forall temp___274:int. forall temp___275:int.
             ((((1 <= temp___274) and (temp___274 <= 3)) and
             ((1 <= temp___275) and (temp___275 <= 3))) ->
             (if ((3 <  temp___275) or ((temp___275 <  1) or
             ((i221 <= temp___275) or
             (not (i211 = temp___274))))) then (get((x3[temp___273]),
             temp___274, temp___275) = get((x2[temp___273]), temp___274,
             temp___275)) else (forall temp___276:int.
                               (((1 <= temp___276) and (temp___276 <= 3)) ->
                               ((2 <  temp___276) -> ((get((x3[temp___273]),
                               temp___274,
                               temp___275)[temp___276]) = (get((x2[temp___273]),
                               temp___274, temp___275)[temp___276]))))))))))) then true else false),
  (if ((1 <= i221) and (i221 <= 3)) then true else false)) = true) ->
  (forall i1:int. ((i1 = 1) -> ((andb((if (1 <= i1) then true else false),
  (if (i1 <= 3) then true else false)) = true) ->
  (forall x4:(int,map) farray. forall i11:int.
  ((andb((if (forall temp___268:int. (((1 <= temp___268) and
             (temp___268 <= 3)) ->
             (if (not (i31 = temp___268)) then ((x4[temp___268]) = (x3[temp___268])) else 
             (forall temp___269:int. forall temp___270:int.
             ((((1 <= temp___269) and (temp___269 <= 3)) and
             ((1 <= temp___270) and (temp___270 <= 3))) ->
             (if ((not (i221 = temp___270)) or
             (not (i211 = temp___269))) then (get((x4[temp___268]),
             temp___269, temp___270) = get((x3[temp___268]), temp___269,
             temp___270)) else (forall temp___271:int.
                               (((1 <= temp___271) and (temp___271 <= 3)) ->
                               (((2 <  temp___271) or (temp___271 <  1)) ->
                               ((get((x4[temp___268]), temp___269,
                               temp___270)[temp___271]) = (get((x3[temp___268]),
                               temp___269, temp___270)[temp___271]))))))))))) then true else false),
  (if ((1 <= i11) and (i11 <= 3)) then true else false)) = true) ->
  (let temp___255 = temp_____aggregate_def_249(1, i11, 2) : us_t in
  ((first1(temp___255) = i11) -> ((last1(temp___255) = 2) ->
  ((if (first1(temp___255) <= last1(temp___255)) then ((i11 <= 2) and
  ((last1(temp___255) - first1(temp___255)) = (2 - i11))) else (2 <  i11)) ->
  ((i11 <= 2) -> (1 <= i11)))))))))))))))))))))))))))))
