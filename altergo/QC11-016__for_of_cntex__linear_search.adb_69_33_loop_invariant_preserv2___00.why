(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : count_type, count_type -> bool

logic dummy1 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

function to_rep(x: count_type) : int = count_typeqtint(x)

logic of_rep : int -> count_type

axiom inversion_axiom :
  (forall x:count_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:count_type [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__lists__list__capacity : count_type
}

function us_split_discrs_rec__lists__list__capacity__projection(a: us_split_discrs) : count_type =
  (a).rec__lists__list__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__lists__list : us_main_type
}

function us_split_fields_rec__lists__list__projection(a: us_split_fields) : us_main_type =
  (a).rec__lists__list

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__lists__list__capacity) = to_rep(((b).us_split_discrs1).rec__lists__list__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__lists__list,
  ((b).us_split_fields1).rec__lists__list) = true)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic lists__list__capacity__first__bit : int

logic lists__list__capacity__last__bit : int

logic lists__list__capacity__position : int

axiom lists__list__capacity__first__bit_axiom :
  (0 <= lists__list__capacity__first__bit)

axiom lists__list__capacity__last__bit_axiom :
  (lists__list__capacity__first__bit <  lists__list__capacity__last__bit)

axiom lists__list__capacity__position_axiom :
  (0 <= lists__list__capacity__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type int_list__ref = { int_list__content : us_rep
}

function int_list__ref_int_list__content__projection(a: int_list__ref) : us_rep =
  (a).int_list__content

logic arr : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic n : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep1

logic bool_eq4 : us_rep1, us_rep1 -> bool

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type sequence__ref = { sequence__content : us_rep1
}

function sequence__ref_sequence__content__2__projection(a: sequence__ref) : us_rep1 =
  (a).sequence__content

logic length : us_rep1 -> int

logic length__function_guard : int, us_rep1 -> prop

function last(container: us_rep1) : int = (0 + length(container))

logic last__function_guard : int, us_rep1 -> prop

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. (0 <= extended_indexqtint(i)))

axiom extended_indexqtaxiom1 :
  (forall i:extended_index. (extended_indexqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : extended_index, extended_index -> bool

logic dummy4 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref_extended_index__content__2__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

predicate dynamic_invariant1(temp___expr_305: int, temp___is_init_301: bool,
  temp___skip_constant_302: bool, temp___do_toplevel_303: bool,
  temp___do_typ_inv_304: bool) = (((temp___is_init_301 = true) or
  (0 <= 2147483647)) -> in_range3(temp___expr_305))

function iter_has_element(container: us_rep1, position: int) : bool =
  andb((if (1 <= position) then true else false),
  (if (position <= last(container)) then true else false))

logic iter_has_element__function_guard : bool, us_rep1, int -> prop

logic get : us_rep1, int -> int

logic get__function_guard : int, us_rep1, int -> prop

predicate default_initial_assumption(temp___expr_313: us_rep1,
  temp___skip_top_level_314: bool) =
  ((not (temp___skip_top_level_314 = true)) -> (length(temp___expr_313) = 0))

type element_type

logic element_typeqtint : element_type -> int

axiom element_typeqtaxiom :
  (forall i:element_type. ((- 2147483648) <= element_typeqtint(i)))

axiom element_typeqtaxiom1 :
  (forall i:element_type. (element_typeqtint(i) <= 2147483647))

predicate in_range4(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : element_type, element_type -> bool

logic dummy5 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_element_type__content__3__projection(a: element_type__ref) : element_type =
  (a).element_type__content

predicate dynamic_invariant2(temp___expr_343: int, temp___is_init_339: bool,
  temp___skip_constant_340: bool, temp___do_toplevel_341: bool,
  temp___do_typ_inv_342: bool) = (((temp___is_init_339 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range4(temp___expr_343))

axiom get__post_axiom :
  (forall container:us_rep1.
  (forall position:int [get(container, position)].
  ((dynamic_invariant1(position, true, true, true, true) and
  ((1 <= position) and (position <= last(container)))) ->
  dynamic_invariant2(get(container, position), true, false, true, true))))

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic lists__list__capacity__first__bit1 : int

logic lists__list__capacity__last__bit1 : int

logic lists__list__capacity__position1 : int

axiom lists__list__capacity__first__bit_axiom1 :
  (0 <= lists__list__capacity__first__bit1)

axiom lists__list__capacity__last__bit_axiom1 :
  (lists__list__capacity__first__bit1 <  lists__list__capacity__last__bit1)

axiom lists__list__capacity__position_axiom1 :
  (0 <= lists__list__capacity__position1)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy6 : us_rep

type list__ref = { list__content : us_rep
}

function list__ref_list__content__projection(a: list__ref) : us_rep =
  (a).list__content

logic model : us_rep -> us_rep1

logic model__function_guard : us_rep1, us_rep -> prop

logic length1 : us_rep -> int

logic length__function_guard1 : int, us_rep -> prop

axiom model__post_axiom :
  (forall container:us_rep [model(container)].
  (length(model(container)) = length1(container)))

type us_split_fields2 = { rec__lists__cursor__node : count_type
}

function us_split_fields_rec__lists__cursor__node__projection(a: us_split_fields2) : count_type =
  (a).rec__lists__cursor__node

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep2 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__2__projection(a: us_rep2) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq7(a: us_rep2, b: us_rep2) : bool =
  (if (to_rep(((a).us_split_fields3).rec__lists__cursor__node) = to_rep(((b).us_split_fields3).rec__lists__cursor__node)) then true else false)

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic lists__cursor__node__first__bit : int

logic lists__cursor__node__last__bit : int

logic lists__cursor__node__position : int

axiom lists__cursor__node__first__bit_axiom :
  (0 <= lists__cursor__node__first__bit)

axiom lists__cursor__node__last__bit_axiom :
  (lists__cursor__node__first__bit <  lists__cursor__node__last__bit)

axiom lists__cursor__node__position_axiom :
  (0 <= lists__cursor__node__position)

logic user_eq7 : us_rep2, us_rep2 -> bool

logic dummy7 : us_rep2

type cursor__ref = { cursor__content : us_rep2
}

function cursor__ref_cursor__content__projection(a: cursor__ref) : us_rep2 =
  (a).cursor__content

logic no_element : us_rep2

logic attr__ATTRIBUTE_ADDRESS2 : int

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep3

logic bool_eq8 : us_rep3, us_rep3 -> bool

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic user_eq8 : us_rep3, us_rep3 -> bool

logic dummy8 : us_rep3

type map__ref = { map__content : us_rep3
}

function map__ref_map__content__projection(a: map__ref) : us_rep3 =
  (a).map__content

type key_type__ref = { key_type__content : us_rep2
}

function key_type__ref_key_type__content__projection(a: key_type__ref) : us_rep2 =
  (a).key_type__content

logic get1 : us_rep3, us_rep2 -> int

logic get__function_guard1 : int, us_rep3, us_rep2 -> prop

logic has_key : us_rep3, us_rep2 -> bool

logic has_key__function_guard : bool, us_rep3, us_rep2 -> prop

logic witness : us_rep3, us_rep2 -> int

logic witness__function_guard : int, us_rep3, us_rep2 -> prop

logic w_get : us_rep3, int -> int

logic w_get__function_guard : int, us_rep3, int -> prop

logic is_empty : us_rep3 -> bool

logic is_empty__function_guard : bool, us_rep3 -> prop

logic length2 : us_rep3 -> int

logic length__function_guard2 : int, us_rep3 -> prop

predicate default_initial_assumption1(temp___expr_353: us_rep3,
  temp___skip_top_level_354: bool) =
  ((not (temp___skip_top_level_354 = true)) ->
  ((is_empty(temp___expr_353) = true) and (length2(temp___expr_353) = 0)))

type element_type1

logic element_typeqtint1 : element_type1 -> int

axiom element_typeqtaxiom2 :
  (forall i:element_type1. (1 <= element_typeqtint1(i)))

axiom element_typeqtaxiom3 :
  (forall i:element_type1. (element_typeqtint1(i) <= 2147483647))

predicate in_range5(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq9 : element_type1, element_type1 -> bool

logic dummy9 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref_element_type__content__4__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

predicate dynamic_invariant3(temp___expr_378: int, temp___is_init_374: bool,
  temp___skip_constant_375: bool, temp___do_toplevel_376: bool,
  temp___do_typ_inv_377: bool) = (((temp___is_init_374 = true) or
  (1 <= 2147483647)) -> in_range5(temp___expr_378))

predicate default_initial_assumption2(temp___expr_361: us_rep2,
  temp___skip_top_level_362: bool) =
  (to_rep(((temp___expr_361).us_split_fields3).rec__lists__cursor__node) = 0)

axiom get__post_axiom1 :
  (forall container:us_rep3.
  (forall key:us_rep2 [get1(container, key)]. ((has_key(container,
  key) = true) -> ((of_int(0) = true) -> (get1(container,
  key) = w_get(container, witness(container, key)))))))

axiom get__post_axiom2 :
  (forall container:us_rep3.
  (forall key:us_rep2 [get1(container, key)]. ((has_key(container,
  key) = true) -> ((of_int(0) = true) ->
  (forall k:us_rep2. ((has_key(container, k) = true) -> ((bool_eq7(k,
  key) = true) -> (witness(container, key) = witness(container, k)))))))))

axiom get__post_axiom3 :
  (forall container:us_rep3.
  (forall key:us_rep2 [get1(container, key)]. ((has_key(container,
  key) = true) -> ((of_int(0) = true) ->
  (forall k:us_rep2. ((has_key(container, k) = true) -> ((witness(container,
  key) = witness(container, k)) -> (bool_eq7(k, key) = true))))))))

axiom get__post_axiom4 :
  (forall container:us_rep3.
  (forall key:us_rep2 [get1(container, key)]. ((has_key(container,
  key) = true) -> dynamic_invariant3(get1(container, key), true, false, true,
  true))))

logic positions : us_rep -> us_rep3

logic positions__function_guard : us_rep3, us_rep -> prop

axiom positions__post_axiom :
  (forall container:us_rep [positions(container)].
  (not (has_key(positions(container), no_element) = true)))

axiom positions__post_axiom1 :
  (forall container:us_rep [positions(container)]. (let result =
  positions(container) : us_rep3 in
  (forall i:us_rep2. ((has_key(result, i) = true) -> (1 <= get1(result, i))))))

axiom positions__post_axiom2 :
  (forall container:us_rep [positions(container)]. (let result =
  positions(container) : us_rep3 in
  (forall i:us_rep2. ((has_key(result, i) = true) -> (get1(result,
  i) <= length1(container))))))

axiom positions__post_axiom3 :
  (forall container:us_rep [positions(container)]. (let result =
  positions(container) : us_rep3 in
  (forall i:us_rep2. ((has_key(result, i) = true) ->
  (forall j:us_rep2. ((has_key(result, j) = true) -> ((get1(result,
  i) = get1(result, j)) -> (bool_eq7(i, j) = true))))))))

function has_element(container: us_rep, position: us_rep2) : bool =
  has_key(positions(container), position)

logic has_element__function_guard : bool, us_rep, us_rep2 -> prop

logic bool_eq10 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq10(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq10(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length3(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

logic first : us_rep -> us_rep2

logic first__function_guard : us_rep2, us_rep -> prop

predicate default_initial_assumption3(temp___expr_299: us_rep2,
  temp___skip_top_level_300: bool) =
  (to_rep(((temp___expr_299).us_split_fields3).rec__lists__cursor__node) = 0)

axiom first__post_axiom :
  (forall container:us_rep [first(container)]. ((length1(container) = 0) ->
  (bool_eq7(first(container), no_element) = true)))

axiom first__post_axiom1 :
  (forall container:us_rep [first(container)].
  ((not (length1(container) = 0)) -> (has_element(container,
  first(container)) = true)))

axiom first__post_axiom2 :
  (forall container:us_rep [first(container)].
  ((not (length1(container) = 0)) -> (get1(positions(container),
  first(container)) = 1)))

function element(container: us_rep, position: us_rep2) : int =
  get(model(container), get1(positions(container), position))

logic element__function_guard : int, us_rep, us_rep2 -> prop

type element_type2

logic element_typeqtint2 : element_type2 -> int

axiom element_typeqtaxiom4 :
  (forall i:element_type2. ((- 2147483648) <= element_typeqtint2(i)))

axiom element_typeqtaxiom5 :
  (forall i:element_type2. (element_typeqtint2(i) <= 2147483647))

predicate in_range6(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq10 : element_type2, element_type2 -> bool

logic dummy10 : element_type2

type element_type__ref2 = { element_type__content2 : element_type2
}

function element_type__ref_element_type__content__2__projection(a: element_type__ref2) : element_type2 =
  (a).element_type__content2

predicate dynamic_invariant4(temp___expr_336: int, temp___is_init_332: bool,
  temp___skip_constant_333: bool, temp___do_toplevel_334: bool,
  temp___do_typ_inv_335: bool) = (((temp___is_init_332 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range6(temp___expr_336))

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type tcount_typeB

logic tcount_typeBqtint : tcount_typeB -> int

axiom tcount_typeBqtaxiom :
  (forall i:tcount_typeB. ((- 2147483648) <= tcount_typeBqtint(i)))

axiom tcount_typeBqtaxiom1 :
  (forall i:tcount_typeB. (tcount_typeBqtint(i) <= 2147483647))

predicate in_range7(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq12(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq11 : tcount_typeB, tcount_typeB -> bool

logic dummy11 : tcount_typeB

type tcount_typeB__ref = { tcount_typeB__content : tcount_typeB
}

function tcount_typeB__ref_tcount_typeB__content__projection(a: tcount_typeB__ref) : tcount_typeB =
  (a).tcount_typeB__content

predicate dynamic_invariant5(temp___expr_271: int, temp___is_init_267: bool,
  temp___skip_constant_268: bool, temp___do_toplevel_269: bool,
  temp___do_typ_inv_270: bool) = (((temp___is_init_267 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_271))

logic rliteral : count_type

axiom rliteral_axiom : (count_typeqtint(rliteral) = 0)

axiom no_element__def_axiom : (no_element = { us_split_fields3 = {
  rec__lists__cursor__node = rliteral } })

axiom length__post_axiom :
  (forall container:us_rep [length1(container)].
  (length1(container) <= to_rep(((container).us_split_discrs1).rec__lists__list__capacity)))

axiom length__post_axiom1 :
  (forall container:us_rep [length1(container)].
  dynamic_invariant5(length1(container), true, false, true, true))

axiom length__post_axiom2 :
  (forall container:us_rep1 [length(container)].
  ((0 + length(container)) <= 2147483647))

axiom length__post_axiom3 :
  (forall container:us_rep1 [length(container)].
  dynamic_invariant5(length(container), true, false, true, true))

axiom has_key__post_axiom :
  (forall container:us_rep3.
  (forall key:us_rep2 [has_key(container, key)]. ((of_int(0) = true) ->
  ((exists k:us_rep2. ((has_key(container, k) = true) and (bool_eq7(k,
   key) = true))) ->
  (has_key(container, key) = true)))))

axiom length__post_axiom4 :
  (forall container:us_rep3 [length2(container)].
  dynamic_invariant5(length2(container), true, false, true, true))

axiom is_empty__post_axiom :
  (forall container:us_rep3 [is_empty(container)].
  ((is_empty(container) = true) ->
  (forall key:us_rep2. (not (has_key(container, key) = true)))))

axiom is_empty__post_axiom1 :
  (forall container:us_rep3 [is_empty(container)].
  ((forall key:us_rep2. (not (has_key(container, key) = true))) ->
  (is_empty(container) = true)))

logic has_witness : us_rep3, int -> bool

logic has_witness__function_guard : bool, us_rep3, int -> prop

axiom witness__post_axiom :
  (forall container:us_rep3.
  (forall key:us_rep2 [witness(container, key)]. ((has_key(container,
  key) = true) -> (has_witness(container, witness(container, key)) = true))))

axiom witness__post_axiom1 :
  (forall container:us_rep3.
  (forall key:us_rep2 [witness(container, key)]. ((has_key(container,
  key) = true) -> dynamic_invariant5(witness(container, key), true, false,
  true, true))))

axiom w_get__post_axiom :
  (forall container:us_rep3.
  (forall witness1:int [w_get(container, witness1)].
  ((dynamic_invariant5(witness1, true, true, true, true) and
  (has_witness(container, witness1) = true)) ->
  dynamic_invariant3(w_get(container, witness1), true, false, true, true))))

 (* File "linear_search.adb", line 56, characters 0-0 *)
goal defqtvc : (({ us_split_fields3 = { rec__lists__cursor__node = rliteral }
  } = no_element) -> (dynamic_invariant(n, true, false, true, true) ->
  ((last(model(arr)) = 10) ->
  (forall i:int. ((i = 1) -> (dynamic_invariant5(i, true, false, true,
  true) -> (let o = arr : us_rep in
  (let linear_search__search__3__c__assume = first(o) : us_rep2 in
  ((if (bool_eq10(length1(o),
  0) = true) then (bool_eq7(linear_search__search__3__c__assume,
  no_element) = true) else ((has_element(o,
  linear_search__search__3__c__assume) = true) and (get1(positions(o),
  linear_search__search__3__c__assume) = 1))) ->
  (forall c__split_fields:count_type. (({ rec__lists__cursor__node =
  c__split_fields
  } = (linear_search__search__3__c__assume).us_split_fields3) ->
  ((i <  10) -> (let o1 = { us_split_fields3 = { rec__lists__cursor__node =
  c__split_fields } } : us_rep2 in (let o2 = arr : us_rep in
  (((has_element(o2, o1) = true) <-> (has_key(positions(o2), o1) = true)) ->
  (forall i1:int. forall c__split_fields1:count_type. (((has_element(arr, {
  us_split_fields3 = { rec__lists__cursor__node = c__split_fields1 }
  }) = true) and ((get1(positions(arr), { us_split_fields3 = {
  rec__lists__cursor__node = c__split_fields1 } }) = i1) and
  (forall j:int. (((1 <= j) and (j <= (i1 - 1))) -> (not (get(model(arr),
  j) = n)))))) -> ((andb((if dynamic_invariant5(i1, true, true, true,
  true) then true else false),
  (if (i1 <  10) then true else false)) = true) -> (let o3 = {
  us_split_fields3 = { rec__lists__cursor__node = c__split_fields1 } }
  : us_rep2 in (let o4 = arr : us_rep in (let o5 = element(o4, o3) : int in
  ((dynamic_invariant4(o5, true, false, true, true) and (o5 = get(model(o4),
  get1(positions(o4), o3)))) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (o5 = n) then true else false)) ->
  ((not (spark__branch = true)) -> (let o6 = (i1 + 1) : int in
  (in_range7(o6) ->
  (forall i2:int. ((i2 = o6) -> (let o7 = arr : us_rep in
  (forall c__split_fields2:count_type. ((if (orb(bool_eq7({
  us_split_fields3 = { rec__lists__cursor__node = c__split_fields1 } },
  no_element), bool_eq10(get1(positions(o7), { us_split_fields3 = {
  rec__lists__cursor__node = c__split_fields1 } }),
  length1(o7))) = true) then (bool_eq7({ us_split_fields3 = {
  rec__lists__cursor__node = c__split_fields2 } },
  no_element) = true) else ((has_element(o7, { us_split_fields3 = {
  rec__lists__cursor__node = c__split_fields2 } }) = true) and
  (get1(positions(o7), { us_split_fields3 = { rec__lists__cursor__node =
  c__split_fields2 } }) = (get1(positions(o7), { us_split_fields3 = {
  rec__lists__cursor__node = c__split_fields1 } }) + 1)))) -> ((i2 <  10) ->
  (let o8 = { us_split_fields3 = { rec__lists__cursor__node =
  c__split_fields2 } } : us_rep2 in (let o9 = arr : us_rep in
  (((has_element(o9, o8) = true) <-> (has_key(positions(o9), o8) = true)) ->
  ((has_element(arr, { us_split_fields3 = { rec__lists__cursor__node =
  c__split_fields2 } }) = true) -> ((get1(positions(arr), {
  us_split_fields3 = { rec__lists__cursor__node = c__split_fields2 }
  }) = i2) ->
  (forall j:int. (((1 <= j) and (j <= (i2 - 1))) -> (not (get(model(arr),
  j) = n))))))))))))))))))))))))))))))))))))))))))
