(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_invariant1(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range2(temp___expr_46))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type character

predicate in_range4(x: int) = ((0 <= x) and (x <= 255))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : character, character -> bool

logic dummy3 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range4(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range4(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq5(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))))

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

predicate dynamic_invariant2(temp___expr_96: us_t, temp___is_init_92: bool,
  temp___skip_constant_93: bool, temp___do_toplevel_94: bool,
  temp___do_typ_inv_95: bool) = ((not (temp___skip_constant_93 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_96),
  last1(temp___expr_96)))

logic invariant__ : us_private -> bool

logic invariant____function_guard : bool, us_private -> prop

type read_status

predicate in_range5(x: int) = ((0 <= x) and (x <= 2))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : read_status, read_status -> bool

logic dummy5 : read_status

type read_status__ref = { read_status__content : read_status
}

function read_status__ref_read_status__content__projection(a: read_status__ref) : read_status =
  (a).read_status__content

logic to_rep2 : read_status -> int

logic of_rep2 : int -> read_status

axiom inversion_axiom2 :
  (forall x:read_status [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:read_status [to_rep2(x)]. in_range5(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range5(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_discrs = { rec__file_io__read_result__status : read_status
}

function us_split_discrs_rec__file_io__read_result__status__projection(a: us_split_discrs) : read_status =
  (a).rec__file_io__read_result__status

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__file_io__read_result__c : character
}

function us_split_fields_rec__file_io__read_result__c__projection(a: us_split_fields) : character =
  (a).rec__file_io__read_result__c

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__2__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

predicate file_io__read_result__c__pred(a: us_rep) =
  (to_rep2(((a).us_split_discrs1).rec__file_io__read_result__status) = 0)

function bool_eq8(a: us_rep, b: us_rep) : bool =
  (if ((to_rep2(((a).us_split_discrs1).rec__file_io__read_result__status) = to_rep2(((b).us_split_discrs1).rec__file_io__read_result__status)) and
  (file_io__read_result__c__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__file_io__read_result__c) = to_rep(((b).us_split_fields1).rec__file_io__read_result__c)))) then true else false)

predicate in_range6(rec__file_io__read_result__status1: int,
  a: us_split_discrs) =
  (rec__file_io__read_result__status1 = to_rep2((a).rec__file_io__read_result__status))

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic file_io__read_result__status__first__bit : int

logic file_io__read_result__status__last__bit : int

logic file_io__read_result__status__position : int

axiom file_io__read_result__status__first__bit_axiom :
  (0 <= file_io__read_result__status__first__bit)

axiom file_io__read_result__status__last__bit_axiom :
  (file_io__read_result__status__first__bit <  file_io__read_result__status__last__bit)

axiom file_io__read_result__status__position_axiom :
  (0 <= file_io__read_result__status__position)

logic file_io__read_result__c__first__bit : int

logic file_io__read_result__c__last__bit : int

logic file_io__read_result__c__position : int

axiom file_io__read_result__c__first__bit_axiom :
  (0 <= file_io__read_result__c__first__bit)

axiom file_io__read_result__c__last__bit_axiom :
  (file_io__read_result__c__first__bit <  file_io__read_result__c__last__bit)

axiom file_io__read_result__c__position_axiom :
  (0 <= file_io__read_result__c__position)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy6 : us_rep

type read_result__ref = { read_result__content : us_rep
}

function read_result__ref_read_result__content__projection(a: read_result__ref) : us_rep =
  (a).read_result__content

logic current_read__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS : int

predicate default_initial_assumption(temp___expr_215: us_rep,
  temp___skip_top_level_216: bool) =
  (to_rep2(((temp___expr_215).us_split_discrs1).rec__file_io__read_result__status) = 2)

logic next_read__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

logic invariant__1 : us_split_fields, us_split_discrs, us_private,
  us_split_fields, us_split_discrs -> bool

logic invariant____function_guard1 : bool, us_split_fields, us_split_discrs,
  us_private, us_split_fields, us_split_discrs -> prop

logic local_invariant : us_split_fields, us_split_discrs, us_split_fields,
  us_split_discrs -> bool

logic local_invariant__function_guard : bool, us_split_fields,
  us_split_discrs, us_split_fields, us_split_discrs -> prop

axiom invariant____def_axiom :
  (forall names__name_table:us_private.
  invariant____function_guard(invariant__(names__name_table),
  names__name_table))

axiom invariant____def_axiom1 :
  (forall lexer__current_read__fields:us_split_fields.
  forall lexer__next_read__fields:us_split_fields.
  forall lexer__current_read__discrs:us_split_discrs.
  forall lexer__next_read__discrs:us_split_discrs.
  local_invariant__function_guard(local_invariant(lexer__current_read__fields,
  lexer__current_read__discrs, lexer__next_read__fields,
  lexer__next_read__discrs), lexer__current_read__fields,
  lexer__current_read__discrs, lexer__next_read__fields,
  lexer__next_read__discrs))

axiom invariant____def_axiom2 :
  (forall lexer__current_read__fields:us_split_fields.
  forall lexer__next_read__fields:us_split_fields.
  (forall lexer__current_read__discrs:us_split_discrs.
  forall lexer__next_read__discrs:us_split_discrs.
  (forall names__name_table:us_private
  [invariant__1(lexer__current_read__fields, lexer__current_read__discrs,
  names__name_table, lexer__next_read__fields, lexer__next_read__discrs)].
  ((invariant__1(lexer__current_read__fields, lexer__current_read__discrs,
  names__name_table, lexer__next_read__fields,
  lexer__next_read__discrs) = true) ->
  (invariant__(names__name_table) = true)))))

axiom invariant____def_axiom3 :
  (forall lexer__current_read__fields:us_split_fields.
  forall lexer__next_read__fields:us_split_fields.
  (forall lexer__current_read__discrs:us_split_discrs.
  forall lexer__next_read__discrs:us_split_discrs.
  (forall names__name_table:us_private
  [invariant__1(lexer__current_read__fields, lexer__current_read__discrs,
  names__name_table, lexer__next_read__fields, lexer__next_read__discrs)].
  ((invariant__1(lexer__current_read__fields, lexer__current_read__discrs,
  names__name_table, lexer__next_read__fields,
  lexer__next_read__discrs) = true) ->
  (local_invariant(lexer__current_read__fields, lexer__current_read__discrs,
  lexer__next_read__fields, lexer__next_read__discrs) = true)))))

axiom invariant____def_axiom4 :
  (forall lexer__current_read__fields:us_split_fields.
  forall lexer__next_read__fields:us_split_fields.
  (forall lexer__current_read__discrs:us_split_discrs.
  forall lexer__next_read__discrs:us_split_discrs.
  (forall names__name_table:us_private
  [invariant__1(lexer__current_read__fields, lexer__current_read__discrs,
  names__name_table, lexer__next_read__fields, lexer__next_read__discrs)].
  (((invariant__(names__name_table) = true) and
  (local_invariant(lexer__current_read__fields, lexer__current_read__discrs,
  lexer__next_read__fields, lexer__next_read__discrs) = true)) ->
  (invariant__1(lexer__current_read__fields, lexer__current_read__discrs,
  names__name_table, lexer__next_read__fields,
  lexer__next_read__discrs) = true)))))

logic filename : us_t

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep1

logic bool_eq9 : us_rep1, us_rep1 -> bool

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic user_eq7 : us_rep1, us_rep1 -> bool

logic dummy7 : us_rep1

type file__ref = { file__content : us_rep1
}

function file__ref_file__content__projection(a: file__ref) : us_rep1 =
  (a).file__content

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

type name_id

logic name_idqtint : name_id -> int

axiom name_idqtaxiom : (forall i:name_id. (0 <= name_idqtint(i)))

axiom name_idqtaxiom1 : (forall i:name_id. (name_idqtint(i) <= 2147483647))

predicate in_range7(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : name_id, name_id -> bool

logic dummy8 : name_id

type name_id__ref = { name_id__content : name_id
}

function name_id__ref_name_id__content__projection(a: name_id__ref) : name_id =
  (a).name_id__content

predicate dynamic_invariant3(temp___expr_186: int, temp___is_init_182: bool,
  temp___skip_constant_183: bool, temp___do_toplevel_184: bool,
  temp___do_typ_inv_185: bool) = (((temp___is_init_182 = true) or
  (0 <= 2147483647)) -> in_range7(temp___expr_186))

predicate dynamic_invariant4(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range4(temp___expr_74))

predicate dynamic_invariant5(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range3(temp___expr_18))

axiom local_invariant__def_axiom :
  (forall lexer__current_read__fields:us_split_fields.
  forall lexer__next_read__fields:us_split_fields.
  (forall lexer__current_read__discrs:us_split_discrs.
  forall lexer__next_read__discrs:us_split_discrs
  [local_invariant(lexer__current_read__fields, lexer__current_read__discrs,
  lexer__next_read__fields, lexer__next_read__discrs)].
  ((local_invariant(lexer__current_read__fields, lexer__current_read__discrs,
  lexer__next_read__fields, lexer__next_read__discrs) = true) ->
  (not (current_read__attr__constrained = true)))))

axiom local_invariant__def_axiom1 :
  (forall lexer__current_read__fields:us_split_fields.
  forall lexer__next_read__fields:us_split_fields.
  (forall lexer__current_read__discrs:us_split_discrs.
  forall lexer__next_read__discrs:us_split_discrs
  [local_invariant(lexer__current_read__fields, lexer__current_read__discrs,
  lexer__next_read__fields, lexer__next_read__discrs)].
  ((local_invariant(lexer__current_read__fields, lexer__current_read__discrs,
  lexer__next_read__fields, lexer__next_read__discrs) = true) ->
  (not (next_read__attr__constrained = true)))))

axiom local_invariant__def_axiom2 :
  (forall lexer__current_read__fields:us_split_fields.
  forall lexer__next_read__fields:us_split_fields.
  (forall lexer__current_read__discrs:us_split_discrs.
  forall lexer__next_read__discrs:us_split_discrs
  [local_invariant(lexer__current_read__fields, lexer__current_read__discrs,
  lexer__next_read__fields, lexer__next_read__discrs)].
  (((not (current_read__attr__constrained = true)) and
  (not (next_read__attr__constrained = true))) ->
  (local_invariant(lexer__current_read__fields, lexer__current_read__discrs,
  lexer__next_read__fields, lexer__next_read__discrs) = true))))

predicate dynamic_invariant6(temp___expr_206: int, temp___is_init_202: bool,
  temp___skip_constant_203: bool, temp___do_toplevel_204: bool,
  temp___do_typ_inv_205: bool) = (((temp___is_init_202 = true) or
  (0 <= 2)) -> in_range5(temp___expr_206))

 (* File "lexer.ads", line 72, characters 0-0 *)
goal defqtvc :
  (forall name_table:us_private. forall the_filename:int.
  forall current_line:int. forall current_col:int. forall current_pos:int.
  (dynamic_invariant3(the_filename, false, false, true, true) ->
  ((current_read__attr__constrained = false) ->
  (dynamic_invariant1(current_line, false, false, true, true) ->
  (dynamic_invariant(current_col, false, false, true, true) ->
  (dynamic_invariant(current_pos, false, false, true, true) ->
  ((next_read__attr__constrained = false) -> (dynamic_invariant2(filename,
  true, false, true, true) ->
  ((forall name_table1:us_private.
   invariant____function_guard(invariant__(name_table1), name_table1)) ->
  ((invariant__(name_table) = true) ->
  (((not (current_read__attr__constrained = true)) and
  (not (next_read__attr__constrained = true))) ->
  (forall name_table1:us_private. forall the_filename1:int.
  ((forall name_table2:us_private.
   invariant____function_guard(invariant__(name_table2), name_table2)) ->
  (((invariant__(name_table1) = true) and dynamic_invariant3(the_filename1,
  true, true, true, true)) ->
  (forall current_line1:int. ((current_line1 = 1) ->
  (forall current_col1:int. ((current_col1 = 0) ->
  (forall current_pos1:int. ((current_pos1 = 0) ->
  (not (current_read__attr__constrained = true))))))))))))))))))))))
