(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (div(x, y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((-abs_int(y)) <  mod(x,
  y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (mod(x, y) <  abs_int(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <  y) then (x % y) else ((x % y) + y))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

type even

logic evenqtint : even -> int

axiom evenqtaxiom : (forall i:even. ((- 2147483648) <= evenqtint(i)))

axiom evenqtaxiom1 : (forall i:even. (evenqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : even, even -> bool

logic dummy1 : even

type even__ref = { even__content : even
}

function even__ref_even__content__projection(a: even__ref) : even =
  (a).even__content

function to_rep(x: even) : int = evenqtint(x)

logic of_rep : int -> even

axiom inversion_axiom : (forall x:even [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:even [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__dynamic_preds__even_pair__a : even;
rec__dynamic_preds__even_pair__b : even
}

function us_split_fields_rec__dynamic_preds__even_pair__a__projection(a: us_split_fields) : even =
  (a).rec__dynamic_preds__even_pair__a

function us_split_fields_rec__dynamic_preds__even_pair__b__projection(a: us_split_fields) : even =
  (a).rec__dynamic_preds__even_pair__b

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_fields1).rec__dynamic_preds__even_pair__a) = to_rep(((b).us_split_fields1).rec__dynamic_preds__even_pair__a)) and
  (to_rep(((a).us_split_fields1).rec__dynamic_preds__even_pair__b) = to_rep(((b).us_split_fields1).rec__dynamic_preds__even_pair__b))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic dynamic_preds__even_pair__a__first__bit : int

logic dynamic_preds__even_pair__a__last__bit : int

logic dynamic_preds__even_pair__a__position : int

axiom dynamic_preds__even_pair__a__first__bit_axiom :
  (0 <= dynamic_preds__even_pair__a__first__bit)

axiom dynamic_preds__even_pair__a__last__bit_axiom :
  (dynamic_preds__even_pair__a__first__bit <  dynamic_preds__even_pair__a__last__bit)

axiom dynamic_preds__even_pair__a__position_axiom :
  (0 <= dynamic_preds__even_pair__a__position)

logic dynamic_preds__even_pair__b__first__bit : int

logic dynamic_preds__even_pair__b__last__bit : int

logic dynamic_preds__even_pair__b__position : int

axiom dynamic_preds__even_pair__b__first__bit_axiom :
  (0 <= dynamic_preds__even_pair__b__first__bit)

axiom dynamic_preds__even_pair__b__last__bit_axiom :
  (dynamic_preds__even_pair__b__first__bit <  dynamic_preds__even_pair__b__last__bit)

axiom dynamic_preds__even_pair__b__position_axiom :
  (0 <= dynamic_preds__even_pair__b__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type even_pair__ref = { even_pair__content : us_rep
}

function even_pair__ref_even_pair__content__projection(a: even_pair__ref) : us_rep =
  (a).even_pair__content

type even_close_pair__ref = { even_close_pair__content : us_rep
}

function even_close_pair__ref_even_close_pair__content__projection(a: even_close_pair__ref) : us_rep =
  (a).even_close_pair__content

predicate dynamic_invariant1(temp___expr_210: us_rep,
  temp___is_init_206: bool, temp___skip_constant_207: bool,
  temp___do_toplevel_208: bool, temp___do_typ_inv_209: bool) =
  (((temp___do_toplevel_208 = true) -> ((temp___is_init_206 = true) ->
  (to_rep(((temp___expr_210).us_split_fields1).rec__dynamic_preds__even_pair__b) = (to_rep(((temp___expr_210).us_split_fields1).rec__dynamic_preds__even_pair__a) + 2)))) and
  (((temp___is_init_206 = true) ->
  (mod1(to_rep(((temp___expr_210).us_split_fields1).rec__dynamic_preds__even_pair__a),
  2) = 0)) and ((temp___is_init_206 = true) ->
  (mod1(to_rep(((temp___expr_210).us_split_fields1).rec__dynamic_preds__even_pair__b),
  2) = 0))))

predicate dynamic_predicate(temp___218: us_rep) =
  (to_rep(((temp___218).us_split_fields1).rec__dynamic_preds__even_pair__b) = (to_rep(((temp___218).us_split_fields1).rec__dynamic_preds__even_pair__a) + 2))

logic above : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant2(temp___expr_168: int, temp___is_init_164: bool,
  temp___skip_constant_165: bool, temp___do_toplevel_166: bool,
  temp___do_typ_inv_167: bool) = ((((temp___is_init_164 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_168)) and
  ((temp___do_toplevel_166 = true) -> ((temp___is_init_164 = true) ->
  (mod1(temp___expr_168, 2) = 0))))

predicate dynamic_predicate1(temp___172: int) = (mod1(temp___172, 2) = 0)

axiom cdiv_cases :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((0 <  d) -> (div(n,
  d) = (n / d)))))

axiom cdiv_cases1 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((0 <  d) -> (div(n,
  d) = (-((-n) / d))))))

axiom cdiv_cases2 :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((d <  0) -> (div(n,
  d) = (-(n / (-d)))))))

axiom cdiv_cases3 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((d <  0) -> (div(n,
  d) = ((-n) / (-d))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))))

axiom cmod_cases1 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))))

axiom cmod_cases2 :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))))

axiom cmod_cases3 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d)))))))

 (* File "dynamic_preds.ads", line 41, characters 0-0 *)
goal defqtvc :
  (forall result____split_fields:us_split_fields. (dynamic_invariant(above,
  true, false, true, true) -> (dynamic_invariant1({ us_split_fields1 =
  result____split_fields }, false, false, true, true) ->
  (forall spark__branch:bool. ((spark__branch = (if (mod1(above,
  2) = 0) then true else false)) -> ((spark__branch = true) ->
  (let temp___318 = above : int in ((mod1(temp___318, 2) = 0) ->
  (forall o:even. ((to_rep(o) = temp___318) -> dynamic_predicate({
  us_split_fields1 = { rec__dynamic_preds__even_pair__a = o;
  rec__dynamic_preds__even_pair__b =
  (result____split_fields).rec__dynamic_preds__even_pair__b } })))))))))))
