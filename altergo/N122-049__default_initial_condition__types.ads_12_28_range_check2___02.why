(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type s2

logic s2qtint : s2 -> int

axiom s2qtaxiom : (forall i:s2. (1 <= s2qtint(i)))

axiom s2qtaxiom1 : (forall i:s2. (s2qtint(i) <= 10))

predicate in_range(x: int) = ((1 <= x) and (x <= 10))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : s2, s2 -> bool

logic dummy : s2

type s2__ref = { s2__content : s2
}

function s2__ref_s2__content__projection(a: s2__ref) : s2 = (a).s2__content

type colour

predicate in_range1(x: int) = ((0 <= x) and (x <= 2))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : colour, colour -> bool

logic dummy1 : colour

type colour__ref = { colour__content : colour
}

function colour__ref_colour__content__projection(a: colour__ref) : colour =
  (a).colour__content

function to_rep(x: s2) : int = s2qtint(x)

logic of_rep : int -> s2

axiom inversion_axiom : (forall x:s2 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:s2 [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

logic to_rep1 : colour -> int

logic of_rep1 : int -> colour

axiom inversion_axiom1 :
  (forall x:colour [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:colour [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__types__fr__f1 : s2; rec__types__fr__f2 : colour
}

function us_split_fields_rec__types__fr__f1__projection(a: us_split_fields) : s2 =
  (a).rec__types__fr__f1

function us_split_fields_rec__types__fr__f2__projection(a: us_split_fields) : colour =
  (a).rec__types__fr__f2

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__3__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_fields1).rec__types__fr__f1) = to_rep(((b).us_split_fields1).rec__types__fr__f1)) and
  (to_rep1(((a).us_split_fields1).rec__types__fr__f2) = to_rep1(((b).us_split_fields1).rec__types__fr__f2))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic types__fr__f1__first__bit : int

logic types__fr__f1__last__bit : int

logic types__fr__f1__position : int

axiom types__fr__f1__first__bit_axiom : (0 <= types__fr__f1__first__bit)

axiom types__fr__f1__last__bit_axiom :
  (types__fr__f1__first__bit <  types__fr__f1__last__bit)

axiom types__fr__f1__position_axiom : (0 <= types__fr__f1__position)

logic types__fr__f2__first__bit : int

logic types__fr__f2__last__bit : int

logic types__fr__f2__position : int

axiom types__fr__f2__first__bit_axiom : (0 <= types__fr__f2__first__bit)

axiom types__fr__f2__last__bit_axiom :
  (types__fr__f2__first__bit <  types__fr__f2__last__bit)

axiom types__fr__f2__position_axiom : (0 <= types__fr__f2__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type t8__ref = { t8__content : us_rep
}

function t8__ref_t8__content__projection(a: t8__ref) : us_rep =
  (a).t8__content

predicate default_initial_assumption(temp___expr_263: us_rep,
  temp___skip_top_level_264: bool) =
  ((to_rep(((temp___expr_263).us_split_fields1).rec__types__fr__f1) = 3) and
  (to_rep1(((temp___expr_263).us_split_fields1).rec__types__fr__f2) = 1))

predicate dynamic_invariant(temp___expr_206: int, temp___is_init_202: bool,
  temp___skip_constant_203: bool, temp___do_toplevel_204: bool,
  temp___do_typ_inv_205: bool) = (((temp___is_init_202 = true) or
  (1 <= 10)) -> in_range(temp___expr_206))

predicate dynamic_invariant1(temp___expr_213: int, temp___is_init_209: bool,
  temp___skip_constant_210: bool, temp___do_toplevel_211: bool,
  temp___do_typ_inv_212: bool) = (((temp___is_init_209 = true) or
  (0 <= 2)) -> in_range1(temp___expr_213))

 (* File "/home/kanig/dev/spark2014/benchmark_script/data/tmp-test-N122-049__default_initial_condition-31581/src/gnatprove/q__t8.mlw", line 424, characters 5-8 *)
goal defqtvc : in_range1(1)
