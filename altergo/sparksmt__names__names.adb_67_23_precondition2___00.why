(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type capacity_range

logic capacity_rangeqtint : capacity_range -> int

axiom capacity_rangeqtaxiom :
  (forall i:capacity_range. (0 <= capacity_rangeqtint(i)))

axiom capacity_rangeqtaxiom1 :
  (forall i:capacity_range. (capacity_rangeqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : capacity_range, capacity_range -> bool

logic dummy : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref_capacity_range__content__projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = {
rec__ada___names__data__entry_tables__vector__capacity : capacity_range
}

function us_split_discrs_rec__ada___names__data__entry_tables__vector__capacity__projection(a: us_split_discrs) : capacity_range =
  (a).rec__ada___names__data__entry_tables__vector__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__ada___names__data__entry_tables__vector :
us_main_type
}

function us_split_fields_rec__ada___names__data__entry_tables__vector__projection(a: us_split_fields) : us_main_type =
  (a).rec__ada___names__data__entry_tables__vector

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic ada___names__data__entry_tables__vector__capacity__first__bit : int

logic ada___names__data__entry_tables__vector__capacity__last__bit : int

logic ada___names__data__entry_tables__vector__capacity__position : int

axiom ada___names__data__entry_tables__vector__capacity__first__bit_axiom :
  (0 <= ada___names__data__entry_tables__vector__capacity__first__bit)

axiom ada___names__data__entry_tables__vector__capacity__last__bit_axiom :
  (ada___names__data__entry_tables__vector__capacity__first__bit <  ada___names__data__entry_tables__vector__capacity__last__bit)

axiom ada___names__data__entry_tables__vector__capacity__position_axiom :
  (0 <= ada___names__data__entry_tables__vector__capacity__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type vector__ref = { vector__content : us_rep
}

function vector__ref_vector__content__projection(a: vector__ref) : us_rep =
  (a).vector__content

function to_rep(x: capacity_range) : int = capacity_rangeqtint(x)

logic of_rep : int -> capacity_range

axiom inversion_axiom :
  (forall x:capacity_range [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:capacity_range [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

predicate in_range2(rec__ada___names__data__entry_tables__vector__capacity1: int,
  a: us_rep) =
  (rec__ada___names__data__entry_tables__vector__capacity1 = to_rep(((a).us_split_discrs1).rec__ada___names__data__entry_tables__vector__capacity))

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic ada___names__data__entry_tables__vector__capacity__first__bit1 : int

logic ada___names__data__entry_tables__vector__capacity__last__bit1 : int

logic ada___names__data__entry_tables__vector__capacity__position1 : int

axiom ada___names__data__entry_tables__vector__capacity__first__bit_axiom1 :
  (0 <= ada___names__data__entry_tables__vector__capacity__first__bit1)

axiom ada___names__data__entry_tables__vector__capacity__last__bit_axiom1 :
  (ada___names__data__entry_tables__vector__capacity__first__bit1 <  ada___names__data__entry_tables__vector__capacity__last__bit1)

axiom ada___names__data__entry_tables__vector__capacity__position_axiom1 :
  (0 <= ada___names__data__entry_tables__vector__capacity__position1)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type tentry_tableS__ref = { tentry_tableS__content : us_rep
}

function tentry_tableS__ref_tentry_tableS__content__projection(a: tentry_tableS__ref) : us_rep =
  (a).tentry_tableS__content

logic entry_table__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS : int

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

predicate dynamic_invariant(temp___expr_224: us_rep,
  temp___is_init_220: bool, temp___skip_constant_221: bool,
  temp___do_toplevel_222: bool, temp___do_typ_inv_223: bool) =
  ((not (temp___skip_constant_221 = true)) -> in_range2(256,
  temp___expr_224))

predicate default_initial_assumption(temp___expr_226: us_rep,
  temp___skip_top_level_227: bool) =
  ((to_rep(((temp___expr_226).us_split_discrs1).rec__ada___names__data__entry_tables__vector__capacity) = 256) and
  ((not (temp___skip_top_level_227 = true)) ->
  (is_empty(temp___expr_226) = true)))

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep1

logic bool_eq2 : us_rep1, us_rep1 -> bool

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type sequence__ref = { sequence__content : us_rep1
}

function sequence__ref_sequence__content__projection(a: sequence__ref) : us_rep1 =
  (a).sequence__content

logic model : us_rep -> us_rep1

logic model__function_guard : us_rep1, us_rep -> prop

logic length : us_rep1 -> int

logic length__function_guard : int, us_rep1 -> prop

function last(container: us_rep1) : int = (0 + length(container))

logic last__function_guard : int, us_rep1 -> prop

function last_index(container: us_rep) : int = last(model(container))

logic last_index__function_guard : int, us_rep -> prop

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. (0 <= extended_indexqtint(i)))

axiom extended_indexqtaxiom1 :
  (forall i:extended_index. (extended_indexqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq4 : extended_index, extended_index -> bool

logic dummy4 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref_extended_index__content__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

predicate dynamic_invariant1(temp___expr_197: int, temp___is_init_193: bool,
  temp___skip_constant_194: bool, temp___do_toplevel_195: bool,
  temp___do_typ_inv_196: bool) = (((temp___is_init_193 = true) or
  (0 <= 2147483647)) -> in_range3(temp___expr_197))

type capacity_range1

logic capacity_rangeqtint1 : capacity_range1 -> int

axiom capacity_rangeqtaxiom2 :
  (forall i:capacity_range1. (0 <= capacity_rangeqtint1(i)))

axiom capacity_rangeqtaxiom3 :
  (forall i:capacity_range1. (capacity_rangeqtint1(i) <= 2147483647))

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq5 : capacity_range1, capacity_range1 -> bool

logic dummy5 : capacity_range1

type capacity_range__ref1 = { capacity_range__content1 : capacity_range1
}

function capacity_range__ref_capacity_range__content__2__projection(a: capacity_range__ref1) : capacity_range1 =
  (a).capacity_range__content1

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_split_discrs2 = {
rec__ada___names__data__char_tables__vector__capacity : capacity_range1
}

function us_split_discrs_rec__ada___names__data__char_tables__vector__capacity__projection(a: us_split_discrs2) : capacity_range1 =
  (a).rec__ada___names__data__char_tables__vector__capacity

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields2 = { rec__ada___names__data__char_tables__vector :
us_main_type2
}

function us_split_fields_rec__ada___names__data__char_tables__vector__projection(a: us_split_fields2) : us_main_type2 =
  (a).rec__ada___names__data__char_tables__vector

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep2 = { us_split_discrs3 : us_split_discrs2; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__2__projection(a: us_rep2) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___split_fields__2__projection(a: us_rep2) : us_split_fields2 =
  (a).us_split_fields3

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic ada___names__data__char_tables__vector__capacity__first__bit : int

logic ada___names__data__char_tables__vector__capacity__last__bit : int

logic ada___names__data__char_tables__vector__capacity__position : int

axiom ada___names__data__char_tables__vector__capacity__first__bit_axiom :
  (0 <= ada___names__data__char_tables__vector__capacity__first__bit)

axiom ada___names__data__char_tables__vector__capacity__last__bit_axiom :
  (ada___names__data__char_tables__vector__capacity__first__bit <  ada___names__data__char_tables__vector__capacity__last__bit)

axiom ada___names__data__char_tables__vector__capacity__position_axiom :
  (0 <= ada___names__data__char_tables__vector__capacity__position)

logic user_eq6 : us_rep2, us_rep2 -> bool

logic dummy6 : us_rep2

type vector__ref1 = { vector__content1 : us_rep2
}

function vector__ref_vector__content__2__projection(a: vector__ref1) : us_rep2 =
  (a).vector__content1

function to_rep1(x: capacity_range1) : int = capacity_rangeqtint1(x)

logic of_rep1 : int -> capacity_range1

axiom inversion_axiom1 :
  (forall x:capacity_range1 [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:capacity_range1 [to_rep1(x)]. in_range4(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range4(x) ->
  (to_rep1(of_rep1(x)) = x)))

predicate in_range5(rec__ada___names__data__char_tables__vector__capacity1: int,
  a: us_rep2) =
  (rec__ada___names__data__char_tables__vector__capacity1 = to_rep1(((a).us_split_discrs3).rec__ada___names__data__char_tables__vector__capacity))

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic ada___names__data__char_tables__vector__capacity__first__bit1 : int

logic ada___names__data__char_tables__vector__capacity__last__bit1 : int

logic ada___names__data__char_tables__vector__capacity__position1 : int

axiom ada___names__data__char_tables__vector__capacity__first__bit_axiom1 :
  (0 <= ada___names__data__char_tables__vector__capacity__first__bit1)

axiom ada___names__data__char_tables__vector__capacity__last__bit_axiom1 :
  (ada___names__data__char_tables__vector__capacity__first__bit1 <  ada___names__data__char_tables__vector__capacity__last__bit1)

axiom ada___names__data__char_tables__vector__capacity__position_axiom1 :
  (0 <= ada___names__data__char_tables__vector__capacity__position1)

logic user_eq7 : us_rep2, us_rep2 -> bool

logic dummy7 : us_rep2

type tchar_tableS__ref = { tchar_tableS__content : us_rep2
}

function tchar_tableS__ref_tchar_tableS__content__projection(a: tchar_tableS__ref) : us_rep2 =
  (a).tchar_tableS__content

logic char_table__split_discrs : us_split_discrs2

logic attr__ATTRIBUTE_ADDRESS1 : int

logic is_empty1 : us_rep2 -> bool

logic is_empty__function_guard1 : bool, us_rep2 -> prop

predicate dynamic_invariant2(temp___expr_297: us_rep2,
  temp___is_init_293: bool, temp___skip_constant_294: bool,
  temp___do_toplevel_295: bool, temp___do_typ_inv_296: bool) =
  ((not (temp___skip_constant_294 = true)) -> in_range5(1024,
  temp___expr_297))

predicate default_initial_assumption1(temp___expr_299: us_rep2,
  temp___skip_top_level_300: bool) =
  ((to_rep1(((temp___expr_299).us_split_discrs3).rec__ada___names__data__char_tables__vector__capacity) = 1024) and
  ((not (temp___skip_top_level_300 = true)) ->
  (is_empty1(temp___expr_299) = true)))

logic valid_tables : us_split_fields2, us_split_fields -> bool

logic valid_tables__function_guard : bool, us_split_fields2,
  us_split_fields -> prop

type us_main_type3

logic us_main_eq3 : us_main_type3, us_main_type3 -> bool

type us_rep3

logic bool_eq5 : us_rep3, us_rep3 -> bool

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic user_eq8 : us_rep3, us_rep3 -> bool

logic dummy8 : us_rep3

type sequence__ref1 = { sequence__content1 : us_rep3
}

function sequence__ref_sequence__content__2__projection(a: sequence__ref1) : us_rep3 =
  (a).sequence__content1

logic model1 : us_rep2 -> us_rep3

logic model__function_guard1 : us_rep3, us_rep2 -> prop

logic length1 : us_rep3 -> int

logic length__function_guard1 : int, us_rep3 -> prop

function last1(container: us_rep3) : int = ((- 1) + length1(container))

logic last__function_guard1 : int, us_rep3 -> prop

function last_index1(container: us_rep2) : int = last1(model1(container))

logic last_index__function_guard1 : int, us_rep2 -> prop

axiom valid_tables__def_axiom :
  (forall names__char_table__fields:us_split_fields2.
  (forall names__entry_table__fields:us_split_fields
  [valid_tables(names__char_table__fields, names__entry_table__fields)].
  ((valid_tables(names__char_table__fields,
  names__entry_table__fields) = true) -> (last_index({ us_split_discrs1 =
  entry_table__split_discrs; us_split_fields1 = names__entry_table__fields
  }) <= 2147483647))))

axiom valid_tables__def_axiom1 :
  (forall names__char_table__fields:us_split_fields2.
  (forall names__entry_table__fields:us_split_fields
  [valid_tables(names__char_table__fields, names__entry_table__fields)].
  ((valid_tables(names__char_table__fields,
  names__entry_table__fields) = true) -> (last_index1({ us_split_discrs3 =
  char_table__split_discrs; us_split_fields3 = names__char_table__fields
  }) <= 2147483646))))

axiom valid_tables__def_axiom2 :
  (forall names__char_table__fields:us_split_fields2.
  (forall names__entry_table__fields:us_split_fields
  [valid_tables(names__char_table__fields, names__entry_table__fields)].
  (((last_index({ us_split_discrs1 = entry_table__split_discrs;
  us_split_fields1 = names__entry_table__fields }) <= 2147483647) and
  (last_index1({ us_split_discrs3 = char_table__split_discrs;
  us_split_fields3 = names__char_table__fields }) <= 2147483646)) ->
  (valid_tables(names__char_table__fields,
  names__entry_table__fields) = true))))

logic first_index__function_guard : int, us_rep -> prop

type index_type

logic index_typeqtint : index_type -> int

axiom index_typeqtaxiom : (forall i:index_type. (1 <= index_typeqtint(i)))

axiom index_typeqtaxiom1 :
  (forall i:index_type. (index_typeqtint(i) <= 2147483647))

predicate in_range6(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq9 : index_type, index_type -> bool

logic dummy9 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref_index_type__content__projection(a: index_type__ref) : index_type =
  (a).index_type__content

predicate dynamic_invariant3(temp___expr_263: int, temp___is_init_259: bool,
  temp___skip_constant_260: bool, temp___do_toplevel_261: bool,
  temp___do_typ_inv_262: bool) = (((temp___is_init_259 = true) or
  (1 <= 2147483647)) -> in_range6(temp___expr_263))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range7(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq10 : positive, positive -> bool

logic dummy10 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

function to_rep2(x: positive) : int = positiveqtint(x)

logic of_rep2 : int -> positive

axiom inversion_axiom2 :
  (forall x:positive [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:positive [to_rep2(x)]. in_range7(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range7(x) ->
  (to_rep2(of_rep2(x)) = x)))

type name_id

logic name_idqtint : name_id -> int

axiom name_idqtaxiom : (forall i:name_id. (0 <= name_idqtint(i)))

axiom name_idqtaxiom1 : (forall i:name_id. (name_idqtint(i) <= 2147483647))

predicate in_range8(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq11 : name_id, name_id -> bool

logic dummy11 : name_id

type name_id__ref = { name_id__content : name_id
}

function name_id__ref_name_id__content__projection(a: name_id__ref) : name_id =
  (a).name_id__content

function to_rep3(x: name_id) : int = name_idqtint(x)

logic of_rep3 : int -> name_id

axiom inversion_axiom3 :
  (forall x:name_id [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:name_id [to_rep3(x)]. in_range8(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range8(x) ->
  (to_rep3(of_rep3(x)) = x)))

type char_table_index

logic char_table_indexqtint : char_table_index -> int

axiom char_table_indexqtaxiom :
  (forall i:char_table_index. (0 <= char_table_indexqtint(i)))

axiom char_table_indexqtaxiom1 :
  (forall i:char_table_index. (char_table_indexqtint(i) <= 2147483646))

predicate in_range9(x: int) = ((0 <= x) and (x <= 2147483646))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq12 : char_table_index, char_table_index -> bool

logic dummy12 : char_table_index

type char_table_index__ref = { char_table_index__content : char_table_index
}

function char_table_index__ref_char_table_index__content__projection(a: char_table_index__ref) : char_table_index =
  (a).char_table_index__content

function to_rep4(x: char_table_index) : int = char_table_indexqtint(x)

logic of_rep4 : int -> char_table_index

axiom inversion_axiom4 :
  (forall x:char_table_index [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:char_table_index [to_rep4(x)]. in_range9(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range9(x) ->
  (to_rep4(of_rep4(x)) = x)))

type us_split_fields4 = { rec__ada___names__data__name_entry__table_index :
char_table_index; rec__ada___names__data__name_entry__length : positive;
rec__ada___names__data__name_entry__next_hash : name_id
}

function us_split_fields_rec__ada___names__data__name_entry__table_index__projection(a: us_split_fields4) : char_table_index =
  (a).rec__ada___names__data__name_entry__table_index

function us_split_fields_rec__ada___names__data__name_entry__length__projection(a: us_split_fields4) : positive =
  (a).rec__ada___names__data__name_entry__length

function us_split_fields_rec__ada___names__data__name_entry__next_hash__projection(a: us_split_fields4) : name_id =
  (a).rec__ada___names__data__name_entry__next_hash

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep4 = { us_split_fields5 : us_split_fields4
}

function us_rep___split_fields__3__projection(a: us_rep4) : us_split_fields4 =
  (a).us_split_fields5

function bool_eq10(a: us_rep4, b: us_rep4) : bool =
  (if (((to_rep4(((a).us_split_fields5).rec__ada___names__data__name_entry__table_index) = to_rep4(((b).us_split_fields5).rec__ada___names__data__name_entry__table_index)) and
  (to_rep2(((a).us_split_fields5).rec__ada___names__data__name_entry__length) = to_rep2(((b).us_split_fields5).rec__ada___names__data__name_entry__length))) and
  (to_rep3(((a).us_split_fields5).rec__ada___names__data__name_entry__next_hash) = to_rep3(((b).us_split_fields5).rec__ada___names__data__name_entry__next_hash))) then true else false)

logic value__size6 : int

logic object__size6 : int

logic alignment6 : int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (0 <= object__size6)

axiom alignment_axiom6 : (0 <= alignment6)

logic ada___names__data__name_entry__table_index__first__bit : int

logic ada___names__data__name_entry__table_index__last__bit : int

logic ada___names__data__name_entry__table_index__position : int

axiom ada___names__data__name_entry__table_index__first__bit_axiom :
  (0 <= ada___names__data__name_entry__table_index__first__bit)

axiom ada___names__data__name_entry__table_index__last__bit_axiom :
  (ada___names__data__name_entry__table_index__first__bit <  ada___names__data__name_entry__table_index__last__bit)

axiom ada___names__data__name_entry__table_index__position_axiom :
  (0 <= ada___names__data__name_entry__table_index__position)

logic ada___names__data__name_entry__length__first__bit : int

logic ada___names__data__name_entry__length__last__bit : int

logic ada___names__data__name_entry__length__position : int

axiom ada___names__data__name_entry__length__first__bit_axiom :
  (0 <= ada___names__data__name_entry__length__first__bit)

axiom ada___names__data__name_entry__length__last__bit_axiom :
  (ada___names__data__name_entry__length__first__bit <  ada___names__data__name_entry__length__last__bit)

axiom ada___names__data__name_entry__length__position_axiom :
  (0 <= ada___names__data__name_entry__length__position)

logic ada___names__data__name_entry__next_hash__first__bit : int

logic ada___names__data__name_entry__next_hash__last__bit : int

logic ada___names__data__name_entry__next_hash__position : int

axiom ada___names__data__name_entry__next_hash__first__bit_axiom :
  (0 <= ada___names__data__name_entry__next_hash__first__bit)

axiom ada___names__data__name_entry__next_hash__last__bit_axiom :
  (ada___names__data__name_entry__next_hash__first__bit <  ada___names__data__name_entry__next_hash__last__bit)

axiom ada___names__data__name_entry__next_hash__position_axiom :
  (0 <= ada___names__data__name_entry__next_hash__position)

logic user_eq13 : us_rep4, us_rep4 -> bool

logic dummy13 : us_rep4

type name_entry__ref = { name_entry__content : us_rep4
}

function name_entry__ref_name_entry__content__projection(a: name_entry__ref) : us_rep4 =
  (a).name_entry__content

type element_type__ref = { element_type__content : us_rep4
}

function element_type__ref_element_type__content__projection(a: element_type__ref) : us_rep4 =
  (a).element_type__content

type element_type__ref1 = { element_type__content1 : us_rep4
}

function element_type__ref_element_type__content__2__projection(a: element_type__ref1) : us_rep4 =
  (a).element_type__content1

logic get : us_rep1, int -> us_rep4

logic get__function_guard : us_rep4, us_rep1, int -> prop

function element(container: us_rep, index: int) : us_rep4 =
  get(model(container), index)

logic element__function_guard : us_rep4, us_rep, int -> prop

logic valid_entry : us_rep4, us_split_fields2, us_split_fields -> bool

logic valid_entry__function_guard : bool, us_rep4, us_split_fields2,
  us_split_fields -> prop

axiom valid_entry__post_axiom :
  (forall names__char_table__fields:us_split_fields2.
  forall names__entry_table__fields:us_split_fields.
  valid_tables__function_guard(valid_tables(names__char_table__fields,
  names__entry_table__fields), names__char_table__fields,
  names__entry_table__fields))

axiom valid_entry__def_axiom :
  (forall e:us_rep4.
  (forall names__char_table__fields:us_split_fields2.
  (forall names__entry_table__fields:us_split_fields [valid_entry(e,
  names__char_table__fields, names__entry_table__fields)]. ((valid_entry(e,
  names__char_table__fields, names__entry_table__fields) = true) ->
  (to_rep3(((e).us_split_fields5).rec__ada___names__data__name_entry__next_hash) <= last_index({
  us_split_discrs1 = entry_table__split_discrs; us_split_fields1 =
  names__entry_table__fields }))))))

axiom valid_entry__def_axiom1 :
  (forall e:us_rep4.
  (forall names__char_table__fields:us_split_fields2.
  (forall names__entry_table__fields:us_split_fields [valid_entry(e,
  names__char_table__fields, names__entry_table__fields)]. ((valid_entry(e,
  names__char_table__fields, names__entry_table__fields) = true) ->
  ((to_rep2(((e).us_split_fields5).rec__ada___names__data__name_entry__length) - 1) <= (last_index1({
  us_split_discrs3 = char_table__split_discrs; us_split_fields3 =
  names__char_table__fields
  }) - to_rep4(((e).us_split_fields5).rec__ada___names__data__name_entry__table_index)))))))

axiom valid_entry__def_axiom2 :
  (forall e:us_rep4.
  (forall names__char_table__fields:us_split_fields2.
  (forall names__entry_table__fields:us_split_fields [valid_entry(e,
  names__char_table__fields, names__entry_table__fields)].
  (((to_rep3(((e).us_split_fields5).rec__ada___names__data__name_entry__next_hash) <= last_index({
  us_split_discrs1 = entry_table__split_discrs; us_split_fields1 =
  names__entry_table__fields })) and
  ((to_rep2(((e).us_split_fields5).rec__ada___names__data__name_entry__length) - 1) <= (last_index1({
  us_split_discrs3 = char_table__split_discrs; us_split_fields3 =
  names__char_table__fields
  }) - to_rep4(((e).us_split_fields5).rec__ada___names__data__name_entry__table_index)))) ->
  (valid_entry(e, names__char_table__fields,
  names__entry_table__fields) = true)))))

predicate dynamic_invariant4(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range7(temp___expr_46))

predicate dynamic_invariant5(temp___expr_249: int, temp___is_init_245: bool,
  temp___skip_constant_246: bool, temp___do_toplevel_247: bool,
  temp___do_typ_inv_248: bool) = (((temp___is_init_245 = true) or
  (0 <= 2147483647)) -> in_range8(temp___expr_249))

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range10(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq14 : count_type, count_type -> bool

logic dummy14 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

predicate dynamic_invariant6(temp___expr_204: int, temp___is_init_200: bool,
  temp___skip_constant_201: bool, temp___do_toplevel_202: bool,
  temp___do_typ_inv_203: bool) = (((temp___is_init_200 = true) or
  (0 <= 2147483647)) -> in_range10(temp___expr_204))

predicate dynamic_invariant7(temp___expr_322: int, temp___is_init_318: bool,
  temp___skip_constant_319: bool, temp___do_toplevel_320: bool,
  temp___do_typ_inv_321: bool) = (((temp___is_init_318 = true) or
  (0 <= 2147483646)) -> in_range9(temp___expr_322))

type extended_index1

logic extended_indexqtint1 : extended_index1 -> int

axiom extended_indexqtaxiom2 :
  (forall i:extended_index1. ((- 1) <= extended_indexqtint1(i)))

axiom extended_indexqtaxiom3 :
  (forall i:extended_index1. (extended_indexqtint1(i) <= 2147483647))

predicate in_range11(x: int) = (((- 1) <= x) and (x <= 2147483647))

function bool_eq12(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq15 : extended_index1, extended_index1 -> bool

logic dummy15 : extended_index1

type extended_index__ref1 = { extended_index__content1 : extended_index1
}

function extended_index__ref_extended_index__content__3__projection(a: extended_index__ref1) : extended_index1 =
  (a).extended_index__content1

predicate dynamic_invariant8(temp___expr_277: int, temp___is_init_273: bool,
  temp___skip_constant_274: bool, temp___do_toplevel_275: bool,
  temp___do_typ_inv_276: bool) = (((temp___is_init_273 = true) or
  ((- 1) <= 2147483647)) -> in_range11(temp___expr_277))

predicate dynamic_invariant9(temp___expr_284: int, temp___is_init_280: bool,
  temp___skip_constant_281: bool, temp___do_toplevel_282: bool,
  temp___do_typ_inv_283: bool) = (((temp___is_init_280 = true) or
  (0 <= 2147483647)) -> in_range4(temp___expr_284))

function capacity(container: us_rep2) : int =
  (if (of_int(0) = true) then to_rep1(((container).us_split_discrs3).rec__ada___names__data__char_tables__vector__capacity) else 2147483647)

logic capacity__function_guard : int, us_rep2 -> prop

logic length2 : us_rep2 -> int

logic length__function_guard2 : int, us_rep2 -> prop

axiom length__post_axiom :
  (forall container:us_rep2 [length2(container)].
  (length2(container) <= capacity(container)))

axiom length__post_axiom1 :
  (forall container:us_rep2 [length2(container)].
  dynamic_invariant9(length2(container), true, false, true, true))

predicate default_initial_assumption2(temp___expr_315: us_rep3,
  temp___skip_top_level_316: bool) =
  ((not (temp___skip_top_level_316 = true)) ->
  (length1(temp___expr_315) = 0))

axiom model__post_axiom :
  (forall container:us_rep2 [model1(container)].
  (length1(model1(container)) = length2(container)))

axiom is_empty__post_axiom :
  (forall container:us_rep2 [is_empty1(container)].
  ((is_empty1(container) = true) -> (length2(container) = 0)))

axiom is_empty__post_axiom1 :
  (forall container:us_rep2 [is_empty1(container)].
  ((length2(container) = 0) -> (is_empty1(container) = true)))

type extended_index2

logic extended_indexqtint2 : extended_index2 -> int

axiom extended_indexqtaxiom4 :
  (forall i:extended_index2. ((- 1) <= extended_indexqtint2(i)))

axiom extended_indexqtaxiom5 :
  (forall i:extended_index2. (extended_indexqtint2(i) <= 2147483646))

predicate in_range12(x: int) = (((- 1) <= x) and (x <= 2147483646))

function bool_eq13(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq16 : extended_index2, extended_index2 -> bool

logic dummy16 : extended_index2

type extended_index__ref2 = { extended_index__content2 : extended_index2
}

function extended_index__ref_extended_index__content__4__projection(a: extended_index__ref2) : extended_index2 =
  (a).extended_index__content2

predicate dynamic_invariant10(temp___expr_307: int, temp___is_init_303: bool,
  temp___skip_constant_304: bool, temp___do_toplevel_305: bool,
  temp___do_typ_inv_306: bool) = (((temp___is_init_303 = true) or
  ((- 1) <= 2147483646)) -> in_range12(temp___expr_307))

axiom length__post_axiom2 :
  (forall container:us_rep3 [length1(container)].
  (((- 1) + length1(container)) <= 2147483646))

axiom length__post_axiom3 :
  (forall container:us_rep3 [length1(container)].
  dynamic_invariant6(length1(container), true, false, true, true))

predicate dynamic_invariant11(temp___expr_211: int, temp___is_init_207: bool,
  temp___skip_constant_208: bool, temp___do_toplevel_209: bool,
  temp___do_typ_inv_210: bool) = (((temp___is_init_207 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_211))

function capacity1(container: us_rep) : int =
  (if (of_int(0) = true) then to_rep(((container).us_split_discrs1).rec__ada___names__data__entry_tables__vector__capacity) else 2147483647)

logic capacity__function_guard1 : int, us_rep -> prop

logic length3 : us_rep -> int

logic length__function_guard3 : int, us_rep -> prop

axiom length__post_axiom4 :
  (forall container:us_rep [length3(container)].
  (length3(container) <= capacity1(container)))

axiom length__post_axiom5 :
  (forall container:us_rep [length3(container)].
  dynamic_invariant11(length3(container), true, false, true, true))

predicate default_initial_assumption3(temp___expr_242: us_rep1,
  temp___skip_top_level_243: bool) =
  ((not (temp___skip_top_level_243 = true)) -> (length(temp___expr_242) = 0))

axiom model__post_axiom1 :
  (forall container:us_rep [model(container)].
  (length(model(container)) = length3(container)))

axiom is_empty__post_axiom2 :
  (forall container:us_rep [is_empty(container)].
  ((is_empty(container) = true) -> (length3(container) = 0)))

axiom is_empty__post_axiom3 :
  (forall container:us_rep [is_empty(container)].
  ((length3(container) = 0) -> (is_empty(container) = true)))

type extended_index3

logic extended_indexqtint3 : extended_index3 -> int

axiom extended_indexqtaxiom6 :
  (forall i:extended_index3. (0 <= extended_indexqtint3(i)))

axiom extended_indexqtaxiom7 :
  (forall i:extended_index3. (extended_indexqtint3(i) <= 2147483647))

predicate in_range13(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq14(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq17 : extended_index3, extended_index3 -> bool

logic dummy17 : extended_index3

type extended_index__ref3 = { extended_index__content3 : extended_index3
}

function extended_index__ref_extended_index__content__2__projection(a: extended_index__ref3) : extended_index3 =
  (a).extended_index__content3

predicate dynamic_invariant12(temp___expr_234: int, temp___is_init_230: bool,
  temp___skip_constant_231: bool, temp___do_toplevel_232: bool,
  temp___do_typ_inv_233: bool) = (((temp___is_init_230 = true) or
  (0 <= 2147483647)) -> in_range13(temp___expr_234))

axiom length__post_axiom6 :
  (forall container:us_rep1 [length(container)].
  ((0 + length(container)) <= 2147483647))

axiom length__post_axiom7 :
  (forall container:us_rep1 [length(container)].
  dynamic_invariant6(length(container), true, false, true, true))

 (* File "names.adb", line 64, characters 0-0 *)
goal defqtvc :
  (forall entry_table__split_fields:us_main_type.
  forall char_table__split_fields:us_main_type2. (dynamic_invariant2({
  us_split_discrs3 = char_table__split_discrs; us_split_fields3 = {
  rec__ada___names__data__char_tables__vector = char_table__split_fields } },
  true, false, true, true) -> (dynamic_invariant({ us_split_discrs1 =
  entry_table__split_discrs; us_split_fields1 = {
  rec__ada___names__data__entry_tables__vector = entry_table__split_fields }
  }, true, false, true, true) ->
  ((forall entry_table__split_fields1:us_main_type.
   forall char_table__split_fields1:us_main_type2.
   valid_tables__function_guard(valid_tables({
   rec__ada___names__data__char_tables__vector = char_table__split_fields1 },
   { rec__ada___names__data__entry_tables__vector =
   entry_table__split_fields1 }), {
   rec__ada___names__data__char_tables__vector = char_table__split_fields1 },
   { rec__ada___names__data__entry_tables__vector =
   entry_table__split_fields1 })) ->
  ((valid_tables({ rec__ada___names__data__char_tables__vector =
  char_table__split_fields }, {
  rec__ada___names__data__entry_tables__vector = entry_table__split_fields
  }) = true) ->
  (forall usf:int. (let o = { us_split_discrs1 = entry_table__split_discrs;
  us_split_fields1 = { rec__ada___names__data__entry_tables__vector =
  entry_table__split_fields } } : us_rep in (let o1 = last_index(o) : int in
  ((dynamic_invariant1(o1, true, false, true, true) and
  (o1 = last(model(o)))) -> ((dynamic_invariant3(1, true, false, true,
  true) and (1 = 1)) -> ((andb((if (1 <= usf) then true else false),
  (if (usf <= o1) then true else false)) = true) -> (in_range6(usf) ->
  (1 <= usf)))))))))))))
