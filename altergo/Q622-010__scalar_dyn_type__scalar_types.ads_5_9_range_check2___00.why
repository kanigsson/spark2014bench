(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

logic id : int -> int

logic id__function_guard : int, int -> prop

axiom id__post_axiom :
  (forall x:int [id(x)]. (dynamic_invariant(x, true, true, true, true) ->
  (let result = id(x) : int in (id__function_guard(result, x) ->
  dynamic_invariant(result, true, false, true, true)))))

axiom id__def_axiom :
  (forall x:int [id(x)]. (dynamic_invariant(x, true, true, true, true) ->
  (id(x) = x)))

logic dyn_ty_LAST : int

logic attr__ATTRIBUTE_ADDRESS : int

type tdyn_tyB

logic tdyn_tyBqtint : tdyn_tyB -> int

axiom tdyn_tyBqtaxiom :
  (forall i:tdyn_tyB. ((- 2147483648) <= tdyn_tyBqtint(i)))

axiom tdyn_tyBqtaxiom1 :
  (forall i:tdyn_tyB. (tdyn_tyBqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : tdyn_tyB, tdyn_tyB -> bool

logic dummy1 : tdyn_tyB

type tdyn_tyB__ref = { tdyn_tyB__content : tdyn_tyB
}

function tdyn_tyB__ref_tdyn_tyB__content__projection(a: tdyn_tyB__ref) : tdyn_tyB =
  (a).tdyn_tyB__content

function to_rep(x: tdyn_tyB) : int = tdyn_tyBqtint(x)

logic of_rep : int -> tdyn_tyB

axiom inversion_axiom :
  (forall x:tdyn_tyB [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:tdyn_tyB [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

logic last : int

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : tdyn_tyB, tdyn_tyB -> bool

logic dummy2 : tdyn_tyB

type dyn_ty__ref = { dyn_ty__content : tdyn_tyB
}

function dyn_ty__ref_dyn_ty__content__projection(a: dyn_ty__ref) : tdyn_tyB =
  (a).dyn_ty__content

predicate dynamic_invariant1(temp___expr_160: int, temp___is_init_156: bool,
  temp___skip_constant_157: bool, temp___do_toplevel_158: bool,
  temp___do_typ_inv_159: bool) = (((temp___is_init_156 = true) or
  (1 <= last)) -> dynamic_property(1, last, temp___expr_160))

axiom last__def_axiom : (last = dyn_ty_LAST)

axiom dyn_ty_LAST__def_axiom : id__function_guard(id(10), 10)

axiom dyn_ty_LAST__def_axiom1 : (dyn_ty_LAST = id(10))

 (* File "scalar_types.ads", line 1, characters 0-0 *)
goal defqtvc : (let scalar_types__dyn_ty_LAST__assume = id(10) : int in
  ((id__function_guard(scalar_types__dyn_ty_LAST__assume, 10) and
  (dynamic_invariant(scalar_types__dyn_ty_LAST__assume, true, false, true,
  true) and (scalar_types__dyn_ty_LAST__assume = 10))) ->
  ((scalar_types__dyn_ty_LAST__assume = dyn_ty_LAST) ->
  (dynamic_invariant(dyn_ty_LAST, true, false, true, true) ->
  ((1 <= dyn_ty_LAST) -> ((- 2147483648) <= 1))))))
