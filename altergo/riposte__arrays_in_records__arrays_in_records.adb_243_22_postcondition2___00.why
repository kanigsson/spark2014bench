(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type index

logic indexqtint : index -> int

axiom indexqtaxiom : (forall i:index. (0 <= indexqtint(i)))

axiom indexqtaxiom1 : (forall i:index. (indexqtint(i) <= 1001))

predicate in_range1(x: int) = ((0 <= x) and (x <= 1001))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : index, index -> bool

logic dummy : index

type index__ref = { index__content : index
}

function index__ref_index__content__projection(a: index__ref) : index =
  (a).index__content

function to_rep(x: index) : int = indexqtint(x)

logic of_rep : int -> index

axiom inversion_axiom : (forall x:index [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:index [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type value

logic valueqtint : value -> int

axiom valueqtaxiom : (forall i:value. ((- 23) <= valueqtint(i)))

axiom valueqtaxiom1 : (forall i:value. (valueqtint(i) <= 69))

predicate in_range2(x: int) = (((- 23) <= x) and (x <= 69))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : value, value -> bool

logic dummy1 : value

type value__ref = { value__content : value
}

function value__ref_value__content__projection(a: value__ref) : value =
  (a).value__content

function to_rep1(x: value) : int = valueqtint(x)

logic of_rep1 : int -> value

axiom inversion_axiom1 :
  (forall x:value [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:value [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,value) farray
}

logic slide : (int,value) farray, int, int -> (int,value) farray

axiom slide_eq :
  (forall a:(int,value) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,value) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,value) farray, a__first: int, a__last: int,
  b: (int,value) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)]))))))))

logic dummy2 : (int,value) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq2 : (int,value) farray, (int,value) farray -> bool

type us_split_fields = { rec__arrays_in_records__record_with_arrays__counter
: index; rec__arrays_in_records__record_with_arrays__first_array :
(int,value) farray; rec__arrays_in_records__record_with_arrays__second_array
: (int,value) farray
}

function us_split_fields_rec__arrays_in_records__record_with_arrays__counter__projection(a: us_split_fields) : index =
  (a).rec__arrays_in_records__record_with_arrays__counter

function us_split_fields_rec__arrays_in_records__record_with_arrays__first_array__projection(a: us_split_fields) : (int,value) farray =
  (a).rec__arrays_in_records__record_with_arrays__first_array

function us_split_fields_rec__arrays_in_records__record_with_arrays__second_array__projection(a: us_split_fields) : (int,value) farray =
  (a).rec__arrays_in_records__record_with_arrays__second_array

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq4(a: us_rep, b: us_rep) : bool =
  (if (((to_rep(((a).us_split_fields1).rec__arrays_in_records__record_with_arrays__counter) = to_rep(((b).us_split_fields1).rec__arrays_in_records__record_with_arrays__counter)) and
  (bool_eq3(((a).us_split_fields1).rec__arrays_in_records__record_with_arrays__first_array,
  0, 1001,
  ((b).us_split_fields1).rec__arrays_in_records__record_with_arrays__first_array,
  0, 1001) = true)) and
  (bool_eq3(((a).us_split_fields1).rec__arrays_in_records__record_with_arrays__second_array,
  0, 1001,
  ((b).us_split_fields1).rec__arrays_in_records__record_with_arrays__second_array,
  0, 1001) = true)) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic arrays_in_records__record_with_arrays__counter__first__bit : int

logic arrays_in_records__record_with_arrays__counter__last__bit : int

logic arrays_in_records__record_with_arrays__counter__position : int

axiom arrays_in_records__record_with_arrays__counter__first__bit_axiom :
  (0 <= arrays_in_records__record_with_arrays__counter__first__bit)

axiom arrays_in_records__record_with_arrays__counter__last__bit_axiom :
  (arrays_in_records__record_with_arrays__counter__first__bit <  arrays_in_records__record_with_arrays__counter__last__bit)

axiom arrays_in_records__record_with_arrays__counter__position_axiom :
  (0 <= arrays_in_records__record_with_arrays__counter__position)

logic arrays_in_records__record_with_arrays__first_array__first__bit : int

logic arrays_in_records__record_with_arrays__first_array__last__bit : int

logic arrays_in_records__record_with_arrays__first_array__position : int

axiom arrays_in_records__record_with_arrays__first_array__first__bit_axiom :
  (0 <= arrays_in_records__record_with_arrays__first_array__first__bit)

axiom arrays_in_records__record_with_arrays__first_array__last__bit_axiom :
  (arrays_in_records__record_with_arrays__first_array__first__bit <  arrays_in_records__record_with_arrays__first_array__last__bit)

axiom arrays_in_records__record_with_arrays__first_array__position_axiom :
  (0 <= arrays_in_records__record_with_arrays__first_array__position)

logic arrays_in_records__record_with_arrays__second_array__first__bit : int

logic arrays_in_records__record_with_arrays__second_array__last__bit : int

logic arrays_in_records__record_with_arrays__second_array__position : int

axiom arrays_in_records__record_with_arrays__second_array__first__bit_axiom :
  (0 <= arrays_in_records__record_with_arrays__second_array__first__bit)

axiom arrays_in_records__record_with_arrays__second_array__last__bit_axiom :
  (arrays_in_records__record_with_arrays__second_array__first__bit <  arrays_in_records__record_with_arrays__second_array__last__bit)

axiom arrays_in_records__record_with_arrays__second_array__position_axiom :
  (0 <= arrays_in_records__record_with_arrays__second_array__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type record_with_arrays__ref = { record_with_arrays__content : us_rep
}

function record_with_arrays__ref_record_with_arrays__content__projection(a: record_with_arrays__ref) : us_rep =
  (a).record_with_arrays__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_invariant(temp___expr_173: int, temp___is_init_169: bool,
  temp___skip_constant_170: bool, temp___do_toplevel_171: bool,
  temp___do_typ_inv_172: bool) = (((temp___is_init_169 = true) or
  ((- 23) <= 69)) -> in_range2(temp___expr_173))

predicate dynamic_invariant1(temp___expr_166: int, temp___is_init_162: bool,
  temp___skip_constant_163: bool, temp___do_toplevel_164: bool,
  temp___do_typ_inv_165: bool) = (((temp___is_init_162 = true) or
  (0 <= 1001)) -> in_range1(temp___expr_166))

 (* File "arrays_in_records.adb", line 241, characters 0-0 *)
goal defqtvc :
  (forall a__split_fields:us_split_fields.
  forall b__split_fields:us_split_fields. forall tmp:int.
  (forall b__split_fields1:us_split_fields.
  ((b__split_fields1 = b__split_fields) ->
  (forall a__split_fields1:us_split_fields.
  ((a__split_fields1 = a__split_fields) -> (dynamic_invariant(tmp, false,
  false, true, true) ->
  (forall o:int.
  ((to_rep1(((a__split_fields).rec__arrays_in_records__record_with_arrays__first_array[17])) = o) ->
  (forall tmp1:int. ((tmp1 = o) ->
  (forall o1:int.
  ((to_rep1(((b__split_fields).rec__arrays_in_records__record_with_arrays__second_array[5])) = o1) ->
  (forall o2:value. ((to_rep1(o2) = o1) ->
  (forall a__split_fields2:us_split_fields. ((a__split_fields2 = {
  rec__arrays_in_records__record_with_arrays__counter =
  (a__split_fields).rec__arrays_in_records__record_with_arrays__counter;
  rec__arrays_in_records__record_with_arrays__first_array =
  ((a__split_fields).rec__arrays_in_records__record_with_arrays__first_array[17 <- o2]);
  rec__arrays_in_records__record_with_arrays__second_array =
  (a__split_fields).rec__arrays_in_records__record_with_arrays__second_array
  }) ->
  (forall o3:value. ((to_rep1(o3) = tmp1) ->
  (forall b__split_fields2:us_split_fields. ((b__split_fields2 = {
  rec__arrays_in_records__record_with_arrays__counter =
  (b__split_fields).rec__arrays_in_records__record_with_arrays__counter;
  rec__arrays_in_records__record_with_arrays__first_array =
  (b__split_fields).rec__arrays_in_records__record_with_arrays__first_array;
  rec__arrays_in_records__record_with_arrays__second_array =
  ((b__split_fields).rec__arrays_in_records__record_with_arrays__second_array[5 <- o3])
  }) -> (not (bool_eq4({ us_split_fields1 = a__split_fields2 }, {
  us_split_fields1 = a__split_fields1 }) = true))))))))))))))))))))))
