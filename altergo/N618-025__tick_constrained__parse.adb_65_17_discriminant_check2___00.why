(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. (0 <= tqtint(i)))

axiom tqtaxiom1 : (forall i:t. (tqtint(i) <= 255))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_and(v1, v2), n) = andb(nth(v1, n), nth(v2, n)))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_or(v1, v2), n) = orb(nth(v1, n), nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  8)) -> (nth(bw_not(v),
  n) = notb(nth(v, n)))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth(asr(b, s), n) = nth(b, (8 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 8))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 8))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

function to_int(x: t) : int =
  (if is_signed_positive(x) then tqtint(x) else (-(256 - tqtint(x))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds : (forall v:t. (0 <= tqtint(v)))

axiom to_uint_bounds1 : (forall v:t. (tqtint(v) <  256))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) -> sge(x, zeros)))

axiom positive_is_ge_zeros1 :
  (forall x:t. (sge(x, zeros) -> is_signed_positive(x)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  256) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  256)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 256)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  256) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 256)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) -> eq_sub_bv(a, b, i, n)))

axiom eq_sub_equiv1 :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub_bv(a, b, i, n) ->
  eq_sub(a, b, tqtint(i), tqtint(n))))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 8)]. (eq_sub(x, y, 0, 8) ->
  (x = y)))

type t__ref = { t__content : t
}

function bool_eq(x: t, y: t) : bool = (if (x = y) then true else false)

function bool_ne(x: t, y: t) : bool = (if (not (x = y)) then true else false)

function bool_lt(x: t, y: t) : bool = (if ult(x, y) then true else false)

function bool_le(x: t, y: t) : bool = (if ule(x, y) then true else false)

function bool_gt(x: t, y: t) : bool = (if ugt(x, y) then true else false)

function bool_ge(x: t, y: t) : bool = (if uge(x, y) then true else false)

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

function bv_min(x: t, y: t) : t = (if ule(x, y) then x else y)

function bv_max(x: t, y: t) : t = (if ule(x, y) then y else x)

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type t1

logic tqtint1 : t1 -> int

axiom tqtaxiom2 : (forall i:t1. (0 <= tqtint1(i)))

axiom tqtaxiom3 : (forall i:t1. (tqtint1(i) <= 65535))

logic nth1 : t1, int -> bool

axiom nth_out_of_bound1 :
  (forall x:t1. forall n:int. (((n <  0) or (16 <= n)) -> (nth1(x,
  n) = false)))

logic zeros1 : t1

axiom Nth_zeros1 : (forall n:int. (nth1(zeros1, n) = false))

logic one1 : t1

logic ones1 : t1

axiom Nth_ones1 :
  (forall n:int. (((0 <= n) and (n <  16)) -> (nth1(ones1, n) = true)))

logic bw_and1 : t1, t1 -> t1

axiom Nth_bw_and1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth1(bw_and1(v1, v2), n) = andb(nth1(v1, n), nth1(v2, n)))))

logic bw_or1 : t1, t1 -> t1

axiom Nth_bw_or1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth1(bw_or1(v1, v2), n) = orb(nth1(v1, n), nth1(v2, n)))))

logic bw_xor1 : t1, t1 -> t1

axiom Nth_bw_xor1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth1(bw_xor1(v1, v2), n) = xorb(nth1(v1, n), nth1(v2, n)))))

logic bw_not1 : t1 -> t1

axiom Nth_bw_not1 :
  (forall v:t1. forall n:int. (((0 <= n) and (n <  16)) -> (nth1(bw_not1(v),
  n) = notb(nth1(v, n)))))

logic lsr1 : t1, int -> t1

axiom Lsr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  16) -> (nth1(lsr1(b, s), n) = nth1(b, (n + s)))))))

axiom Lsr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((16 <= (n + s)) -> (nth1(lsr1(b, s), n) = false)))))

axiom lsr_zeros1 : (forall x:t1. (lsr1(x, 0) = x))

logic asr1 : t1, int -> t1

axiom Asr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> (((n + s) <  16) -> (nth1(asr1(b, s), n) = nth1(b,
  (n + s)))))))

axiom Asr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> ((16 <= (n + s)) -> (nth1(asr1(b, s), n) = nth1(b,
  (16 - 1)))))))

axiom asr_zeros1 : (forall x:t1. (asr1(x, 0) = x))

logic lsl1 : t1, int -> t1

axiom Lsl_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  16))) -> (nth1(lsl1(b, s), n) = nth1(b, (n - s)))))

axiom Lsl_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth1(lsl1(b, s), n) = false)))

axiom lsl_zeros1 : (forall x:t1. (lsl1(x, 0) = x))

logic rotate_right1 : t1, int -> t1

axiom Nth_rotate_right1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth1(rotate_right1(v, n), i) = nth1(v, ((i + n) % 16))))))

logic rotate_left1 : t1, int -> t1

axiom Nth_rotate_left1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth1(rotate_left1(v, n), i) = nth1(v, ((i - n) % 16))))))

logic is_signed_positive1 : t1 -> prop

logic of_int1 : int -> t1

function to_int1(x: t1) : int =
  (if is_signed_positive1(x) then tqtint1(x) else (-(65536 - tqtint1(x))))

axiom to_uint_extensionality1 :
  (forall v:t1. forall vqt:t1. ((tqtint1(v) = tqtint1(vqt)) -> (v = vqt)))

axiom to_int_extensionality1 :
  (forall v:t1. forall vqt:t1. ((to_int1(v) = to_int1(vqt)) -> (v = vqt)))

predicate uint_in_range1(i: int) = ((0 <= i) and (i <= 65535))

axiom to_uint_bounds2 : (forall v:t1. (0 <= tqtint1(v)))

axiom to_uint_bounds3 : (forall v:t1. (tqtint1(v) <  65536))

axiom to_uint_of_int1 :
  (forall i:int. (((0 <= i) and (i <  65536)) -> (tqtint1(of_int1(i)) = i)))

logic size_bv1 : t1

axiom to_uint_size_bv1 : (tqtint1(size_bv1) = 16)

axiom to_uint_zeros1 : (tqtint1(zeros1) = 0)

axiom to_uint_one1 : (tqtint1(one1) = 1)

axiom to_uint_ones1 : (tqtint1(ones1) = 65535)

predicate ult1(x: t1, y: t1) = (tqtint1(x) <  tqtint1(y))

predicate ule1(x: t1, y: t1) = (tqtint1(x) <= tqtint1(y))

predicate ugt1(x: t1, y: t1) = (tqtint1(y) <  tqtint1(x))

predicate uge1(x: t1, y: t1) = (tqtint1(y) <= tqtint1(x))

predicate slt1(v1: t1, v2: t1) = (to_int1(v1) <  to_int1(v2))

predicate sle1(v1: t1, v2: t1) = (to_int1(v1) <= to_int1(v2))

predicate sgt1(v1: t1, v2: t1) = (to_int1(v2) <  to_int1(v1))

predicate sge1(v1: t1, v2: t1) = (to_int1(v2) <= to_int1(v1))

axiom positive_is_ge_zeros2 :
  (forall x:t1. (is_signed_positive1(x) -> sge1(x, zeros1)))

axiom positive_is_ge_zeros3 :
  (forall x:t1. (sge1(x, zeros1) -> is_signed_positive1(x)))

logic add1 : t1, t1 -> t1

axiom to_uint_add_bounded1 :
  (forall v1:t1. forall v2:t1. (((tqtint1(v1) + tqtint1(v2)) <  65536) ->
  (tqtint1(add1(v1, v2)) = (tqtint1(v1) + tqtint1(v2)))))

logic sub1 : t1, t1 -> t1

axiom to_uint_sub_bounded1 :
  (forall v1:t1. forall v2:t1. (((0 <= (tqtint1(v1) - tqtint1(v2))) and
  ((tqtint1(v1) - tqtint1(v2)) <  65536)) -> (tqtint1(sub1(v1,
  v2)) = (tqtint1(v1) - tqtint1(v2)))))

logic neg1 : t1 -> t1

axiom to_uint_neg1 :
  (forall v:t1. (tqtint1(neg1(v)) = ((-tqtint1(v)) % 65536)))

logic mul1 : t1, t1 -> t1

axiom to_uint_mul_bounded1 :
  (forall v1:t1. forall v2:t1. (((tqtint1(v1) * tqtint1(v2)) <  65536) ->
  (tqtint1(mul1(v1, v2)) = (tqtint1(v1) * tqtint1(v2)))))

logic udiv1 : t1, t1 -> t1

axiom to_uint_udiv1 :
  (forall v1:t1. forall v2:t1. (tqtint1(udiv1(v1,
  v2)) = (tqtint1(v1) / tqtint1(v2))))

logic urem1 : t1, t1 -> t1

axiom to_uint_urem1 :
  (forall v1:t1. forall v2:t1. (tqtint1(urem1(v1,
  v2)) = (tqtint1(v1) % tqtint1(v2))))

logic lsr_bv1 : t1, t1 -> t1

axiom lsr_bv_is_lsr1 :
  (forall x:t1. forall n:t1. (lsr_bv1(x, n) = lsr1(x, tqtint1(n))))

axiom to_uint_lsr1 :
  (forall v:t1. forall n:t1. (tqtint1(lsr_bv1(v,
  n)) = (tqtint1(v) / pow2(tqtint1(n)))))

logic asr_bv1 : t1, t1 -> t1

axiom asr_bv_is_asr1 :
  (forall x:t1. forall n:t1. (asr_bv1(x, n) = asr1(x, tqtint1(n))))

logic lsl_bv1 : t1, t1 -> t1

axiom lsl_bv_is_lsl1 :
  (forall x:t1. forall n:t1. (lsl_bv1(x, n) = lsl1(x, tqtint1(n))))

axiom to_uint_lsl1 :
  (forall v:t1. forall n:t1. (tqtint1(lsl_bv1(v,
  n)) = ((tqtint1(v) * pow2(tqtint1(n))) % 65536)))

logic rotate_right_bv1 : t1, t1 -> t1

logic rotate_left_bv1 : t1, t1 -> t1

axiom rotate_left_bv_is_rotate_left1 :
  (forall v:t1. forall n:t1. (rotate_left_bv1(v, n) = rotate_left1(v,
  tqtint1(n))))

axiom rotate_right_bv_is_rotate_right1 :
  (forall v:t1. forall n:t1. (rotate_right_bv1(v, n) = rotate_right1(v,
  tqtint1(n))))

logic nth_bv1 : t1, t1 -> bool

axiom Nth_bv_is_nth1 :
  (forall x:t1. forall i:t1. (nth1(x, tqtint1(i)) = nth_bv1(x, i)))

axiom Nth_bv_is_nth21 :
  (forall x:t1. forall i:int. (((0 <= i) and (i <  65536)) -> (nth_bv1(x,
  of_int1(i)) = nth1(x, i))))

logic eq_sub_bv1 : t1, t1, t1, t1 -> prop

predicate eq_sub1(a: t1, b: t1, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth1(a, j) = nth1(b,
  j))))

axiom eq_sub_equiv2 :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub1(a, b,
  tqtint1(i), tqtint1(n)) -> eq_sub_bv1(a, b, i, n)))

axiom eq_sub_equiv3 :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub_bv1(a, b, i,
  n) -> eq_sub1(a, b, tqtint1(i), tqtint1(n))))

axiom Extensionality1 :
  (forall x:t1. forall y:t1 [eq_sub1(x, y, 0, 16)]. (eq_sub1(x, y, 0, 16) ->
  (x = y)))

type t__ref1 = { t__content1 : t1
}

function bool_eq1(x: t1, y: t1) : bool = (if (x = y) then true else false)

function bool_ne1(x: t1, y: t1) : bool =
  (if (not (x = y)) then true else false)

function bool_lt1(x: t1, y: t1) : bool = (if ult1(x, y) then true else false)

function bool_le1(x: t1, y: t1) : bool = (if ule1(x, y) then true else false)

function bool_gt1(x: t1, y: t1) : bool = (if ugt1(x, y) then true else false)

function bool_ge1(x: t1, y: t1) : bool = (if uge1(x, y) then true else false)

logic power1 : t1, int -> t1

axiom Power_02 : (forall x:t1. (power1(x, 0) = one1))

axiom Power_12 : (forall x:t1. (power1(x, 1) = x))

axiom Power_s2 :
  (forall x:t1. forall n:int. ((0 <= n) -> (power1(x, (n + 1)) = mul1(x,
  power1(x, n)))))

axiom Power_s_alt1 :
  (forall x:t1. forall n:int. ((0 <  n) -> (power1(x, n) = mul1(x, power1(x,
  (n - 1))))))

axiom Power_sum2 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = mul1(power1(x, n), power1(x, m))))))

axiom Power_mult1 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult21 :
  (forall x:t1. forall y:t1. forall n:int. ((0 <= n) -> (power1(mul1(x, y),
  n) = mul1(power1(x, n), power1(y, n)))))

function bv_min1(x: t1, y: t1) : t1 = (if ule1(x, y) then x else y)

function bv_max1(x: t1, y: t1) : t1 = (if ule1(x, y) then y else x)

axiom bv_min_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_min1(x, y)) = min(tqtint1(x),
  tqtint1(y))))

axiom bv_max_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_max1(x, y)) = max(tqtint1(x),
  tqtint1(y))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq2(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int2(b: bool) : int = (if (b = true) then 1 else 0)

function of_int2(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type unsigned_8

logic attr__ATTRIBUTE_MODULUS : t

function bool_eq3(x: t, y: t) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> t

logic user_eq : unsigned_8, unsigned_8 -> bool

logic dummy : unsigned_8

type unsigned_8__ref = { unsigned_8__content : unsigned_8
}

function unsigned_8__ref_unsigned_8__content__projection(a: unsigned_8__ref) : unsigned_8 =
  (a).unsigned_8__content

logic to_rep : unsigned_8 -> t

logic of_rep : t -> unsigned_8

axiom inversion_axiom :
  (forall x:unsigned_8 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom coerce_axiom :
  (forall x:t [to_rep(of_rep(x))]. (to_rep(of_rep(x)) = x))

function to_int3(x: unsigned_8) : int = tqtint(to_rep(x))

axiom range_int_axiom :
  (forall x:unsigned_8 [to_int3(x)]. uint_in_range(to_int3(x)))

type us_split_fields = { rec__types__octet__data : unsigned_8
}

function us_split_fields_rec__types__octet__data__projection(a: us_split_fields) : unsigned_8 =
  (a).rec__types__octet__data

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__3__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq4(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__types__octet__data) = to_rep(((b).us_split_fields1).rec__types__octet__data)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic types__octet__data__first__bit : int

logic types__octet__data__last__bit : int

logic types__octet__data__position : int

axiom types__octet__data__first__bit_axiom :
  (0 <= types__octet__data__first__bit)

axiom types__octet__data__last__bit_axiom :
  (types__octet__data__first__bit <  types__octet__data__last__bit)

axiom types__octet__data__position_axiom :
  (0 <= types__octet__data__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type octet__ref = { octet__content : us_rep
}

function octet__ref_octet__content__projection(a: octet__ref) : us_rep =
  (a).octet__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq5(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq4((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq4((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))))

logic query : (int,us_rep) farray

logic attr__ATTRIBUTE_ADDRESS : int

type unsigned_16

logic attr__ATTRIBUTE_MODULUS1 : t1

function bool_eq6(x: t1, y: t1) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> t1

logic user_eq2 : unsigned_16, unsigned_16 -> bool

logic dummy2 : unsigned_16

type unsigned_16__ref = { unsigned_16__content : unsigned_16
}

function unsigned_16__ref_unsigned_16__content__projection(a: unsigned_16__ref) : unsigned_16 =
  (a).unsigned_16__content

logic to_rep1 : unsigned_16 -> t1

logic of_rep1 : t1 -> unsigned_16

axiom inversion_axiom1 :
  (forall x:unsigned_16 [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom coerce_axiom1 :
  (forall x:t1 [to_rep1(of_rep1(x))]. (to_rep1(of_rep1(x)) = x))

function to_int4(x: unsigned_16) : int = tqtint1(to_rep1(x))

axiom range_int_axiom1 :
  (forall x:unsigned_16 [to_int4(x)]. uint_in_range1(to_int4(x)))

type query_opcode

predicate in_range1(x: int) = ((0 <= x) and (x <= 1))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : query_opcode, query_opcode -> bool

logic dummy3 : query_opcode

type query_opcode__ref = { query_opcode__content : query_opcode
}

function query_opcode__ref_query_opcode__content__projection(a: query_opcode__ref) : query_opcode =
  (a).query_opcode__content

logic to_rep2 : query_opcode -> int

logic of_rep2 : int -> query_opcode

axiom inversion_axiom2 :
  (forall x:query_opcode [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom :
  (forall x:query_opcode [to_rep2(x)]. in_range1(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range1(x) ->
  (to_rep2(of_rep2(x)) = x)))

type qdcount_range

logic qdcount_rangeqtint : qdcount_range -> int

axiom qdcount_rangeqtaxiom :
  (forall i:qdcount_range. (1 <= qdcount_rangeqtint(i)))

axiom qdcount_rangeqtaxiom1 :
  (forall i:qdcount_range. (qdcount_rangeqtint(i) <= 16))

predicate in_range2(x: int) = ((1 <= x) and (x <= 16))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : qdcount_range, qdcount_range -> bool

logic dummy4 : qdcount_range

type qdcount_range__ref = { qdcount_range__content : qdcount_range
}

function qdcount_range__ref_qdcount_range__content__projection(a: qdcount_range__ref) : qdcount_range =
  (a).qdcount_range__content

function to_rep3(x: qdcount_range) : int = qdcount_rangeqtint(x)

logic of_rep3 : int -> qdcount_range

axiom inversion_axiom3 :
  (forall x:qdcount_range [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom1 :
  (forall x:qdcount_range [to_rep3(x)]. in_range2(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range2(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_fields2 = { rec__types__query_header__id : unsigned_16;
rec__types__query_header__opcode : query_opcode;
rec__types__query_header__qdcount : qdcount_range
}

function us_split_fields_rec__types__query_header__id__projection(a: us_split_fields2) : unsigned_16 =
  (a).rec__types__query_header__id

function us_split_fields_rec__types__query_header__opcode__projection(a: us_split_fields2) : query_opcode =
  (a).rec__types__query_header__opcode

function us_split_fields_rec__types__query_header__qdcount__projection(a: us_split_fields2) : qdcount_range =
  (a).rec__types__query_header__qdcount

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq9(a: us_rep1, b: us_rep1) : bool =
  (if (((to_rep1(((a).us_split_fields3).rec__types__query_header__id) = to_rep1(((b).us_split_fields3).rec__types__query_header__id)) and
  (to_rep2(((a).us_split_fields3).rec__types__query_header__opcode) = to_rep2(((b).us_split_fields3).rec__types__query_header__opcode))) and
  (to_rep3(((a).us_split_fields3).rec__types__query_header__qdcount) = to_rep3(((b).us_split_fields3).rec__types__query_header__qdcount))) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic types__query_header__id__first__bit : int

logic types__query_header__id__last__bit : int

logic types__query_header__id__position : int

axiom types__query_header__id__first__bit_axiom :
  (0 <= types__query_header__id__first__bit)

axiom types__query_header__id__last__bit_axiom :
  (types__query_header__id__first__bit <  types__query_header__id__last__bit)

axiom types__query_header__id__position_axiom :
  (0 <= types__query_header__id__position)

logic types__query_header__opcode__first__bit : int

logic types__query_header__opcode__last__bit : int

logic types__query_header__opcode__position : int

axiom types__query_header__opcode__first__bit_axiom :
  (0 <= types__query_header__opcode__first__bit)

axiom types__query_header__opcode__last__bit_axiom :
  (types__query_header__opcode__first__bit <  types__query_header__opcode__last__bit)

axiom types__query_header__opcode__position_axiom :
  (0 <= types__query_header__opcode__position)

logic types__query_header__qdcount__first__bit : int

logic types__query_header__qdcount__last__bit : int

logic types__query_header__qdcount__position : int

axiom types__query_header__qdcount__first__bit_axiom :
  (0 <= types__query_header__qdcount__first__bit)

axiom types__query_header__qdcount__last__bit_axiom :
  (types__query_header__qdcount__first__bit <  types__query_header__qdcount__last__bit)

axiom types__query_header__qdcount__position_axiom :
  (0 <= types__query_header__qdcount__position)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy5 : us_rep1

type query_header__ref = { query_header__content : us_rep1
}

function query_header__ref_query_header__content__projection(a: query_header__ref) : us_rep1 =
  (a).query_header__content

type return_code_t

predicate in_range3(x: int) = ((0 <= x) and (x <= 1))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : return_code_t, return_code_t -> bool

logic dummy6 : return_code_t

type return_code_t__ref = { return_code_t__content : return_code_t
}

function return_code_t__ref_return_code_t__content__projection(a: return_code_t__ref) : return_code_t =
  (a).return_code_t__content

logic to_rep4 : return_code_t -> int

logic of_rep4 : int -> return_code_t

axiom inversion_axiom4 :
  (forall x:return_code_t [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom2 :
  (forall x:return_code_t [to_rep4(x)]. in_range3(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range3(x) ->
  (to_rep4(of_rep4(x)) = x)))

type us_split_discrs = { rec__parse__parse_result_t__return_code :
return_code_t
}

function us_split_discrs_rec__parse__parse_result_t__return_code__projection(a: us_split_discrs) : return_code_t =
  (a).rec__parse__parse_result_t__return_code

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields4 = { rec__parse__parse_result_t__header : us_rep1
}

function us_split_fields_rec__parse__parse_result_t__header__projection(a: us_split_fields4) : us_rep1 =
  (a).rec__parse__parse_result_t__header

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs1 : us_split_discrs; us_split_fields5 :
us_split_fields4
}

function us_rep___split_discrs__projection(a: us_rep2) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__2__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

predicate parse__parse_result_t__header__pred(a: us_rep2) =
  (to_rep4(((a).us_split_discrs1).rec__parse__parse_result_t__return_code) = 0)

function bool_eq11(a: us_rep2, b: us_rep2) : bool =
  (if ((to_rep4(((a).us_split_discrs1).rec__parse__parse_result_t__return_code) = to_rep4(((b).us_split_discrs1).rec__parse__parse_result_t__return_code)) and
  (parse__parse_result_t__header__pred(a) ->
  (bool_eq9(((a).us_split_fields5).rec__parse__parse_result_t__header,
  ((b).us_split_fields5).rec__parse__parse_result_t__header) = true))) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic parse__parse_result_t__return_code__first__bit : int

logic parse__parse_result_t__return_code__last__bit : int

logic parse__parse_result_t__return_code__position : int

axiom parse__parse_result_t__return_code__first__bit_axiom :
  (0 <= parse__parse_result_t__return_code__first__bit)

axiom parse__parse_result_t__return_code__last__bit_axiom :
  (parse__parse_result_t__return_code__first__bit <  parse__parse_result_t__return_code__last__bit)

axiom parse__parse_result_t__return_code__position_axiom :
  (0 <= parse__parse_result_t__return_code__position)

logic parse__parse_result_t__header__first__bit : int

logic parse__parse_result_t__header__last__bit : int

logic parse__parse_result_t__header__position : int

axiom parse__parse_result_t__header__first__bit_axiom :
  (0 <= parse__parse_result_t__header__first__bit)

axiom parse__parse_result_t__header__last__bit_axiom :
  (parse__parse_result_t__header__first__bit <  parse__parse_result_t__header__last__bit)

axiom parse__parse_result_t__header__position_axiom :
  (0 <= parse__parse_result_t__header__position)

logic user_eq7 : us_rep2, us_rep2 -> bool

logic dummy7 : us_rep2

type parse_result_t__ref = { parse_result_t__content : us_rep2
}

function parse_result_t__ref_parse_result_t__content__projection(a: parse_result_t__ref) : us_rep2 =
  (a).parse_result_t__content

logic result____attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate default_initial_assumption(temp___expr_201: us_rep2,
  temp___skip_top_level_202: bool) =
  (to_rep4(((temp___expr_201).us_split_discrs1).rec__parse__parse_result_t__return_code) = 1)

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic extract_unsigned_16 : (int,us_rep) farray, int -> t1

logic extract_unsigned_16__function_guard : t1, (int,us_rep) farray,
  int -> prop

logic rliteral : t1

axiom rliteral_axiom : (tqtint1(rliteral) = 0)

logic rliteral1 : t1

axiom rliteral_axiom1 : (tqtint1(rliteral1) = 65535)

predicate dynamic_invariant(temp___expr_168: t1, temp___is_init_164: bool,
  temp___skip_constant_165: bool, temp___do_toplevel_166: bool,
  temp___do_typ_inv_167: bool) = true

type network_dns_query_range

logic network_dns_query_rangeqtint : network_dns_query_range -> int

axiom network_dns_query_rangeqtaxiom :
  (forall i:network_dns_query_range. (0 <= network_dns_query_rangeqtint(i)))

axiom network_dns_query_rangeqtaxiom1 :
  (forall i:network_dns_query_range.
  (network_dns_query_rangeqtint(i) <= 512))

predicate in_range4(x: int) = ((0 <= x) and (x <= 512))

function bool_eq12(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : network_dns_query_range, network_dns_query_range -> bool

logic dummy8 : network_dns_query_range

type network_dns_query_range__ref = { network_dns_query_range__content :
network_dns_query_range
}

function network_dns_query_range__ref_network_dns_query_range__content__projection(a: network_dns_query_range__ref) : network_dns_query_range =
  (a).network_dns_query_range__content

predicate dynamic_invariant1(temp___expr_212: int, temp___is_init_208: bool,
  temp___skip_constant_209: bool, temp___do_toplevel_210: bool,
  temp___do_typ_inv_211: bool) = (((temp___is_init_208 = true) or
  (0 <= 512)) -> in_range4(temp___expr_212))

axiom extract_unsigned_16__post_axiom :
  (forall query1:(int,us_rep) farray.
  (forall offset:int [extract_unsigned_16(query1, offset)].
  ((dynamic_invariant1(offset, true, true, true, true) and
  (offset <= 511)) -> (let result = extract_unsigned_16(query1, offset)
  : t1 in (extract_unsigned_16__function_guard(result, query1, offset) ->
  dynamic_invariant(result, true, false, true, true))))))

logic extract_bits_of_octet : (int,us_rep) farray, int, int, t -> t

logic extract_bits_of_octet__function_guard : t, (int,us_rep) farray, int,
  int, t -> prop

logic rliteral2 : t

axiom rliteral_axiom2 : (tqtint(rliteral2) = 0)

logic rliteral3 : t

axiom rliteral_axiom3 : (tqtint(rliteral3) = 255)

predicate dynamic_invariant2(temp___expr_219: t, temp___is_init_215: bool,
  temp___skip_constant_216: bool, temp___do_toplevel_217: bool,
  temp___do_typ_inv_218: bool) = true

type bit_range

logic bit_rangeqtint : bit_range -> int

axiom bit_rangeqtaxiom : (forall i:bit_range. (0 <= bit_rangeqtint(i)))

axiom bit_rangeqtaxiom1 : (forall i:bit_range. (bit_rangeqtint(i) <= 7))

predicate in_range5(x: int) = ((0 <= x) and (x <= 7))

function bool_eq13(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq9 : bit_range, bit_range -> bool

logic dummy9 : bit_range

type bit_range__ref = { bit_range__content : bit_range
}

function bit_range__ref_bit_range__content__projection(a: bit_range__ref) : bit_range =
  (a).bit_range__content

predicate dynamic_invariant3(temp___expr_249: int, temp___is_init_245: bool,
  temp___skip_constant_246: bool, temp___do_toplevel_247: bool,
  temp___do_typ_inv_248: bool) = (((temp___is_init_245 = true) or
  (0 <= 7)) -> in_range5(temp___expr_249))

axiom extract_bits_of_octet__post_axiom :
  (forall query1:(int,us_rep) farray.
  (forall offset:int. forall bit_shift_right:int.
  (forall bit_mask:t [extract_bits_of_octet(query1, offset, bit_shift_right,
  bit_mask)]. (((dynamic_invariant1(offset, true, true, true, true) and
  dynamic_invariant3(bit_shift_right, true, true, true, true)) and
  dynamic_invariant2(bit_mask, true, true, true, true)) -> (let result =
  extract_bits_of_octet(query1, offset, bit_shift_right, bit_mask) : t in
  (extract_bits_of_octet__function_guard(result, query1, offset,
  bit_shift_right, bit_mask) -> dynamic_invariant2(result, true, false, true,
  true)))))))

logic r2b : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic r6b : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic r10b : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic r14b : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic r18b : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic r22b : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic r26b : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic r30b : int

logic attr__ATTRIBUTE_ADDRESS13 : int

predicate dynamic_invariant4(temp___expr_161: int, temp___is_init_157: bool,
  temp___skip_constant_158: bool, temp___do_toplevel_159: bool,
  temp___do_typ_inv_160: bool) = (((temp___is_init_157 = true) or
  (0 <= 1)) -> in_range3(temp___expr_161))

predicate in_range6(rec__parse__parse_result_t__return_code1: int,
  a: us_rep2) =
  (rec__parse__parse_result_t__return_code1 = to_rep4(((a).us_split_discrs1).rec__parse__parse_result_t__return_code))

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic parse__parse_result_t__return_code__first__bit1 : int

logic parse__parse_result_t__return_code__last__bit1 : int

logic parse__parse_result_t__return_code__position1 : int

axiom parse__parse_result_t__return_code__first__bit_axiom1 :
  (0 <= parse__parse_result_t__return_code__first__bit1)

axiom parse__parse_result_t__return_code__last__bit_axiom1 :
  (parse__parse_result_t__return_code__first__bit1 <  parse__parse_result_t__return_code__last__bit1)

axiom parse__parse_result_t__return_code__position_axiom1 :
  (0 <= parse__parse_result_t__return_code__position1)

logic parse__parse_result_t__header__first__bit1 : int

logic parse__parse_result_t__header__last__bit1 : int

logic parse__parse_result_t__header__position1 : int

axiom parse__parse_result_t__header__first__bit_axiom1 :
  (0 <= parse__parse_result_t__header__first__bit1)

axiom parse__parse_result_t__header__last__bit_axiom1 :
  (parse__parse_result_t__header__first__bit1 <  parse__parse_result_t__header__last__bit1)

axiom parse__parse_result_t__header__position_axiom1 :
  (0 <= parse__parse_result_t__header__position1)

logic user_eq10 : us_rep2, us_rep2 -> bool

logic dummy10 : us_rep2

type t3b__ref = { t3b__content : us_rep2
}

function t3b__ref_t3b__content__projection(a: t3b__ref) : us_rep2 =
  (a).t3b__content

predicate in_range7(rec__parse__parse_result_t__return_code1: int,
  a: us_rep2) =
  (rec__parse__parse_result_t__return_code1 = to_rep4(((a).us_split_discrs1).rec__parse__parse_result_t__return_code))

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic parse__parse_result_t__return_code__first__bit2 : int

logic parse__parse_result_t__return_code__last__bit2 : int

logic parse__parse_result_t__return_code__position2 : int

axiom parse__parse_result_t__return_code__first__bit_axiom2 :
  (0 <= parse__parse_result_t__return_code__first__bit2)

axiom parse__parse_result_t__return_code__last__bit_axiom2 :
  (parse__parse_result_t__return_code__first__bit2 <  parse__parse_result_t__return_code__last__bit2)

axiom parse__parse_result_t__return_code__position_axiom2 :
  (0 <= parse__parse_result_t__return_code__position2)

logic parse__parse_result_t__header__first__bit2 : int

logic parse__parse_result_t__header__last__bit2 : int

logic parse__parse_result_t__header__position2 : int

axiom parse__parse_result_t__header__first__bit_axiom2 :
  (0 <= parse__parse_result_t__header__first__bit2)

axiom parse__parse_result_t__header__last__bit_axiom2 :
  (parse__parse_result_t__header__first__bit2 <  parse__parse_result_t__header__last__bit2)

axiom parse__parse_result_t__header__position_axiom2 :
  (0 <= parse__parse_result_t__header__position2)

logic user_eq11 : us_rep2, us_rep2 -> bool

logic dummy11 : us_rep2

type t7b__ref = { t7b__content : us_rep2
}

function t7b__ref_t7b__content__projection(a: t7b__ref) : us_rep2 =
  (a).t7b__content

predicate in_range8(rec__parse__parse_result_t__return_code1: int,
  a: us_rep2) =
  (rec__parse__parse_result_t__return_code1 = to_rep4(((a).us_split_discrs1).rec__parse__parse_result_t__return_code))

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic parse__parse_result_t__return_code__first__bit3 : int

logic parse__parse_result_t__return_code__last__bit3 : int

logic parse__parse_result_t__return_code__position3 : int

axiom parse__parse_result_t__return_code__first__bit_axiom3 :
  (0 <= parse__parse_result_t__return_code__first__bit3)

axiom parse__parse_result_t__return_code__last__bit_axiom3 :
  (parse__parse_result_t__return_code__first__bit3 <  parse__parse_result_t__return_code__last__bit3)

axiom parse__parse_result_t__return_code__position_axiom3 :
  (0 <= parse__parse_result_t__return_code__position3)

logic parse__parse_result_t__header__first__bit3 : int

logic parse__parse_result_t__header__last__bit3 : int

logic parse__parse_result_t__header__position3 : int

axiom parse__parse_result_t__header__first__bit_axiom3 :
  (0 <= parse__parse_result_t__header__first__bit3)

axiom parse__parse_result_t__header__last__bit_axiom3 :
  (parse__parse_result_t__header__first__bit3 <  parse__parse_result_t__header__last__bit3)

axiom parse__parse_result_t__header__position_axiom3 :
  (0 <= parse__parse_result_t__header__position3)

logic user_eq12 : us_rep2, us_rep2 -> bool

logic dummy12 : us_rep2

type t11b__ref = { t11b__content : us_rep2
}

function t11b__ref_t11b__content__projection(a: t11b__ref) : us_rep2 =
  (a).t11b__content

predicate in_range9(rec__parse__parse_result_t__return_code1: int,
  a: us_rep2) =
  (rec__parse__parse_result_t__return_code1 = to_rep4(((a).us_split_discrs1).rec__parse__parse_result_t__return_code))

logic value__size6 : int

logic object__size6 : int

logic alignment6 : int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (0 <= object__size6)

axiom alignment_axiom6 : (0 <= alignment6)

logic parse__parse_result_t__return_code__first__bit4 : int

logic parse__parse_result_t__return_code__last__bit4 : int

logic parse__parse_result_t__return_code__position4 : int

axiom parse__parse_result_t__return_code__first__bit_axiom4 :
  (0 <= parse__parse_result_t__return_code__first__bit4)

axiom parse__parse_result_t__return_code__last__bit_axiom4 :
  (parse__parse_result_t__return_code__first__bit4 <  parse__parse_result_t__return_code__last__bit4)

axiom parse__parse_result_t__return_code__position_axiom4 :
  (0 <= parse__parse_result_t__return_code__position4)

logic parse__parse_result_t__header__first__bit4 : int

logic parse__parse_result_t__header__last__bit4 : int

logic parse__parse_result_t__header__position4 : int

axiom parse__parse_result_t__header__first__bit_axiom4 :
  (0 <= parse__parse_result_t__header__first__bit4)

axiom parse__parse_result_t__header__last__bit_axiom4 :
  (parse__parse_result_t__header__first__bit4 <  parse__parse_result_t__header__last__bit4)

axiom parse__parse_result_t__header__position_axiom4 :
  (0 <= parse__parse_result_t__header__position4)

logic user_eq13 : us_rep2, us_rep2 -> bool

logic dummy13 : us_rep2

type t15b__ref = { t15b__content : us_rep2
}

function t15b__ref_t15b__content__projection(a: t15b__ref) : us_rep2 =
  (a).t15b__content

predicate in_range10(rec__parse__parse_result_t__return_code1: int,
  a: us_rep2) =
  (rec__parse__parse_result_t__return_code1 = to_rep4(((a).us_split_discrs1).rec__parse__parse_result_t__return_code))

logic value__size7 : int

logic object__size7 : int

logic alignment7 : int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 : (0 <= object__size7)

axiom alignment_axiom7 : (0 <= alignment7)

logic parse__parse_result_t__return_code__first__bit5 : int

logic parse__parse_result_t__return_code__last__bit5 : int

logic parse__parse_result_t__return_code__position5 : int

axiom parse__parse_result_t__return_code__first__bit_axiom5 :
  (0 <= parse__parse_result_t__return_code__first__bit5)

axiom parse__parse_result_t__return_code__last__bit_axiom5 :
  (parse__parse_result_t__return_code__first__bit5 <  parse__parse_result_t__return_code__last__bit5)

axiom parse__parse_result_t__return_code__position_axiom5 :
  (0 <= parse__parse_result_t__return_code__position5)

logic parse__parse_result_t__header__first__bit5 : int

logic parse__parse_result_t__header__last__bit5 : int

logic parse__parse_result_t__header__position5 : int

axiom parse__parse_result_t__header__first__bit_axiom5 :
  (0 <= parse__parse_result_t__header__first__bit5)

axiom parse__parse_result_t__header__last__bit_axiom5 :
  (parse__parse_result_t__header__first__bit5 <  parse__parse_result_t__header__last__bit5)

axiom parse__parse_result_t__header__position_axiom5 :
  (0 <= parse__parse_result_t__header__position5)

logic user_eq14 : us_rep2, us_rep2 -> bool

logic dummy14 : us_rep2

type t19b__ref = { t19b__content : us_rep2
}

function t19b__ref_t19b__content__projection(a: t19b__ref) : us_rep2 =
  (a).t19b__content

predicate in_range11(rec__parse__parse_result_t__return_code1: int,
  a: us_rep2) =
  (rec__parse__parse_result_t__return_code1 = to_rep4(((a).us_split_discrs1).rec__parse__parse_result_t__return_code))

logic value__size8 : int

logic object__size8 : int

logic alignment8 : int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 : (0 <= object__size8)

axiom alignment_axiom8 : (0 <= alignment8)

logic parse__parse_result_t__return_code__first__bit6 : int

logic parse__parse_result_t__return_code__last__bit6 : int

logic parse__parse_result_t__return_code__position6 : int

axiom parse__parse_result_t__return_code__first__bit_axiom6 :
  (0 <= parse__parse_result_t__return_code__first__bit6)

axiom parse__parse_result_t__return_code__last__bit_axiom6 :
  (parse__parse_result_t__return_code__first__bit6 <  parse__parse_result_t__return_code__last__bit6)

axiom parse__parse_result_t__return_code__position_axiom6 :
  (0 <= parse__parse_result_t__return_code__position6)

logic parse__parse_result_t__header__first__bit6 : int

logic parse__parse_result_t__header__last__bit6 : int

logic parse__parse_result_t__header__position6 : int

axiom parse__parse_result_t__header__first__bit_axiom6 :
  (0 <= parse__parse_result_t__header__first__bit6)

axiom parse__parse_result_t__header__last__bit_axiom6 :
  (parse__parse_result_t__header__first__bit6 <  parse__parse_result_t__header__last__bit6)

axiom parse__parse_result_t__header__position_axiom6 :
  (0 <= parse__parse_result_t__header__position6)

logic user_eq15 : us_rep2, us_rep2 -> bool

logic dummy15 : us_rep2

type t23b__ref = { t23b__content : us_rep2
}

function t23b__ref_t23b__content__projection(a: t23b__ref) : us_rep2 =
  (a).t23b__content

predicate in_range12(rec__parse__parse_result_t__return_code1: int,
  a: us_rep2) =
  (rec__parse__parse_result_t__return_code1 = to_rep4(((a).us_split_discrs1).rec__parse__parse_result_t__return_code))

logic value__size9 : int

logic object__size9 : int

logic alignment9 : int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 : (0 <= object__size9)

axiom alignment_axiom9 : (0 <= alignment9)

logic parse__parse_result_t__return_code__first__bit7 : int

logic parse__parse_result_t__return_code__last__bit7 : int

logic parse__parse_result_t__return_code__position7 : int

axiom parse__parse_result_t__return_code__first__bit_axiom7 :
  (0 <= parse__parse_result_t__return_code__first__bit7)

axiom parse__parse_result_t__return_code__last__bit_axiom7 :
  (parse__parse_result_t__return_code__first__bit7 <  parse__parse_result_t__return_code__last__bit7)

axiom parse__parse_result_t__return_code__position_axiom7 :
  (0 <= parse__parse_result_t__return_code__position7)

logic parse__parse_result_t__header__first__bit7 : int

logic parse__parse_result_t__header__last__bit7 : int

logic parse__parse_result_t__header__position7 : int

axiom parse__parse_result_t__header__first__bit_axiom7 :
  (0 <= parse__parse_result_t__header__first__bit7)

axiom parse__parse_result_t__header__last__bit_axiom7 :
  (parse__parse_result_t__header__first__bit7 <  parse__parse_result_t__header__last__bit7)

axiom parse__parse_result_t__header__position_axiom7 :
  (0 <= parse__parse_result_t__header__position7)

logic user_eq16 : us_rep2, us_rep2 -> bool

logic dummy16 : us_rep2

type t27b__ref = { t27b__content : us_rep2
}

function t27b__ref_t27b__content__projection(a: t27b__ref) : us_rep2 =
  (a).t27b__content

predicate in_range13(rec__parse__parse_result_t__return_code1: int,
  a: us_rep2) =
  (rec__parse__parse_result_t__return_code1 = to_rep4(((a).us_split_discrs1).rec__parse__parse_result_t__return_code))

logic value__size10 : int

logic object__size10 : int

logic alignment10 : int

axiom value__size_axiom10 : (0 <= value__size10)

axiom object__size_axiom10 : (0 <= object__size10)

axiom alignment_axiom10 : (0 <= alignment10)

logic parse__parse_result_t__return_code__first__bit8 : int

logic parse__parse_result_t__return_code__last__bit8 : int

logic parse__parse_result_t__return_code__position8 : int

axiom parse__parse_result_t__return_code__first__bit_axiom8 :
  (0 <= parse__parse_result_t__return_code__first__bit8)

axiom parse__parse_result_t__return_code__last__bit_axiom8 :
  (parse__parse_result_t__return_code__first__bit8 <  parse__parse_result_t__return_code__last__bit8)

axiom parse__parse_result_t__return_code__position_axiom8 :
  (0 <= parse__parse_result_t__return_code__position8)

logic parse__parse_result_t__header__first__bit8 : int

logic parse__parse_result_t__header__last__bit8 : int

logic parse__parse_result_t__header__position8 : int

axiom parse__parse_result_t__header__first__bit_axiom8 :
  (0 <= parse__parse_result_t__header__first__bit8)

axiom parse__parse_result_t__header__last__bit_axiom8 :
  (parse__parse_result_t__header__first__bit8 <  parse__parse_result_t__header__last__bit8)

axiom parse__parse_result_t__header__position_axiom8 :
  (0 <= parse__parse_result_t__header__position8)

logic user_eq17 : us_rep2, us_rep2 -> bool

logic dummy17 : us_rep2

type t31b__ref = { t31b__content : us_rep2
}

function t31b__ref_t31b__content__projection(a: t31b__ref) : us_rep2 =
  (a).t31b__content

predicate dynamic_invariant5(temp___expr_175: int, temp___is_init_171: bool,
  temp___skip_constant_172: bool, temp___do_toplevel_173: bool,
  temp___do_typ_inv_174: bool) = (((temp___is_init_171 = true) or
  (0 <= 1)) -> in_range1(temp___expr_175))

predicate dynamic_invariant6(temp___expr_182: int, temp___is_init_178: bool,
  temp___skip_constant_179: bool, temp___do_toplevel_180: bool,
  temp___do_typ_inv_181: bool) = (((temp___is_init_178 = true) or
  (1 <= 16)) -> in_range2(temp___expr_182))

logic rliteral4 : t

axiom rliteral_axiom4 : (tqtint(rliteral4) = 1)

logic rliteral5 : t

axiom rliteral_axiom5 : (tqtint(rliteral5) = 15)

logic rliteral6 : t

axiom rliteral_axiom6 : (tqtint(rliteral6) = 6)

logic rliteral7 : t1

axiom rliteral_axiom7 : (tqtint1(rliteral7) = 1)

logic rliteral8 : t1

axiom rliteral_axiom8 : (tqtint1(rliteral8) = 16)

 (* File "parse.ads", line 15, characters 0-0 *)
goal defqtvc :
  (forall result____split_discrs:return_code_t. forall opcode:t.
  forall qdcount:t1. forall count:t1.
  forall header__split_fields:us_split_fields2.
  ((not (result____attr__constrained = true)) -> (dynamic_invariant2(opcode,
  false, false, true, true) -> (dynamic_invariant(qdcount, false, false,
  true, true) -> (dynamic_invariant(count, false, false, true, true) ->
  (let o = query : (int,us_rep) farray in (let o1 = extract_unsigned_16(o, 0)
  : t1 in ((extract_unsigned_16__function_guard(o1, o, 0) and
  dynamic_invariant(o1, true, false, true, true)) ->
  (forall o2:unsigned_16. ((to_rep1(o2) = o1) ->
  (forall header__split_fields1:us_split_fields2. ((header__split_fields1 = {
  rec__types__query_header__id = o2; rec__types__query_header__opcode =
  (header__split_fields).rec__types__query_header__opcode;
  rec__types__query_header__qdcount =
  (header__split_fields).rec__types__query_header__qdcount }) -> (let o3 =
  query : (int,us_rep) farray in (let o4 = extract_bits_of_octet(o3, 2, 7,
  rliteral4) : t in ((extract_bits_of_octet__function_guard(o4, o3, 2, 7,
  rliteral4) and dynamic_invariant2(o4, true, false, true, true)) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (not (o4 = rliteral2)) then true else false)) ->
  ((not (spark__branch = true)) -> (let o5 = query : (int,us_rep) farray in
  (let o6 = extract_bits_of_octet(o5, 2, 3, rliteral5) : t in
  ((extract_bits_of_octet__function_guard(o6, o5, 2, 3, rliteral5) and
  dynamic_invariant2(o6, true, false, true, true)) ->
  (forall opcode1:t. ((opcode1 = o6) ->
  (forall spark__branch1:bool. forall header__split_fields2:us_split_fields2.
  ((exists spark__branch2:bool.
   ((spark__branch2 = (if (opcode1 = rliteral2) then true else false)) and
   (if (spark__branch2 = true) then ((exists o7:query_opcode.
                                     ((to_rep2(o7) = 0) and
                                     (header__split_fields2 = {
                                     rec__types__query_header__id =
                                     (header__split_fields1).rec__types__query_header__id;
                                     rec__types__query_header__opcode = o7;
                                     rec__types__query_header__qdcount =
                                     (header__split_fields1).rec__types__query_header__qdcount
                                     }))) and
   (spark__branch1 = spark__branch2)) else ((spark__branch1 = (if (opcode1 = rliteral4) then true else false)) and
   ((spark__branch1 = true) and
   (exists o7:query_opcode. ((to_rep2(o7) = 1) and (header__split_fields2 = {
   rec__types__query_header__id =
   (header__split_fields1).rec__types__query_header__id;
   rec__types__query_header__opcode = o7; rec__types__query_header__qdcount =
   (header__split_fields1).rec__types__query_header__qdcount })))))))) ->
  (forall o7:t.
  ((to_rep((((query[3])).us_split_fields1).rec__types__octet__data) = o7) ->
  (let o8 = query : (int,us_rep) farray in (let o9 =
  extract_bits_of_octet(o8, 2, 0, rliteral6) : t in
  ((extract_bits_of_octet__function_guard(o9, o8, 2, 0, rliteral6) and
  dynamic_invariant2(o9, true, false, true, true)) ->
  (forall spark__branch2:bool.
  ((spark__branch2 = orb((if (not (o9 = rliteral2)) then true else false),
  (if (not (o7 = rliteral2)) then true else false))) ->
  ((not (spark__branch2 = true)) -> (let o10 = query : (int,us_rep) farray in
  (let o11 = extract_unsigned_16(o10, 4) : t1 in
  ((extract_unsigned_16__function_guard(o11, o10, 4) and
  dynamic_invariant(o11, true, false, true, true)) ->
  (forall qdcount1:t1. ((qdcount1 = o11) ->
  (forall spark__branch3:bool. ((spark__branch3 = andb((if uge1(qdcount1,
  rliteral7) then true else false), (if ule1(qdcount1,
  rliteral8) then true else false))) -> ((spark__branch3 = true) ->
  (let o12 = tqtint1(qdcount1) : int in (in_range2(o12) ->
  (forall o13:qdcount_range. ((to_rep3(o13) = o12) ->
  (forall header__split_fields3:us_split_fields2. ((header__split_fields3 = {
  rec__types__query_header__id =
  (header__split_fields2).rec__types__query_header__id;
  rec__types__query_header__opcode =
  (header__split_fields2).rec__types__query_header__opcode;
  rec__types__query_header__qdcount = o13 }) -> (let o14 = query
  : (int,us_rep) farray in (let o15 = extract_unsigned_16(o14, 6) : t1 in
  ((extract_unsigned_16__function_guard(o15, o14, 6) and
  dynamic_invariant(o15, true, false, true, true)) ->
  (forall count1:t1. ((count1 = o15) ->
  (forall spark__branch4:bool.
  ((spark__branch4 = (if (not (count1 = rliteral)) then true else false)) ->
  ((not (spark__branch4 = true)) -> (let o16 = query : (int,us_rep) farray in
  (let o17 = extract_unsigned_16(o16, 8) : t1 in
  ((extract_unsigned_16__function_guard(o17, o16, 8) and
  dynamic_invariant(o17, true, false, true, true)) ->
  (forall count2:t1. ((count2 = o17) ->
  (forall spark__branch5:bool.
  ((spark__branch5 = (if (not (count2 = rliteral)) then true else false)) ->
  ((spark__branch5 = true) ->
  (forall parse__parse_header__R22b__assume:int.
  ((to_rep4(result____split_discrs) = parse__parse_header__R22b__assume) ->
  ((parse__parse_header__R22b__assume = r22b) -> (dynamic_invariant4(r22b,
  true, false, true, true) ->
  (forall o18:return_code_t. ((to_rep4(o18) = 1) ->
  ((result____attr__constrained = true) -> (o18 = result____split_discrs)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
