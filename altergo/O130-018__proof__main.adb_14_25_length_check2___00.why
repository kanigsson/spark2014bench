(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)]))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq4(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq2 : us_t, us_t -> bool

logic dummy2 : us_t

type array_type__ref = { array_type__content : us_t
}

function array_type__ref_array_type__content__projection(a: array_type__ref) : us_t =
  (a).array_type__content

type t4b__ref = { t4b__content : us_t
}

function t4b__ref_t4b__content__projection(a: t4b__ref) : us_t =
  (a).t4b__content

type us_split_discrs = { rec__main__branch_type__m_height : natural
}

function us_split_discrs_rec__main__branch_type__m_height__projection(a: us_split_discrs) : natural =
  (a).rec__main__branch_type__m_height

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__main__branch_type__m_nodes : us_t
}

function us_split_fields_rec__main__branch_type__m_nodes__projection(a: us_split_fields) : us_t =
  (a).rec__main__branch_type__m_nodes

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq5(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__main__branch_type__m_height) = to_rep(((b).us_split_discrs1).rec__main__branch_type__m_height)) and
  (bool_eq4(((a).us_split_fields1).rec__main__branch_type__m_nodes,
  ((b).us_split_fields1).rec__main__branch_type__m_nodes) = true)) then true else false)

predicate in_range3(rec__main__branch_type__m_height1: int,
  a: us_split_discrs) =
  (rec__main__branch_type__m_height1 = to_rep((a).rec__main__branch_type__m_height))

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic main__branch_type__m_height__first__bit : int

logic main__branch_type__m_height__last__bit : int

logic main__branch_type__m_height__position : int

axiom main__branch_type__m_height__first__bit_axiom :
  (0 <= main__branch_type__m_height__first__bit)

axiom main__branch_type__m_height__last__bit_axiom :
  (main__branch_type__m_height__first__bit <  main__branch_type__m_height__last__bit)

axiom main__branch_type__m_height__position_axiom :
  (0 <= main__branch_type__m_height__position)

logic main__branch_type__m_nodes__first__bit : int

logic main__branch_type__m_nodes__last__bit : int

logic main__branch_type__m_nodes__position : int

axiom main__branch_type__m_nodes__first__bit_axiom :
  (0 <= main__branch_type__m_nodes__first__bit)

axiom main__branch_type__m_nodes__last__bit_axiom :
  (main__branch_type__m_nodes__first__bit <  main__branch_type__m_nodes__last__bit)

axiom main__branch_type__m_nodes__position_axiom :
  (0 <= main__branch_type__m_nodes__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type branch_type__ref = { branch_type__content : us_rep
}

function branch_type__ref_branch_type__content__projection(a: branch_type__ref) : us_rep =
  (a).branch_type__content

logic branch__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS : int

predicate dynamic_invariant2(temp___expr_186: us_rep,
  temp___is_init_182: bool, temp___skip_constant_183: bool,
  temp___do_toplevel_184: bool, temp___do_typ_inv_185: bool) =
  (let temp___187 =
  ((temp___expr_186).us_split_discrs1).rec__main__branch_type__m_height
  : natural in (dynamic_property(0, to_rep(temp___187),
  first1(((temp___expr_186).us_split_fields1).rec__main__branch_type__m_nodes),
  last1(((temp___expr_186).us_split_fields1).rec__main__branch_type__m_nodes)) and
  ((first1(((temp___expr_186).us_split_fields1).rec__main__branch_type__m_nodes) = 0) and
  (last1(((temp___expr_186).us_split_fields1).rec__main__branch_type__m_nodes) = to_rep(temp___187)))))

logic r7b : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic r10b : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic r12b : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type s6b__ref = { s6b__content : us_t
}

function s6b__ref_s6b__content__projection(a: s6b__ref) : us_t =
  (a).s6b__content

type t9b__ref = { t9b__content : us_t
}

function t9b__ref_t9b__content__projection(a: t9b__ref) : us_t =
  (a).t9b__content

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy4 : integer

type t11b__ref = { t11b__content : integer
}

function t11b__ref_t11b__content__projection(a: t11b__ref) : integer =
  (a).t11b__content

logic temp_____aggregate_def_201 : int, int, int -> us_t

predicate dynamic_invariant3(temp___expr_180: us_t, temp___is_init_176: bool,
  temp___skip_constant_177: bool, temp___do_toplevel_178: bool,
  temp___do_typ_inv_179: bool) = ((not (temp___skip_constant_177 = true)) ->
  dynamic_property(0, 2147483647, first1(temp___expr_180),
  last1(temp___expr_180)))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 0)

axiom def_axiom :
  (forall temp___203:int. forall temp___204:int. forall temp___205:int.
  (dynamic_invariant1(temp___203, true, true, true, true) ->
  (dynamic_property(0, 2147483647, temp___204, temp___205) ->
  (first1(temp_____aggregate_def_201(temp___203, temp___204,
  temp___205)) = temp___204))))

axiom def_axiom1 :
  (forall temp___203:int. forall temp___204:int. forall temp___205:int.
  (dynamic_invariant1(temp___203, true, true, true, true) ->
  (dynamic_property(0, 2147483647, temp___204, temp___205) ->
  (last1(temp_____aggregate_def_201(temp___203, temp___204,
  temp___205)) = temp___205))))

axiom def_axiom2 :
  (forall temp___203:int. forall temp___204:int. forall temp___205:int.
  (dynamic_invariant1(temp___203, true, true, true, true) ->
  (forall temp___206:int. ((to_array(temp_____aggregate_def_201(temp___203,
  temp___204, temp___205))[temp___206]) = rliteral))))

predicate dynamic_invariant4(temp___expr_193: us_t, temp___is_init_189: bool,
  temp___skip_constant_190: bool, temp___do_toplevel_191: bool,
  temp___do_typ_inv_192: bool) = ((not (temp___skip_constant_190 = true)) ->
  (dynamic_property(0, r7b, first1(temp___expr_193),
  last1(temp___expr_193)) and ((first1(temp___expr_193) = 0) and
  (last1(temp___expr_193) = r7b))))

predicate default_initial_assumption(temp___expr_195: us_t,
  temp___skip_top_level_196: bool) = ((first1(temp___expr_195) = 0) and
  (last1(temp___expr_195) = r7b))

 (* File "main.adb", line 10, characters 0-0 *)
goal defqtvc :
  (forall branch__split_fields:us_t. (dynamic_invariant2({ us_split_discrs1 =
  branch__split_discrs; us_split_fields1 = {
  rec__main__branch_type__m_nodes = branch__split_fields } }, false, false,
  true, true) ->
  (forall main__create_empty_branch__R7b__assume:int.
  ((to_rep((branch__split_discrs).rec__main__branch_type__m_height) = main__create_empty_branch__R7b__assume) ->
  ((main__create_empty_branch__R7b__assume = r7b) -> (dynamic_invariant(r7b,
  true, false, true, true) -> (let temp___207 = temp_____aggregate_def_201(0,
  0, r7b) : us_t in ((first1(temp___207) = 0) ->
  ((last1(temp___207) = r7b) -> ((first1(temp___207) <= last1(temp___207)) ->
  (0 <= r7b)))))))))))
