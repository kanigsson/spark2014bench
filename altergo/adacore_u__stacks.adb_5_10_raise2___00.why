(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_39))

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type length_type

logic length_typeqtint : length_type -> int

axiom length_typeqtaxiom : (forall i:length_type. (0 <= length_typeqtint(i)))

axiom length_typeqtaxiom1 :
  (forall i:length_type. (length_typeqtint(i) <= 100))

predicate in_range1(x: int) = ((0 <= x) and (x <= 100))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : length_type, length_type -> bool

logic dummy1 : length_type

type length_type__ref = { length_type__content : length_type
}

function length_type__ref_length_type__content__projection(a: length_type__ref) : length_type =
  (a).length_type__content

function to_rep1(x: length_type) : int = length_typeqtint(x)

logic of_rep1 : int -> length_type

axiom inversion_axiom1 :
  (forall x:length_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:length_type [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,natural) farray, a__first: int, a__last: int,
  b: (int,natural) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic dummy2 : (int,natural) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq2 : (int,natural) farray, (int,natural) farray -> bool

type us_split_fields = { rec__stacks__stack__top : length_type;
rec__stacks__stack__content : (int,natural) farray
}

function us_split_fields_rec__stacks__stack__top__projection(a: us_split_fields) : length_type =
  (a).rec__stacks__stack__top

function us_split_fields_rec__stacks__stack__content__projection(a: us_split_fields) : (int,natural) farray =
  (a).rec__stacks__stack__content

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if ((to_rep1(((a).us_split_fields1).rec__stacks__stack__top) = to_rep1(((b).us_split_fields1).rec__stacks__stack__top)) and
  (bool_eq2(((a).us_split_fields1).rec__stacks__stack__content, 1, 100,
  ((b).us_split_fields1).rec__stacks__stack__content, 1,
  100) = true)) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic stacks__stack__top__first__bit : int

logic stacks__stack__top__last__bit : int

logic stacks__stack__top__position : int

axiom stacks__stack__top__first__bit_axiom :
  (0 <= stacks__stack__top__first__bit)

axiom stacks__stack__top__last__bit_axiom :
  (stacks__stack__top__first__bit <  stacks__stack__top__last__bit)

axiom stacks__stack__top__position_axiom :
  (0 <= stacks__stack__top__position)

logic stacks__stack__content__first__bit : int

logic stacks__stack__content__last__bit : int

logic stacks__stack__content__position : int

axiom stacks__stack__content__first__bit_axiom :
  (0 <= stacks__stack__content__first__bit)

axiom stacks__stack__content__last__bit_axiom :
  (stacks__stack__content__first__bit <  stacks__stack__content__last__bit)

axiom stacks__stack__content__position_axiom :
  (0 <= stacks__stack__content__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type stack__ref = { stack__content : us_rep
}

function stack__ref_stack__content__projection(a: stack__ref) : us_rep =
  (a).stack__content

logic attr__ATTRIBUTE_ADDRESS : int

logic e : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic is_full : us_rep -> bool

logic is_full__function_guard : bool, us_rep -> prop

axiom is_full__def_axiom :
  (forall s:us_rep [is_full(s)]. ((is_full(s) = true) ->
  (100 <= to_rep1(((s).us_split_fields1).rec__stacks__stack__top))))

axiom is_full__def_axiom1 :
  (forall s:us_rep [is_full(s)].
  ((100 <= to_rep1(((s).us_split_fields1).rec__stacks__stack__top)) ->
  (is_full(s) = true)))

logic peek : us_rep -> int

logic peek__function_guard : int, us_rep -> prop

axiom peek__post_axiom :
  (forall s:us_rep [peek(s)]. (let result = peek(s) : int in
  (peek__function_guard(result, s) -> dynamic_invariant(result, true, false,
  true, true))))

axiom peek__def_axiom :
  (forall s:us_rep [peek(s)].
  (peek(s) = (if ((1 <= to_rep1(((s).us_split_fields1).rec__stacks__stack__top)) and
  (to_rep1(((s).us_split_fields1).rec__stacks__stack__top) <= 100)) then to_rep((((s).us_split_fields1).rec__stacks__stack__content[to_rep1(((s).us_split_fields1).rec__stacks__stack__top)])) else 0)))

type t5s

logic t5sqtint : t5s -> int

axiom t5sqtaxiom : (forall i:t5s. (1 <= t5sqtint(i)))

axiom t5sqtaxiom1 : (forall i:t5s. (t5sqtint(i) <= 100))

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq4 : t5s, t5s -> bool

logic dummy4 : t5s

type t5s__ref = { t5s__content : t5s
}

function t5s__ref_t5s__content__projection(a: t5s__ref) : t5s =
  (a).t5s__content

predicate dynamic_invariant1(temp___expr_161: int, temp___is_init_157: bool,
  temp___skip_constant_158: bool, temp___do_toplevel_159: bool,
  temp___do_typ_inv_160: bool) = (((temp___is_init_157 = true) or
  (0 <= 100)) -> in_range1(temp___expr_161))

 (* File "stacks.ads", line 6, characters 0-0 *)
goal defqtvc :
  (forall s__split_fields:us_split_fields. (dynamic_invariant(e, true, false,
  true, true) ->
  ((forall s__split_fields1:us_split_fields.
   is_full__function_guard(is_full({ us_split_fields1 = s__split_fields1 }),
   { us_split_fields1 = s__split_fields1 })) ->
  ((not (is_full({ us_split_fields1 = s__split_fields }) = true)) ->
  (forall o:int. ((to_rep1((s__split_fields).rec__stacks__stack__top) = o) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (100 <= o) then true else false)) ->
  (not (spark__branch = true))))))))))
