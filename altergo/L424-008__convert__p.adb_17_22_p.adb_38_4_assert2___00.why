(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq1(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

type tTmy_s1SP1

logic tTmy_s1SP1qtint : tTmy_s1SP1 -> int

axiom tTmy_s1SP1qtaxiom : (forall i:tTmy_s1SP1. (1 <= tTmy_s1SP1qtint(i)))

axiom tTmy_s1SP1qtaxiom1 : (forall i:tTmy_s1SP1. (tTmy_s1SP1qtint(i) <= 3))

predicate in_range1(x: int) = ((1 <= x) and (x <= 3))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : tTmy_s1SP1, tTmy_s1SP1 -> bool

logic dummy1 : tTmy_s1SP1

type tTmy_s1SP1__ref = { tTmy_s1SP1__content : tTmy_s1SP1
}

function tTmy_s1SP1__ref_tTmy_s1SP1__content__5__projection(a: tTmy_s1SP1__ref) : tTmy_s1SP1 =
  (a).tTmy_s1SP1__content

type tTmy_s2SP1

logic tTmy_s2SP1qtint : tTmy_s2SP1 -> int

axiom tTmy_s2SP1qtaxiom : (forall i:tTmy_s2SP1. (2 <= tTmy_s2SP1qtint(i)))

axiom tTmy_s2SP1qtaxiom1 : (forall i:tTmy_s2SP1. (tTmy_s2SP1qtint(i) <= 4))

predicate in_range2(x: int) = ((2 <= x) and (x <= 4))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : tTmy_s2SP1, tTmy_s2SP1 -> bool

logic dummy2 : tTmy_s2SP1

type tTmy_s2SP1__ref = { tTmy_s2SP1__content : tTmy_s2SP1
}

function tTmy_s2SP1__ref_tTmy_s2SP1__content__5__projection(a: tTmy_s2SP1__ref) : tTmy_s2SP1 =
  (a).tTmy_s2SP1__content

type tTmy_s1SP11

logic tTmy_s1SP1qtint1 : tTmy_s1SP11 -> int

axiom tTmy_s1SP1qtaxiom2 : (forall i:tTmy_s1SP11. (1 <= tTmy_s1SP1qtint1(i)))

axiom tTmy_s1SP1qtaxiom3 : (forall i:tTmy_s1SP11. (tTmy_s1SP1qtint1(i) <= 3))

predicate in_range3(x: int) = ((1 <= x) and (x <= 3))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : tTmy_s1SP11, tTmy_s1SP11 -> bool

logic dummy3 : tTmy_s1SP11

type tTmy_s1SP1__ref1 = { tTmy_s1SP1__content1 : tTmy_s1SP11
}

function tTmy_s1SP1__ref_tTmy_s1SP1__content__6__projection(a: tTmy_s1SP1__ref1) : tTmy_s1SP11 =
  (a).tTmy_s1SP1__content1

type tTmy_s2SP11

logic tTmy_s2SP1qtint1 : tTmy_s2SP11 -> int

axiom tTmy_s2SP1qtaxiom2 : (forall i:tTmy_s2SP11. (2 <= tTmy_s2SP1qtint1(i)))

axiom tTmy_s2SP1qtaxiom3 : (forall i:tTmy_s2SP11. (tTmy_s2SP1qtint1(i) <= 4))

predicate in_range4(x: int) = ((2 <= x) and (x <= 4))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : tTmy_s2SP11, tTmy_s2SP11 -> bool

logic dummy4 : tTmy_s2SP11

type tTmy_s2SP1__ref1 = { tTmy_s2SP1__content1 : tTmy_s2SP11
}

function tTmy_s2SP1__ref_tTmy_s2SP1__content__6__projection(a: tTmy_s2SP1__ref1) : tTmy_s2SP11 =
  (a).tTmy_s2SP1__content1

type tTmy_s1SP12

logic tTmy_s1SP1qtint2 : tTmy_s1SP12 -> int

axiom tTmy_s1SP1qtaxiom4 : (forall i:tTmy_s1SP12. (1 <= tTmy_s1SP1qtint2(i)))

axiom tTmy_s1SP1qtaxiom5 : (forall i:tTmy_s1SP12. (tTmy_s1SP1qtint2(i) <= 3))

predicate in_range5(x: int) = ((1 <= x) and (x <= 3))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : tTmy_s1SP12, tTmy_s1SP12 -> bool

logic dummy5 : tTmy_s1SP12

type tTmy_s1SP1__ref2 = { tTmy_s1SP1__content2 : tTmy_s1SP12
}

function tTmy_s1SP1__ref_tTmy_s1SP1__content__7__projection(a: tTmy_s1SP1__ref2) : tTmy_s1SP12 =
  (a).tTmy_s1SP1__content2

type tTmy_s2SP12

logic tTmy_s2SP1qtint2 : tTmy_s2SP12 -> int

axiom tTmy_s2SP1qtaxiom4 : (forall i:tTmy_s2SP12. (2 <= tTmy_s2SP1qtint2(i)))

axiom tTmy_s2SP1qtaxiom5 : (forall i:tTmy_s2SP12. (tTmy_s2SP1qtint2(i) <= 4))

predicate in_range6(x: int) = ((2 <= x) and (x <= 4))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : tTmy_s2SP12, tTmy_s2SP12 -> bool

logic dummy6 : tTmy_s2SP12

type tTmy_s2SP1__ref2 = { tTmy_s2SP1__content2 : tTmy_s2SP12
}

function tTmy_s2SP1__ref_tTmy_s2SP1__content__7__projection(a: tTmy_s2SP1__ref2) : tTmy_s2SP12 =
  (a).tTmy_s2SP1__content2

type tTmy_s1SP13

logic tTmy_s1SP1qtint3 : tTmy_s1SP13 -> int

axiom tTmy_s1SP1qtaxiom6 : (forall i:tTmy_s1SP13. (1 <= tTmy_s1SP1qtint3(i)))

axiom tTmy_s1SP1qtaxiom7 : (forall i:tTmy_s1SP13. (tTmy_s1SP1qtint3(i) <= 3))

predicate in_range7(x: int) = ((1 <= x) and (x <= 3))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : tTmy_s1SP13, tTmy_s1SP13 -> bool

logic dummy7 : tTmy_s1SP13

type tTmy_s1SP1__ref3 = { tTmy_s1SP1__content3 : tTmy_s1SP13
}

function tTmy_s1SP1__ref_tTmy_s1SP1__content__8__projection(a: tTmy_s1SP1__ref3) : tTmy_s1SP13 =
  (a).tTmy_s1SP1__content3

type tTmy_s2SP13

logic tTmy_s2SP1qtint3 : tTmy_s2SP13 -> int

axiom tTmy_s2SP1qtaxiom6 : (forall i:tTmy_s2SP13. (2 <= tTmy_s2SP1qtint3(i)))

axiom tTmy_s2SP1qtaxiom7 : (forall i:tTmy_s2SP13. (tTmy_s2SP1qtint3(i) <= 4))

predicate in_range8(x: int) = ((2 <= x) and (x <= 4))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : tTmy_s2SP13, tTmy_s2SP13 -> bool

logic dummy8 : tTmy_s2SP13

type tTmy_s2SP1__ref3 = { tTmy_s2SP1__content3 : tTmy_s2SP13
}

function tTmy_s2SP1__ref_tTmy_s2SP1__content__8__projection(a: tTmy_s2SP1__ref3) : tTmy_s2SP13 =
  (a).tTmy_s2SP1__content3

logic p__B19b__my_s1__aggregate_def : int, int, int -> (int,integer) farray

logic p__B22b__my_s1__aggregate_def : int, int, int -> (int,integer) farray

logic p__B25b__my_s1__aggregate_def : int, int, int -> (int,integer) farray

logic p__B28b__my_s1__aggregate_def : int, int, int -> (int,integer) farray

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 1)

logic rliteral1 : integer

axiom rliteral_axiom1 : (integerqtint(rliteral1) = 2)

logic rliteral2 : integer

axiom rliteral_axiom2 : (integerqtint(rliteral2) = 3)

axiom def_axiom :
  (forall temp___343:int. forall temp___344:int. forall temp___345:int.
  (((dynamic_invariant(temp___343, true, true, true, true) and
  dynamic_invariant(temp___344, true, true, true, true)) and
  dynamic_invariant(temp___345, true, true, true, true)) ->
  ((p__B19b__my_s1__aggregate_def(temp___343, temp___344,
  temp___345)[1]) = rliteral)))

axiom def_axiom1 :
  (forall temp___343:int. forall temp___344:int. forall temp___345:int.
  (((dynamic_invariant(temp___343, true, true, true, true) and
  dynamic_invariant(temp___344, true, true, true, true)) and
  dynamic_invariant(temp___345, true, true, true, true)) ->
  ((p__B19b__my_s1__aggregate_def(temp___343, temp___344,
  temp___345)[2]) = rliteral1)))

axiom def_axiom2 :
  (forall temp___343:int. forall temp___344:int. forall temp___345:int.
  (((dynamic_invariant(temp___343, true, true, true, true) and
  dynamic_invariant(temp___344, true, true, true, true)) and
  dynamic_invariant(temp___345, true, true, true, true)) ->
  ((p__B19b__my_s1__aggregate_def(temp___343, temp___344,
  temp___345)[3]) = rliteral2)))

axiom def_axiom3 :
  (forall temp___348:int. forall temp___349:int. forall temp___350:int.
  (((dynamic_invariant(temp___348, true, true, true, true) and
  dynamic_invariant(temp___349, true, true, true, true)) and
  dynamic_invariant(temp___350, true, true, true, true)) ->
  ((p__B22b__my_s1__aggregate_def(temp___348, temp___349,
  temp___350)[1]) = rliteral)))

axiom def_axiom4 :
  (forall temp___348:int. forall temp___349:int. forall temp___350:int.
  (((dynamic_invariant(temp___348, true, true, true, true) and
  dynamic_invariant(temp___349, true, true, true, true)) and
  dynamic_invariant(temp___350, true, true, true, true)) ->
  ((p__B22b__my_s1__aggregate_def(temp___348, temp___349,
  temp___350)[2]) = rliteral1)))

axiom def_axiom5 :
  (forall temp___348:int. forall temp___349:int. forall temp___350:int.
  (((dynamic_invariant(temp___348, true, true, true, true) and
  dynamic_invariant(temp___349, true, true, true, true)) and
  dynamic_invariant(temp___350, true, true, true, true)) ->
  ((p__B22b__my_s1__aggregate_def(temp___348, temp___349,
  temp___350)[3]) = rliteral2)))

axiom def_axiom6 :
  (forall temp___353:int. forall temp___354:int. forall temp___355:int.
  (((dynamic_invariant(temp___353, true, true, true, true) and
  dynamic_invariant(temp___354, true, true, true, true)) and
  dynamic_invariant(temp___355, true, true, true, true)) ->
  ((p__B25b__my_s1__aggregate_def(temp___353, temp___354,
  temp___355)[1]) = rliteral)))

axiom def_axiom7 :
  (forall temp___353:int. forall temp___354:int. forall temp___355:int.
  (((dynamic_invariant(temp___353, true, true, true, true) and
  dynamic_invariant(temp___354, true, true, true, true)) and
  dynamic_invariant(temp___355, true, true, true, true)) ->
  ((p__B25b__my_s1__aggregate_def(temp___353, temp___354,
  temp___355)[2]) = rliteral1)))

axiom def_axiom8 :
  (forall temp___353:int. forall temp___354:int. forall temp___355:int.
  (((dynamic_invariant(temp___353, true, true, true, true) and
  dynamic_invariant(temp___354, true, true, true, true)) and
  dynamic_invariant(temp___355, true, true, true, true)) ->
  ((p__B25b__my_s1__aggregate_def(temp___353, temp___354,
  temp___355)[3]) = rliteral2)))

axiom def_axiom9 :
  (forall temp___358:int. forall temp___359:int. forall temp___360:int.
  (((dynamic_invariant(temp___358, true, true, true, true) and
  dynamic_invariant(temp___359, true, true, true, true)) and
  dynamic_invariant(temp___360, true, true, true, true)) ->
  ((p__B28b__my_s1__aggregate_def(temp___358, temp___359,
  temp___360)[1]) = rliteral)))

axiom def_axiom10 :
  (forall temp___358:int. forall temp___359:int. forall temp___360:int.
  (((dynamic_invariant(temp___358, true, true, true, true) and
  dynamic_invariant(temp___359, true, true, true, true)) and
  dynamic_invariant(temp___360, true, true, true, true)) ->
  ((p__B28b__my_s1__aggregate_def(temp___358, temp___359,
  temp___360)[2]) = rliteral1)))

axiom def_axiom11 :
  (forall temp___358:int. forall temp___359:int. forall temp___360:int.
  (((dynamic_invariant(temp___358, true, true, true, true) and
  dynamic_invariant(temp___359, true, true, true, true)) and
  dynamic_invariant(temp___360, true, true, true, true)) ->
  ((p__B28b__my_s1__aggregate_def(temp___358, temp___359,
  temp___360)[3]) = rliteral2)))

 (* File "p.adb", line 1, characters 0-0 *)
goal defqtvc :
  (forall my_s1:(int,integer) farray.
  ((my_s1 = p__B19b__my_s1__aggregate_def(1, 2, 3)) ->
  (forall my_s2:(int,integer) farray. ((my_s2 = slide(my_s1, 1, 2)) ->
  ((to_rep((my_s2[2])) = 1) ->
  (forall my_s11:(int,integer) farray.
  ((my_s11 = p__B22b__my_s1__aggregate_def(1, 2, 3)) ->
  (forall my_s21:(int,integer) farray. ((my_s21 = slide(my_s11, 1, 2)) ->
  (not (to_rep((my_s21[2])) = 1)))))))))))
