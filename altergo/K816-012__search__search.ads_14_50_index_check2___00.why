(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant1(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq4(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq2 : us_t, us_t -> bool

logic dummy2 : us_t

type intarray__ref = { intarray__content : us_t
}

function intarray__ref_intarray__content__projection(a: intarray__ref) : us_t =
  (a).intarray__content

logic table : us_t

logic attr__ATTRIBUTE_ADDRESS : int

logic value1 : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic value2 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

predicate dynamic_invariant2(temp___expr_160: us_t, temp___is_init_156: bool,
  temp___skip_constant_157: bool, temp___do_toplevel_158: bool,
  temp___do_typ_inv_159: bool) = ((not (temp___skip_constant_157 = true)) ->
  dynamic_property((- 2147483648), 2147483647, first1(temp___expr_160),
  last1(temp___expr_160)))

 (* File "search.ads", line 5, characters 0-0 *)
goal defqtvc :
  (forall index1:int. forall index2:int. (dynamic_invariant2(table, true,
  false, true, true) -> (dynamic_invariant(value1, true, false, true,
  true) -> (dynamic_invariant(value2, true, false, true, true) ->
  (dynamic_invariant(index1, false, false, true, true) ->
  (dynamic_invariant(index2, false, false, true, true) ->
  (forall found:int. ((found = 0) -> (dynamic_invariant1(found, true, false,
  true, true) ->
  (forall found1:bool. ((found1 = of_int(0)) ->
  (forall index11:int. ((index11 = 0) ->
  (forall found2:bool. ((found2 = of_int(0)) ->
  (forall index21:int. ((index21 = 0) ->
  (forall found11:bool. forall found21:bool. forall index12:int.
  forall index22:int. ((let temp___185 = first1(table) : int in
  (let temp___186 = last1(table) : int in
  (exists i:int. ((i = temp___185) and
  (if (andb((if (temp___185 <= i) then true else false),
  (if (i <= temp___186) then true else false)) = true) then (exists found12:bool.
                                                            exists found22:bool.
                                                            exists index13:int.
                                                            exists index23:int.
                                                            exists found3:int.
                                                            exists i1:int.
                                                            ((andb((if ((dynamic_invariant(index23,
                                                            false, true,
                                                            true, true) and
                                                            dynamic_invariant1(found3,
                                                            true, true, true,
                                                            true)) and
                                                            dynamic_invariant(index13,
                                                            false, true,
                                                            true,
                                                            true)) then true else false),
                                                            (if ((first1(table) <= i1) and
                                                            (i1 <= last1(table))) then true else false)) = true) and
                                                            ((((((found3 = 0) and
                                                            (not (found12 = true))) and
                                                            (not (found22 = true))) or
                                                            ((found3 = 1) and
                                                            ((found12 = true) or
                                                            (found22 = true)))) or
                                                            (((found3 = 2) and
                                                            (found12 = true)) and
                                                            (found22 = true))) and
                                                            (((not (found12 = true)) or
                                                            (not (found22 = true))) and
                                                            (((not (found12 = true)) or
                                                            (to_rep((to_array(table)[index13])) = value1)) and
                                                            (((not (found22 = true)) or
                                                            (to_rep((to_array(table)[index23])) = value2)) and
                                                            ((found3 <  2) and
                                                            (exists spark__branch:bool.
                                                            exists found4:int.
                                                            ((exists o:bool.
                                                             ((if (not (found12 = true)) then 
                                                             (exists o1:int.
                                                             ((to_rep((to_array(table)[i1])) = o1) and
                                                             (o = (if (o1 = value1) then true else false)))) else (o = false)) and
                                                             ((spark__branch = o) and
                                                             (if (spark__branch = true) then ((found11 = of_int(1)) and
                                                             ((index12 = i1) and
                                                             (let o1 =
                                                             (found3 + 1)
                                                             : int in
                                                             (in_range1(o1) and
                                                             ((found4 = o1) and
                                                             (((found11 = true) and
                                                             (index12 = i1)) and
                                                             (found4 <= 2))))))) else (((found11 = found12) and
                                                             (index12 = index13)) and
                                                             (found4 = found3)))))) and
                                                            (exists found5:int.
                                                            ((exists o:bool.
                                                             ((if (not (found22 = true)) then 
                                                             (exists o1:int.
                                                             ((to_rep((to_array(table)[i1])) = o1) and
                                                             (o = (if (o1 = value2) then true else false)))) else (o = false)) and
                                                             (exists spark__branch1:bool.
                                                             ((spark__branch1 = o) and
                                                             (if (spark__branch1 = true) then ((found21 = of_int(1)) and
                                                             ((index22 = i1) and
                                                             (let o1 =
                                                             (found4 + 1)
                                                             : int in
                                                             (in_range1(o1) and
                                                             ((found5 = o1) and
                                                             (((found21 = true) and
                                                             (index22 = i1)) and
                                                             (found5 <= 2))))))) else (((found21 = found22) and
                                                             (index22 = index23)) and
                                                             (found5 = found4))))))) and
                                                            ((found5 = 2) or
                                                            (i1 = temp___186))))))))))))) else ((((found11 = found1) and
  (found21 = found2)) and (index12 = index11)) and (index22 = index21))))))) ->
  (forall o:bool.
  ((if (not (found11 = true)) then (o = true) else (((first1(table) <= index12) and
  (index12 <= last1(table))) and
  (exists o1:int. ((to_rep((to_array(table)[index12])) = o1) and
  (o = (if (o1 = value1) then true else false)))))) -> ((o = true) ->
  ((found21 = true) -> (first1(table) <= index22))))))))))))))))))))))))
