(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type capacity_range

logic capacity_rangeqtint : capacity_range -> int

axiom capacity_rangeqtaxiom :
  (forall i:capacity_range. (0 <= capacity_rangeqtint(i)))

axiom capacity_rangeqtaxiom1 :
  (forall i:capacity_range. (capacity_rangeqtint(i) <= 100))

predicate in_range2(x: int) = ((0 <= x) and (x <= 100))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : capacity_range, capacity_range -> bool

logic dummy1 : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref_capacity_range__content__projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

function to_rep1(x: capacity_range) : int = capacity_rangeqtint(x)

logic of_rep1 : int -> capacity_range

axiom inversion_axiom1 :
  (forall x:capacity_range [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:capacity_range [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__list__my_lists__vector__capacity :
capacity_range
}

function us_split_discrs_rec__list__my_lists__vector__capacity__projection(a: us_split_discrs) : capacity_range =
  (a).rec__list__my_lists__vector__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__list__my_lists__vector : us_main_type
}

function us_split_fields_rec__list__my_lists__vector__projection(a: us_split_fields) : us_main_type =
  (a).rec__list__my_lists__vector

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if ((to_rep1(((a).us_split_discrs1).rec__list__my_lists__vector__capacity) = to_rep1(((b).us_split_discrs1).rec__list__my_lists__vector__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__list__my_lists__vector,
  ((b).us_split_fields1).rec__list__my_lists__vector) = true)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic list__my_lists__vector__capacity__first__bit : int

logic list__my_lists__vector__capacity__last__bit : int

logic list__my_lists__vector__capacity__position : int

axiom list__my_lists__vector__capacity__first__bit_axiom :
  (0 <= list__my_lists__vector__capacity__first__bit)

axiom list__my_lists__vector__capacity__last__bit_axiom :
  (list__my_lists__vector__capacity__first__bit <  list__my_lists__vector__capacity__last__bit)

axiom list__my_lists__vector__capacity__position_axiom :
  (0 <= list__my_lists__vector__capacity__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type vector__ref = { vector__content : us_rep
}

function vector__ref_vector__content__projection(a: vector__ref) : us_rep =
  (a).vector__content

function capacity(container: us_rep) : int =
  to_rep1(((container).us_split_discrs1).rec__list__my_lists__vector__capacity)

logic capacity__function_guard : int, us_rep -> prop

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq2(a, b)]. (user_eq2(a,
  b) = oeq(a, b)))

predicate dynamic_invariant1(temp___expr_249: int, temp___is_init_245: bool,
  temp___skip_constant_246: bool, temp___do_toplevel_247: bool,
  temp___do_typ_inv_248: bool) = (((temp___is_init_245 = true) or
  (0 <= 100)) -> in_range2(temp___expr_249))

axiom length__post_axiom :
  (forall container:us_rep [length(container)].
  (length(container) <= capacity(container)))

axiom length__post_axiom1 :
  (forall container:us_rep [length(container)].
  dynamic_invariant1(length(container), true, false, true, true))

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep1

logic bool_eq4 : us_rep1, us_rep1 -> bool

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type sequence__ref = { sequence__content : us_rep1
}

function sequence__ref_sequence__content__projection(a: sequence__ref) : us_rep1 =
  (a).sequence__content

logic length1 : us_rep1 -> int

logic length__function_guard1 : int, us_rep1 -> prop

function last(container: us_rep1) : int = (0 + length1(container))

logic last__function_guard : int, us_rep1 -> prop

logic model : us_rep -> us_rep1

logic model__function_guard : us_rep1, us_rep -> prop

function last_index(container: us_rep) : int = last(model(container))

logic last_index__function_guard : int, us_rep -> prop

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. (0 <= extended_indexqtint(i)))

axiom extended_indexqtaxiom1 :
  (forall i:extended_index. (extended_indexqtint(i) <= 101))

predicate in_range3(x: int) = ((0 <= x) and (x <= 101))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : extended_index, extended_index -> bool

logic dummy4 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref_extended_index__content__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

predicate dynamic_invariant2(temp___expr_235: int, temp___is_init_231: bool,
  temp___skip_constant_232: bool, temp___do_toplevel_233: bool,
  temp___do_typ_inv_234: bool) = (((temp___is_init_231 = true) or
  (0 <= 101)) -> in_range3(temp___expr_235))

logic first_index__function_guard : int, us_rep -> prop

type index_type

logic index_typeqtint : index_type -> int

axiom index_typeqtaxiom : (forall i:index_type. (1 <= index_typeqtint(i)))

axiom index_typeqtaxiom1 : (forall i:index_type. (index_typeqtint(i) <= 100))

predicate in_range4(x: int) = ((1 <= x) and (x <= 100))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : index_type, index_type -> bool

logic dummy5 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref_index_type__content__projection(a: index_type__ref) : index_type =
  (a).index_type__content

predicate dynamic_invariant3(temp___expr_221: int, temp___is_init_217: bool,
  temp___skip_constant_218: bool, temp___do_toplevel_219: bool,
  temp___do_typ_inv_220: bool) = (((temp___is_init_217 = true) or
  (1 <= 100)) -> in_range4(temp___expr_221))

logic get : us_rep1, int -> int

logic get__function_guard : int, us_rep1, int -> prop

function element(container: us_rep, index: int) : int = get(model(container),
  index)

logic element__function_guard : int, us_rep, int -> prop

type element_type

logic element_typeqtint : element_type -> int

axiom element_typeqtaxiom :
  (forall i:element_type. ((- 2147483648) <= element_typeqtint(i)))

axiom element_typeqtaxiom1 :
  (forall i:element_type. (element_typeqtint(i) <= 2147483647))

predicate in_range5(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : element_type, element_type -> bool

logic dummy6 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_element_type__content__projection(a: element_type__ref) : element_type =
  (a).element_type__content

predicate dynamic_invariant4(temp___expr_228: int, temp___is_init_224: bool,
  temp___skip_constant_225: bool, temp___do_toplevel_226: bool,
  temp___do_typ_inv_227: bool) = (((temp___is_init_224 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range5(temp___expr_228))

logic bool_eq8 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq8(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq8(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length2(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function olt(left: us_rep1, right: us_rep1) : bool =
  andb(bool_lt(length1(left), length1(right)),
  (if (forall n:int. (((1 <= n) and (n <= last(left))) -> (get(left,
      n) = get(right, n)))) then true else false))

logic olt__function_guard : bool, us_rep1, us_rep1 -> prop

predicate in_range6(rec__list__my_lists__vector__capacity1: int, a: us_rep) =
  (rec__list__my_lists__vector__capacity1 = to_rep1(((a).us_split_discrs1).rec__list__my_lists__vector__capacity))

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic list__my_lists__vector__capacity__first__bit1 : int

logic list__my_lists__vector__capacity__last__bit1 : int

logic list__my_lists__vector__capacity__position1 : int

axiom list__my_lists__vector__capacity__first__bit_axiom1 :
  (0 <= list__my_lists__vector__capacity__first__bit1)

axiom list__my_lists__vector__capacity__last__bit_axiom1 :
  (list__my_lists__vector__capacity__first__bit1 <  list__my_lists__vector__capacity__last__bit1)

axiom list__my_lists__vector__capacity__position_axiom1 :
  (0 <= list__my_lists__vector__capacity__position1)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy7 : us_rep

type list__ref = { list__content : us_rep
}

function list__ref_list__content__projection(a: list__ref) : us_rep =
  (a).list__content

logic l : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic r1b : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type index

logic indexqtint : index -> int

axiom indexqtaxiom : (forall i:index. (0 <= indexqtint(i)))

axiom indexqtaxiom1 : (forall i:index. (indexqtint(i) <= 100))

predicate in_range7(x: int) = ((0 <= x) and (x <= 100))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : index, index -> bool

logic dummy8 : index

type index__ref = { index__content : index
}

function index__ref_index__content__projection(a: index__ref) : index =
  (a).index__content

function to_rep2(x: index) : int = indexqtint(x)

logic of_rep2 : int -> index

axiom inversion_axiom2 :
  (forall x:index [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:index [to_rep2(x)]. in_range7(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range7(x) ->
  (to_rep2(of_rep2(x)) = x)))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range8(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq9 : positive, positive -> bool

logic dummy9 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq11(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_202:int. (((a__first <= temp___idx_202) and
  (temp___idx_202 <= a__last)) ->
  (to_rep((a[temp___idx_202])) = to_rep((b[((b__first - a__first) + temp___idx_202)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_202:int. (((a__first <= temp___idx_202) and
  (temp___idx_202 <= a__last)) ->
  (to_rep((a[temp___idx_202])) = to_rep((b[((b__first - a__first) + temp___idx_202)]))))))))

type t

logic first : t -> integer

logic last1 : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l1:int [mk(f, l1)]. (in_range1(f) ->
  (in_range1(l1) -> (to_rep(first(mk(f, l1))) = f))))

axiom mk_def1 :
  (forall f:int. forall l1:int [mk(f, l1)]. (in_range1(f) ->
  (in_range1(l1) -> (to_rep(last1(mk(f, l1))) = l1))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range8(low) and in_range8(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l1: int) : us_t = { elts =
  a; rt = mk(f, l1) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last2(a: us_t) : int = to_rep(last1((a).rt))

function length3(a: us_t) : int =
  (if (first1(a) <= last2(a)) then ((last2(a) - first1(a)) + 1) else 0)

logic value__size3 : int

logic object__size3 : int

logic component__size : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom3 : (0 <= alignment3)

function bool_eq12(x: us_t, y: us_t) : bool = bool_eq11((x).elts,
  to_rep(first((x).rt)), to_rep(last1((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last1((y).rt)))

logic user_eq10 : us_t, us_t -> bool

logic dummy10 : us_t

type intarray__ref = { intarray__content : us_t
}

function intarray__ref_intarray__content__projection(a: intarray__ref) : us_t =
  (a).intarray__content

type t11s__ref = { t11s__content : us_t
}

function t11s__ref_t11s__content__projection(a: t11s__ref) : us_t =
  (a).t11s__content

type us_split_discrs2 = { rec__stack__stack__n : index
}

function us_split_discrs_rec__stack__stack__n__projection(a: us_split_discrs2) : index =
  (a).rec__stack__stack__n

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields2 = { rec__stack__stack__top : index;
rec__stack__stack__content : us_t
}

function us_split_fields_rec__stack__stack__top__projection(a: us_split_fields2) : index =
  (a).rec__stack__stack__top

function us_split_fields_rec__stack__stack__content__projection(a: us_split_fields2) : us_t =
  (a).rec__stack__stack__content

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep2 = { us_split_discrs3 : us_split_discrs2; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__2__projection(a: us_rep2) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___split_fields__2__projection(a: us_rep2) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq13(a: us_rep2, b: us_rep2) : bool =
  (if ((to_rep2(((a).us_split_discrs3).rec__stack__stack__n) = to_rep2(((b).us_split_discrs3).rec__stack__stack__n)) and
  ((to_rep2(((a).us_split_fields3).rec__stack__stack__top) = to_rep2(((b).us_split_fields3).rec__stack__stack__top)) and
  (bool_eq12(((a).us_split_fields3).rec__stack__stack__content,
  ((b).us_split_fields3).rec__stack__stack__content) = true))) then true else false)

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic stack__stack__n__first__bit : int

logic stack__stack__n__last__bit : int

logic stack__stack__n__position : int

axiom stack__stack__n__first__bit_axiom : (0 <= stack__stack__n__first__bit)

axiom stack__stack__n__last__bit_axiom :
  (stack__stack__n__first__bit <  stack__stack__n__last__bit)

axiom stack__stack__n__position_axiom : (0 <= stack__stack__n__position)

logic stack__stack__top__first__bit : int

logic stack__stack__top__last__bit : int

logic stack__stack__top__position : int

axiom stack__stack__top__first__bit_axiom :
  (0 <= stack__stack__top__first__bit)

axiom stack__stack__top__last__bit_axiom :
  (stack__stack__top__first__bit <  stack__stack__top__last__bit)

axiom stack__stack__top__position_axiom : (0 <= stack__stack__top__position)

logic stack__stack__content__first__bit : int

logic stack__stack__content__last__bit : int

logic stack__stack__content__position : int

axiom stack__stack__content__first__bit_axiom :
  (0 <= stack__stack__content__first__bit)

axiom stack__stack__content__last__bit_axiom :
  (stack__stack__content__first__bit <  stack__stack__content__last__bit)

axiom stack__stack__content__position_axiom :
  (0 <= stack__stack__content__position)

logic user_eq11 : us_rep2, us_rep2 -> bool

logic dummy11 : us_rep2

type stack__ref = { stack__content : us_rep2
}

function stack__ref_stack__content__projection(a: stack__ref) : us_rep2 =
  (a).stack__content

type t2b__ref = { t2b__content : us_t
}

function t2b__ref_t2b__content__projection(a: t2b__ref) : us_t =
  (a).t2b__content

type us_split_fields4 = { rec__stack__stack__top1 : index;
rec__stack__stack__content1 : us_t
}

function us_split_fields_rec__stack__stack__top__2__projection(a: us_split_fields4) : index =
  (a).rec__stack__stack__top1

function us_split_fields_rec__stack__stack__content__2__projection(a: us_split_fields4) : us_t =
  (a).rec__stack__stack__content1

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep3 = { us_split_discrs4 : us_split_discrs2; us_split_fields5 :
us_split_fields4
}

function us_rep___split_discrs__3__projection(a: us_rep3) : us_split_discrs2 =
  (a).us_split_discrs4

function us_rep___split_fields__3__projection(a: us_rep3) : us_split_fields4 =
  (a).us_split_fields5

function to_base(a: us_rep3) : us_rep2 = { us_split_discrs3 =
  (a).us_split_discrs4; us_split_fields3 = { rec__stack__stack__top =
  ((a).us_split_fields5).rec__stack__stack__top1;
  rec__stack__stack__content =
  of_array(to_array(((a).us_split_fields5).rec__stack__stack__content1),
  first1(((a).us_split_fields5).rec__stack__stack__content1),
  last2(((a).us_split_fields5).rec__stack__stack__content1)) } }

function of_base(r: us_rep2) : us_rep3 = { us_split_discrs4 =
  (r).us_split_discrs3; us_split_fields5 = { rec__stack__stack__top1 =
  ((r).us_split_fields3).rec__stack__stack__top;
  rec__stack__stack__content1 =
  of_array(to_array(((r).us_split_fields3).rec__stack__stack__content),
  first1(((r).us_split_fields3).rec__stack__stack__content),
  last2(((r).us_split_fields3).rec__stack__stack__content)) } }

function bool_eq14(a: us_rep3, b: us_rep3) : bool =
  (if ((to_rep2(((a).us_split_discrs4).rec__stack__stack__n) = to_rep2(((b).us_split_discrs4).rec__stack__stack__n)) and
  ((to_rep2(((a).us_split_fields5).rec__stack__stack__top1) = to_rep2(((b).us_split_fields5).rec__stack__stack__top1)) and
  (bool_eq12(((a).us_split_fields5).rec__stack__stack__content1,
  ((b).us_split_fields5).rec__stack__stack__content1) = true))) then true else false)

predicate in_range9(rec__stack__stack__n1: int, a: us_rep2) =
  (rec__stack__stack__n1 = to_rep2(((a).us_split_discrs3).rec__stack__stack__n))

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic stack__stack__n__first__bit1 : int

logic stack__stack__n__last__bit1 : int

logic stack__stack__n__position1 : int

axiom stack__stack__n__first__bit_axiom1 :
  (0 <= stack__stack__n__first__bit1)

axiom stack__stack__n__last__bit_axiom1 :
  (stack__stack__n__first__bit1 <  stack__stack__n__last__bit1)

axiom stack__stack__n__position_axiom1 : (0 <= stack__stack__n__position1)

logic stack__stack__top__first__bit1 : int

logic stack__stack__top__last__bit1 : int

logic stack__stack__top__position1 : int

axiom stack__stack__top__first__bit_axiom1 :
  (0 <= stack__stack__top__first__bit1)

axiom stack__stack__top__last__bit_axiom1 :
  (stack__stack__top__first__bit1 <  stack__stack__top__last__bit1)

axiom stack__stack__top__position_axiom1 :
  (0 <= stack__stack__top__position1)

logic stack__stack__content__first__bit1 : int

logic stack__stack__content__last__bit1 : int

logic stack__stack__content__position1 : int

axiom stack__stack__content__first__bit_axiom1 :
  (0 <= stack__stack__content__first__bit1)

axiom stack__stack__content__last__bit_axiom1 :
  (stack__stack__content__first__bit1 <  stack__stack__content__last__bit1)

axiom stack__stack__content__position_axiom1 :
  (0 <= stack__stack__content__position1)

logic user_eq12 : us_rep3, us_rep3 -> bool

logic dummy12 : us_rep3

type tsS__ref = { tsS__content : us_rep3
}

function tsS__ref_tsS__content__projection(a: tsS__ref) : us_rep3 =
  (a).tsS__content

logic s__split_discrs : us_split_discrs2

logic attr__ATTRIBUTE_ADDRESS2 : int

logic res__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS3 : int

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

axiom user_eq__def_axiom1 :
  (forall a:us_rep. forall b:us_rep [user_eq7(a, b)]. (user_eq7(a,
  b) = oeq(a, b)))

predicate dynamic_invariant5(temp___expr_385: us_rep,
  temp___is_init_381: bool, temp___skip_constant_382: bool,
  temp___do_toplevel_383: bool, temp___do_typ_inv_384: bool) =
  ((not (temp___skip_constant_382 = true)) -> in_range6(100,
  temp___expr_385))

predicate default_initial_assumption(temp___expr_387: us_rep,
  temp___skip_top_level_388: bool) =
  ((to_rep1(((temp___expr_387).us_split_discrs1).rec__list__my_lists__vector__capacity) = 100) and
  ((not (temp___skip_top_level_388 = true)) ->
  (is_empty(temp___expr_387) = true)))

logic r4b : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic r5b : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

predicate dynamic_invariant6(temp___expr_412: us_rep2,
  temp___is_init_408: bool, temp___skip_constant_409: bool,
  temp___do_toplevel_410: bool, temp___do_typ_inv_411: bool) =
  (let temp___413 = ((temp___expr_412).us_split_discrs3).rec__stack__stack__n
  : index in (dynamic_property(1, to_rep2(temp___413),
  first1(((temp___expr_412).us_split_fields3).rec__stack__stack__content),
  last2(((temp___expr_412).us_split_fields3).rec__stack__stack__content)) and
  ((first1(((temp___expr_412).us_split_fields3).rec__stack__stack__content) = 1) and
  (last2(((temp___expr_412).us_split_fields3).rec__stack__stack__content) = to_rep2(temp___413)))))

logic is_empty1 : us_rep2 -> bool

logic is_empty__function_guard1 : bool, us_rep2 -> prop

logic top : us_rep2 -> int

logic top__function_guard : int, us_rep2 -> prop

axiom top__post_axiom :
  (forall s:us_rep2. is_empty__function_guard1(is_empty1(s), s))

axiom top__post_axiom1 :
  (forall s:us_rep2 [top(s)]. ((dynamic_invariant6(s, true, true, true,
  true) and (not (is_empty1(s) = true))) -> (let result = top(s) : int in
  (top__function_guard(result, s) -> dynamic_invariant(result, true, false,
  true, true)))))

axiom top__def_axiom :
  (forall s:us_rep2 [top(s)]. (dynamic_invariant6(s, true, true, true,
  true) ->
  (top(s) = to_rep2(((s).us_split_fields3).rec__stack__stack__top))))

logic is_full : us_rep2 -> bool

logic is_full__function_guard : bool, us_rep2 -> prop

type t1

logic first2 : t1 -> integer

logic last3 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def2 :
  (forall f:int. forall l1:int [mk1(f, l1)]. (in_range1(f) ->
  (in_range1(l1) -> (to_rep(first2(mk1(f, l1))) = f))))

axiom mk_def3 :
  (forall f:int. forall l1:int [mk1(f, l1)]. (in_range1(f) ->
  (in_range1(l1) -> (to_rep(last3(mk1(f, l1))) = l1))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range8(low) and in_range8(high)))))

type us_t1 = { elts1 : (int,integer) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,integer) farray = (a).elts1

function of_array1(a: (int,integer) farray, f: int, l1: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l1) }

function first3(a: us_t1) : int = to_rep(first2((a).rt1))

function last4(a: us_t1) : int = to_rep(last3((a).rt1))

function length4(a: us_t1) : int =
  (if (first3(a) <= last4(a)) then ((last4(a) - first3(a)) + 1) else 0)

logic value__size6 : int

logic object__size6 : int

logic component__size1 : int

logic alignment6 : int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (0 <= object__size6)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom6 : (0 <= alignment6)

function bool_eq15(x: us_t1, y: us_t1) : bool = bool_eq11((x).elts1,
  to_rep(first2((x).rt1)), to_rep(last3((x).rt1)), (y).elts1,
  to_rep(first2((y).rt1)), to_rep(last3((y).rt1)))

logic user_eq13 : us_t1, us_t1 -> bool

logic dummy13 : us_t1

type m__ref = { m__content : us_t1
}

function m__ref_m__content__projection(a: m__ref) : us_t1 = (a).m__content

logic to_but_top : us_rep2 -> us_t1

logic to_but_top__function_guard : us_t1, us_rep2 -> prop

logic to__ : us_rep2 -> us_t1

logic to____function_guard : us_t1, us_rep2 -> prop

logic r7b : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic r8b : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

predicate dynamic_invariant7(temp___expr_399: int, temp___is_init_395: bool,
  temp___skip_constant_396: bool, temp___do_toplevel_397: bool,
  temp___do_typ_inv_398: bool) = (((temp___is_init_395 = true) or
  (0 <= 100)) -> in_range7(temp___expr_399))

predicate dynamic_property2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq16(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq14 : integer, integer -> bool

logic dummy14 : integer

type t9b__ref = { t9b__content : integer
}

function t9b__ref_t9b__content__projection(a: t9b__ref) : integer =
  (a).t9b__content

predicate dynamic_invariant8(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range8(temp___expr_46))

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range10(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq17(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq15 : count_type, count_type -> bool

logic dummy15 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

predicate dynamic_invariant9(temp___expr_242: int, temp___is_init_238: bool,
  temp___skip_constant_239: bool, temp___do_toplevel_240: bool,
  temp___do_typ_inv_241: bool) = (((temp___is_init_238 = true) or
  (0 <= 2147483647)) -> in_range10(temp___expr_242))

predicate dynamic_invariant10(temp___expr_433: us_t1,
  temp___is_init_429: bool, temp___skip_constant_430: bool,
  temp___do_toplevel_431: bool, temp___do_typ_inv_432: bool) =
  ((not (temp___skip_constant_430 = true)) -> dynamic_property1(1,
  2147483647, first3(temp___expr_433), last4(temp___expr_433)))

axiom to____post_axiom :
  (forall s:us_rep2 [to__(s)]. (dynamic_invariant6(s, true, true, true,
  true) -> (let result = to__(s) : us_t1 in (to____function_guard(result,
  s) -> dynamic_invariant10(result, true, false, true, true)))))

axiom to_but_top__post_axiom :
  (forall s:us_rep2 [to_but_top(s)]. (dynamic_invariant6(s, true, true, true,
  true) -> (let result = to_but_top(s) : us_t1 in
  (to_but_top__function_guard(result, s) -> dynamic_invariant10(result, true,
  false, true, true)))))

function oeq1(left: us_rep1, right: us_rep1) : bool =
  andb(bool_eq8(length1(left), length1(right)),
  (if (forall n:int. (((1 <= n) and (n <= last(left))) -> (get(left,
      n) = get(right, n)))) then true else false))

logic oeq__function_guard1 : bool, us_rep1, us_rep1 -> prop

axiom user_eq__def_axiom2 :
  (forall a:us_rep1. forall b:us_rep1 [user_eq3(a, b)]. (user_eq3(a,
  b) = oeq1(a, b)))

predicate default_initial_assumption1(temp___expr_288: us_rep1,
  temp___skip_top_level_289: bool) =
  ((not (temp___skip_top_level_289 = true)) ->
  (length1(temp___expr_288) = 0))

axiom model__post_axiom :
  (forall container:us_rep [model(container)].
  (length1(model(container)) = length(container)))

axiom oeq__post_axiom :
  (forall left:us_rep. forall right:us_rep [oeq(left, right)]. ((oeq(left,
  right) = true) -> (oeq1(model(left), model(right)) = true)))

axiom oeq__post_axiom1 :
  (forall left:us_rep. forall right:us_rep [oeq(left, right)].
  ((oeq1(model(left), model(right)) = true) -> (oeq(left, right) = true)))

axiom is_empty__post_axiom :
  (forall container:us_rep [is_empty(container)].
  ((is_empty(container) = true) -> (length(container) = 0)))

axiom is_empty__post_axiom1 :
  (forall container:us_rep [is_empty(container)]. ((length(container) = 0) ->
  (is_empty(container) = true)))

type extended_index1

logic extended_indexqtint1 : extended_index1 -> int

axiom extended_indexqtaxiom2 :
  (forall i:extended_index1. (0 <= extended_indexqtint1(i)))

axiom extended_indexqtaxiom3 :
  (forall i:extended_index1. (extended_indexqtint1(i) <= 100))

predicate in_range11(x: int) = ((0 <= x) and (x <= 100))

function bool_eq18(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq16 : extended_index1, extended_index1 -> bool

logic dummy16 : extended_index1

type extended_index__ref1 = { extended_index__content1 : extended_index1
}

function extended_index__ref_extended_index__content__2__projection(a: extended_index__ref1) : extended_index1 =
  (a).extended_index__content1

predicate dynamic_invariant11(temp___expr_280: int, temp___is_init_276: bool,
  temp___skip_constant_277: bool, temp___do_toplevel_278: bool,
  temp___do_typ_inv_279: bool) = (((temp___is_init_276 = true) or
  (0 <= 100)) -> in_range11(temp___expr_280))

axiom length__post_axiom2 :
  (forall container:us_rep1 [length1(container)].
  ((0 + length1(container)) <= 100))

axiom length__post_axiom3 :
  (forall container:us_rep1 [length1(container)].
  dynamic_invariant9(length1(container), true, false, true, true))

type element_type1

logic element_typeqtint1 : element_type1 -> int

axiom element_typeqtaxiom2 :
  (forall i:element_type1. ((- 2147483648) <= element_typeqtint1(i)))

axiom element_typeqtaxiom3 :
  (forall i:element_type1. (element_typeqtint1(i) <= 2147483647))

predicate in_range12(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq19(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq17 : element_type1, element_type1 -> bool

logic dummy17 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref_element_type__content__2__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

predicate dynamic_invariant12(temp___expr_273: int, temp___is_init_269: bool,
  temp___skip_constant_270: bool, temp___do_toplevel_271: bool,
  temp___do_typ_inv_272: bool) = (((temp___is_init_269 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range12(temp___expr_273))

axiom get__post_axiom :
  (forall container:us_rep1.
  (forall position:int [get(container, position)].
  ((dynamic_invariant11(position, true, true, true, true) and
  ((1 <= position) and (position <= last(container)))) ->
  dynamic_invariant12(get(container, position), true, false, true, true))))

axiom r1b__def_axiom : (r1b = length(l))

axiom r4b__def_axiom : (r4b = 1)

axiom r5b__def_axiom : (r5b = last_index(l))

axiom r7b__def_axiom : (r7b = 1)

axiom r8b__def_axiom : (r8b = last_index(l))

 (* File "list.ads", line 11, characters 0-0 *)
goal defqtvc :
  (forall s__split_fields:us_split_fields4.
  forall res__split_fields:us_main_type. (dynamic_invariant5(l, true, false,
  true, true) -> (let o = l : us_rep in
  (let list__reverse_list__R1b__assume = length(o) : int in
  ((dynamic_invariant1(list__reverse_list__R1b__assume, true, false, true,
  true) and (list__reverse_list__R1b__assume <= capacity(o))) ->
  ((list__reverse_list__R1b__assume = r1b) -> (dynamic_invariant1(r1b, true,
  false, true, true) -> (in_range7(r1b) ->
  (((to_rep2((s__split_discrs).rec__stack__stack__n) = r1b) and
  ((first1((s__split_fields).rec__stack__stack__content1) = 1) and
  (last2((s__split_fields).rec__stack__stack__content1) = r1b))) ->
  ((in_range9(r1b, to_base({ us_split_discrs4 = s__split_discrs;
  us_split_fields5 = s__split_fields })) and (dynamic_property(1, r1b,
  first1((s__split_fields).rec__stack__stack__content1),
  last2((s__split_fields).rec__stack__stack__content1)) and
  ((first1((s__split_fields).rec__stack__stack__content1) = 1) and
  (last2((s__split_fields).rec__stack__stack__content1) = r1b)))) ->
  (default_initial_assumption({ us_split_discrs1 = res__split_discrs;
  us_split_fields1 = { rec__list__my_lists__vector = res__split_fields } },
  false) -> (dynamic_invariant5({ us_split_discrs1 = res__split_discrs;
  us_split_fields1 = { rec__list__my_lists__vector = res__split_fields } },
  false, false, true, true) -> ((dynamic_invariant3(1, true, false, true,
  true) and (1 = 1)) -> ((1 = r4b) -> (dynamic_invariant3(r4b, true, false,
  true, true) -> (let o1 = l : us_rep in
  (let list__reverse_list__L_1__R5b__assume = last_index(o1) : int in
  ((dynamic_invariant2(list__reverse_list__L_1__R5b__assume, true, false,
  true, true) and
  (list__reverse_list__L_1__R5b__assume = last(model(o1)))) ->
  ((list__reverse_list__L_1__R5b__assume = r5b) -> (dynamic_invariant2(r5b,
  true, false, true, true) -> (let temp___598 = r4b : int in
  (forall i:int. ((i = temp___598) ->
  ((andb((if (temp___598 <= i) then true else false),
  (if (i <= r5b) then true else false)) = true) ->
  (forall s__split_fields1:us_split_fields4. forall i1:int.
  ((andb((if (dynamic_property(1, r1b,
  first1((s__split_fields1).rec__stack__stack__content1),
  last2((s__split_fields1).rec__stack__stack__content1)) and
  ((first1((s__split_fields1).rec__stack__stack__content1) = 1) and
  (last2((s__split_fields1).rec__stack__stack__content1) = r1b))) then true else false),
  (if ((r4b <= i1) and (i1 <= r5b)) then true else false)) = true) ->
  (in_range4(i1) -> (let o2 = l : us_rep in (let o3 = element(o2, i1)
  : int in ((dynamic_invariant4(o3, true, false, true, true) and
  (o3 = get(model(o2), i1))) ->
  ((forall s__split_fields2:us_split_fields4. forall o4:us_split_discrs2.
   is_full__function_guard(is_full({ us_split_discrs3 = o4;
   us_split_fields3 = (to_base({ us_split_discrs4 = s__split_discrs;
   us_split_fields5 = s__split_fields2 })).us_split_fields3 }), {
   us_split_discrs3 = o4; us_split_fields3 = (to_base({ us_split_discrs4 =
   s__split_discrs; us_split_fields5 = s__split_fields2 })).us_split_fields3
   })) ->
  (not (is_full({ us_split_discrs3 = s__split_discrs; us_split_fields3 =
  (to_base({ us_split_discrs4 = s__split_discrs; us_split_fields5 =
  s__split_fields1 })).us_split_fields3 }) = true)))))))))))))))))))))))))))))))))
