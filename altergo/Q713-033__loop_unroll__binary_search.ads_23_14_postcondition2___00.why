(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (div(x, y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((-abs_int(y)) <  mod(x,
  y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (mod(x, y) <  abs_int(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <  y) then (x % y) else ((x % y) + y))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic a : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

type u

logic uqtint : u -> int

axiom uqtaxiom : (forall i1:u. (1 <= uqtint(i1)))

axiom uqtaxiom1 : (forall i1:u. (uqtint(i1) <= 10))

predicate in_range2(x: int) = ((1 <= x) and (x <= 10))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : u, u -> bool

logic dummy1 : u

type u__ref = { u__content : u
}

function u__ref_u__content__projection(a1: u__ref) : u = (a1).u__content

predicate dynamic_invariant1(temp___expr_167: int, temp___is_init_163: bool,
  temp___skip_constant_164: bool, temp___do_toplevel_165: bool,
  temp___do_typ_inv_166: bool) = (((temp___is_init_163 = true) or
  (1 <= 10)) -> in_range2(temp___expr_167))

axiom cdiv_cases :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((0 <  d) -> (div(n,
  d) = (n / d)))))

axiom cdiv_cases1 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((0 <  d) -> (div(n,
  d) = (-((-n) / d))))))

axiom cdiv_cases2 :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((d <  0) -> (div(n,
  d) = (-(n / (-d)))))))

axiom cdiv_cases3 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((d <  0) -> (div(n,
  d) = ((-n) / (-d))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))))

axiom cmod_cases1 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))))

axiom cmod_cases2 :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))))

axiom cmod_cases3 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d)))))))

 (* File "binary_search.ads", line 17, characters 0-0 *)
goal defqtvc :
  (forall left:int. forall right:int. forall med:int. (dynamic_invariant(i,
  true, false, true, true) ->
  ((forall i1:int. (((1 <= i1) and (i1 <= 10)) ->
   (forall i2:int. (((i1 <= i2) and (i2 <= 10)) ->
   (to_rep((a[i1])) <= to_rep((a[i2]))))))) ->
  (forall binary_search__search__result:int. ((dynamic_invariant1(left,
  false, false, true, true) and (dynamic_invariant1(right, false, false,
  true, true) and (dynamic_invariant1(med, false, false, true, true) and
  (exists left1:int. ((left1 = 1) and
  (exists right1:int. ((right1 = 10) and
  (exists o:bool.
  ((exists o1:int. ((to_rep((a[left1])) = o1) and
   (if (i <  o1) then (o = true) else (exists o2:int.
                                      ((to_rep((a[right1])) = o2) and
                                      (o = (if (o2 <  i) then true else false))))))) and
  (exists spark__branch:bool. ((spark__branch = o) and
  (if (spark__branch = true) then (binary_search__search__result = 0) else ((let o1 =
  (left1 + div((right1 - left1), 2)) : int in (in_range2(o1) and
  (exists med1:int. ((med1 = o1) and
  ((exists o2:int. ((to_rep((a[med1])) = o2) and
   (exists spark__branch1:bool.
   ((spark__branch1 = (if (o2 <  i) then true else false)) and
   ((not (spark__branch1 = true)) and
   (exists o3:int. ((to_rep((a[med1])) = o3) and
   (exists spark__branch2:bool.
   ((spark__branch2 = (if (i <  o3) then true else false)) and
   ((not (spark__branch2 = true)) and
   (binary_search__search__result = med1))))))))))) or
  (exists spark__branch1:bool. exists left2:int. exists right2:int.
  ((exists o2:int. ((to_rep((a[med1])) = o2) and
   (exists spark__branch2:bool.
   ((spark__branch2 = (if (o2 <  i) then true else false)) and
   (if (spark__branch2 = true) then (((let o3 = (med1 + 1) : int in
   (in_range2(o3) and (left2 = o3))) and
   (spark__branch1 = spark__branch2)) and
   (right2 = right1)) else ((exists o3:int. ((to_rep((a[med1])) = o3) and
                            ((spark__branch1 = (if (i <  o3) then true else false)) and
                            ((spark__branch1 = true) and (let o4 = (med1 - 1)
                            : int in (in_range2(o4) and (right2 = o4))))))) and
   (left2 = left1))))))) and
  (let o2 = (left2 + div((right2 - left2), 2)) : int in (in_range2(o2) and
  (exists med2:int. ((med2 = o2) and
  ((exists o3:int. ((to_rep((a[med2])) = o3) and
   (exists spark__branch2:bool.
   ((spark__branch2 = (if (o3 <  i) then true else false)) and
   ((not (spark__branch2 = true)) and
   (exists o4:int. ((to_rep((a[med2])) = o4) and
   (exists spark__branch3:bool.
   ((spark__branch3 = (if (i <  o4) then true else false)) and
   ((not (spark__branch3 = true)) and
   (binary_search__search__result = med2))))))))))) or
  (exists spark__branch2:bool. exists left3:int. exists right3:int.
  ((exists o3:int. ((to_rep((a[med2])) = o3) and
   (exists spark__branch3:bool.
   ((spark__branch3 = (if (o3 <  i) then true else false)) and
   (if (spark__branch3 = true) then (((let o4 = (med2 + 1) : int in
   (in_range2(o4) and (left3 = o4))) and
   (spark__branch2 = spark__branch3)) and
   (right3 = right2)) else ((exists o4:int. ((to_rep((a[med2])) = o4) and
                            ((spark__branch2 = (if (i <  o4) then true else false)) and
                            ((spark__branch2 = true) and (let o5 = (med2 - 1)
                            : int in (in_range2(o5) and (right3 = o5))))))) and
   (left3 = left2))))))) and
  (let o3 = (left3 + div((right3 - left3), 2)) : int in (in_range2(o3) and
  (exists med3:int. ((med3 = o3) and
  ((exists o4:int. ((to_rep((a[med3])) = o4) and
   (exists spark__branch3:bool.
   ((spark__branch3 = (if (o4 <  i) then true else false)) and
   ((not (spark__branch3 = true)) and
   (exists o5:int. ((to_rep((a[med3])) = o5) and
   (exists spark__branch4:bool.
   ((spark__branch4 = (if (i <  o5) then true else false)) and
   ((not (spark__branch4 = true)) and
   (binary_search__search__result = med3))))))))))) or
  (exists spark__branch3:bool. exists left4:int. exists right4:int.
  ((exists o4:int. ((to_rep((a[med3])) = o4) and
   (exists spark__branch4:bool.
   ((spark__branch4 = (if (o4 <  i) then true else false)) and
   (if (spark__branch4 = true) then (((let o5 = (med3 + 1) : int in
   (in_range2(o5) and (left4 = o5))) and
   (spark__branch3 = spark__branch4)) and
   (right4 = right3)) else ((exists o5:int. ((to_rep((a[med3])) = o5) and
                            ((spark__branch3 = (if (i <  o5) then true else false)) and
                            ((spark__branch3 = true) and (let o6 = (med3 - 1)
                            : int in (in_range2(o6) and (right4 = o6))))))) and
   (left4 = left3))))))) and
  (let o4 = (left4 + div((right4 - left4), 2)) : int in (in_range2(o4) and
  (exists med4:int. ((med4 = o4) and
  ((exists o5:int. ((to_rep((a[med4])) = o5) and
   (exists spark__branch4:bool.
   ((spark__branch4 = (if (o5 <  i) then true else false)) and
   ((not (spark__branch4 = true)) and
   (exists o6:int. ((to_rep((a[med4])) = o6) and
   (exists spark__branch5:bool.
   ((spark__branch5 = (if (i <  o6) then true else false)) and
   ((not (spark__branch5 = true)) and
   (binary_search__search__result = med4))))))))))) or
  (exists spark__branch4:bool. exists left5:int. exists right5:int.
  ((exists o5:int. ((to_rep((a[med4])) = o5) and
   (exists spark__branch5:bool.
   ((spark__branch5 = (if (o5 <  i) then true else false)) and
   (if (spark__branch5 = true) then (((let o6 = (med4 + 1) : int in
   (in_range2(o6) and (left5 = o6))) and
   (spark__branch4 = spark__branch5)) and
   (right5 = right4)) else ((exists o6:int. ((to_rep((a[med4])) = o6) and
                            ((spark__branch4 = (if (i <  o6) then true else false)) and
                            ((spark__branch4 = true) and (let o7 = (med4 - 1)
                            : int in (in_range2(o7) and (right5 = o7))))))) and
   (left5 = left4))))))) and
  (let o5 = (left5 + div((right5 - left5), 2)) : int in (in_range2(o5) and
  (exists med5:int. ((med5 = o5) and
  ((exists o6:int. ((to_rep((a[med5])) = o6) and
   (exists spark__branch5:bool.
   ((spark__branch5 = (if (o6 <  i) then true else false)) and
   ((not (spark__branch5 = true)) and
   (exists o7:int. ((to_rep((a[med5])) = o7) and
   (exists spark__branch6:bool.
   ((spark__branch6 = (if (i <  o7) then true else false)) and
   ((not (spark__branch6 = true)) and
   (binary_search__search__result = med5))))))))))) or
  (exists spark__branch5:bool. exists left6:int. exists right6:int.
  ((exists o6:int. ((to_rep((a[med5])) = o6) and
   (exists spark__branch6:bool.
   ((spark__branch6 = (if (o6 <  i) then true else false)) and
   (if (spark__branch6 = true) then (((let o7 = (med5 + 1) : int in
   (in_range2(o7) and (left6 = o7))) and
   (spark__branch5 = spark__branch6)) and
   (right6 = right5)) else ((exists o7:int. ((to_rep((a[med5])) = o7) and
                            ((spark__branch5 = (if (i <  o7) then true else false)) and
                            ((spark__branch5 = true) and (let o8 = (med5 - 1)
                            : int in (in_range2(o8) and (right6 = o8))))))) and
   (left6 = left5))))))) and
  (let o6 = (left6 + div((right6 - left6), 2)) : int in (in_range2(o6) and
  (exists med6:int. ((med6 = o6) and
  ((exists o7:int. ((to_rep((a[med6])) = o7) and
   (exists spark__branch6:bool.
   ((spark__branch6 = (if (o7 <  i) then true else false)) and
   ((not (spark__branch6 = true)) and
   (exists o8:int. ((to_rep((a[med6])) = o8) and
   (exists spark__branch7:bool.
   ((spark__branch7 = (if (i <  o8) then true else false)) and
   ((not (spark__branch7 = true)) and
   (binary_search__search__result = med6))))))))))) or
  (exists spark__branch6:bool. exists left7:int. exists right7:int.
  ((exists o7:int. ((to_rep((a[med6])) = o7) and
   (exists spark__branch7:bool.
   ((spark__branch7 = (if (o7 <  i) then true else false)) and
   (if (spark__branch7 = true) then (((let o8 = (med6 + 1) : int in
   (in_range2(o8) and (left7 = o8))) and
   (spark__branch6 = spark__branch7)) and
   (right7 = right6)) else ((exists o8:int. ((to_rep((a[med6])) = o8) and
                            ((spark__branch6 = (if (i <  o8) then true else false)) and
                            ((spark__branch6 = true) and (let o9 = (med6 - 1)
                            : int in (in_range2(o9) and (right7 = o9))))))) and
   (left7 = left6))))))) and
  (let o7 = (left7 + div((right7 - left7), 2)) : int in (in_range2(o7) and
  (exists med7:int. ((med7 = o7) and
  ((exists o8:int. ((to_rep((a[med7])) = o8) and
   (exists spark__branch7:bool.
   ((spark__branch7 = (if (o8 <  i) then true else false)) and
   ((not (spark__branch7 = true)) and
   (exists o9:int. ((to_rep((a[med7])) = o9) and
   (exists spark__branch8:bool.
   ((spark__branch8 = (if (i <  o9) then true else false)) and
   ((not (spark__branch8 = true)) and
   (binary_search__search__result = med7))))))))))) or
  (exists spark__branch7:bool. exists left8:int. exists right8:int.
  ((exists o8:int. ((to_rep((a[med7])) = o8) and
   (exists spark__branch8:bool.
   ((spark__branch8 = (if (o8 <  i) then true else false)) and
   (if (spark__branch8 = true) then (((let o9 = (med7 + 1) : int in
   (in_range2(o9) and (left8 = o9))) and
   (spark__branch7 = spark__branch8)) and
   (right8 = right7)) else ((exists o9:int. ((to_rep((a[med7])) = o9) and
                            ((spark__branch7 = (if (i <  o9) then true else false)) and
                            ((spark__branch7 = true) and (let o10 =
                            (med7 - 1) : int in (in_range2(o10) and
                            (right8 = o10))))))) and
   (left8 = left7))))))) and
  (let o8 = (left8 + div((right8 - left8), 2)) : int in (in_range2(o8) and
  (exists med8:int. ((med8 = o8) and
  ((exists o9:int. ((to_rep((a[med8])) = o9) and
   (exists spark__branch8:bool.
   ((spark__branch8 = (if (o9 <  i) then true else false)) and
   ((not (spark__branch8 = true)) and
   (exists o10:int. ((to_rep((a[med8])) = o10) and
   (exists spark__branch9:bool.
   ((spark__branch9 = (if (i <  o10) then true else false)) and
   ((not (spark__branch9 = true)) and
   (binary_search__search__result = med8))))))))))) or
  (exists spark__branch8:bool. exists left9:int. exists right9:int.
  ((exists o9:int. ((to_rep((a[med8])) = o9) and
   (exists spark__branch9:bool.
   ((spark__branch9 = (if (o9 <  i) then true else false)) and
   (if (spark__branch9 = true) then (((let o10 = (med8 + 1) : int in
   (in_range2(o10) and (left9 = o10))) and
   (spark__branch8 = spark__branch9)) and
   (right9 = right8)) else ((exists o10:int. ((to_rep((a[med8])) = o10) and
                            ((spark__branch8 = (if (i <  o10) then true else false)) and
                            ((spark__branch8 = true) and (let o11 =
                            (med8 - 1) : int in (in_range2(o11) and
                            (right9 = o11))))))) and
   (left9 = left8))))))) and
  (let o9 = (left9 + div((right9 - left9), 2)) : int in (in_range2(o9) and
  (exists med9:int. ((med9 = o9) and
  ((exists o10:int. ((to_rep((a[med9])) = o10) and
   (exists spark__branch9:bool.
   ((spark__branch9 = (if (o10 <  i) then true else false)) and
   ((not (spark__branch9 = true)) and
   (exists o11:int. ((to_rep((a[med9])) = o11) and
   (exists spark__branch10:bool.
   ((spark__branch10 = (if (i <  o11) then true else false)) and
   ((not (spark__branch10 = true)) and
   (binary_search__search__result = med9))))))))))) or
  (exists spark__branch9:bool. exists left10:int. exists right10:int.
  ((exists o10:int. ((to_rep((a[med9])) = o10) and
   (exists spark__branch10:bool.
   ((spark__branch10 = (if (o10 <  i) then true else false)) and
   (if (spark__branch10 = true) then (((let o11 = (med9 + 1) : int in
   (in_range2(o11) and (left10 = o11))) and
   (spark__branch9 = spark__branch10)) and
   (right10 = right9)) else ((exists o11:int. ((to_rep((a[med9])) = o11) and
                             ((spark__branch9 = (if (i <  o11) then true else false)) and
                             ((spark__branch9 = true) and (let o12 =
                             (med9 - 1) : int in (in_range2(o12) and
                             (right10 = o12))))))) and
   (left10 = left9))))))) and
  (let o10 = (left10 + div((right10 - left10), 2)) : int in
  (in_range2(o10) and
  (exists med10:int. ((med10 = o10) and
  (exists o11:int. ((to_rep((a[med10])) = o11) and
  (exists spark__branch10:bool.
  ((spark__branch10 = (if (o11 <  i) then true else false)) and
  ((not (spark__branch10 = true)) and
  (exists o12:int. ((to_rep((a[med10])) = o12) and
  (exists spark__branch11:bool.
  ((spark__branch11 = (if (i <  o12) then true else false)) and
  ((not (spark__branch11 = true)) and
  (binary_search__search__result = med10)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) or
  ((let o1 = (left1 + div((right1 - left1), 2)) : int in (in_range2(o1) and
  (exists med1:int. ((med1 = o1) and
  (exists spark__branch1:bool. exists left2:int. exists right2:int.
  ((exists o2:int. ((to_rep((a[med1])) = o2) and
   (exists spark__branch2:bool.
   ((spark__branch2 = (if (o2 <  i) then true else false)) and
   (if (spark__branch2 = true) then (((let o3 = (med1 + 1) : int in
   (in_range2(o3) and (left2 = o3))) and
   (spark__branch1 = spark__branch2)) and
   (right2 = right1)) else ((exists o3:int. ((to_rep((a[med1])) = o3) and
                            ((spark__branch1 = (if (i <  o3) then true else false)) and
                            ((spark__branch1 = true) and (let o4 = (med1 - 1)
                            : int in (in_range2(o4) and (right2 = o4))))))) and
   (left2 = left1))))))) and
  (let o2 = (left2 + div((right2 - left2), 2)) : int in (in_range2(o2) and
  (exists med2:int. ((med2 = o2) and
  (exists spark__branch2:bool. exists left3:int. exists right3:int.
  ((exists o3:int. ((to_rep((a[med2])) = o3) and
   (exists spark__branch3:bool.
   ((spark__branch3 = (if (o3 <  i) then true else false)) and
   (if (spark__branch3 = true) then (((let o4 = (med2 + 1) : int in
   (in_range2(o4) and (left3 = o4))) and
   (spark__branch2 = spark__branch3)) and
   (right3 = right2)) else ((exists o4:int. ((to_rep((a[med2])) = o4) and
                            ((spark__branch2 = (if (i <  o4) then true else false)) and
                            ((spark__branch2 = true) and (let o5 = (med2 - 1)
                            : int in (in_range2(o5) and (right3 = o5))))))) and
   (left3 = left2))))))) and
  (let o3 = (left3 + div((right3 - left3), 2)) : int in (in_range2(o3) and
  (exists med3:int. ((med3 = o3) and
  (exists spark__branch3:bool. exists left4:int. exists right4:int.
  ((exists o4:int. ((to_rep((a[med3])) = o4) and
   (exists spark__branch4:bool.
   ((spark__branch4 = (if (o4 <  i) then true else false)) and
   (if (spark__branch4 = true) then (((let o5 = (med3 + 1) : int in
   (in_range2(o5) and (left4 = o5))) and
   (spark__branch3 = spark__branch4)) and
   (right4 = right3)) else ((exists o5:int. ((to_rep((a[med3])) = o5) and
                            ((spark__branch3 = (if (i <  o5) then true else false)) and
                            ((spark__branch3 = true) and (let o6 = (med3 - 1)
                            : int in (in_range2(o6) and (right4 = o6))))))) and
   (left4 = left3))))))) and
  (let o4 = (left4 + div((right4 - left4), 2)) : int in (in_range2(o4) and
  (exists med4:int. ((med4 = o4) and
  (exists spark__branch4:bool. exists left5:int. exists right5:int.
  ((exists o5:int. ((to_rep((a[med4])) = o5) and
   (exists spark__branch5:bool.
   ((spark__branch5 = (if (o5 <  i) then true else false)) and
   (if (spark__branch5 = true) then (((let o6 = (med4 + 1) : int in
   (in_range2(o6) and (left5 = o6))) and
   (spark__branch4 = spark__branch5)) and
   (right5 = right4)) else ((exists o6:int. ((to_rep((a[med4])) = o6) and
                            ((spark__branch4 = (if (i <  o6) then true else false)) and
                            ((spark__branch4 = true) and (let o7 = (med4 - 1)
                            : int in (in_range2(o7) and (right5 = o7))))))) and
   (left5 = left4))))))) and
  (let o5 = (left5 + div((right5 - left5), 2)) : int in (in_range2(o5) and
  (exists med5:int. ((med5 = o5) and
  (exists spark__branch5:bool. exists left6:int. exists right6:int.
  ((exists o6:int. ((to_rep((a[med5])) = o6) and
   (exists spark__branch6:bool.
   ((spark__branch6 = (if (o6 <  i) then true else false)) and
   (if (spark__branch6 = true) then (((let o7 = (med5 + 1) : int in
   (in_range2(o7) and (left6 = o7))) and
   (spark__branch5 = spark__branch6)) and
   (right6 = right5)) else ((exists o7:int. ((to_rep((a[med5])) = o7) and
                            ((spark__branch5 = (if (i <  o7) then true else false)) and
                            ((spark__branch5 = true) and (let o8 = (med5 - 1)
                            : int in (in_range2(o8) and (right6 = o8))))))) and
   (left6 = left5))))))) and
  (let o6 = (left6 + div((right6 - left6), 2)) : int in (in_range2(o6) and
  (exists med6:int. ((med6 = o6) and
  (exists spark__branch6:bool. exists left7:int. exists right7:int.
  ((exists o7:int. ((to_rep((a[med6])) = o7) and
   (exists spark__branch7:bool.
   ((spark__branch7 = (if (o7 <  i) then true else false)) and
   (if (spark__branch7 = true) then (((let o8 = (med6 + 1) : int in
   (in_range2(o8) and (left7 = o8))) and
   (spark__branch6 = spark__branch7)) and
   (right7 = right6)) else ((exists o8:int. ((to_rep((a[med6])) = o8) and
                            ((spark__branch6 = (if (i <  o8) then true else false)) and
                            ((spark__branch6 = true) and (let o9 = (med6 - 1)
                            : int in (in_range2(o9) and (right7 = o9))))))) and
   (left7 = left6))))))) and
  (let o7 = (left7 + div((right7 - left7), 2)) : int in (in_range2(o7) and
  (exists med7:int. ((med7 = o7) and
  (exists spark__branch7:bool. exists left8:int. exists right8:int.
  ((exists o8:int. ((to_rep((a[med7])) = o8) and
   (exists spark__branch8:bool.
   ((spark__branch8 = (if (o8 <  i) then true else false)) and
   (if (spark__branch8 = true) then (((let o9 = (med7 + 1) : int in
   (in_range2(o9) and (left8 = o9))) and
   (spark__branch7 = spark__branch8)) and
   (right8 = right7)) else ((exists o9:int. ((to_rep((a[med7])) = o9) and
                            ((spark__branch7 = (if (i <  o9) then true else false)) and
                            ((spark__branch7 = true) and (let o10 =
                            (med7 - 1) : int in (in_range2(o10) and
                            (right8 = o10))))))) and
   (left8 = left7))))))) and
  (let o8 = (left8 + div((right8 - left8), 2)) : int in (in_range2(o8) and
  (exists med8:int. ((med8 = o8) and
  (exists spark__branch8:bool. exists left9:int. exists right9:int.
  ((exists o9:int. ((to_rep((a[med8])) = o9) and
   (exists spark__branch9:bool.
   ((spark__branch9 = (if (o9 <  i) then true else false)) and
   (if (spark__branch9 = true) then (((let o10 = (med8 + 1) : int in
   (in_range2(o10) and (left9 = o10))) and
   (spark__branch8 = spark__branch9)) and
   (right9 = right8)) else ((exists o10:int. ((to_rep((a[med8])) = o10) and
                            ((spark__branch8 = (if (i <  o10) then true else false)) and
                            ((spark__branch8 = true) and (let o11 =
                            (med8 - 1) : int in (in_range2(o11) and
                            (right9 = o11))))))) and
   (left9 = left8))))))) and
  (let o9 = (left9 + div((right9 - left9), 2)) : int in (in_range2(o9) and
  (exists med9:int. ((med9 = o9) and
  (exists spark__branch9:bool. exists left10:int. exists right10:int.
  ((exists o10:int. ((to_rep((a[med9])) = o10) and
   (exists spark__branch10:bool.
   ((spark__branch10 = (if (o10 <  i) then true else false)) and
   (if (spark__branch10 = true) then (((let o11 = (med9 + 1) : int in
   (in_range2(o11) and (left10 = o11))) and
   (spark__branch9 = spark__branch10)) and
   (right10 = right9)) else ((exists o11:int. ((to_rep((a[med9])) = o11) and
                             ((spark__branch9 = (if (i <  o11) then true else false)) and
                             ((spark__branch9 = true) and (let o12 =
                             (med9 - 1) : int in (in_range2(o12) and
                             (right10 = o12))))))) and
   (left10 = left9))))))) and
  (let o10 = (left10 + div((right10 - left10), 2)) : int in
  (in_range2(o10) and
  (exists med10:int. ((med10 = o10) and
  (exists o11:int. ((to_rep((a[med10])) = o11) and
  (exists spark__branch10:bool.
  ((spark__branch10 = (if (o11 <  i) then true else false)) and
  (if (spark__branch10 = true) then in_range2((med10 + 1)) else (exists o12:int.
                                                                ((to_rep((a[med10])) = o12) and
                                                                (exists spark__branch11:bool.
                                                                ((spark__branch11 = (if (i <  o12) then true else false)) and
                                                                ((spark__branch11 = true) and
                                                                in_range2((med10 - 1)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) and
  (binary_search__search__result = 0))))))))))))))) ->
  (((1 <= binary_search__search__result) and
  (binary_search__search__result <= 10)) ->
  (to_rep((a[binary_search__search__result])) = i)))))))
