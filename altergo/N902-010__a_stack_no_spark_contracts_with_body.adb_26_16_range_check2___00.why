(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic attr__ATTRIBUTE_ADDRESS : int

logic is_empty : int -> bool

logic is_empty__function_guard : bool, int -> prop

type stack_pointer

logic stack_pointerqtint : stack_pointer -> int

axiom stack_pointerqtaxiom :
  (forall i:stack_pointer. (0 <= stack_pointerqtint(i)))

axiom stack_pointerqtaxiom1 :
  (forall i:stack_pointer. (stack_pointerqtint(i) <= 100))

predicate in_range(x: int) = ((0 <= x) and (x <= 100))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : stack_pointer, stack_pointer -> bool

logic dummy : stack_pointer

type stack_pointer__ref = { stack_pointer__content : stack_pointer
}

function stack_pointer__ref_stack_pointer__content__projection(a: stack_pointer__ref) : stack_pointer =
  (a).stack_pointer__content

predicate dynamic_invariant(temp___expr_169: int, temp___is_init_165: bool,
  temp___skip_constant_166: bool, temp___do_toplevel_167: bool,
  temp___do_typ_inv_168: bool) = (((temp___is_init_165 = true) or
  (0 <= 100)) -> in_range(temp___expr_169))

axiom is_empty__def_axiom :
  (forall a_stack_no_spark_contracts_with_body__sp:int
  [is_empty(a_stack_no_spark_contracts_with_body__sp)].
  ((is_empty(a_stack_no_spark_contracts_with_body__sp) = true) ->
  (a_stack_no_spark_contracts_with_body__sp = 0)))

axiom is_empty__def_axiom1 :
  (forall a_stack_no_spark_contracts_with_body__sp:int
  [is_empty(a_stack_no_spark_contracts_with_body__sp)].
  ((a_stack_no_spark_contracts_with_body__sp = 0) ->
  (is_empty(a_stack_no_spark_contracts_with_body__sp) = true)))

type item

logic itemqtint : item -> int

axiom itemqtaxiom : (forall i:item. (0 <= itemqtint(i)))

axiom itemqtaxiom1 : (forall i:item. (itemqtint(i) <= 20))

predicate in_range1(x: int) = ((0 <= x) and (x <= 20))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : item, item -> bool

logic dummy1 : item

type item__ref = { item__content : item
}

function item__ref_item__content__projection(a: item__ref) : item =
  (a).item__content

function to_rep(x: item) : int = itemqtint(x)

logic of_rep : int -> item

axiom inversion_axiom : (forall x:item [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:item [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,item) farray
}

logic slide : (int,item) farray, int, int -> (int,item) farray

axiom slide_eq :
  (forall a:(int,item) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,item) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,item) farray, a__first: int, a__last: int,
  b: (int,item) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep((a[temp___idx_156])) = to_rep((b[((b__first - a__first) + temp___idx_156)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,item) farray. forall b:(int,item) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,item) farray. forall b:(int,item) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,item) farray. forall b:(int,item) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,item) farray. forall b:(int,item) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep((a[temp___idx_156])) = to_rep((b[((b__first - a__first) + temp___idx_156)]))))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_invariant1(temp___expr_162: int, temp___is_init_158: bool,
  temp___skip_constant_159: bool, temp___do_toplevel_160: bool,
  temp___do_typ_inv_161: bool) = (((temp___is_init_158 = true) or
  (0 <= 20)) -> in_range1(temp___expr_162))

type index

logic indexqtint : index -> int

axiom indexqtaxiom : (forall i:index. (1 <= indexqtint(i)))

axiom indexqtaxiom1 : (forall i:index. (indexqtint(i) <= 100))

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : index, index -> bool

logic dummy2 : index

type index__ref = { index__content : index
}

function index__ref_index__content__projection(a: index__ref) : index =
  (a).index__content

predicate dynamic_invariant2(temp___expr_176: int, temp___is_init_172: bool,
  temp___skip_constant_173: bool, temp___do_toplevel_174: bool,
  temp___do_typ_inv_175: bool) = (((temp___is_init_172 = true) or
  (1 <= 100)) -> in_range2(temp___expr_176))

 (* File "a_stack_no_spark_contracts_with_body.ads", line 14, characters 0-0 *)
goal defqtvc :
  (forall sp:int. forall vec:(int,item) farray. forall it:int.
  (dynamic_invariant(sp, true, false, true, true) -> (dynamic_invariant1(it,
  false, false, true, true) ->
  ((forall sp1:int. is_empty__function_guard(is_empty(sp1), sp1)) ->
  ((not (is_empty(sp) = true)) -> (((1 <= sp) and (sp <= 100)) ->
  ((exists o:int. (to_rep((vec[sp])) = o)) -> in_range((sp - 1)))))))))
