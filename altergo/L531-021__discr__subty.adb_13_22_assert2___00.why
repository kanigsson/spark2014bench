(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq2(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range2(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE2 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> bool

function to_rep1(x: natural) : int = naturalqtint(x)

logic of_rep1 : int -> natural

axiom inversion_axiom1 :
  (forall x:natural [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:natural [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type enum

predicate in_range3(x: int) = ((0 <= x) and (x <= 2))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : enum, enum -> bool

logic dummy2 : enum

type enum__ref = { enum__content : enum
}

function enum__ref_enum__content__projection(a: enum__ref) : enum =
  (a).enum__content

logic to_rep2 : enum -> int

logic of_rep2 : int -> enum

axiom inversion_axiom2 :
  (forall x:enum [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:enum [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_discrs = { rec__basic__r__x : enum
}

function us_split_discrs_rec__basic__r__x__projection(a: us_split_discrs) : enum =
  (a).rec__basic__r__x

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__basic__r__base : integer;
rec__basic__r__a_field : integer; rec__basic__r__c_field1 : bool;
rec__basic__r__c_field2 : natural
}

function us_split_fields_rec__basic__r__base__projection(a: us_split_fields) : integer =
  (a).rec__basic__r__base

function us_split_fields_rec__basic__r__a_field__projection(a: us_split_fields) : integer =
  (a).rec__basic__r__a_field

function us_split_fields_rec__basic__r__c_field1__projection(a: us_split_fields) : bool =
  (a).rec__basic__r__c_field1

function us_split_fields_rec__basic__r__c_field2__projection(a: us_split_fields) : natural =
  (a).rec__basic__r__c_field2

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

predicate basic__r__a_field__pred(a: us_rep) =
  (to_rep2(((a).us_split_discrs1).rec__basic__r__x) = 0)

predicate basic__r__c_field1__pred(a: us_rep) =
  (to_rep2(((a).us_split_discrs1).rec__basic__r__x) = 2)

predicate basic__r__c_field2__pred(a: us_rep) =
  (to_rep2(((a).us_split_discrs1).rec__basic__r__x) = 2)

function bool_eq4(a: us_rep, b: us_rep) : bool =
  (if ((to_rep2(((a).us_split_discrs1).rec__basic__r__x) = to_rep2(((b).us_split_discrs1).rec__basic__r__x)) and
  (((to_rep(((a).us_split_fields1).rec__basic__r__base) = to_rep(((b).us_split_fields1).rec__basic__r__base)) and
  (basic__r__a_field__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__basic__r__a_field) = to_rep(((b).us_split_fields1).rec__basic__r__a_field)))) and
  ((basic__r__c_field1__pred(a) ->
  (to_int(((a).us_split_fields1).rec__basic__r__c_field1) = to_int(((b).us_split_fields1).rec__basic__r__c_field1))) and
  (basic__r__c_field2__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__basic__r__c_field2) = to_rep1(((b).us_split_fields1).rec__basic__r__c_field2)))))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic basic__r__x__first__bit : int

logic basic__r__x__last__bit : int

logic basic__r__x__position : int

axiom basic__r__x__first__bit_axiom : (0 <= basic__r__x__first__bit)

axiom basic__r__x__last__bit_axiom :
  (basic__r__x__first__bit <  basic__r__x__last__bit)

axiom basic__r__x__position_axiom : (0 <= basic__r__x__position)

logic basic__r__base__first__bit : int

logic basic__r__base__last__bit : int

logic basic__r__base__position : int

axiom basic__r__base__first__bit_axiom : (0 <= basic__r__base__first__bit)

axiom basic__r__base__last__bit_axiom :
  (basic__r__base__first__bit <  basic__r__base__last__bit)

axiom basic__r__base__position_axiom : (0 <= basic__r__base__position)

logic basic__r__a_field__first__bit : int

logic basic__r__a_field__last__bit : int

logic basic__r__a_field__position : int

axiom basic__r__a_field__first__bit_axiom :
  (0 <= basic__r__a_field__first__bit)

axiom basic__r__a_field__last__bit_axiom :
  (basic__r__a_field__first__bit <  basic__r__a_field__last__bit)

axiom basic__r__a_field__position_axiom : (0 <= basic__r__a_field__position)

logic basic__r__c_field1__first__bit : int

logic basic__r__c_field1__last__bit : int

logic basic__r__c_field1__position : int

axiom basic__r__c_field1__first__bit_axiom :
  (0 <= basic__r__c_field1__first__bit)

axiom basic__r__c_field1__last__bit_axiom :
  (basic__r__c_field1__first__bit <  basic__r__c_field1__last__bit)

axiom basic__r__c_field1__position_axiom :
  (0 <= basic__r__c_field1__position)

logic basic__r__c_field2__first__bit : int

logic basic__r__c_field2__last__bit : int

logic basic__r__c_field2__position : int

axiom basic__r__c_field2__first__bit_axiom :
  (0 <= basic__r__c_field2__first__bit)

axiom basic__r__c_field2__last__bit_axiom :
  (basic__r__c_field2__first__bit <  basic__r__c_field2__last__bit)

axiom basic__r__c_field2__position_axiom :
  (0 <= basic__r__c_field2__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type r__ref = { r__content : us_rep
}

function r__ref_r__content__projection(a: r__ref) : us_rep = (a).r__content

predicate in_range4(rec__basic__r__x1: int, a: us_rep) =
  (rec__basic__r__x1 = to_rep2(((a).us_split_discrs1).rec__basic__r__x))

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic basic__r__x__first__bit1 : int

logic basic__r__x__last__bit1 : int

logic basic__r__x__position1 : int

axiom basic__r__x__first__bit_axiom1 : (0 <= basic__r__x__first__bit1)

axiom basic__r__x__last__bit_axiom1 :
  (basic__r__x__first__bit1 <  basic__r__x__last__bit1)

axiom basic__r__x__position_axiom1 : (0 <= basic__r__x__position1)

logic basic__r__c_field1__first__bit1 : int

logic basic__r__c_field1__last__bit1 : int

logic basic__r__c_field1__position1 : int

axiom basic__r__c_field1__first__bit_axiom1 :
  (0 <= basic__r__c_field1__first__bit1)

axiom basic__r__c_field1__last__bit_axiom1 :
  (basic__r__c_field1__first__bit1 <  basic__r__c_field1__last__bit1)

axiom basic__r__c_field1__position_axiom1 :
  (0 <= basic__r__c_field1__position1)

logic basic__r__c_field2__first__bit1 : int

logic basic__r__c_field2__last__bit1 : int

logic basic__r__c_field2__position1 : int

axiom basic__r__c_field2__first__bit_axiom1 :
  (0 <= basic__r__c_field2__first__bit1)

axiom basic__r__c_field2__last__bit_axiom1 :
  (basic__r__c_field2__first__bit1 <  basic__r__c_field2__last__bit1)

axiom basic__r__c_field2__position_axiom1 :
  (0 <= basic__r__c_field2__position1)

logic basic__r__base__first__bit1 : int

logic basic__r__base__last__bit1 : int

logic basic__r__base__position1 : int

axiom basic__r__base__first__bit_axiom1 : (0 <= basic__r__base__first__bit1)

axiom basic__r__base__last__bit_axiom1 :
  (basic__r__base__first__bit1 <  basic__r__base__last__bit1)

axiom basic__r__base__position_axiom1 : (0 <= basic__r__base__position1)

logic basic__r__a_field__first__bit1 : int

logic basic__r__a_field__last__bit1 : int

logic basic__r__a_field__position1 : int

axiom basic__r__a_field__first__bit_axiom1 :
  (0 <= basic__r__a_field__first__bit1)

axiom basic__r__a_field__last__bit_axiom1 :
  (basic__r__a_field__first__bit1 <  basic__r__a_field__last__bit1)

axiom basic__r__a_field__position_axiom1 :
  (0 <= basic__r__a_field__position1)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type s__ref = { s__content : us_rep
}

function s__ref_s__content__projection(a: s__ref) : us_rep = (a).s__content

logic v : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic z__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant(temp___expr_171: us_rep,
  temp___is_init_167: bool, temp___skip_constant_168: bool,
  temp___do_toplevel_169: bool, temp___do_typ_inv_170: bool) =
  ((not (temp___skip_constant_168 = true)) -> in_range4(0, temp___expr_171))

predicate default_initial_assumption(temp___expr_173: us_rep,
  temp___skip_top_level_174: bool) =
  (to_rep2(((temp___expr_173).us_split_discrs1).rec__basic__r__x) = 0)

predicate in_range5(rec__basic__r__x1: int, a: us_rep) =
  (rec__basic__r__x1 = to_rep2(((a).us_split_discrs1).rec__basic__r__x))

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic basic__r__x__first__bit2 : int

logic basic__r__x__last__bit2 : int

logic basic__r__x__position2 : int

axiom basic__r__x__first__bit_axiom2 : (0 <= basic__r__x__first__bit2)

axiom basic__r__x__last__bit_axiom2 :
  (basic__r__x__first__bit2 <  basic__r__x__last__bit2)

axiom basic__r__x__position_axiom2 : (0 <= basic__r__x__position2)

logic basic__r__c_field1__first__bit2 : int

logic basic__r__c_field1__last__bit2 : int

logic basic__r__c_field1__position2 : int

axiom basic__r__c_field1__first__bit_axiom2 :
  (0 <= basic__r__c_field1__first__bit2)

axiom basic__r__c_field1__last__bit_axiom2 :
  (basic__r__c_field1__first__bit2 <  basic__r__c_field1__last__bit2)

axiom basic__r__c_field1__position_axiom2 :
  (0 <= basic__r__c_field1__position2)

logic basic__r__c_field2__first__bit2 : int

logic basic__r__c_field2__last__bit2 : int

logic basic__r__c_field2__position2 : int

axiom basic__r__c_field2__first__bit_axiom2 :
  (0 <= basic__r__c_field2__first__bit2)

axiom basic__r__c_field2__last__bit_axiom2 :
  (basic__r__c_field2__first__bit2 <  basic__r__c_field2__last__bit2)

axiom basic__r__c_field2__position_axiom2 :
  (0 <= basic__r__c_field2__position2)

logic basic__r__base__first__bit2 : int

logic basic__r__base__last__bit2 : int

logic basic__r__base__position2 : int

axiom basic__r__base__first__bit_axiom2 : (0 <= basic__r__base__first__bit2)

axiom basic__r__base__last__bit_axiom2 :
  (basic__r__base__first__bit2 <  basic__r__base__last__bit2)

axiom basic__r__base__position_axiom2 : (0 <= basic__r__base__position2)

logic basic__r__a_field__first__bit2 : int

logic basic__r__a_field__last__bit2 : int

logic basic__r__a_field__position2 : int

axiom basic__r__a_field__first__bit_axiom2 :
  (0 <= basic__r__a_field__first__bit2)

axiom basic__r__a_field__last__bit_axiom2 :
  (basic__r__a_field__first__bit2 <  basic__r__a_field__last__bit2)

axiom basic__r__a_field__position_axiom2 :
  (0 <= basic__r__a_field__position2)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : us_rep

type t1b__ref = { t1b__content : us_rep
}

function t1b__ref_t1b__content__projection(a: t1b__ref) : us_rep =
  (a).t1b__content

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

predicate dynamic_invariant2(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

predicate dynamic_invariant3(temp___expr_158: int, temp___is_init_154: bool,
  temp___skip_constant_155: bool, temp___do_toplevel_156: bool,
  temp___do_typ_inv_157: bool) = (((temp___is_init_154 = true) or
  (0 <= 2)) -> in_range3(temp___expr_158))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 1)

 (* File "subty.ads", line 7, characters 0-0 *)
goal defqtvc : (dynamic_invariant(v, true, false, true, true) ->
  (forall o:enum. ((to_rep2(o) = 0) -> (let o1 = { us_split_discrs1 = {
  rec__basic__r__x = o }; us_split_fields1 = { rec__basic__r__base =
  rliteral; rec__basic__r__a_field = rliteral; rec__basic__r__c_field1 =
  true; rec__basic__r__c_field2 = dummy1 } } : us_rep in
  (forall z__split_fields:us_split_fields.
  ((z__split_fields = (o1).us_split_fields1) ->
  ((z__split_discrs = (o1).us_split_discrs1) -> (dynamic_invariant({
  us_split_discrs1 = z__split_discrs; us_split_fields1 = z__split_fields },
  true, false, true, true) ->
  ((to_rep2((z__split_discrs).rec__basic__r__x) = 0) ->
  ((to_rep((z__split_fields).rec__basic__r__base) = 1) ->
  ((to_rep((z__split_fields).rec__basic__r__a_field) = 1) ->
  ((to_rep2(((v).us_split_discrs1).rec__basic__r__x) = 0) ->
  (forall o2:int.
  ((to_rep(((v).us_split_fields1).rec__basic__r__a_field) = o2) -> (let o3 =
  (o2 + 1) : int in (in_range(o3) ->
  (forall o4:integer. ((to_rep(o4) = o3) ->
  (forall z__split_fields1:us_split_fields. ((z__split_fields1 = {
  rec__basic__r__base = (z__split_fields).rec__basic__r__base;
  rec__basic__r__a_field = o4; rec__basic__r__c_field1 =
  (z__split_fields).rec__basic__r__c_field1; rec__basic__r__c_field2 =
  (z__split_fields).rec__basic__r__c_field2 }) ->
  ((to_rep((z__split_fields1).rec__basic__r__a_field) = (to_rep(((v).us_split_fields1).rec__basic__r__a_field) + 1)) ->
  (to_rep2((z__split_discrs).rec__basic__r__x) = 0))))))))))))))))))))))
