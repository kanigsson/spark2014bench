(* this is a prelude for Alt-Ergo integer arithmetic *)
(* this is a prelude for Alt-Ergo real arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

type t

logic tqtreal : t -> real

logic tqtisFinite : t -> prop

axiom tqtaxiom :
  (forall x:t. (tqtisFinite(x) ->
  ((-340282346638528859811704183484516925440.0) <= tqtreal(x))))

axiom tqtaxiom1 :
  (forall x:t. (tqtisFinite(x) ->
  (tqtreal(x) <= 340282346638528859811704183484516925440.0)))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

axiom Abs_le :
  (forall x:real. forall y:real. ((abs_real(x) <= y) -> ((-y) <= x)))

axiom Abs_le1 :
  (forall x:real. forall y:real. ((abs_real(x) <= y) -> (x <= y)))

axiom Abs_le2 :
  (forall x:real. forall y:real. ((((-y) <= x) and (x <= y)) ->
  (abs_real(x) <= y)))

axiom Abs_pos : (forall x:real. (0.0 <= abs_real(x)))

axiom Abs_sum :
  (forall x:real. forall y:real.
  (abs_real((x + y)) <= (abs_real(x) + abs_real(y))))

axiom Abs_prod :
  (forall x:real. forall y:real.
  (abs_real((x * y)) = (abs_real(x) * abs_real(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs_real((x - z)) <= (abs_real((x - y)) + abs_real((y - z)))))

axiom Injective :
  (forall x:int. forall y:int. ((real_of_int(x) = real_of_int(y)) ->
  (x = y)))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) ->
  (real_of_int(x) <= real_of_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(real_of_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> (real_of_int(truncate(x)) <= x)))

axiom Truncate_down_pos1 :
  (forall x:real. ((0.0 <= x) -> (x <  real_of_int((truncate(x) + 1)))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> (real_of_int((truncate(x) - 1)) <  x)))

axiom Truncate_up_neg1 :
  (forall x:real. ((x <= 0.0) -> (x <= real_of_int(truncate(x)))))

axiom Real_of_truncate :
  (forall x:real. ((x - 1.0) <= real_of_int(truncate(x))))

axiom Real_of_truncate1 :
  (forall x:real. (real_of_int(truncate(x)) <= (x + 1.0)))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= real_of_int(i)) ->
  (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((real_of_int(i) <= x) ->
  (i <= truncate(x))))

axiom Floor_int : (forall i:int. (int_floor(real_of_int(i)) = i))

axiom Ceil_int : (forall i:int. (int_ceil(real_of_int(i)) = i))

axiom Floor_down : (forall x:real. (real_of_int(int_floor(x)) <= x))

axiom Floor_down1 : (forall x:real. (x <  real_of_int((int_floor(x) + 1))))

axiom Ceil_up : (forall x:real. (real_of_int((int_ceil(x) - 1)) <  x))

axiom Ceil_up1 : (forall x:real. (x <= real_of_int(int_ceil(x))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) ->
  (int_floor(x) <= int_floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (int_ceil(x) <= int_ceil(y))))

logic match_mode : fpa_rounding_mode, 'a, 'a, 'a, 'a, 'a -> 'a

axiom match_mode_RNE :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToEven, z, z1, z2, z3, z4) = z))

axiom match_mode_RNA :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToAway, z, z1, z2, z3, z4) = z1))

axiom match_mode_RTP :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Up, z, z1, z2, z3, z4) = z2))

axiom match_mode_RTN :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Down, z, z1, z2, z3, z4) = z3))

axiom match_mode_RTZ :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(ToZero, z, z1, z2, z3, z4) = z4))

predicate to_nearest(m: fpa_rounding_mode) = ((m = NearestTiesToEven) or
  (m = NearestTiesToAway))

logic zeroF : t

logic add : fpa_rounding_mode, t, t -> t

logic sub : fpa_rounding_mode, t, t -> t

logic mul : fpa_rounding_mode, t, t -> t

logic div : fpa_rounding_mode, t, t -> t

logic abs : t -> t

logic neg : t -> t

logic fma : fpa_rounding_mode, t, t, t -> t

logic sqrt : fpa_rounding_mode, t -> t

logic roundToIntegral : fpa_rounding_mode, t -> t

logic min : t, t -> t

logic max : t, t -> t

logic le : t, t -> prop

logic lt : t, t -> prop

logic eq : t, t -> prop

logic is_normal : t -> prop

logic is_subnormal : t -> prop

logic is_zero : t -> prop

logic is_infinite : t -> prop

logic is_nan : t -> prop

logic is_positive : t -> prop

logic is_negative : t -> prop

predicate is_plus_infinity(x: t) = (is_infinite(x) and is_positive(x))

predicate is_minus_infinity(x: t) = (is_infinite(x) and is_negative(x))

predicate is_plus_zero(x: t) = (is_zero(x) and is_positive(x))

predicate is_minus_zero(x: t) = (is_zero(x) and is_negative(x))

predicate is_not_nan(x: t) = (tqtisFinite(x) or is_infinite(x))

axiom is_not_nan1 : (forall x:t. (is_not_nan(x) -> (not is_nan(x))))

axiom is_not_nan2 : (forall x:t. ((not is_nan(x)) -> is_not_nan(x)))

axiom is_not_finite :
  (forall x:t. ((not tqtisFinite(x)) -> (is_infinite(x) or is_nan(x))))

axiom is_not_finite1 :
  (forall x:t. ((is_infinite(x) or is_nan(x)) -> (not tqtisFinite(x))))

axiom zeroF_is_positive : is_positive(zeroF)

axiom zeroF_is_zero : is_zero(zeroF)

axiom zero_to_real :
  (forall x:t [is_zero(x)]. (is_zero(x) -> tqtisFinite(x)))

axiom zero_to_real1 :
  (forall x:t [is_zero(x)]. (is_zero(x) -> (tqtreal(x) = 0.0)))

axiom zero_to_real2 :
  (forall x:t [is_zero(x)]. ((tqtisFinite(x) and (tqtreal(x) = 0.0)) ->
  is_zero(x)))

logic of_int : fpa_rounding_mode, int -> t

logic to_int : fpa_rounding_mode, t -> int

axiom zero_of_int : (forall m:fpa_rounding_mode. (zeroF = of_int(m, 0)))

logic max_int1 : int

axiom max_real_int : (0x1.FFFFFEp127 = real_of_int(max_int1))

predicate in_range(x: real) = (((-0x1.FFFFFEp127) <= x) and
  (x <= 0x1.FFFFFEp127))

predicate in_int_range(i: int) = (((-max_int1) <= i) and (i <= max_int1))

axiom is_finite : (forall x:t. (tqtisFinite(x) -> in_range(tqtreal(x))))

predicate no_overflow(m: fpa_rounding_mode, x: real) = in_range(float32(m,x))

axiom Bounded_real_no_overflow :
  (forall m:fpa_rounding_mode. forall x:real. (in_range(x) -> no_overflow(m,
  x)))

axiom Round_to_real :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) ->
  (float32(m,tqtreal(x)) = tqtreal(x))))

axiom Round_down_le : (forall x:real. (float32(Down,x) <= x))

axiom Round_up_ge : (forall x:real. (x <= float32(Up,x)))

axiom Round_down_neg :
  (forall x:real. (float32(Down,(-x)) = (-float32(Up,x))))

axiom Round_up_neg : (forall x:real. (float32(Up,(-x)) = (-float32(Down,x))))

predicate in_safe_int_range(i: int) = (((-16777216) <= i) and
  (i <= 16777216))

axiom Exact_rounding_for_integers :
  (forall m:fpa_rounding_mode. forall i:int. (in_safe_int_range(i) ->
  (float32(m,real_of_int(i)) = real_of_int(i))))

predicate same_sign(x: t, y: t) = ((is_positive(x) and is_positive(y)) or
  (is_negative(x) and is_negative(y)))

predicate diff_sign(x: t, y: t) = ((is_positive(x) and is_negative(y)) or
  (is_negative(x) and is_positive(y)))

axiom feq_eq :
  (forall x:t. forall y:t. (tqtisFinite(x) -> (tqtisFinite(y) ->
  ((not is_zero(x)) -> (eq(x, y) -> (x = y))))))

axiom eq_feq :
  (forall x:t. forall y:t. (tqtisFinite(x) -> (tqtisFinite(y) -> ((x = y) ->
  eq(x, y)))))

axiom eq_refl : (forall x:t. (tqtisFinite(x) -> eq(x, x)))

axiom eq_sym : (forall x:t. forall y:t. (eq(x, y) -> eq(y, x)))

axiom eq_trans :
  (forall x:t. forall y:t. forall z:t. (eq(x, y) -> (eq(y, z) -> eq(x, z))))

axiom eq_zero : eq(zeroF, neg(zeroF))

axiom eq_to_real_finite :
  (forall x:t. forall y:t. ((tqtisFinite(x) and tqtisFinite(y)) -> (eq(x,
  y) -> (tqtreal(x) = tqtreal(y)))))

axiom eq_to_real_finite1 :
  (forall x:t. forall y:t. ((tqtisFinite(x) and tqtisFinite(y)) ->
  ((tqtreal(x) = tqtreal(y)) -> eq(x, y))))

axiom lt_finite :
  (forall x:t. forall y:t [lt(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  (lt(x, y) -> (tqtreal(x) <  tqtreal(y)))))

axiom lt_finite1 :
  (forall x:t. forall y:t [lt(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  ((tqtreal(x) <  tqtreal(y)) -> lt(x, y))))

axiom le_finite :
  (forall x:t. forall y:t [le(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  (le(x, y) -> (tqtreal(x) <= tqtreal(y)))))

axiom le_finite1 :
  (forall x:t. forall y:t [le(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  ((tqtreal(x) <= tqtreal(y)) -> le(x, y))))

axiom le_lt_trans :
  (forall x:t. forall y:t. forall z:t. ((le(x, y) and lt(y, z)) -> lt(x, z)))

axiom lt_le_trans :
  (forall x:t. forall y:t. forall z:t. ((lt(x, y) and le(y, z)) -> lt(x, z)))

axiom le_ge_asym :
  (forall x:t. forall y:t. ((le(x, y) and le(y, x)) -> eq(x, y)))

axiom not_lt_ge :
  (forall x:t. forall y:t. (((not lt(x, y)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(y, x)))

axiom not_gt_le :
  (forall x:t. forall y:t. (((not lt(y, x)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(x, y)))

axiom lt_lt_finite :
  (forall x:t. forall y:t. forall z:t. (lt(x, y) -> (lt(y, z) ->
  tqtisFinite(y))))

axiom positive_to_real :
  (forall x:t [is_positive(x)]. (tqtisFinite(x) -> (is_positive(x) ->
  (0.0 <= tqtreal(x)))))

axiom to_real_positive :
  (forall x:t [is_positive(x)]. (tqtisFinite(x) -> ((0.0 <  tqtreal(x)) ->
  is_positive(x))))

axiom negative_to_real :
  (forall x:t [is_negative(x)]. (tqtisFinite(x) -> (is_negative(x) ->
  (tqtreal(x) <= 0.0))))

axiom to_real_negative :
  (forall x:t [is_negative(x)]. (tqtisFinite(x) -> ((tqtreal(x) <  0.0) ->
  is_negative(x))))

axiom negative_xor_positive :
  (forall x:t. (not (is_positive(x) and is_negative(x))))

axiom negative_or_positive :
  (forall x:t. (is_not_nan(x) -> (is_positive(x) or is_negative(x))))

axiom diff_sign_trans :
  (forall x:t. forall y:t. forall z:t. ((diff_sign(x, y) and diff_sign(y,
  z)) -> same_sign(x, z)))

axiom diff_sign_product :
  (forall x:t. forall y:t. ((tqtisFinite(x) and (tqtisFinite(y) and
  ((tqtreal(x) * tqtreal(y)) <  0.0))) -> diff_sign(x, y)))

axiom same_sign_product :
  (forall x:t. forall y:t. ((tqtisFinite(x) and (tqtisFinite(y) and
  same_sign(x, y))) -> (0.0 <= (tqtreal(x) * tqtreal(y)))))

predicate product_sign(z: t, x: t, y: t) = ((same_sign(x, y) ->
  is_positive(z)) and (diff_sign(x, y) -> is_negative(z)))

predicate overflow_value(m: fpa_rounding_mode, x: t) =
  ((((((m = NearestTiesToEven) -> is_infinite(x)) and
  ((m = NearestTiesToAway) -> is_infinite(x))) and ((m = Up) ->
  (if is_positive(x) then is_infinite(x) else (tqtisFinite(x) and
  (tqtreal(x) = (-0x1.FFFFFEp127)))))) and ((m = Down) ->
  (if is_positive(x) then (tqtisFinite(x) and
  (tqtreal(x) = 0x1.FFFFFEp127)) else is_infinite(x)))) and ((m = ToZero) ->
  (if is_positive(x) then (tqtisFinite(x) and
  (tqtreal(x) = 0x1.FFFFFEp127)) else (tqtisFinite(x) and
  (tqtreal(x) = (-0x1.FFFFFEp127))))))

predicate sign_zero_result(m: fpa_rounding_mode, x: t) = (is_zero(x) ->
  ((((((m = NearestTiesToEven) -> is_positive(x)) and
  ((m = NearestTiesToAway) -> is_positive(x))) and ((m = Up) ->
  is_positive(x))) and ((m = Down) -> is_negative(x))) and ((m = ToZero) ->
  is_positive(x))))

axiom add_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> (no_overflow(m,
  (tqtreal(x) + tqtreal(y))) -> tqtisFinite(add(m, x, y))))))

axiom add_finite1 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> (no_overflow(m,
  (tqtreal(x) + tqtreal(y))) -> (tqtreal(add(m, x,
  y)) = float32(m,(tqtreal(x) + tqtreal(y))))))))

axiom add_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (tqtisFinite(add(m, x, y)) -> tqtisFinite(x)))

axiom add_finite_rev1 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (tqtisFinite(add(m, x, y)) -> tqtisFinite(y)))

axiom add_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(add(m, x, y)) -> no_overflow(m,
  (tqtreal(x) + tqtreal(y))))))

axiom add_finite_rev_n1 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(add(m, x, y)) -> (tqtreal(add(m, x,
  y)) = float32(m,(tqtreal(x) + tqtreal(y)))))))

axiom sub_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> (no_overflow(m,
  (tqtreal(x) - tqtreal(y))) -> tqtisFinite(sub(m, x, y))))))

axiom sub_finite1 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> (no_overflow(m,
  (tqtreal(x) - tqtreal(y))) -> (tqtreal(sub(m, x,
  y)) = float32(m,(tqtreal(x) - tqtreal(y))))))))

axiom sub_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (tqtisFinite(sub(m, x, y)) -> tqtisFinite(x)))

axiom sub_finite_rev1 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (tqtisFinite(sub(m, x, y)) -> tqtisFinite(y)))

axiom sub_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(sub(m, x, y)) -> no_overflow(m,
  (tqtreal(x) - tqtreal(y))))))

axiom sub_finite_rev_n1 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(sub(m, x, y)) -> (tqtreal(sub(m, x,
  y)) = float32(m,(tqtreal(x) - tqtreal(y)))))))

axiom mul_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> (no_overflow(m,
  (tqtreal(x) * tqtreal(y))) -> tqtisFinite(mul(m, x, y))))))

axiom mul_finite1 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> (no_overflow(m,
  (tqtreal(x) * tqtreal(y))) -> (tqtreal(mul(m, x,
  y)) = float32(m,(tqtreal(x) * tqtreal(y))))))))

axiom mul_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (tqtisFinite(mul(m, x, y)) -> tqtisFinite(x)))

axiom mul_finite_rev1 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (tqtisFinite(mul(m, x, y)) -> tqtisFinite(y)))

axiom mul_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(mul(m, x, y)) -> no_overflow(m,
  (tqtreal(x) * tqtreal(y))))))

axiom mul_finite_rev_n1 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(mul(m, x, y)) -> (tqtreal(mul(m, x,
  y)) = float32(m,(tqtreal(x) * tqtreal(y)))))))

axiom div_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> ((not is_zero(y)) -> (no_overflow(m,
  (tqtreal(x) / tqtreal(y))) -> tqtisFinite(div(m, x, y)))))))

axiom div_finite1 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> ((not is_zero(y)) -> (no_overflow(m,
  (tqtreal(x) / tqtreal(y))) -> (tqtreal(div(m, x,
  y)) = float32(m,(tqtreal(x) / tqtreal(y)))))))))

axiom div_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (tqtisFinite(div(m, x, y)) -> ((tqtisFinite(x) and (tqtisFinite(y) and
  (not is_zero(y)))) or (tqtisFinite(x) and (is_infinite(y) and
  (tqtreal(div(m, x, y)) = 0.0))))))

axiom div_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(div(m, x, y)) -> (tqtisFinite(y) ->
  no_overflow(m, (tqtreal(x) / tqtreal(y)))))))

axiom div_finite_rev_n1 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(div(m, x, y)) -> (tqtisFinite(y) ->
  (tqtreal(div(m, x, y)) = float32(m,(tqtreal(x) / tqtreal(y))))))))

axiom neg_finite :
  (forall x:t [neg(x)]. (tqtisFinite(x) -> tqtisFinite(neg(x))))

axiom neg_finite1 :
  (forall x:t [neg(x)]. (tqtisFinite(x) ->
  (tqtreal(neg(x)) = (-tqtreal(x)))))

axiom neg_finite_rev :
  (forall x:t [neg(x)]. (tqtisFinite(neg(x)) -> tqtisFinite(x)))

axiom neg_finite_rev1 :
  (forall x:t [neg(x)]. (tqtisFinite(neg(x)) ->
  (tqtreal(neg(x)) = (-tqtreal(x)))))

axiom abs_finite :
  (forall x:t [abs(x)]. (tqtisFinite(x) -> tqtisFinite(abs(x))))

axiom abs_finite1 :
  (forall x:t [abs(x)]. (tqtisFinite(x) ->
  (tqtreal(abs(x)) = abs_real(tqtreal(x)))))

axiom abs_finite2 :
  (forall x:t [abs(x)]. (tqtisFinite(x) -> is_positive(abs(x))))

axiom abs_finite_rev :
  (forall x:t [abs(x)]. (tqtisFinite(abs(x)) -> tqtisFinite(x)))

axiom abs_finite_rev1 :
  (forall x:t [abs(x)]. (tqtisFinite(abs(x)) ->
  (tqtreal(abs(x)) = abs_real(tqtreal(x)))))

axiom abs_universal : (forall x:t [abs(x)]. (not is_negative(abs(x))))

axiom fma_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (tqtisFinite(fma(m, x, y, z)) -> tqtisFinite(x)))

axiom fma_finite_rev1 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (tqtisFinite(fma(m, x, y, z)) -> tqtisFinite(y)))

axiom fma_finite_rev2 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (tqtisFinite(fma(m, x, y, z)) -> tqtisFinite(z)))

axiom fma_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (to_nearest(m) -> (tqtisFinite(fma(m, x, y, z)) -> no_overflow(m,
  ((tqtreal(x) * tqtreal(y)) + tqtreal(z))))))

axiom fma_finite_rev_n1 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (to_nearest(m) -> (tqtisFinite(fma(m, x, y, z)) -> (tqtreal(fma(m,
  x, y, z)) = float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z)))))))

function sqr(x: real) : real = (x * x)

axiom sqrt_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t [sqrt(m, x)]. (tqtisFinite(sqrt(m,
  x)) -> tqtisFinite(x)))

axiom sqrt_finite_rev1 :
  (forall m:fpa_rounding_mode. forall x:t [sqrt(m, x)]. (tqtisFinite(sqrt(m,
  x)) -> (0.0 <= tqtreal(x))))

axiom sqrt_finite_rev2 :
  (forall m:fpa_rounding_mode. forall x:t [sqrt(m, x)]. (tqtisFinite(sqrt(m,
  x)) -> (tqtreal(sqrt(m, x)) = float32(m,sqrt_real(tqtreal(x))))))

predicate same_sign_real(x: t, r: real) = ((is_positive(x) and (0.0 <  r)) or
  (is_negative(x) and (r <  0.0)))

axiom of_int_add_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i + j)) -> eq(of_int(m, (i + j)), add(n, of_int(m, i),
  of_int(m, j)))))))

axiom of_int_sub_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i - j)) -> eq(of_int(m, (i - j)), sub(n, of_int(m, i),
  of_int(m, j)))))))

axiom of_int_mul_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i * j)) -> eq(of_int(m, (i * j)), mul(n, of_int(m, i),
  of_int(m, j)))))))

axiom Min_r : (forall x:t. forall y:t. (le(y, x) -> eq(min(x, y), y)))

axiom Min_l : (forall x:t. forall y:t. (le(x, y) -> eq(min(x, y), x)))

axiom Max_r : (forall x:t. forall y:t. (le(y, x) -> eq(max(x, y), x)))

axiom Max_l : (forall x:t. forall y:t. (le(x, y) -> eq(max(x, y), y)))

logic is_int : t -> prop

axiom zeroF_is_int : is_int(zeroF)

axiom of_int_is_int :
  (forall m:fpa_rounding_mode. forall x:int. (in_int_range(x) ->
  is_int(of_int(m, x))))

axiom big_float_is_int :
  (forall m:fpa_rounding_mode. forall i:t. (tqtisFinite(i) -> ((le(i,
  neg(of_int(m, 16777216))) or le(of_int(m, 16777216), i)) -> is_int(i))))

axiom roundToIntegral_is_int :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) ->
  is_int(roundToIntegral(m, x))))

axiom eq_is_int :
  (forall x:t. forall y:t. (eq(x, y) -> (is_int(x) -> is_int(y))))

axiom add_int :
  (forall x:t. forall y:t. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(add(m, x, y)) -> is_int(add(m, x, y))))))

axiom sub_int :
  (forall x:t. forall y:t. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(sub(m, x, y)) -> is_int(sub(m, x, y))))))

axiom mul_int :
  (forall x:t. forall y:t. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(mul(m, x, y)) -> is_int(mul(m, x, y))))))

axiom fma_int :
  (forall x:t. forall y:t. forall z:t. forall m:fpa_rounding_mode.
  (is_int(x) -> (is_int(y) -> (is_int(z) -> (tqtisFinite(fma(m, x, y, z)) ->
  is_int(fma(m, x, y, z)))))))

axiom neg_int : (forall x:t. (is_int(x) -> is_int(neg(x))))

axiom abs_int1 : (forall x:t. (is_int(x) -> is_int(abs(x))))

axiom is_int_of_int :
  (forall x:t. forall m:fpa_rounding_mode. forall mqt:fpa_rounding_mode.
  (is_int(x) -> eq(x, of_int(mqt, to_int(m, x)))))

axiom is_int_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (is_int(x) ->
  in_int_range(to_int(m, x))))

axiom is_int_is_finite : (forall x:t. (is_int(x) -> tqtisFinite(x)))

axiom int_to_real :
  (forall m:fpa_rounding_mode. forall x:t. (is_int(x) ->
  (tqtreal(x) = real_of_int(to_int(m, x)))))

axiom truncate_int :
  (forall m:fpa_rounding_mode. forall i:t. (is_int(i) ->
  eq(roundToIntegral(m, i), i)))

axiom truncate_neg :
  (forall x:t. (tqtisFinite(x) -> (is_negative(x) -> (roundToIntegral(ToZero,
  x) = roundToIntegral(Up, x)))))

axiom truncate_pos :
  (forall x:t. (tqtisFinite(x) -> (is_positive(x) -> (roundToIntegral(ToZero,
  x) = roundToIntegral(Down, x)))))

axiom ceil_le :
  (forall x:t. (tqtisFinite(x) -> le(x, roundToIntegral(Up, x))))

axiom ceil_lest :
  (forall x:t. forall y:t. ((le(x, y) and is_int(y)) ->
  le(roundToIntegral(Up, x), y)))

axiom ceil_to_real :
  (forall x:t. (tqtisFinite(x) -> (tqtreal(roundToIntegral(Up,
  x)) = real_of_int(int_ceil(tqtreal(x))))))

axiom ceil_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) -> (to_int(m,
  roundToIntegral(Up, x)) = int_ceil(tqtreal(x)))))

axiom floor_le :
  (forall x:t. (tqtisFinite(x) -> le(roundToIntegral(Down, x), x)))

axiom floor_lest :
  (forall x:t. forall y:t. ((le(y, x) and is_int(y)) -> le(y,
  roundToIntegral(Down, x))))

axiom floor_to_real :
  (forall x:t. (tqtisFinite(x) -> (tqtreal(roundToIntegral(Down,
  x)) = real_of_int(int_floor(tqtreal(x))))))

axiom floor_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) -> (to_int(m,
  roundToIntegral(Down, x)) = int_floor(tqtreal(x)))))

axiom RNA_down :
  (forall x:t. (lt(sub(NearestTiesToEven, x, roundToIntegral(Down, x)),
  sub(NearestTiesToEven, roundToIntegral(Up, x), x)) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Down, x))))

axiom RNA_up :
  (forall x:t. (lt(sub(NearestTiesToEven, roundToIntegral(Up, x), x),
  sub(NearestTiesToEven, x, roundToIntegral(Down, x))) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Up, x))))

axiom RNA_down_tie :
  (forall x:t. (eq(sub(NearestTiesToEven, x, roundToIntegral(Down, x)),
  sub(NearestTiesToEven, roundToIntegral(Up, x), x)) -> (is_negative(x) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Down, x)))))

axiom RNA_up_tie :
  (forall x:t. (eq(sub(NearestTiesToEven, roundToIntegral(Up, x), x),
  sub(NearestTiesToEven, x, roundToIntegral(Down, x))) -> (is_positive(x) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Up, x)))))

axiom to_int_roundToIntegral :
  (forall m:fpa_rounding_mode. forall x:t. (to_int(m, x) = to_int(m,
  roundToIntegral(m, x))))

axiom to_int_monotonic :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (le(x, y) -> (to_int(m, x) <= to_int(m, y))))))

axiom to_int_of_int :
  (forall m:fpa_rounding_mode. forall i:int. (in_safe_int_range(i) ->
  (to_int(m, of_int(m, i)) = i)))

axiom eq_to_int :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. (tqtisFinite(x) ->
  (eq(x, y) -> (to_int(m, x) = to_int(m, y)))))

axiom neg_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (is_int(x) -> (to_int(m,
  neg(x)) = (-to_int(m, x)))))

axiom roundToIntegral_is_finite :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) ->
  tqtisFinite(roundToIntegral(m, x))))

axiom round_bound_ne :
  (forall x:real [float32(NearestTiesToEven,x)].
  (no_overflow(NearestTiesToEven, x) ->
  (((x - (0x1.0p-24 * abs_real(x))) - 0x1.0p-150) <= float32(NearestTiesToEven,x))))

axiom round_bound_ne1 :
  (forall x:real [float32(NearestTiesToEven,x)].
  (no_overflow(NearestTiesToEven, x) ->
  (float32(NearestTiesToEven,x) <= ((x + (0x1.0p-24 * abs_real(x))) + 0x1.0p-150))))

predicate neq(x: t, y: t) = (not eq(x, y))

function bool_lt(x: t, y: t) : bool = (if lt(x, y) then true else false)

function bool_le(x: t, y: t) : bool = (if le(x, y) then true else false)

function bool_gt(x: t, y: t) : bool = (if lt(y, x) then true else false)

function bool_ge(x: t, y: t) : bool = (if le(y, x) then true else false)

function bool_eq(x: t, y: t) : bool = (if eq(x, y) then true else false)

function bool_neq(x: t, y: t) : bool = (if (not eq(x,
  y)) then true else false)

logic rem : t, t -> t

logic fliteral : t

axiom fliteral_axiom : tqtisFinite(fliteral)

axiom fliteral_axiom1 : (tqtreal(fliteral) = 1.0)

axiom one_is_int : is_int(fliteral)

axiom one_of_int : (fliteral = of_int(NearestTiesToAway, 1))

type t__ref = { t__content : t
}

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

logic var_in : int

logic attr__ATTRIBUTE_ADDRESS : int

logic limit : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : character, character -> bool

logic dummy1 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep1 : character -> int

logic of_rep1 : int -> character

axiom inversion_axiom1 :
  (forall x:character [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:character [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep1((a[temp___idx_91])) = to_rep1((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep1((a[temp___idx_91])) = to_rep1((b[((b__first - a__first) + temp___idx_91)]))))))))

logic attr__ATTRIBUTE_ADDRESS5 : int

type float__

function bool_eq4(x: t, y: t) : bool = (if eq(x, y) then true else false)

logic user_eq2 : float__, float__ -> bool

logic attr__ATTRIBUTE_IMAGE2 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> t

logic dummy2 : float__

type float____ref = { float____content : float__
}

function float____ref_float____content__projection(a: float____ref) : float__ =
  (a).float____content

logic to_rep2 : float__ -> t

logic of_rep2 : t -> float__

axiom inversion_axiom2 :
  (forall x:float__ [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:float__ [to_rep2(x)]. tqtisFinite(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:t [to_rep2(of_rep2(x))]. (tqtisFinite(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref1 = { map__content1 : (int,float__) farray
}

logic slide1 : (int,float__) farray, int, int -> (int,float__) farray

axiom slide_eq1 :
  (forall a:(int,float__) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,float__) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq5(a: (int,float__) farray, a__first: int, a__last: int,
  b: (int,float__) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> eq(to_rep2((a[temp___idx_154])),
  to_rep2((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,float__) farray. forall b:(int,float__) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,float__) farray. forall b:(int,float__) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,float__) farray. forall b:(int,float__) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,float__) farray. forall b:(int,float__) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> eq(to_rep2((a[temp___idx_154])),
  to_rep2((b[((b__first - a__first) + temp___idx_154)]))))))))

logic attr__ATTRIBUTE_ADDRESS6 : int

type map__ref2 = { map__content2 : (int,integer) farray
}

logic slide2 : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq2 :
  (forall a:(int,integer) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq6(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep((a[temp___idx_156])) = to_rep((b[((b__first - a__first) + temp___idx_156)])))))) then true else false)

axiom bool_eq_rev8 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev9 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev10 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev11 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep((a[temp___idx_156])) = to_rep((b[((b__first - a__first) + temp___idx_156)]))))))))

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

type tvar_outS

logic tvar_outSqtint : tvar_outS -> int

axiom tvar_outSqtaxiom : (forall i:tvar_outS. (0 <= tvar_outSqtint(i)))

axiom tvar_outSqtaxiom1 : (forall i:tvar_outS. (tvar_outSqtint(i) <= 10))

predicate in_range3(x: int) = ((0 <= x) and (x <= 10))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : tvar_outS, tvar_outS -> bool

logic dummy3 : tvar_outS

type tvar_outS__ref = { tvar_outS__content : tvar_outS
}

function tvar_outS__ref_tvar_outS__content__projection(a: tvar_outS__ref) : tvar_outS =
  (a).tvar_outS__content

predicate dynamic_invariant1(temp___expr_167: int, temp___is_init_163: bool,
  temp___skip_constant_164: bool, temp___do_toplevel_165: bool,
  temp___do_typ_inv_166: bool) = (((temp___is_init_163 = true) or
  (0 <= 10)) -> in_range3(temp___expr_167))

type taS

logic taSqtint : taS -> int

axiom taSqtaxiom : (forall i:taS. ((- 10000) <= taSqtint(i)))

axiom taSqtaxiom1 : (forall i:taS. (taSqtint(i) <= 10000))

predicate in_range4(x: int) = (((- 10000) <= x) and (x <= 10000))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : taS, taS -> bool

logic dummy4 : taS

type taS__ref = { taS__content : taS
}

function taS__ref_taS__content__projection(a: taS__ref) : taS =
  (a).taS__content

predicate dynamic_invariant2(temp___expr_174: int, temp___is_init_170: bool,
  temp___skip_constant_171: bool, temp___do_toplevel_172: bool,
  temp___do_typ_inv_173: bool) = (((temp___is_init_170 = true) or
  ((- 10000) <= 10000)) -> in_range4(temp___expr_174))

type tbS

logic tbSqtint : tbS -> int

axiom tbSqtaxiom : (forall i:tbS. ((- 10000) <= tbSqtint(i)))

axiom tbSqtaxiom1 : (forall i:tbS. (tbSqtint(i) <= 10000))

predicate in_range5(x: int) = (((- 10000) <= x) and (x <= 10000))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : tbS, tbS -> bool

logic dummy5 : tbS

type tbS__ref = { tbS__content : tbS
}

function tbS__ref_tbS__content__projection(a: tbS__ref) : tbS =
  (a).tbS__content

predicate dynamic_invariant3(temp___expr_181: int, temp___is_init_177: bool,
  temp___skip_constant_178: bool, temp___do_toplevel_179: bool,
  temp___do_typ_inv_180: bool) = (((temp___is_init_177 = true) or
  ((- 10000) <= 10000)) -> in_range5(temp___expr_181))

type tmy_array1D1

logic tmy_array1D1qtint : tmy_array1D1 -> int

axiom tmy_array1D1qtaxiom :
  (forall i:tmy_array1D1. (1 <= tmy_array1D1qtint(i)))

axiom tmy_array1D1qtaxiom1 :
  (forall i:tmy_array1D1. (tmy_array1D1qtint(i) <= 10))

predicate in_range6(x: int) = ((1 <= x) and (x <= 10))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : tmy_array1D1, tmy_array1D1 -> bool

logic dummy6 : tmy_array1D1

type tmy_array1D1__ref = { tmy_array1D1__content : tmy_array1D1
}

function tmy_array1D1__ref_tmy_array1D1__content__projection(a: tmy_array1D1__ref) : tmy_array1D1 =
  (a).tmy_array1D1__content

type tmy_array2D1

logic tmy_array2D1qtint : tmy_array2D1 -> int

axiom tmy_array2D1qtaxiom :
  (forall i:tmy_array2D1. (1 <= tmy_array2D1qtint(i)))

axiom tmy_array2D1qtaxiom1 :
  (forall i:tmy_array2D1. (tmy_array2D1qtint(i) <= 20))

predicate in_range7(x: int) = ((1 <= x) and (x <= 20))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : tmy_array2D1, tmy_array2D1 -> bool

logic dummy7 : tmy_array2D1

type tmy_array2D1__ref = { tmy_array2D1__content : tmy_array2D1
}

function tmy_array2D1__ref_tmy_array2D1__content__projection(a: tmy_array2D1__ref) : tmy_array2D1 =
  (a).tmy_array2D1__content

logic anon_type__increment__ten_characters__aggregate_def : int -> (int,character) farray

logic temp_____aggregate_def_213 : t -> (int,float__) farray

logic fliteral1 : t

axiom fliteral_axiom2 : tqtisFinite(fliteral1)

axiom fliteral_axiom3 :
  (tqtreal(fliteral1) = 340282346638528859811704183484516925440.0)

predicate dynamic_invariant4(temp___expr_60: t, temp___is_init_56: bool,
  temp___skip_constant_57: bool, temp___do_toplevel_58: bool,
  temp___do_typ_inv_59: bool) = (((temp___is_init_56 = true) or
  le(neg(fliteral1), fliteral1)) -> tqtisFinite(temp___expr_60))

predicate dynamic_invariant5(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range2(temp___expr_74))

axiom limit__def_axiom : (limit = 10000)

axiom def_axiom :
  (forall temp___205:int. (dynamic_invariant5(temp___205, true, true, true,
  true) ->
  (forall temp___206:int.
  (to_rep1((anon_type__increment__ten_characters__aggregate_def(temp___205)[temp___206])) = temp___205))))

axiom def_axiom1 :
  (forall temp___215:t. (dynamic_invariant4(temp___215, true, true, true,
  true) ->
  (forall temp___216:int.
  (to_rep2((temp_____aggregate_def_213(temp___215)[temp___216])) = temp___215))))

 (* File "anon_type.ads", line 6, characters 0-0 *)
goal defqtvc :
  (forall a:int. forall b:int. (dynamic_invariant(var_in, true, false, true,
  true) -> (dynamic_invariant(limit, true, false, true, true) ->
  (forall var_out:int. ((var_out = 0) -> (dynamic_invariant1(var_out, true,
  false, true, true) -> (dynamic_invariant2(a, false, false, true, true) ->
  (dynamic_invariant3(b, false, false, true, true) ->
  (forall ten_characters:(int,character) farray.
  ((ten_characters = anon_type__increment__ten_characters__aggregate_def(32)) ->
  (let o = (var_in + (var_out + 1)) : int in (in_range1(o) ->
  (in_range3(o) ->
  (forall var_out1:int. ((var_out1 = o) ->
  (forall anon_type__increment__result:int.
  ((anon_type__increment__result = var_out1) -> in_range1((var_in + 1)))))))))))))))))))
