(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__prot__int__v : integer
}

function us_split_fields_rec__prot__int__v__projection(a: us_split_fields) : integer =
  (a).rec__prot__int__v

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__prot__int__v) = to_rep(((b).us_split_fields1).rec__prot__int__v)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic prot__int__v__first__bit : int

logic prot__int__v__last__bit : int

logic prot__int__v__position : int

axiom prot__int__v__first__bit_axiom : (0 <= prot__int__v__first__bit)

axiom prot__int__v__last__bit_axiom :
  (prot__int__v__first__bit <  prot__int__v__last__bit)

axiom prot__int__v__position_axiom : (0 <= prot__int__v__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type int____ref = { int____content : us_rep
}

function int____ref_int____content__projection(a: int____ref) : us_rep =
  (a).int____content

type nat__ref = { nat__content : us_rep
}

function nat__ref_nat__content__projection(a: nat__ref) : us_rep =
  (a).nat__content

type us_split_fields2 = { rec__prot__t__data : us_rep
}

function us_split_fields_rec__prot__t__data__projection(a: us_split_fields2) : us_rep =
  (a).rec__prot__t__data

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic prot__t__data__first__bit : int

logic prot__t__data__last__bit : int

logic prot__t__data__position : int

axiom prot__t__data__first__bit_axiom : (0 <= prot__t__data__first__bit)

axiom prot__t__data__last__bit_axiom :
  (prot__t__data__first__bit <  prot__t__data__last__bit)

axiom prot__t__data__position_axiom : (0 <= prot__t__data__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

type t__ref = { t__content : us_rep1
}

function t__ref_t__content__projection(a: t__ref) : us_rep1 = (a).t__content

predicate dynamic_invariant(temp___expr_167: us_rep,
  temp___is_init_163: bool, temp___skip_constant_164: bool,
  temp___do_toplevel_165: bool, temp___do_typ_inv_166: bool) =
  ((temp___do_toplevel_165 = true) -> ((temp___is_init_163 = true) ->
  (0 <= to_rep(((temp___expr_167).us_split_fields1).rec__prot__int__v))))

predicate dynamic_predicate(temp___172: us_rep) =
  (0 <= to_rep(((temp___172).us_split_fields1).rec__prot__int__v))

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

predicate dynamic_invariant2(temp___expr_199: us_rep1,
  temp___is_init_195: bool, temp___skip_constant_196: bool,
  temp___do_toplevel_197: bool, temp___do_typ_inv_198: bool) =
  (0 <= to_rep(((((temp___expr_199).us_split_fields3).rec__prot__t__data).us_split_fields1).rec__prot__int__v))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 0)

predicate default_initial_assumption(temp___expr_201: us_rep1,
  temp___skip_top_level_202: bool) =
  (((temp___expr_201).us_split_fields3).rec__prot__t__data = {
  us_split_fields1 = { rec__prot__int__v = rliteral } })

logic self__ : us_rep1

 (* File "prot.ads", line 9, characters 0-0 *)
goal defqtvc : dynamic_predicate({ us_split_fields1 = { rec__prot__int__v =
  rliteral } })
