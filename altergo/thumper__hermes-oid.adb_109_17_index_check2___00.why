(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (div(x, y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((-abs_int(y)) <  mod(x,
  y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (mod(x, y) <  abs_int(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <  y) then (x % y) else ((x % y) + y))

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. (0 <= tqtint(i)))

axiom tqtaxiom1 : (forall i:t. (tqtint(i) <= 255))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_and(v1, v2), n) = andb(nth(v1, n), nth(v2, n)))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_or(v1, v2), n) = orb(nth(v1, n), nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  8)) -> (nth(bw_not(v),
  n) = notb(nth(v, n)))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth(asr(b, s), n) = nth(b, (8 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 8))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 8))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

function to_int(x: t) : int =
  (if is_signed_positive(x) then tqtint(x) else (-(256 - tqtint(x))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds : (forall v:t. (0 <= tqtint(v)))

axiom to_uint_bounds1 : (forall v:t. (tqtint(v) <  256))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) -> sge(x, zeros)))

axiom positive_is_ge_zeros1 :
  (forall x:t. (sge(x, zeros) -> is_signed_positive(x)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  256) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  256)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 256)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  256) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 256)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) -> eq_sub_bv(a, b, i, n)))

axiom eq_sub_equiv1 :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub_bv(a, b, i, n) ->
  eq_sub(a, b, tqtint(i), tqtint(n))))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 8)]. (eq_sub(x, y, 0, 8) ->
  (x = y)))

type t__ref = { t__content : t
}

function bool_eq1(x: t, y: t) : bool = (if (x = y) then true else false)

function bool_ne1(x: t, y: t) : bool =
  (if (not (x = y)) then true else false)

function bool_lt1(x: t, y: t) : bool = (if ult(x, y) then true else false)

function bool_le1(x: t, y: t) : bool = (if ule(x, y) then true else false)

function bool_gt1(x: t, y: t) : bool = (if ugt(x, y) then true else false)

function bool_ge1(x: t, y: t) : bool = (if uge(x, y) then true else false)

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

function bv_min(x: t, y: t) : t = (if ule(x, y) then x else y)

function bv_max(x: t, y: t) : t = (if ule(x, y) then y else x)

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq2(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int1(b: bool) : int = (if (b = true) then 1 else 0)

function of_int1(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type root_component_type

logic root_component_typeqtint : root_component_type -> int

axiom root_component_typeqtaxiom :
  (forall i:root_component_type. (0 <= root_component_typeqtint(i)))

axiom root_component_typeqtaxiom1 :
  (forall i:root_component_type. (root_component_typeqtint(i) <= 2))

predicate in_range3(x: int) = ((0 <= x) and (x <= 2))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : root_component_type, root_component_type -> bool

logic dummy2 : root_component_type

type root_component_type__ref = { root_component_type__content :
root_component_type
}

function root_component_type__ref_root_component_type__content__projection(a: root_component_type__ref) : root_component_type =
  (a).root_component_type__content

function to_rep1(x: root_component_type) : int = root_component_typeqtint(x)

logic of_rep1 : int -> root_component_type

axiom inversion_axiom1 :
  (forall x:root_component_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:root_component_type [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type second_level_component_type

logic second_level_component_typeqtint : second_level_component_type -> int

axiom second_level_component_typeqtaxiom :
  (forall i:second_level_component_type.
  (0 <= second_level_component_typeqtint(i)))

axiom second_level_component_typeqtaxiom1 :
  (forall i:second_level_component_type.
  (second_level_component_typeqtint(i) <= 175))

predicate in_range4(x: int) = ((0 <= x) and (x <= 175))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : second_level_component_type,
  second_level_component_type -> bool

logic dummy3 : second_level_component_type

type second_level_component_type__ref = {
second_level_component_type__content : second_level_component_type
}

function second_level_component_type__ref_second_level_component_type__content__projection(a: second_level_component_type__ref) : second_level_component_type =
  (a).second_level_component_type__content

function to_rep2(x: second_level_component_type) : int =
  second_level_component_typeqtint(x)

logic of_rep2 : int -> second_level_component_type

axiom inversion_axiom2 :
  (forall x:second_level_component_type [to_rep2(x)].
  (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:second_level_component_type [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type component_type

logic component_typeqtint : component_type -> int

axiom component_typeqtaxiom :
  (forall i:component_type. (0 <= component_typeqtint(i)))

axiom component_typeqtaxiom1 :
  (forall i:component_type. (component_typeqtint(i) <= 2147483647))

predicate in_range5(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : component_type, component_type -> bool

logic dummy4 : component_type

type component_type__ref = { component_type__content : component_type
}

function component_type__ref_component_type__content__projection(a: component_type__ref) : component_type =
  (a).component_type__content

function to_rep3(x: component_type) : int = component_typeqtint(x)

logic of_rep3 : int -> component_type

axiom inversion_axiom3 :
  (forall x:component_type [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:component_type [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

type map__ref = { map__content : (int,component_type) farray
}

logic slide : (int,component_type) farray, int,
  int -> (int,component_type) farray

axiom slide_eq :
  (forall a:(int,component_type) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,component_type) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq8(a: (int,component_type) farray, a__first: int,
  a__last: int, b: (int,component_type) farray, b__first: int,
  b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep3((a[temp___idx_154])) = to_rep3((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,component_type) farray.
  forall b:(int,component_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,component_type) farray.
  forall b:(int,component_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,component_type) farray.
  forall b:(int,component_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,component_type) farray.
  forall b:(int,component_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep3((a[temp___idx_154])) = to_rep3((b[((b__first - a__first) + temp___idx_154)]))))))))

logic dummy5 : (int,component_type) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq5 : (int,component_type) farray,
  (int,component_type) farray -> bool

type other_count_type

logic other_count_typeqtint : other_count_type -> int

axiom other_count_typeqtaxiom :
  (forall i:other_count_type. (0 <= other_count_typeqtint(i)))

axiom other_count_typeqtaxiom1 :
  (forall i:other_count_type. (other_count_typeqtint(i) <= 13))

predicate in_range6(x: int) = ((0 <= x) and (x <= 13))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : other_count_type, other_count_type -> bool

logic dummy6 : other_count_type

type other_count_type__ref = { other_count_type__content : other_count_type
}

function other_count_type__ref_other_count_type__content__projection(a: other_count_type__ref) : other_count_type =
  (a).other_count_type__content

function to_rep4(x: other_count_type) : int = other_count_typeqtint(x)

logic of_rep4 : int -> other_count_type

axiom inversion_axiom4 :
  (forall x:other_count_type [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:other_count_type [to_rep4(x)]. in_range6(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range6(x) ->
  (to_rep4(of_rep4(x)) = x)))

type us_split_fields = {
rec__ada___hermes__oid__object_identifier__root_component :
root_component_type;
rec__ada___hermes__oid__object_identifier__second_level_component :
second_level_component_type;
rec__ada___hermes__oid__object_identifier__other_components :
(int,component_type) farray;
rec__ada___hermes__oid__object_identifier__other_component_count :
other_count_type
}

function us_split_fields_rec__ada___hermes__oid__object_identifier__root_component__projection(a: us_split_fields) : root_component_type =
  (a).rec__ada___hermes__oid__object_identifier__root_component

function us_split_fields_rec__ada___hermes__oid__object_identifier__second_level_component__projection(a: us_split_fields) : second_level_component_type =
  (a).rec__ada___hermes__oid__object_identifier__second_level_component

function us_split_fields_rec__ada___hermes__oid__object_identifier__other_components__projection(a: us_split_fields) : (int,component_type) farray =
  (a).rec__ada___hermes__oid__object_identifier__other_components

function us_split_fields_rec__ada___hermes__oid__object_identifier__other_component_count__projection(a: us_split_fields) : other_count_type =
  (a).rec__ada___hermes__oid__object_identifier__other_component_count

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq10(a: us_rep, b: us_rep) : bool =
  (if (((to_rep1(((a).us_split_fields1).rec__ada___hermes__oid__object_identifier__root_component) = to_rep1(((b).us_split_fields1).rec__ada___hermes__oid__object_identifier__root_component)) and
  (to_rep2(((a).us_split_fields1).rec__ada___hermes__oid__object_identifier__second_level_component) = to_rep2(((b).us_split_fields1).rec__ada___hermes__oid__object_identifier__second_level_component))) and
  ((bool_eq8(((a).us_split_fields1).rec__ada___hermes__oid__object_identifier__other_components,
  1, 13,
  ((b).us_split_fields1).rec__ada___hermes__oid__object_identifier__other_components,
  1, 13) = true) and
  (to_rep4(((a).us_split_fields1).rec__ada___hermes__oid__object_identifier__other_component_count) = to_rep4(((b).us_split_fields1).rec__ada___hermes__oid__object_identifier__other_component_count)))) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic ada___hermes__oid__object_identifier__root_component__first__bit : int

logic ada___hermes__oid__object_identifier__root_component__last__bit : int

logic ada___hermes__oid__object_identifier__root_component__position : int

axiom ada___hermes__oid__object_identifier__root_component__first__bit_axiom :
  (0 <= ada___hermes__oid__object_identifier__root_component__first__bit)

axiom ada___hermes__oid__object_identifier__root_component__last__bit_axiom :
  (ada___hermes__oid__object_identifier__root_component__first__bit <  ada___hermes__oid__object_identifier__root_component__last__bit)

axiom ada___hermes__oid__object_identifier__root_component__position_axiom :
  (0 <= ada___hermes__oid__object_identifier__root_component__position)

logic ada___hermes__oid__object_identifier__second_level_component__first__bit : int

logic ada___hermes__oid__object_identifier__second_level_component__last__bit : int

logic ada___hermes__oid__object_identifier__second_level_component__position : int

axiom ada___hermes__oid__object_identifier__second_level_component__first__bit_axiom :
  (0 <= ada___hermes__oid__object_identifier__second_level_component__first__bit)

axiom ada___hermes__oid__object_identifier__second_level_component__last__bit_axiom :
  (ada___hermes__oid__object_identifier__second_level_component__first__bit <  ada___hermes__oid__object_identifier__second_level_component__last__bit)

axiom ada___hermes__oid__object_identifier__second_level_component__position_axiom :
  (0 <= ada___hermes__oid__object_identifier__second_level_component__position)

logic ada___hermes__oid__object_identifier__other_components__first__bit : int

logic ada___hermes__oid__object_identifier__other_components__last__bit : int

logic ada___hermes__oid__object_identifier__other_components__position : int

axiom ada___hermes__oid__object_identifier__other_components__first__bit_axiom :
  (0 <= ada___hermes__oid__object_identifier__other_components__first__bit)

axiom ada___hermes__oid__object_identifier__other_components__last__bit_axiom :
  (ada___hermes__oid__object_identifier__other_components__first__bit <  ada___hermes__oid__object_identifier__other_components__last__bit)

axiom ada___hermes__oid__object_identifier__other_components__position_axiom :
  (0 <= ada___hermes__oid__object_identifier__other_components__position)

logic ada___hermes__oid__object_identifier__other_component_count__first__bit : int

logic ada___hermes__oid__object_identifier__other_component_count__last__bit : int

logic ada___hermes__oid__object_identifier__other_component_count__position : int

axiom ada___hermes__oid__object_identifier__other_component_count__first__bit_axiom :
  (0 <= ada___hermes__oid__object_identifier__other_component_count__first__bit)

axiom ada___hermes__oid__object_identifier__other_component_count__last__bit_axiom :
  (ada___hermes__oid__object_identifier__other_component_count__first__bit <  ada___hermes__oid__object_identifier__other_component_count__last__bit)

axiom ada___hermes__oid__object_identifier__other_component_count__position_axiom :
  (0 <= ada___hermes__oid__object_identifier__other_component_count__position)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy7 : us_rep

type object_identifier__ref = { object_identifier__content : us_rep
}

function object_identifier__ref_object_identifier__content__projection(a: object_identifier__ref) : us_rep =
  (a).object_identifier__content

logic identifier : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

type octet

logic attr__ATTRIBUTE_MODULUS : t

function bool_eq11(x: t, y: t) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> t

logic user_eq8 : octet, octet -> bool

logic dummy8 : octet

type octet__ref = { octet__content : octet
}

function octet__ref_octet__content__projection(a: octet__ref) : octet =
  (a).octet__content

logic to_rep5 : octet -> t

logic of_rep5 : t -> octet

axiom inversion_axiom5 :
  (forall x:octet [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom coerce_axiom5 :
  (forall x:t [to_rep5(of_rep5(x))]. (to_rep5(of_rep5(x)) = x))

function to_int2(x: octet) : int = tqtint(to_rep5(x))

axiom range_int_axiom :
  (forall x:octet [to_int2(x)]. uint_in_range(to_int2(x)))

type map__ref1 = { map__content1 : (int,octet) farray
}

logic slide1 : (int,octet) farray, int, int -> (int,octet) farray

axiom slide_eq1 :
  (forall a:(int,octet) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,octet) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq12(a: (int,octet) farray, a__first: int, a__last: int,
  b: (int,octet) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep5((a[temp___idx_156])) = to_rep5((b[((b__first - a__first) + temp___idx_156)])))))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,octet) farray. forall b:(int,octet) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,octet) farray. forall b:(int,octet) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,octet) farray. forall b:(int,octet) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,octet) farray. forall b:(int,octet) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep5((a[temp___idx_156])) = to_rep5((b[((b__first - a__first) + temp___idx_156)]))))))))

logic result____first : integer

logic result____last : integer

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic r16b : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic r17b : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic attr__ATTRIBUTE_ADDRESS13 : int

type tcomponent_typeB

logic tcomponent_typeBqtint : tcomponent_typeB -> int

axiom tcomponent_typeBqtaxiom :
  (forall i:tcomponent_typeB. ((- 2147483648) <= tcomponent_typeBqtint(i)))

axiom tcomponent_typeBqtaxiom1 :
  (forall i:tcomponent_typeB. (tcomponent_typeBqtint(i) <= 2147483647))

predicate in_range7(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq13(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq9 : tcomponent_typeB, tcomponent_typeB -> bool

logic dummy9 : tcomponent_typeB

type tcomponent_typeB__ref = { tcomponent_typeB__content : tcomponent_typeB
}

function tcomponent_typeB__ref_tcomponent_typeB__content__projection(a: tcomponent_typeB__ref) : tcomponent_typeB =
  (a).tcomponent_typeB__content

predicate dynamic_invariant2(temp___expr_163: int, temp___is_init_159: bool,
  temp___skip_constant_160: bool, temp___do_toplevel_161: bool,
  temp___do_typ_inv_162: bool) = (((temp___is_init_159 = true) or
  (0 <= 2147483647)) -> in_range5(temp___expr_163))

type other_index_type

logic other_index_typeqtint : other_index_type -> int

axiom other_index_typeqtaxiom :
  (forall i:other_index_type. (1 <= other_index_typeqtint(i)))

axiom other_index_typeqtaxiom1 :
  (forall i:other_index_type. (other_index_typeqtint(i) <= 13))

predicate in_range8(x: int) = ((1 <= x) and (x <= 13))

function bool_eq14(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq10 : other_index_type, other_index_type -> bool

logic dummy10 : other_index_type

type other_index_type__ref = { other_index_type__content : other_index_type
}

function other_index_type__ref_other_index_type__content__projection(a: other_index_type__ref) : other_index_type =
  (a).other_index_type__content

logic rliteral : t

axiom rliteral_axiom : (tqtint(rliteral) = 0)

logic rliteral1 : t

axiom rliteral_axiom1 : (tqtint(rliteral1) = 255)

predicate dynamic_invariant3(temp___expr_256: t, temp___is_init_252: bool,
  temp___skip_constant_253: bool, temp___do_toplevel_254: bool,
  temp___do_typ_inv_255: bool) = true

type t1

logic first : t1 -> integer

logic last : t1 -> integer

logic mk : int, int -> t1

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,octet) farray; rt : t1
}

function to_array(a: us_t) : (int,octet) farray = (a).elts

function of_array(a: (int,octet) farray, f: int, l: int) : us_t = { elts = a;
  rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

function length1(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size2 : int

logic object__size2 : int

logic component__size1 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom2 : (0 <= alignment2)

function bool_eq15(x: us_t, y: us_t) : bool = bool_eq12((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq11 : us_t, us_t -> bool

logic dummy11 : us_t

type octet_array__ref = { octet_array__content : us_t
}

function octet_array__ref_octet_array__content__projection(a: octet_array__ref) : us_t =
  (a).octet_array__content

type t14b__ref = { t14b__content : us_t
}

function t14b__ref_t14b__content__projection(a: t14b__ref) : us_t =
  (a).t14b__content

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq16(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq12 : integer, integer -> bool

logic dummy12 : integer

type t15b__ref = { t15b__content : integer
}

function t15b__ref_t15b__content__projection(a: t15b__ref) : integer =
  (a).t15b__content

logic temp_____aggregate_def_356 : t, int, int -> us_t

axiom def_axiom :
  (forall temp___358:t.
  (forall temp___359:int. forall temp___360:int.
  (dynamic_invariant3(temp___358, true, true, true, true) ->
  (dynamic_property(0, 2147483647, temp___359, temp___360) ->
  (first1(temp_____aggregate_def_356(temp___358, temp___359,
  temp___360)) = temp___359)))))

axiom def_axiom1 :
  (forall temp___358:t.
  (forall temp___359:int. forall temp___360:int.
  (dynamic_invariant3(temp___358, true, true, true, true) ->
  (dynamic_property(0, 2147483647, temp___359, temp___360) ->
  (last1(temp_____aggregate_def_356(temp___358, temp___359,
  temp___360)) = temp___360)))))

axiom def_axiom2 :
  (forall temp___358:t.
  (forall temp___359:int. forall temp___360:int.
  (dynamic_invariant3(temp___358, true, true, true, true) ->
  (forall temp___361:int.
  (to_rep5((to_array(temp_____aggregate_def_356(temp___358, temp___359,
  temp___360))[temp___361])) = temp___358)))))

predicate dynamic_invariant4(temp___expr_197: int, temp___is_init_193: bool,
  temp___skip_constant_194: bool, temp___do_toplevel_195: bool,
  temp___do_typ_inv_196: bool) = (((temp___is_init_193 = true) or
  (0 <= 2)) -> in_range3(temp___expr_197))

predicate dynamic_invariant5(temp___expr_204: int, temp___is_init_200: bool,
  temp___skip_constant_201: bool, temp___do_toplevel_202: bool,
  temp___do_typ_inv_203: bool) = (((temp___is_init_200 = true) or
  (0 <= 175)) -> in_range4(temp___expr_204))

predicate dynamic_invariant6(temp___expr_211: int, temp___is_init_207: bool,
  temp___skip_constant_208: bool, temp___do_toplevel_209: bool,
  temp___do_typ_inv_210: bool) = (((temp___is_init_207 = true) or
  (1 <= 13)) -> in_range8(temp___expr_211))

predicate dynamic_invariant7(temp___expr_228: int, temp___is_init_224: bool,
  temp___skip_constant_225: bool, temp___do_toplevel_226: bool,
  temp___do_typ_inv_227: bool) = (((temp___is_init_224 = true) or
  (0 <= 13)) -> in_range6(temp___expr_228))

predicate dynamic_invariant8(temp___expr_263: us_t, temp___is_init_259: bool,
  temp___skip_constant_260: bool, temp___do_toplevel_261: bool,
  temp___do_typ_inv_262: bool) = ((not (temp___skip_constant_260 = true)) ->
  dynamic_property(0, 2147483647, first1(temp___expr_263),
  last1(temp___expr_263)))

axiom cdiv_cases :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((0 <  d) -> (div(n,
  d) = (n / d)))))

axiom cdiv_cases1 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((0 <  d) -> (div(n,
  d) = (-((-n) / d))))))

axiom cdiv_cases2 :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((d <  0) -> (div(n,
  d) = (-(n / (-d)))))))

axiom cdiv_cases3 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((d <  0) -> (div(n,
  d) = ((-n) / (-d))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))))

axiom cmod_cases1 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))))

axiom cmod_cases2 :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))))

axiom cmod_cases3 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d)))))))

 (* File "hermes-oid.ads", line 52, characters 0-0 *)
goal defqtvc :
  (forall octet_count:int. forall result_index:int. forall start_index:int.
  forall left_index:int. forall right_index:int.
  forall current_component:int. forall temp:t. (dynamic_property(0,
  2147483647, to_rep(result____first), to_rep(result____last)) ->
  (dynamic_invariant(octet_count, false, false, true, true) ->
  (dynamic_invariant(result_index, false, false, true, true) ->
  (dynamic_invariant(start_index, false, false, true, true) ->
  (dynamic_invariant(left_index, false, false, true, true) ->
  (dynamic_invariant(right_index, false, false, true, true) ->
  (dynamic_invariant2(current_component, false, false, true, true) ->
  (dynamic_invariant3(temp, false, false, true, true) ->
  (forall o:int. ((to_rep(result____last) = o) ->
  (forall o1:int. ((to_rep(result____first) = o1) -> (let temp___362 =
  temp_____aggregate_def_356(rliteral, o1, o) : us_t in
  ((first1(temp___362) = to_rep(result____first)) ->
  ((last1(temp___362) = to_rep(result____last)) -> (let temp___364 =
  of_array(to_array(temp___362), first1(temp___362), last1(temp___362))
  : us_t in
  ((if (first1(temp___364) <= last1(temp___364)) then ((to_rep(result____first) <= to_rep(result____last)) and
  ((last1(temp___364) - first1(temp___364)) = (to_rep(result____last) - to_rep(result____first)))) else (to_rep(result____last) <  to_rep(result____first))) ->
  (forall o2:int. ((to_rep(result____first) = o2) ->
  (forall result__:(int,octet) farray.
  ((result__ = slide1(to_array(temp___364), first1(temp___364), o2)) ->
  (forall octet_count1:int. ((octet_count1 = 0) ->
  (forall o3:int. ((to_rep(result____last) = o3) ->
  (forall o4:int. ((to_rep(result____first) = o4) ->
  (forall spark__branch:bool. ((spark__branch = (if (0 <  length(o4,
  o3)) then true else false)) -> ((spark__branch = true) ->
  (forall o5:int. ((to_rep(result____first) = o5) -> (in_range2(o5) ->
  (forall result_index1:int. ((result_index1 = o5) ->
  (forall octet_count2:int. ((octet_count2 = 1) ->
  (forall o6:int.
  ((to_rep2(((identifier).us_split_fields1).rec__ada___hermes__oid__object_identifier__second_level_component) = o6) ->
  (forall o7:int.
  ((to_rep1(((identifier).us_split_fields1).rec__ada___hermes__oid__object_identifier__root_component) = o7) ->
  (let o8 = (o7 * 40) : int in (in_range7(o8) -> (let o9 = (o8 + o6) : int in
  (in_range7(o9) -> (uint_in_range(o9) ->
  (forall o10:octet. ((to_rep5(o10) = of_int(o9)) ->
  (to_rep(result____first) <= result_index1))))))))))))))))))))))))))))))))))))))))))))))))))
