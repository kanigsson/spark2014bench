(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep1(x: natural) : int = naturalqtint(x)

logic of_rep1 : int -> natural

axiom inversion_axiom1 :
  (forall x:natural [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:natural [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,natural) farray, a__first: int, a__last: int,
  b: (int,natural) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)]))))))))

logic dummy2 : (int,natural) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq2 : (int,natural) farray, (int,natural) farray -> bool

type map__ref1 = { map__content1 : (int,(int,natural) farray) farray
}

logic slide1 : (int,(int,natural) farray) farray, int,
  int -> (int,(int,natural) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,natural) farray) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,(int,natural) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,(int,natural) farray) farray, a__first: int,
  a__last: int, b: (int,(int,natural) farray) farray, b__first: int,
  b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq3((a[temp___idx_155]), 1, 100,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 100) = true)))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,(int,natural) farray) farray.
  forall b:(int,(int,natural) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,(int,natural) farray) farray.
  forall b:(int,(int,natural) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,(int,natural) farray) farray.
  forall b:(int,(int,natural) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,(int,natural) farray) farray.
  forall b:(int,(int,natural) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq3((a[temp___idx_155]), 1, 100,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 100) = true))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic dummy3 : (int,natural) farray

logic value__size1 : int

logic object__size1 : int

logic component__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq3 : (int,natural) farray, (int,natural) farray -> bool

type map__ref2 = { map__content2 : (int,(int,natural) farray) farray
}

logic slide2 : (int,(int,natural) farray) farray, int,
  int -> (int,(int,natural) farray) farray

axiom slide_eq2 :
  (forall a:(int,(int,natural) farray) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,(int,natural) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq5(a: (int,(int,natural) farray) farray, a__first: int,
  a__last: int, b: (int,(int,natural) farray) farray, b__first: int,
  b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) -> (bool_eq3((a[temp___idx_156]), 1, 100,
  (b[((b__first - a__first) + temp___idx_156)]), 1, 100) = true)))) then true else false)

axiom bool_eq_rev8 :
  (forall a:(int,(int,natural) farray) farray.
  forall b:(int,(int,natural) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev9 :
  (forall a:(int,(int,natural) farray) farray.
  forall b:(int,(int,natural) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev10 :
  (forall a:(int,(int,natural) farray) farray.
  forall b:(int,(int,natural) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev11 :
  (forall a:(int,(int,natural) farray) farray.
  forall b:(int,(int,natural) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) -> (bool_eq3((a[temp___idx_156]), 1, 100,
  (b[((b__first - a__first) + temp___idx_156)]), 1, 100) = true))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

type us_split_discrs = { rec__test__rec__x : integer
}

function us_split_discrs_rec__test__rec__x__projection(a: us_split_discrs) : integer =
  (a).rec__test__rec__x

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__test__rec__y : integer
}

function us_split_fields_rec__test__rec__y__projection(a: us_split_fields) : integer =
  (a).rec__test__rec__y

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq6(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__test__rec__x) = to_rep(((b).us_split_discrs1).rec__test__rec__x)) and
  (to_rep(((a).us_split_fields1).rec__test__rec__y) = to_rep(((b).us_split_fields1).rec__test__rec__y))) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic test__rec__x__first__bit : int

logic test__rec__x__last__bit : int

logic test__rec__x__position : int

axiom test__rec__x__first__bit_axiom : (0 <= test__rec__x__first__bit)

axiom test__rec__x__last__bit_axiom :
  (test__rec__x__first__bit <  test__rec__x__last__bit)

axiom test__rec__x__position_axiom : (0 <= test__rec__x__position)

logic test__rec__y__first__bit : int

logic test__rec__y__last__bit : int

logic test__rec__y__position : int

axiom test__rec__y__first__bit_axiom : (0 <= test__rec__y__first__bit)

axiom test__rec__y__last__bit_axiom :
  (test__rec__y__first__bit <  test__rec__y__last__bit)

axiom test__rec__y__position_axiom : (0 <= test__rec__y__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type rec1__ref = { rec1__content : us_rep
}

function rec1__ref_rec1__content__projection(a: rec1__ref) : us_rep =
  (a).rec1__content

type map__ref3 = { map__content3 : (int,us_rep) farray
}

logic slide3 : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq3 :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide3(a, first, first)]. (slide3(a, first, first) = a)))

axiom slide_def3 :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq7(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) -> (bool_eq6((a[temp___idx_157]),
  (b[((b__first - a__first) + temp___idx_157)])) = true)))) then true else false)

axiom bool_eq_rev12 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev13 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev14 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev15 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) -> (bool_eq6((a[temp___idx_157]),
  (b[((b__first - a__first) + temp___idx_157)])) = true))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic test__rec__x__first__bit1 : int

logic test__rec__x__last__bit1 : int

logic test__rec__x__position1 : int

axiom test__rec__x__first__bit_axiom1 : (0 <= test__rec__x__first__bit1)

axiom test__rec__x__last__bit_axiom1 :
  (test__rec__x__first__bit1 <  test__rec__x__last__bit1)

axiom test__rec__x__position_axiom1 : (0 <= test__rec__x__position1)

logic test__rec__y__first__bit1 : int

logic test__rec__y__last__bit1 : int

logic test__rec__y__position1 : int

axiom test__rec__y__first__bit_axiom1 : (0 <= test__rec__y__first__bit1)

axiom test__rec__y__last__bit_axiom1 :
  (test__rec__y__first__bit1 <  test__rec__y__last__bit1)

axiom test__rec__y__position_axiom1 : (0 <= test__rec__y__position1)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : us_rep

type rec2__ref = { rec2__content : us_rep
}

function rec2__ref_rec2__content__projection(a: rec2__ref) : us_rep =
  (a).rec2__content

type map__ref4 = { map__content4 : (int,us_rep) farray
}

logic slide4 : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq4 :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide4(a, first, first)]. (slide4(a, first, first) = a)))

axiom slide_def4 :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide4(a, old_first, new_first)[i])]. ((slide4(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq8(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_158:int. (((a__first <= temp___idx_158) and
  (temp___idx_158 <= a__last)) -> (bool_eq6((a[temp___idx_158]),
  (b[((b__first - a__first) + temp___idx_158)])) = true)))) then true else false)

axiom bool_eq_rev16 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev17 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev18 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev19 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_158:int. (((a__first <= temp___idx_158) and
  (temp___idx_158 <= a__last)) -> (bool_eq6((a[temp___idx_158]),
  (b[((b__first - a__first) + temp___idx_158)])) = true))))))

logic attr__ATTRIBUTE_ADDRESS3 : int

type map__ref5 = { map__content5 : (int,integer) farray
}

logic slide5 : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq5 :
  (forall a:(int,integer) farray.
  (forall first:int [slide5(a, first, first)]. (slide5(a, first, first) = a)))

axiom slide_def5 :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide5(a, old_first, new_first)[i])]. ((slide5(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq9(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_159:int. (((a__first <= temp___idx_159) and
  (temp___idx_159 <= a__last)) ->
  (to_rep((a[temp___idx_159])) = to_rep((b[((b__first - a__first) + temp___idx_159)])))))) then true else false)

axiom bool_eq_rev20 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev21 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev22 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev23 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_159:int. (((a__first <= temp___idx_159) and
  (temp___idx_159 <= a__last)) ->
  (to_rep((a[temp___idx_159])) = to_rep((b[((b__first - a__first) + temp___idx_159)]))))))))

logic attr__ATTRIBUTE_ADDRESS4 : int

type integer_subtype

logic integer_subtypeqtint : integer_subtype -> int

axiom integer_subtypeqtaxiom :
  (forall i:integer_subtype. ((- 2147483648) <= integer_subtypeqtint(i)))

axiom integer_subtypeqtaxiom1 :
  (forall i:integer_subtype. (integer_subtypeqtint(i) <= 2147483647))

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq6 : integer_subtype, integer_subtype -> bool

logic dummy6 : integer_subtype

type integer_subtype__ref = { integer_subtype__content : integer_subtype
}

function integer_subtype__ref_integer_subtype__content__projection(a: integer_subtype__ref) : integer_subtype =
  (a).integer_subtype__content

function to_rep2(x: integer_subtype) : int = integer_subtypeqtint(x)

logic of_rep2 : int -> integer_subtype

axiom inversion_axiom2 :
  (forall x:integer_subtype [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:integer_subtype [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref6 = { map__content6 : (int,integer_subtype) farray
}

logic slide6 : (int,integer_subtype) farray, int,
  int -> (int,integer_subtype) farray

axiom slide_eq6 :
  (forall a:(int,integer_subtype) farray.
  (forall first:int [slide6(a, first, first)]. (slide6(a, first, first) = a)))

axiom slide_def6 :
  (forall a:(int,integer_subtype) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide6(a, old_first, new_first)[i])]. ((slide6(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq11(a: (int,integer_subtype) farray, a__first: int,
  a__last: int, b: (int,integer_subtype) farray, b__first: int,
  b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_160:int. (((a__first <= temp___idx_160) and
  (temp___idx_160 <= a__last)) ->
  (to_rep2((a[temp___idx_160])) = to_rep2((b[((b__first - a__first) + temp___idx_160)])))))) then true else false)

axiom bool_eq_rev24 :
  (forall a:(int,integer_subtype) farray.
  forall b:(int,integer_subtype) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev25 :
  (forall a:(int,integer_subtype) farray.
  forall b:(int,integer_subtype) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev26 :
  (forall a:(int,integer_subtype) farray.
  forall b:(int,integer_subtype) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev27 :
  (forall a:(int,integer_subtype) farray.
  forall b:(int,integer_subtype) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_160:int. (((a__first <= temp___idx_160) and
  (temp___idx_160 <= a__last)) ->
  (to_rep2((a[temp___idx_160])) = to_rep2((b[((b__first - a__first) + temp___idx_160)]))))))))

logic attr__ATTRIBUTE_ADDRESS5 : int

logic cast : (int,integer) farray -> (int,integer_subtype) farray

logic cast__function_guard : (int,integer_subtype) farray,
  (int,integer) farray -> prop

axiom cast__post_axiom :
  (forall input_array:(int,integer) farray [cast(input_array)]. (let result =
  cast(input_array) : (int,integer_subtype) farray in
  (cast__function_guard(result, input_array) ->
  (forall k:int. (((0 <= k) and (k <= 2)) ->
  (to_rep2((result[k])) = to_rep((input_array[k]))))))))

predicate in_range4(rec__test__rec__x1: int, a: us_split_discrs) =
  (rec__test__rec__x1 = to_rep((a).rec__test__rec__x))

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic test__rec__x__first__bit2 : int

logic test__rec__x__last__bit2 : int

logic test__rec__x__position2 : int

axiom test__rec__x__first__bit_axiom2 : (0 <= test__rec__x__first__bit2)

axiom test__rec__x__last__bit_axiom2 :
  (test__rec__x__first__bit2 <  test__rec__x__last__bit2)

axiom test__rec__x__position_axiom2 : (0 <= test__rec__x__position2)

logic test__rec__y__first__bit2 : int

logic test__rec__y__last__bit2 : int

logic test__rec__y__position2 : int

axiom test__rec__y__first__bit_axiom2 : (0 <= test__rec__y__first__bit2)

axiom test__rec__y__last__bit_axiom2 :
  (test__rec__y__first__bit2 <  test__rec__y__last__bit2)

axiom test__rec__y__position_axiom2 : (0 <= test__rec__y__position2)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy7 : us_rep

type rec____ref = { rec____content : us_rep
}

function rec____ref_rec____content__projection(a: rec____ref) : us_rep =
  (a).rec____content

type tarr3D1

logic tarr3D1qtint : tarr3D1 -> int

axiom tarr3D1qtaxiom : (forall i:tarr3D1. (1 <= tarr3D1qtint(i)))

axiom tarr3D1qtaxiom1 : (forall i:tarr3D1. (tarr3D1qtint(i) <= 3))

predicate in_range5(x: int) = ((1 <= x) and (x <= 3))

function bool_eq12(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq8 : tarr3D1, tarr3D1 -> bool

logic dummy8 : tarr3D1

type tarr3D1__ref = { tarr3D1__content : tarr3D1
}

function tarr3D1__ref_tarr3D1__content__projection(a: tarr3D1__ref) : tarr3D1 =
  (a).tarr3D1__content

predicate dynamic_invariant(temp___expr_265: (int,us_rep) farray,
  temp___is_init_261: bool, temp___skip_constant_262: bool,
  temp___do_toplevel_263: bool, temp___do_typ_inv_264: bool) =
  (forall temp___266:int. (((1 <= temp___266) and (temp___266 <= 3)) ->
  in_range4(10, ((temp___expr_265[temp___266])).us_split_discrs1)))

predicate default_initial_assumption(temp___expr_268: (int,us_rep) farray,
  temp___skip_top_level_269: bool) =
  (forall temp___270:int. (((1 <= temp___270) and (temp___270 <= 3)) ->
  (to_rep((((temp___expr_268[temp___270])).us_split_discrs1).rec__test__rec__x) = 10)))

type tarr4D1

logic tarr4D1qtint : tarr4D1 -> int

axiom tarr4D1qtaxiom : (forall i:tarr4D1. (1 <= tarr4D1qtint(i)))

axiom tarr4D1qtaxiom1 : (forall i:tarr4D1. (tarr4D1qtint(i) <= 3))

predicate in_range6(x: int) = ((1 <= x) and (x <= 3))

function bool_eq13(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq9 : tarr4D1, tarr4D1 -> bool

logic dummy9 : tarr4D1

type tarr4D1__ref = { tarr4D1__content : tarr4D1
}

function tarr4D1__ref_tarr4D1__content__projection(a: tarr4D1__ref) : tarr4D1 =
  (a).tarr4D1__content

predicate dynamic_invariant1(temp___expr_278: (int,us_rep) farray,
  temp___is_init_274: bool, temp___skip_constant_275: bool,
  temp___do_toplevel_276: bool, temp___do_typ_inv_277: bool) =
  (forall temp___279:int. (((1 <= temp___279) and (temp___279 <= 3)) ->
  in_range4(10, ((temp___expr_278[temp___279])).us_split_discrs1)))

predicate default_initial_assumption1(temp___expr_281: (int,us_rep) farray,
  temp___skip_top_level_282: bool) =
  (forall temp___283:int. (((1 <= temp___283) and (temp___283 <= 3)) ->
  (to_rep((((temp___expr_281[temp___283])).us_split_discrs1).rec__test__rec__x) = 10)))

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic test__rec__x__first__bit3 : int

logic test__rec__x__last__bit3 : int

logic test__rec__x__position3 : int

axiom test__rec__x__first__bit_axiom3 : (0 <= test__rec__x__first__bit3)

axiom test__rec__x__last__bit_axiom3 :
  (test__rec__x__first__bit3 <  test__rec__x__last__bit3)

axiom test__rec__x__position_axiom3 : (0 <= test__rec__x__position3)

logic test__rec__y__first__bit3 : int

logic test__rec__y__last__bit3 : int

logic test__rec__y__position3 : int

axiom test__rec__y__first__bit_axiom3 : (0 <= test__rec__y__first__bit3)

axiom test__rec__y__last__bit_axiom3 :
  (test__rec__y__first__bit3 <  test__rec__y__last__bit3)

axiom test__rec__y__position_axiom3 : (0 <= test__rec__y__position3)

logic user_eq10 : us_rep, us_rep -> bool

logic dummy10 : us_rep

type t15b__ref = { t15b__content : us_rep
}

function t15b__ref_t15b__content__projection(a: t15b__ref) : us_rep =
  (a).t15b__content

logic test__x__aggregate_def : (int,natural) farray -> (int,(int,natural) farray) farray

logic temp_____aggregate_def_325 : int -> (int,natural) farray

logic convert : (int,(int,natural) farray) farray -> (int,(int,natural) farray) farray

axiom convert__def :
  (forall a:(int,(int,natural) farray) farray.
  (forall temp___329:int. ((a[temp___329]) = (convert(a)[temp___329]))))

logic test__w__aggregate_def : us_rep -> (int,us_rep) farray

logic convert1 : (int,us_rep) farray -> (int,us_rep) farray

axiom convert__def1 :
  (forall a:(int,us_rep) farray.
  (forall temp___335:int. ((a[temp___335]) = (convert1(a)[temp___335]))))

logic test__test_array__aggregate_def : int, int, int -> (int,integer) farray

logic convert2 : (int,integer) farray -> (int,integer_subtype) farray

axiom convert__def2 :
  (forall a:(int,integer) farray.
  (forall temp___346:int.
  (to_rep((a[temp___346])) = to_rep2((convert2(a)[temp___346])))))

predicate dynamic_invariant2(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate dynamic_invariant3(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

predicate dynamic_invariant4(temp___expr_245: us_rep,
  temp___is_init_241: bool, temp___skip_constant_242: bool,
  temp___do_toplevel_243: bool, temp___do_typ_inv_244: bool) =
  ((not (temp___skip_constant_242 = true)) -> in_range4(10,
  (temp___expr_245).us_split_discrs1))

predicate default_initial_assumption2(temp___expr_247: us_rep,
  temp___skip_top_level_248: bool) =
  (to_rep(((temp___expr_247).us_split_discrs1).rec__test__rec__x) = 10)

predicate dynamic_invariant5(temp___expr_255: us_rep,
  temp___is_init_251: bool, temp___skip_constant_252: bool,
  temp___do_toplevel_253: bool, temp___do_typ_inv_254: bool) =
  ((not (temp___skip_constant_252 = true)) -> in_range4(10,
  (temp___expr_255).us_split_discrs1))

predicate default_initial_assumption3(temp___expr_257: us_rep,
  temp___skip_top_level_258: bool) =
  (to_rep(((temp___expr_257).us_split_discrs1).rec__test__rec__x) = 10)

axiom def_axiom :
  (forall temp___323:(int,natural) farray.
  (forall temp___324:int.
  ((test__x__aggregate_def(temp___323)[temp___324]) = temp___323)))

logic rliteral : natural

axiom rliteral_axiom : (naturalqtint(rliteral) = 1)

axiom def_axiom1 :
  (forall temp___327:int. (dynamic_invariant3(temp___327, true, true, true,
  true) ->
  (forall temp___328:int.
  ((temp_____aggregate_def_325(temp___327)[temp___328]) = rliteral))))

axiom def_axiom2 :
  (forall temp___332:us_rep. (dynamic_invariant4(temp___332, true, true,
  true, true) ->
  (forall temp___333:int.
  ((test__w__aggregate_def(temp___332)[temp___333]) = temp___332))))

logic rliteral1 : integer

axiom rliteral_axiom1 : (integerqtint(rliteral1) = 1)

logic rliteral2 : integer

axiom rliteral_axiom2 : (integerqtint(rliteral2) = 2)

logic rliteral3 : integer

axiom rliteral_axiom3 : (integerqtint(rliteral3) = 3)

axiom def_axiom3 :
  (forall temp___338:int. forall temp___339:int. forall temp___340:int.
  (((dynamic_invariant2(temp___338, true, true, true, true) and
  dynamic_invariant2(temp___339, true, true, true, true)) and
  dynamic_invariant2(temp___340, true, true, true, true)) ->
  ((test__test_array__aggregate_def(temp___338, temp___339,
  temp___340)[0]) = rliteral1)))

axiom def_axiom4 :
  (forall temp___338:int. forall temp___339:int. forall temp___340:int.
  (((dynamic_invariant2(temp___338, true, true, true, true) and
  dynamic_invariant2(temp___339, true, true, true, true)) and
  dynamic_invariant2(temp___340, true, true, true, true)) ->
  ((test__test_array__aggregate_def(temp___338, temp___339,
  temp___340)[1]) = rliteral2)))

axiom def_axiom5 :
  (forall temp___338:int. forall temp___339:int. forall temp___340:int.
  (((dynamic_invariant2(temp___338, true, true, true, true) and
  dynamic_invariant2(temp___339, true, true, true, true)) and
  dynamic_invariant2(temp___340, true, true, true, true)) ->
  ((test__test_array__aggregate_def(temp___338, temp___339,
  temp___340)[2]) = rliteral3)))

predicate dynamic_invariant6(temp___expr_301: int, temp___is_init_297: bool,
  temp___skip_constant_298: bool, temp___do_toplevel_299: bool,
  temp___do_typ_inv_300: bool) = (((temp___is_init_297 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range3(temp___expr_301))

logic rliteral4 : integer

axiom rliteral_axiom4 : (integerqtint(rliteral4) = 10)

 (* File "test.adb", line 5, characters 0-0 *)
goal defqtvc : (in_range1(10) -> (in_range1(10) ->
  (forall x:(int,(int,natural) farray) farray.
  ((x = test__x__aggregate_def(temp_____aggregate_def_325(1))) ->
  (forall y:(int,(int,natural) farray) farray. ((y = convert(x)) ->
  (forall w:(int,us_rep) farray. ((w = test__w__aggregate_def({
  us_split_discrs1 = { rec__test__rec__x = rliteral4 }; us_split_fields1 = {
  rec__test__rec__y = rliteral1 } })) -> (dynamic_invariant(w, true, false,
  true, true) ->
  (forall z:(int,us_rep) farray. ((z = convert1(w)) -> (dynamic_invariant1(z,
  true, false, true, true) ->
  (forall test_array:(int,integer) farray.
  ((test_array = test__test_array__aggregate_def(1, 2, 3)) ->
  ((forall i:int. (((1 <= i) and (i <= 3)) ->
   (forall j:int. (((1 <= j) and (j <= 100)) -> (to_rep1(((y[i])[j])) = 1))))) ->
  ((forall i:int. (((1 <= i) and (i <= 3)) ->
   (to_rep((((z[i])).us_split_fields1).rec__test__rec__y) = 1))) ->
  (forall result_array:(int,integer_subtype) farray.
  ((result_array = convert2(test_array)) ->
  ((to_rep2((result_array[1])) = 2) -> (let o = cast(test_array)
  : (int,integer_subtype) farray in ((cast__function_guard(o, test_array) and
  (forall k:int. (((0 <= k) and (k <= 2)) ->
  (to_rep2((o[k])) = to_rep((test_array[k])))))) ->
  (forall result_array1:(int,integer_subtype) farray. ((result_array1 = o) ->
  (to_rep2((result_array1[1])) = 2))))))))))))))))))))))))
