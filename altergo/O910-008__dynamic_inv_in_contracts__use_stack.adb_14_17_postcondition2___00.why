(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : positive, positive -> bool

logic dummy : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_invariant(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range1(temp___expr_46))

function to_rep(x: positive) : int = positiveqtint(x)

logic of_rep : int -> positive

axiom inversion_axiom :
  (forall x:positive [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:positive [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic max : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic is_empty : int -> bool

logic is_empty__function_guard : bool, int -> prop

logic last : int

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type top_range__ref = { top_range__content : integer
}

function top_range__ref_top_range__content__projection(a: top_range__ref) : integer =
  (a).top_range__content

predicate dynamic_invariant1(temp___expr_184: int, temp___is_init_180: bool,
  temp___skip_constant_181: bool, temp___do_toplevel_182: bool,
  temp___do_typ_inv_183: bool) = (((temp___is_init_180 = true) or
  (0 <= last)) -> dynamic_property(0, last, temp___expr_184))

axiom last__def_axiom : (last = max)

axiom is_empty__def_axiom :
  (forall use_stack__stacks__top:int [is_empty(use_stack__stacks__top)].
  ((is_empty(use_stack__stacks__top) = true) ->
  (use_stack__stacks__top = 0)))

axiom is_empty__def_axiom1 :
  (forall use_stack__stacks__top:int [is_empty(use_stack__stacks__top)].
  ((use_stack__stacks__top = 0) ->
  (is_empty(use_stack__stacks__top) = true)))

logic is_full : int -> bool

logic is_full__function_guard : bool, int -> prop

axiom is_full__def_axiom :
  (forall use_stack__stacks__top:int [is_full(use_stack__stacks__top)].
  ((is_full(use_stack__stacks__top) = true) ->
  (use_stack__stacks__top = max)))

axiom is_full__def_axiom1 :
  (forall use_stack__stacks__top:int [is_full(use_stack__stacks__top)].
  ((use_stack__stacks__top = max) ->
  (is_full(use_stack__stacks__top) = true)))

type map__ref = { map__content : (int,positive) farray
}

logic slide : (int,positive) farray, int, int -> (int,positive) farray

axiom slide_eq :
  (forall a:(int,positive) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,positive) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,positive) farray, a__first: int, a__last: int,
  b: (int,positive) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep((a[temp___idx_156])) = to_rep((b[((b__first - a__first) + temp___idx_156)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep((a[temp___idx_156])) = to_rep((b[((b__first - a__first) + temp___idx_156)]))))))))

logic content__first : integer

logic content__last : integer

logic attr__ATTRIBUTE_ADDRESS2 : int

logic peek : int, (int,positive) farray -> int

logic peek__function_guard : int, int, (int,positive) farray -> prop

axiom peek__post_axiom :
  (forall use_stack__stacks__top:int.
  is_empty__function_guard(is_empty(use_stack__stacks__top),
  use_stack__stacks__top))

axiom peek__post_axiom1 :
  (forall use_stack__stacks__top:int.
  (forall use_stack__stacks__content:(int,positive) farray
  [peek(use_stack__stacks__top, use_stack__stacks__content)].
  ((dynamic_invariant1(use_stack__stacks__top, true, true, true, true) and
  (not (is_empty(use_stack__stacks__top) = true))) -> (let result =
  peek(use_stack__stacks__top, use_stack__stacks__content) : int in
  (peek__function_guard(result, use_stack__stacks__top,
  use_stack__stacks__content) -> dynamic_invariant(result, true, false, true,
  true))))))

axiom peek__def_axiom :
  (forall use_stack__stacks__top:int.
  (forall use_stack__stacks__content:(int,positive) farray
  [peek(use_stack__stacks__top, use_stack__stacks__content)].
  (dynamic_invariant1(use_stack__stacks__top, true, true, true, true) ->
  (peek(use_stack__stacks__top,
  use_stack__stacks__content) = to_rep((use_stack__stacks__content[use_stack__stacks__top]))))))

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy3 : integer

type tmy_arrayD1__ref = { tmy_arrayD1__content : integer
}

function tmy_arrayD1__ref_tmy_arrayD1__content__projection(a: tmy_arrayD1__ref) : integer =
  (a).tmy_arrayD1__content

type t

logic first : t -> integer

logic last1 : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(last1(mk(f, l))) = l))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t = { elts : (int,positive) farray; rt : t
}

function to_array(a: us_t) : (int,positive) farray = (a).elts

function of_array(a: (int,positive) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last2(a: us_t) : int = to_rep1(last1((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last2(a)) then ((last2(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last1((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last1((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : us_t

type tmy_arrayB__ref = { tmy_arrayB__content : us_t
}

function tmy_arrayB__ref_tmy_arrayB__content__projection(a: tmy_arrayB__ref) : us_t =
  (a).tmy_arrayB__content

type my_array__ref = { my_array__content : us_t
}

function my_array__ref_my_array__content__projection(a: my_array__ref) : us_t =
  (a).my_array__content

predicate dynamic_invariant2(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range2(temp___expr_18))

predicate dynamic_invariant3(temp___expr_191: us_t, temp___is_init_187: bool,
  temp___skip_constant_188: bool, temp___do_toplevel_189: bool,
  temp___do_typ_inv_190: bool) = ((not (temp___skip_constant_188 = true)) ->
  (dynamic_property2(1, max, first1(temp___expr_191),
  last2(temp___expr_191)) and ((first1(temp___expr_191) = 1) and
  (last2(temp___expr_191) = max))))

predicate default_initial_assumption(temp___expr_193: us_t,
  temp___skip_top_level_194: bool) = ((first1(temp___expr_193) = 1) and
  (last2(temp___expr_193) = max))

 (* File "use_stack.adb", line 12, characters 0-0 *)
goal defqtvc :
  (forall top:int. forall content:(int,positive) farray. forall e:int.
  (forall top1:int. ((top1 = top) ->
  (forall content1:(int,positive) farray. ((content1 = content) ->
  (dynamic_invariant(max, true, false, true, true) -> (dynamic_invariant(e,
  false, false, true, true) -> (dynamic_invariant1(top, true, false, true,
  true) -> ((dynamic_property2(1, max, to_rep1(content__first),
  to_rep1(content__last)) and ((to_rep1(content__first) = 1) and
  (to_rep1(content__last) = max))) ->
  ((forall top2:int. is_empty__function_guard(is_empty(top2), top2)) ->
  ((not (is_empty(top) = true)) -> (((to_rep1(content__first) <= top) and
  (top <= to_rep1(content__last))) ->
  (forall o:int. ((to_rep((content[top])) = o) ->
  (forall e1:int. ((e1 = o) -> (let temp___238 = (top - 1) : int in
  (dynamic_property(0, last, temp___238) ->
  (forall top2:int. ((top2 = temp___238) ->
  ((forall top3:int. is_full__function_guard(is_full(top3), top3)) ->
  (not (is_full(top2) = true)))))))))))))))))))))))
