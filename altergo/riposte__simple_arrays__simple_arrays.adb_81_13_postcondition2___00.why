(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)]))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic n : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic temp_____aggregate_def_215 : (int,integer) farray, int, int, int,
  int -> (int,integer) farray

logic temp_____aggregate_def_402 : (int,integer) farray, int, int, int,
  int -> (int,integer) farray

logic temp_____aggregate_def_410 : (int,integer) farray, int, int, int,
  int -> (int,integer) farray

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 5)

logic rliteral1 : integer

axiom rliteral_axiom1 : (integerqtint(rliteral1) = 6)

axiom def_axiom :
  (forall temp___217:(int,integer) farray.
  (forall temp___218:int. forall temp___219:int. forall temp___220:int.
  forall temp___221:int. ((dynamic_invariant(temp___218, true, true, true,
  true) and ((dynamic_invariant(temp___219, true, true, true, true) and
  dynamic_invariant(temp___220, true, true, true, true)) and
  dynamic_invariant(temp___221, true, true, true, true))) ->
  (forall temp___222:int. ((temp___222 = temp___220) ->
  ((temp_____aggregate_def_215(temp___217, temp___218, temp___219,
  temp___220, temp___221)[temp___222]) = rliteral))))))

axiom def_axiom1 :
  (forall temp___217:(int,integer) farray.
  (forall temp___218:int. forall temp___219:int. forall temp___220:int.
  forall temp___221:int. ((dynamic_invariant(temp___218, true, true, true,
  true) and ((dynamic_invariant(temp___219, true, true, true, true) and
  dynamic_invariant(temp___220, true, true, true, true)) and
  dynamic_invariant(temp___221, true, true, true, true))) ->
  (forall temp___222:int. ((not (temp___222 = temp___220)) ->
  ((temp___222 = temp___218) -> ((temp_____aggregate_def_215(temp___217,
  temp___218, temp___219, temp___220,
  temp___221)[temp___222]) = rliteral1)))))))

axiom def_axiom2 :
  (forall temp___217:(int,integer) farray.
  (forall temp___218:int. forall temp___219:int. forall temp___220:int.
  forall temp___221:int. ((dynamic_invariant(temp___218, true, true, true,
  true) and ((dynamic_invariant(temp___219, true, true, true, true) and
  dynamic_invariant(temp___220, true, true, true, true)) and
  dynamic_invariant(temp___221, true, true, true, true))) ->
  (forall temp___222:int. ((not (temp___222 = temp___220)) ->
  ((not (temp___222 = temp___218)) ->
  ((temp_____aggregate_def_215(temp___217, temp___218, temp___219,
  temp___220, temp___221)[temp___222]) = (temp___217[temp___222]))))))))

axiom def_axiom3 :
  (forall temp___404:(int,integer) farray.
  (forall temp___405:int. forall temp___406:int. forall temp___407:int.
  forall temp___408:int. ((dynamic_invariant(temp___405, true, true, true,
  true) and ((dynamic_invariant(temp___406, true, true, true, true) and
  dynamic_invariant(temp___407, true, true, true, true)) and
  dynamic_invariant(temp___408, true, true, true, true))) ->
  (forall temp___409:int. ((temp___409 = temp___407) ->
  ((temp_____aggregate_def_402(temp___404, temp___405, temp___406,
  temp___407, temp___408)[temp___409]) = rliteral1))))))

axiom def_axiom4 :
  (forall temp___404:(int,integer) farray.
  (forall temp___405:int. forall temp___406:int. forall temp___407:int.
  forall temp___408:int. ((dynamic_invariant(temp___405, true, true, true,
  true) and ((dynamic_invariant(temp___406, true, true, true, true) and
  dynamic_invariant(temp___407, true, true, true, true)) and
  dynamic_invariant(temp___408, true, true, true, true))) ->
  (forall temp___409:int. ((not (temp___409 = temp___407)) ->
  ((temp___409 = temp___405) -> ((temp_____aggregate_def_402(temp___404,
  temp___405, temp___406, temp___407, temp___408)[temp___409]) = rliteral)))))))

axiom def_axiom5 :
  (forall temp___404:(int,integer) farray.
  (forall temp___405:int. forall temp___406:int. forall temp___407:int.
  forall temp___408:int. ((dynamic_invariant(temp___405, true, true, true,
  true) and ((dynamic_invariant(temp___406, true, true, true, true) and
  dynamic_invariant(temp___407, true, true, true, true)) and
  dynamic_invariant(temp___408, true, true, true, true))) ->
  (forall temp___409:int. ((not (temp___409 = temp___407)) ->
  ((not (temp___409 = temp___405)) ->
  ((temp_____aggregate_def_402(temp___404, temp___405, temp___406,
  temp___407, temp___408)[temp___409]) = (temp___404[temp___409]))))))))

axiom def_axiom6 :
  (forall temp___412:(int,integer) farray.
  (forall temp___413:int. forall temp___414:int. forall temp___415:int.
  forall temp___416:int. ((dynamic_invariant(temp___413, true, true, true,
  true) and ((dynamic_invariant(temp___414, true, true, true, true) and
  dynamic_invariant(temp___415, true, true, true, true)) and
  dynamic_invariant(temp___416, true, true, true, true))) ->
  (forall temp___417:int. ((temp___417 = temp___415) ->
  ((temp_____aggregate_def_410(temp___412, temp___413, temp___414,
  temp___415, temp___416)[temp___417]) = rliteral))))))

axiom def_axiom7 :
  (forall temp___412:(int,integer) farray.
  (forall temp___413:int. forall temp___414:int. forall temp___415:int.
  forall temp___416:int. ((dynamic_invariant(temp___413, true, true, true,
  true) and ((dynamic_invariant(temp___414, true, true, true, true) and
  dynamic_invariant(temp___415, true, true, true, true)) and
  dynamic_invariant(temp___416, true, true, true, true))) ->
  (forall temp___417:int. ((not (temp___417 = temp___415)) ->
  ((temp___417 = temp___413) -> ((temp_____aggregate_def_410(temp___412,
  temp___413, temp___414, temp___415,
  temp___416)[temp___417]) = rliteral1)))))))

axiom def_axiom8 :
  (forall temp___412:(int,integer) farray.
  (forall temp___413:int. forall temp___414:int. forall temp___415:int.
  forall temp___416:int. ((dynamic_invariant(temp___413, true, true, true,
  true) and ((dynamic_invariant(temp___414, true, true, true, true) and
  dynamic_invariant(temp___415, true, true, true, true)) and
  dynamic_invariant(temp___416, true, true, true, true))) ->
  (forall temp___417:int. ((not (temp___417 = temp___415)) ->
  ((not (temp___417 = temp___413)) ->
  ((temp_____aggregate_def_410(temp___412, temp___413, temp___414,
  temp___415, temp___416)[temp___417]) = (temp___412[temp___417]))))))))

 (* File "simple_arrays.adb", line 77, characters 0-0 *)
goal defqtvc :
  (forall a:(int,integer) farray.
  (forall a1:(int,integer) farray. ((a1 = a) -> (dynamic_invariant(n, true,
  false, true, true) -> ((bool_eq2(temp_____aggregate_def_402(a, 1, 5, n, 6),
  (- 2147483648), 2147483647, temp_____aggregate_def_410(a, n, 6, 1, 5),
  (- 2147483648), 2147483647) = true) ->
  (forall a2:(int,integer) farray. ((a2 = (a[1 <- rliteral])) ->
  (forall a3:(int,integer) farray. ((a3 = (a2[n <- rliteral1])) ->
  ((not (n = 1)) ->
  (forall temp___index_435:int. ((((- 2147483648) <= temp___index_435) and
  (temp___index_435 <= 2147483647)) ->
  (to_rep((a3[temp___index_435])) = (if (temp___index_435 = n) then 6 else (if (temp___index_435 = 1) then 5 else to_rep((a1[temp___index_435])))))))))))))))))
