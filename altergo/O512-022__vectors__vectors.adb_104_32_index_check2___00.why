(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

function to_rep(x: positive) : int = positiveqtint(x)

logic of_rep : int -> positive

axiom inversion_axiom :
  (forall x:positive [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:positive [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

function to_rep1(x: natural) : int = naturalqtint(x)

logic of_rep1 : int -> natural

axiom inversion_axiom1 :
  (forall x:natural [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:natural [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type index_type

logic index_typeqtint : index_type -> int

axiom index_typeqtaxiom : (forall i:index_type. (1 <= index_typeqtint(i)))

axiom index_typeqtaxiom1 :
  (forall i:index_type. (index_typeqtint(i) <= 10000))

predicate in_range4(x: int) = ((1 <= x) and (x <= 10000))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : index_type, index_type -> bool

logic dummy3 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref_index_type__content__projection(a: index_type__ref) : index_type =
  (a).index_type__content

function to_rep2(x: index_type) : int = index_typeqtint(x)

logic of_rep2 : int -> index_type

axiom inversion_axiom2 :
  (forall x:index_type [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:index_type [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields = { rec__vectors__cursor__container_id : natural;
rec__vectors__cursor__container_sig : natural;
rec__vectors__cursor__last_index : index_type; rec__vectors__cursor__index :
index_type
}

function us_split_fields_rec__vectors__cursor__container_id__projection(a: us_split_fields) : natural =
  (a).rec__vectors__cursor__container_id

function us_split_fields_rec__vectors__cursor__container_sig__projection(a: us_split_fields) : natural =
  (a).rec__vectors__cursor__container_sig

function us_split_fields_rec__vectors__cursor__last_index__projection(a: us_split_fields) : index_type =
  (a).rec__vectors__cursor__last_index

function us_split_fields_rec__vectors__cursor__index__projection(a: us_split_fields) : index_type =
  (a).rec__vectors__cursor__index

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq5(a: us_rep, b: us_rep) : bool =
  (if (((to_rep1(((a).us_split_fields1).rec__vectors__cursor__container_id) = to_rep1(((b).us_split_fields1).rec__vectors__cursor__container_id)) and
  (to_rep1(((a).us_split_fields1).rec__vectors__cursor__container_sig) = to_rep1(((b).us_split_fields1).rec__vectors__cursor__container_sig))) and
  ((to_rep2(((a).us_split_fields1).rec__vectors__cursor__last_index) = to_rep2(((b).us_split_fields1).rec__vectors__cursor__last_index)) and
  (to_rep2(((a).us_split_fields1).rec__vectors__cursor__index) = to_rep2(((b).us_split_fields1).rec__vectors__cursor__index)))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic vectors__cursor__container_id__first__bit : int

logic vectors__cursor__container_id__last__bit : int

logic vectors__cursor__container_id__position : int

axiom vectors__cursor__container_id__first__bit_axiom :
  (0 <= vectors__cursor__container_id__first__bit)

axiom vectors__cursor__container_id__last__bit_axiom :
  (vectors__cursor__container_id__first__bit <  vectors__cursor__container_id__last__bit)

axiom vectors__cursor__container_id__position_axiom :
  (0 <= vectors__cursor__container_id__position)

logic vectors__cursor__container_sig__first__bit : int

logic vectors__cursor__container_sig__last__bit : int

logic vectors__cursor__container_sig__position : int

axiom vectors__cursor__container_sig__first__bit_axiom :
  (0 <= vectors__cursor__container_sig__first__bit)

axiom vectors__cursor__container_sig__last__bit_axiom :
  (vectors__cursor__container_sig__first__bit <  vectors__cursor__container_sig__last__bit)

axiom vectors__cursor__container_sig__position_axiom :
  (0 <= vectors__cursor__container_sig__position)

logic vectors__cursor__last_index__first__bit : int

logic vectors__cursor__last_index__last__bit : int

logic vectors__cursor__last_index__position : int

axiom vectors__cursor__last_index__first__bit_axiom :
  (0 <= vectors__cursor__last_index__first__bit)

axiom vectors__cursor__last_index__last__bit_axiom :
  (vectors__cursor__last_index__first__bit <  vectors__cursor__last_index__last__bit)

axiom vectors__cursor__last_index__position_axiom :
  (0 <= vectors__cursor__last_index__position)

logic vectors__cursor__index__first__bit : int

logic vectors__cursor__index__last__bit : int

logic vectors__cursor__index__position : int

axiom vectors__cursor__index__first__bit_axiom :
  (0 <= vectors__cursor__index__first__bit)

axiom vectors__cursor__index__last__bit_axiom :
  (vectors__cursor__index__first__bit <  vectors__cursor__index__last__bit)

axiom vectors__cursor__index__position_axiom :
  (0 <= vectors__cursor__index__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type cursor__ref = { cursor__content : us_rep
}

function cursor__ref_cursor__content__projection(a: cursor__ref) : us_rep =
  (a).cursor__content

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. (0 <= extended_indexqtint(i)))

axiom extended_indexqtaxiom1 :
  (forall i:extended_index. (extended_indexqtint(i) <= 10000))

predicate in_range5(x: int) = ((0 <= x) and (x <= 10000))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : extended_index, extended_index -> bool

logic dummy5 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref_extended_index__content__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

function to_rep3(x: extended_index) : int = extended_indexqtint(x)

logic of_rep3 : int -> extended_index

axiom inversion_axiom3 :
  (forall x:extended_index [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:extended_index [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

type element_type

logic element_typeqtint : element_type -> int

axiom element_typeqtaxiom :
  (forall i:element_type. (0 <= element_typeqtint(i)))

axiom element_typeqtaxiom1 :
  (forall i:element_type. (element_typeqtint(i) <= 100000))

predicate in_range6(x: int) = ((0 <= x) and (x <= 100000))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : element_type, element_type -> bool

logic dummy6 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_element_type__content__projection(a: element_type__ref) : element_type =
  (a).element_type__content

function to_rep4(x: element_type) : int = element_typeqtint(x)

logic of_rep4 : int -> element_type

axiom inversion_axiom4 :
  (forall x:element_type [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:element_type [to_rep4(x)]. in_range6(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range6(x) ->
  (to_rep4(of_rep4(x)) = x)))

type map__ref = { map__content : (int,element_type) farray
}

logic slide : (int,element_type) farray, int,
  int -> (int,element_type) farray

axiom slide_eq :
  (forall a:(int,element_type) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,element_type) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq8(a: (int,element_type) farray, a__first: int, a__last: int,
  b: (int,element_type) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep4((a[temp___idx_154])) = to_rep4((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,element_type) farray. forall b:(int,element_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,element_type) farray. forall b:(int,element_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,element_type) farray. forall b:(int,element_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,element_type) farray. forall b:(int,element_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep4((a[temp___idx_154])) = to_rep4((b[((b__first - a__first) + temp___idx_154)]))))))))

logic dummy7 : (int,element_type) farray

logic value__size1 : int

logic object__size1 : int

logic component__size : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq7 : (int,element_type) farray, (int,element_type) farray -> bool

type us_split_fields2 = { rec__vectors__vector__id : natural;
rec__vectors__vector__sig : positive; rec__vectors__vector__elements :
(int,element_type) farray; rec__vectors__vector__last_index : extended_index
}

function us_split_fields_rec__vectors__vector__id__projection(a: us_split_fields2) : natural =
  (a).rec__vectors__vector__id

function us_split_fields_rec__vectors__vector__sig__projection(a: us_split_fields2) : positive =
  (a).rec__vectors__vector__sig

function us_split_fields_rec__vectors__vector__elements__projection(a: us_split_fields2) : (int,element_type) farray =
  (a).rec__vectors__vector__elements

function us_split_fields_rec__vectors__vector__last_index__projection(a: us_split_fields2) : extended_index =
  (a).rec__vectors__vector__last_index

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq9(a: us_rep1, b: us_rep1) : bool =
  (if (((to_rep1(((a).us_split_fields3).rec__vectors__vector__id) = to_rep1(((b).us_split_fields3).rec__vectors__vector__id)) and
  (to_rep(((a).us_split_fields3).rec__vectors__vector__sig) = to_rep(((b).us_split_fields3).rec__vectors__vector__sig))) and
  ((bool_eq8(((a).us_split_fields3).rec__vectors__vector__elements, 1, 10000,
  ((b).us_split_fields3).rec__vectors__vector__elements, 1,
  10000) = true) and
  (to_rep3(((a).us_split_fields3).rec__vectors__vector__last_index) = to_rep3(((b).us_split_fields3).rec__vectors__vector__last_index)))) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic vectors__vector__id__first__bit : int

logic vectors__vector__id__last__bit : int

logic vectors__vector__id__position : int

axiom vectors__vector__id__first__bit_axiom :
  (0 <= vectors__vector__id__first__bit)

axiom vectors__vector__id__last__bit_axiom :
  (vectors__vector__id__first__bit <  vectors__vector__id__last__bit)

axiom vectors__vector__id__position_axiom :
  (0 <= vectors__vector__id__position)

logic vectors__vector__sig__first__bit : int

logic vectors__vector__sig__last__bit : int

logic vectors__vector__sig__position : int

axiom vectors__vector__sig__first__bit_axiom :
  (0 <= vectors__vector__sig__first__bit)

axiom vectors__vector__sig__last__bit_axiom :
  (vectors__vector__sig__first__bit <  vectors__vector__sig__last__bit)

axiom vectors__vector__sig__position_axiom :
  (0 <= vectors__vector__sig__position)

logic vectors__vector__elements__first__bit : int

logic vectors__vector__elements__last__bit : int

logic vectors__vector__elements__position : int

axiom vectors__vector__elements__first__bit_axiom :
  (0 <= vectors__vector__elements__first__bit)

axiom vectors__vector__elements__last__bit_axiom :
  (vectors__vector__elements__first__bit <  vectors__vector__elements__last__bit)

axiom vectors__vector__elements__position_axiom :
  (0 <= vectors__vector__elements__position)

logic vectors__vector__last_index__first__bit : int

logic vectors__vector__last_index__last__bit : int

logic vectors__vector__last_index__position : int

axiom vectors__vector__last_index__first__bit_axiom :
  (0 <= vectors__vector__last_index__first__bit)

axiom vectors__vector__last_index__last__bit_axiom :
  (vectors__vector__last_index__first__bit <  vectors__vector__last_index__last__bit)

axiom vectors__vector__last_index__position_axiom :
  (0 <= vectors__vector__last_index__position)

logic user_eq8 : us_rep1, us_rep1 -> bool

logic dummy8 : us_rep1

type vector__ref = { vector__content : us_rep1
}

function vector__ref_vector__content__projection(a: vector__ref) : us_rep1 =
  (a).vector__content

logic attr__ATTRIBUTE_ADDRESS : int

logic before : us_rep

logic attr__ATTRIBUTE_ADDRESS1 : int

logic new_item : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic r10b : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type textended_indexB

logic textended_indexBqtint : textended_indexB -> int

axiom textended_indexBqtaxiom :
  (forall i:textended_indexB. ((- 32768) <= textended_indexBqtint(i)))

axiom textended_indexBqtaxiom1 :
  (forall i:textended_indexB. (textended_indexBqtint(i) <= 32767))

predicate in_range7(x: int) = (((- 32768) <= x) and (x <= 32767))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq9 : textended_indexB, textended_indexB -> bool

logic dummy9 : textended_indexB

type textended_indexB__ref = { textended_indexB__content : textended_indexB
}

function textended_indexB__ref_textended_indexB__content__projection(a: textended_indexB__ref) : textended_indexB =
  (a).textended_indexB__content

predicate dynamic_invariant(temp___expr_165: int, temp___is_init_161: bool,
  temp___skip_constant_162: bool, temp___do_toplevel_163: bool,
  temp___do_typ_inv_164: bool) = (((temp___is_init_161 = true) or
  (0 <= 10000)) -> in_range5(temp___expr_165))

predicate dynamic_invariant1(temp___expr_172: int, temp___is_init_168: bool,
  temp___skip_constant_169: bool, temp___do_toplevel_170: bool,
  temp___do_typ_inv_171: bool) = (((temp___is_init_168 = true) or
  (0 <= 100000)) -> in_range6(temp___expr_172))

predicate dynamic_invariant2(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

predicate dynamic_invariant3(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_46))

predicate dynamic_invariant4(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate dynamic_invariant5(temp___expr_179: int, temp___is_init_175: bool,
  temp___skip_constant_176: bool, temp___do_toplevel_177: bool,
  temp___do_typ_inv_178: bool) = (((temp___is_init_175 = true) or
  (1 <= 10000)) -> in_range4(temp___expr_179))

 (* File "vectors.ads", line 44, characters 0-0 *)
goal defqtvc :
  (forall container__split_fields:us_split_fields2.
  (dynamic_invariant1(new_item, true, false, true, true) ->
  (forall vectors__insert__L_1__R10b__assume:int.
  ((to_rep3((container__split_fields).rec__vectors__vector__last_index) = vectors__insert__L_1__R10b__assume) ->
  ((vectors__insert__L_1__R10b__assume = r10b) -> (dynamic_invariant(r10b,
  true, false, true, true) ->
  (forall temp___275:int.
  ((to_rep2(((before).us_split_fields1).rec__vectors__cursor__index) = temp___275) ->
  (let temp___276 = r10b : int in
  (forall j:int. ((j = temp___276) ->
  ((andb((if (temp___275 <= j) then true else false),
  (if (j <= temp___276) then true else false)) = true) ->
  (forall container__split_fields1:us_split_fields2. forall j1:int.
  ((andb((if ((((container__split_fields1).rec__vectors__vector__id = (container__split_fields).rec__vectors__vector__id) and
  ((container__split_fields1).rec__vectors__vector__sig = (container__split_fields).rec__vectors__vector__sig)) and
  ((container__split_fields1).rec__vectors__vector__last_index = (container__split_fields).rec__vectors__vector__last_index)) then true else false),
  (if ((to_rep2(((before).us_split_fields1).rec__vectors__cursor__index) <= j1) and
  (j1 <= r10b)) then true else false)) = true) ->
  (forall o:int.
  ((to_rep4(((container__split_fields1).rec__vectors__vector__elements[j1])) = o) ->
  (forall o1:element_type. ((to_rep4(o1) = o) -> (let o2 = (j1 + 1) : int in
  (in_range7(o2) -> (1 <= o2)))))))))))))))))))))
