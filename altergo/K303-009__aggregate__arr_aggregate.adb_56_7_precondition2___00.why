(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

logic attr__ATTRIBUTE_ADDRESS : int

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq1(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic dummy1 : (int,integer) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq1 : (int,integer) farray, (int,integer) farray -> bool

type map__ref1 = { map__content1 : (int,(int,integer) farray) farray
}

logic slide1 : (int,(int,integer) farray) farray, int,
  int -> (int,(int,integer) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,integer) farray) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,(int,integer) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,(int,integer) farray) farray, a__first: int,
  a__last: int, b: (int,(int,integer) farray) farray, b__first: int,
  b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq1((a[temp___idx_155]), 1, 2,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 2) = true)))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,(int,integer) farray) farray.
  forall b:(int,(int,integer) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,(int,integer) farray) farray.
  forall b:(int,(int,integer) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,(int,integer) farray) farray.
  forall b:(int,(int,integer) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,(int,integer) farray) farray.
  forall b:(int,(int,integer) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq1((a[temp___idx_155]), 1, 2,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 2) = true))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic b : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type ta3D1

logic ta3D1qtint : ta3D1 -> int

axiom ta3D1qtaxiom : (forall i:ta3D1. (1 <= ta3D1qtint(i)))

axiom ta3D1qtaxiom1 : (forall i:ta3D1. (ta3D1qtint(i) <= 2))

predicate in_range1(x: int) = ((1 <= x) and (x <= 2))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq2 : ta3D1, ta3D1 -> bool

logic dummy2 : ta3D1

type ta3D1__ref = { ta3D1__content : ta3D1
}

function ta3D1__ref_ta3D1__content__projection(a: ta3D1__ref) : ta3D1 =
  (a).ta3D1__content

type t59s

logic t59sqtint : t59s -> int

axiom t59sqtaxiom : (forall i:t59s. (1 <= t59sqtint(i)))

axiom t59sqtaxiom1 : (forall i:t59s. (t59sqtint(i) <= 2))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq3 : t59s, t59s -> bool

logic dummy3 : t59s

type t59s__ref = { t59s__content : t59s
}

function t59s__ref_t59s__content__projection(a: t59s__ref) : t59s =
  (a).t59s__content

type t65s

logic t65sqtint : t65s -> int

axiom t65sqtaxiom : (forall i:t65s. (1 <= t65sqtint(i)))

axiom t65sqtaxiom1 : (forall i:t65s. (t65sqtint(i) <= 2))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : t65s, t65s -> bool

logic dummy4 : t65s

type t65s__ref = { t65s__content : t65s
}

function t65s__ref_t65s__content__projection(a: t65s__ref) : t65s =
  (a).t65s__content

type t71s

logic t71sqtint : t71s -> int

axiom t71sqtaxiom : (forall i:t71s. (1 <= t71sqtint(i)))

axiom t71sqtaxiom1 : (forall i:t71s. (t71sqtint(i) <= 2))

predicate in_range4(x: int) = ((1 <= x) and (x <= 2))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : t71s, t71s -> bool

logic dummy5 : t71s

type t71s__ref = { t71s__content : t71s
}

function t71s__ref_t71s__content__projection(a: t71s__ref) : t71s =
  (a).t71s__content

type t77s

logic t77sqtint : t77s -> int

axiom t77sqtaxiom : (forall i:t77s. (1 <= t77sqtint(i)))

axiom t77sqtaxiom1 : (forall i:t77s. (t77sqtint(i) <= 2))

predicate in_range5(x: int) = ((1 <= x) and (x <= 2))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : t77s, t77s -> bool

logic dummy6 : t77s

type t77s__ref = { t77s__content : t77s
}

function t77s__ref_t77s__content__projection(a: t77s__ref) : t77s =
  (a).t77s__content

type t83s

logic t83sqtint : t83s -> int

axiom t83sqtaxiom : (forall i:t83s. (1 <= t83sqtint(i)))

axiom t83sqtaxiom1 : (forall i:t83s. (t83sqtint(i) <= 2))

predicate in_range6(x: int) = ((1 <= x) and (x <= 2))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : t83s, t83s -> bool

logic dummy7 : t83s

type t83s__ref = { t83s__content : t83s
}

function t83s__ref_t83s__content__projection(a: t83s__ref) : t83s =
  (a).t83s__content

logic temp_____aggregate_def_263 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

logic temp_____aggregate_def_268 : int, int -> (int,integer) farray

logic temp_____aggregate_def_273 : int, int -> (int,integer) farray

logic temp_____aggregate_def_281 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

logic temp_____aggregate_def_286 : int, int -> (int,integer) farray

logic temp_____aggregate_def_291 : int, int -> (int,integer) farray

logic temp_____aggregate_def_299 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

logic temp_____aggregate_def_304 : int, int -> (int,integer) farray

logic temp_____aggregate_def_309 : int, int -> (int,integer) farray

logic temp_____aggregate_def_317 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

logic temp_____aggregate_def_322 : int, int -> (int,integer) farray

logic temp_____aggregate_def_327 : int, int -> (int,integer) farray

logic temp_____aggregate_def_335 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

logic temp_____aggregate_def_340 : int, int -> (int,integer) farray

logic temp_____aggregate_def_345 : int, int -> (int,integer) farray

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 2)

axiom def_axiom :
  (forall temp___270:int. forall temp___271:int.
  ((dynamic_invariant(temp___270, true, true, true, true) and
  dynamic_invariant(temp___271, true, true, true, true)) ->
  (to_rep((temp_____aggregate_def_268(temp___270,
  temp___271)[1])) = temp___270)))

axiom def_axiom1 :
  (forall temp___270:int. forall temp___271:int.
  ((dynamic_invariant(temp___270, true, true, true, true) and
  dynamic_invariant(temp___271, true, true, true, true)) ->
  ((temp_____aggregate_def_268(temp___270, temp___271)[2]) = rliteral)))

axiom def_axiom2 :
  (forall temp___265:(int,integer) farray.
  forall temp___266:(int,integer) farray.
  ((temp_____aggregate_def_263(temp___265, temp___266)[1]) = temp___265))

axiom def_axiom3 :
  (forall temp___265:(int,integer) farray.
  forall temp___266:(int,integer) farray.
  ((temp_____aggregate_def_263(temp___265, temp___266)[2]) = temp___266))

axiom def_axiom4 :
  (forall temp___275:int. forall temp___276:int.
  ((dynamic_invariant(temp___275, true, true, true, true) and
  dynamic_invariant(temp___276, true, true, true, true)) ->
  (to_rep((temp_____aggregate_def_273(temp___275,
  temp___276)[1])) = temp___275)))

axiom def_axiom5 :
  (forall temp___275:int. forall temp___276:int.
  ((dynamic_invariant(temp___275, true, true, true, true) and
  dynamic_invariant(temp___276, true, true, true, true)) ->
  ((temp_____aggregate_def_273(temp___275, temp___276)[2]) = rliteral)))

axiom def_axiom6 :
  (forall temp___288:int. forall temp___289:int.
  ((dynamic_invariant(temp___288, true, true, true, true) and
  dynamic_invariant(temp___289, true, true, true, true)) ->
  (to_rep((temp_____aggregate_def_286(temp___288,
  temp___289)[1])) = temp___288)))

axiom def_axiom7 :
  (forall temp___288:int. forall temp___289:int.
  ((dynamic_invariant(temp___288, true, true, true, true) and
  dynamic_invariant(temp___289, true, true, true, true)) ->
  (to_rep((temp_____aggregate_def_286(temp___288,
  temp___289)[2])) = temp___289)))

axiom def_axiom8 :
  (forall temp___283:(int,integer) farray.
  forall temp___284:(int,integer) farray.
  ((temp_____aggregate_def_281(temp___283, temp___284)[1]) = temp___283))

axiom def_axiom9 :
  (forall temp___283:(int,integer) farray.
  forall temp___284:(int,integer) farray.
  ((temp_____aggregate_def_281(temp___283, temp___284)[2]) = temp___284))

axiom def_axiom10 :
  (forall temp___293:int. forall temp___294:int.
  ((dynamic_invariant(temp___293, true, true, true, true) and
  dynamic_invariant(temp___294, true, true, true, true)) ->
  (to_rep((temp_____aggregate_def_291(temp___293,
  temp___294)[1])) = temp___293)))

axiom def_axiom11 :
  (forall temp___293:int. forall temp___294:int.
  ((dynamic_invariant(temp___293, true, true, true, true) and
  dynamic_invariant(temp___294, true, true, true, true)) ->
  (to_rep((temp_____aggregate_def_291(temp___293,
  temp___294)[2])) = temp___294)))

axiom def_axiom12 :
  (forall temp___306:int. forall temp___307:int.
  ((dynamic_invariant(temp___306, true, true, true, true) and
  dynamic_invariant(temp___307, true, true, true, true)) ->
  (to_rep((temp_____aggregate_def_304(temp___306,
  temp___307)[1])) = temp___306)))

axiom def_axiom13 :
  (forall temp___306:int. forall temp___307:int.
  ((dynamic_invariant(temp___306, true, true, true, true) and
  dynamic_invariant(temp___307, true, true, true, true)) ->
  (to_rep((temp_____aggregate_def_304(temp___306,
  temp___307)[2])) = temp___307)))

axiom def_axiom14 :
  (forall temp___301:(int,integer) farray.
  forall temp___302:(int,integer) farray.
  ((temp_____aggregate_def_299(temp___301, temp___302)[1]) = temp___301))

axiom def_axiom15 :
  (forall temp___301:(int,integer) farray.
  forall temp___302:(int,integer) farray.
  ((temp_____aggregate_def_299(temp___301, temp___302)[2]) = temp___302))

axiom def_axiom16 :
  (forall temp___311:int. forall temp___312:int.
  ((dynamic_invariant(temp___311, true, true, true, true) and
  dynamic_invariant(temp___312, true, true, true, true)) ->
  (to_rep((temp_____aggregate_def_309(temp___311,
  temp___312)[1])) = temp___311)))

axiom def_axiom17 :
  (forall temp___311:int. forall temp___312:int.
  ((dynamic_invariant(temp___311, true, true, true, true) and
  dynamic_invariant(temp___312, true, true, true, true)) ->
  (to_rep((temp_____aggregate_def_309(temp___311,
  temp___312)[2])) = temp___312)))

axiom def_axiom18 :
  (forall temp___324:int. forall temp___325:int.
  ((dynamic_invariant(temp___324, true, true, true, true) and
  dynamic_invariant(temp___325, true, true, true, true)) ->
  ((temp_____aggregate_def_322(temp___324, temp___325)[1]) = rliteral)))

axiom def_axiom19 :
  (forall temp___324:int. forall temp___325:int.
  ((dynamic_invariant(temp___324, true, true, true, true) and
  dynamic_invariant(temp___325, true, true, true, true)) ->
  (to_rep((temp_____aggregate_def_322(temp___324,
  temp___325)[2])) = temp___325)))

axiom def_axiom20 :
  (forall temp___319:(int,integer) farray.
  forall temp___320:(int,integer) farray.
  ((temp_____aggregate_def_317(temp___319, temp___320)[1]) = temp___319))

axiom def_axiom21 :
  (forall temp___319:(int,integer) farray.
  forall temp___320:(int,integer) farray.
  ((temp_____aggregate_def_317(temp___319, temp___320)[2]) = temp___320))

axiom def_axiom22 :
  (forall temp___329:int. forall temp___330:int.
  ((dynamic_invariant(temp___329, true, true, true, true) and
  dynamic_invariant(temp___330, true, true, true, true)) ->
  ((temp_____aggregate_def_327(temp___329, temp___330)[1]) = rliteral)))

axiom def_axiom23 :
  (forall temp___329:int. forall temp___330:int.
  ((dynamic_invariant(temp___329, true, true, true, true) and
  dynamic_invariant(temp___330, true, true, true, true)) ->
  (to_rep((temp_____aggregate_def_327(temp___329,
  temp___330)[2])) = temp___330)))

axiom def_axiom24 :
  (forall temp___342:int. forall temp___343:int.
  ((dynamic_invariant(temp___342, true, true, true, true) and
  dynamic_invariant(temp___343, true, true, true, true)) ->
  (to_rep((temp_____aggregate_def_340(temp___342,
  temp___343)[1])) = temp___342)))

axiom def_axiom25 :
  (forall temp___342:int. forall temp___343:int.
  ((dynamic_invariant(temp___342, true, true, true, true) and
  dynamic_invariant(temp___343, true, true, true, true)) ->
  ((temp_____aggregate_def_340(temp___342, temp___343)[2]) = rliteral)))

axiom def_axiom26 :
  (forall temp___337:(int,integer) farray.
  forall temp___338:(int,integer) farray.
  ((temp_____aggregate_def_335(temp___337, temp___338)[1]) = temp___337))

axiom def_axiom27 :
  (forall temp___337:(int,integer) farray.
  forall temp___338:(int,integer) farray.
  ((temp_____aggregate_def_335(temp___337, temp___338)[2]) = temp___338))

axiom def_axiom28 :
  (forall temp___347:int. forall temp___348:int.
  ((dynamic_invariant(temp___347, true, true, true, true) and
  dynamic_invariant(temp___348, true, true, true, true)) ->
  (to_rep((temp_____aggregate_def_345(temp___347,
  temp___348)[1])) = temp___347)))

axiom def_axiom29 :
  (forall temp___347:int. forall temp___348:int.
  ((dynamic_invariant(temp___347, true, true, true, true) and
  dynamic_invariant(temp___348, true, true, true, true)) ->
  ((temp_____aggregate_def_345(temp___347, temp___348)[2]) = rliteral)))

 (* File "arr_aggregate.ads", line 43, characters 0-0 *)
goal defqtvc : true
