(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep1 : character -> int

logic of_rep1 : int -> character

axiom inversion_axiom1 :
  (forall x:character [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:character [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep1((a[temp___idx_91])) = to_rep1((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep1((a[temp___idx_91])) = to_rep1((b[((b__first - a__first) + temp___idx_91)]))))))))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : positive, positive -> bool

logic dummy3 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

function to_rep2(x: integer) : int = integerqtint(x)

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range(x) ->
  (to_rep2(of_rep2(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep2(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep2(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

predicate dynamic_invariant1(temp___expr_96: us_t, temp___is_init_92: bool,
  temp___skip_constant_93: bool, temp___do_toplevel_94: bool,
  temp___do_typ_inv_95: bool) = ((not (temp___skip_constant_93 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_96),
  last1(temp___expr_96)))

logic elem_width : int

logic attr__ATTRIBUTE_ADDRESS : int

logic name : us_t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic dummy5 : (int,character) farray

logic value__size1 : int

logic object__size1 : int

logic component__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq5 : (int,character) farray, (int,character) farray -> bool

type us_split_fields = { rec__fixed_stream__object__width : natural;
rec__fixed_stream__object__name : (int,character) farray; rec__ext__ :
us_private
}

function us_split_fields_rec__fixed_stream__object__width__projection(a: us_split_fields) : natural =
  (a).rec__fixed_stream__object__width

function us_split_fields_rec__fixed_stream__object__name__projection(a: us_split_fields) : (int,character) farray =
  (a).rec__fixed_stream__object__name

function us_split_fields_rec__ext____projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__projection(a: us_rep) : int = (a).attr__tag

function bool_eq6(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_fields1).rec__fixed_stream__object__width) = to_rep(((b).us_split_fields1).rec__fixed_stream__object__width)) and
  (bool_eq3(((a).us_split_fields1).rec__fixed_stream__object__name, 1, 20,
  ((b).us_split_fields1).rec__fixed_stream__object__name, 1,
  20) = true)) then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic fixed_stream__object__width__first__bit : int

logic fixed_stream__object__width__last__bit : int

logic fixed_stream__object__width__position : int

axiom fixed_stream__object__width__first__bit_axiom :
  (0 <= fixed_stream__object__width__first__bit)

axiom fixed_stream__object__width__last__bit_axiom :
  (fixed_stream__object__width__first__bit <  fixed_stream__object__width__last__bit)

axiom fixed_stream__object__width__position_axiom :
  (0 <= fixed_stream__object__width__position)

logic fixed_stream__object__name__first__bit : int

logic fixed_stream__object__name__last__bit : int

logic fixed_stream__object__name__position : int

axiom fixed_stream__object__name__first__bit_axiom :
  (0 <= fixed_stream__object__name__first__bit)

axiom fixed_stream__object__name__last__bit_axiom :
  (fixed_stream__object__name__first__bit <  fixed_stream__object__name__last__bit)

axiom fixed_stream__object__name__position_axiom :
  (0 <= fixed_stream__object__name__position)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy6 : us_rep

type object__ref = { object__content : us_rep
}

function object__ref_object__content__projection(a: object__ref) : us_rep =
  (a).object__content

logic elements : us_rep -> int

logic elements__function_guard : int, us_rep -> prop

logic elements1 : int, us_rep -> int

logic elements__function_guard1 : int, int, us_rep -> prop

logic temp_____aggregate_def_168 : int -> (int,character) farray

predicate default_initial_assumption(temp___expr_166: us_rep,
  temp___skip_top_level_167: bool) =
  (((temp___expr_166).attr__tag = us_tag) and
  ((to_rep(((temp___expr_166).us_split_fields1).rec__fixed_stream__object__width) = 0) and
  (((temp___expr_166).us_split_fields1).rec__fixed_stream__object__name = temp_____aggregate_def_168(0))))

axiom elements__post_axiom :
  (forall this:us_rep [elements(this)]. (let result = elements(this) : int in
  (elements__function_guard(result, this) -> dynamic_invariant(result, true,
  false, true, true))))

axiom elements__post__dispatch_axiom :
  (forall attr__tag1:int.
  (forall this:us_rep [elements1(attr__tag1, this)]. (let result =
  elements1(attr__tag1, this) : int in (elements__function_guard1(result,
  attr__tag1, this) -> dynamic_invariant(result, true, false, true, true)))))

axiom fixed_stream__object__compat_axiom :
  (forall this:us_rep [elements1(us_tag, this)].
  (elements__function_guard1(elements1(us_tag, this), us_tag, this) ->
  (forall this1:us_rep. elements__function_guard(elements(this1), this1))))

axiom fixed_stream__object__compat_axiom1 :
  (forall this:us_rep [elements1(us_tag, this)].
  (elements__function_guard1(elements1(us_tag, this), us_tag, this) ->
  (elements(this) = elements1(us_tag, this))))

axiom elements__def_axiom :
  (forall this:us_rep [elements(this)].
  (elements(this) = to_rep(((this).us_split_fields1).rec__fixed_stream__object__width)))

logic this__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type t4s

logic t4sqtint : t4s -> int

axiom t4sqtaxiom : (forall i:t4s. (1 <= t4sqtint(i)))

axiom t4sqtaxiom1 : (forall i:t4s. (t4sqtint(i) <= 20))

predicate in_range4(x: int) = ((1 <= x) and (x <= 20))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq7 : t4s, t4s -> bool

logic dummy7 : t4s

type t4s__ref = { t4s__content : t4s
}

function t4s__ref_t4s__content__projection(a: t4s__ref) : t4s =
  (a).t4s__content

predicate dynamic_invariant2(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_46))

predicate dynamic_invariant3(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range2(temp___expr_74))

predicate dynamic_invariant4(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

axiom def_axiom :
  (forall temp___170:int. (dynamic_invariant3(temp___170, true, true, true,
  true) ->
  (forall temp___171:int.
  (to_rep1((temp_____aggregate_def_168(temp___170)[temp___171])) = temp___170))))

 (* File "fixed_stream.ads", line 13, characters 0-0 *)
goal defqtvc :
  (forall this__split_fields:us_split_fields. (dynamic_invariant(elem_width,
  true, false, true, true) -> (dynamic_invariant1(name, true, false, true,
  true) -> (default_initial_assumption({ us_split_fields1 =
  this__split_fields; attr__tag = this__attr__tag }, false) ->
  (forall o:natural. ((to_rep(o) = elem_width) ->
  (forall this__split_fields1:us_split_fields. ((this__split_fields1 = {
  rec__fixed_stream__object__width = o; rec__fixed_stream__object__name =
  (this__split_fields).rec__fixed_stream__object__name; rec__ext__ =
  (this__split_fields).rec__ext__ }) -> (let o1 = name : us_t in
  (forall o2:integer. ((to_rep2(o2) = 20) ->
  (forall o3:integer. ((to_rep2(o3) = 1) ->
  (forall fixed_stream__trim_string__change:(int,character) farray.
  ((forall i:int. (((to_rep2(o3) <= i) and (i <= to_rep2(o2))) ->
   (((((first1(o1) <  0) or
   ((i - to_rep2(o3)) <= (2147483647 - first1(o1)))) and
   (((i - to_rep2(o3)) + first1(o1)) <= last1(o1))) and
   (to_rep1((fixed_stream__trim_string__change[i])) = to_rep1((to_array(o1)[((i - to_rep2(o3)) + first1(o1))])))) or
   (to_rep1((fixed_stream__trim_string__change[i])) = 0)))) ->
  (let temp___279 = of_array(fixed_stream__trim_string__change, 1, 20)
  : us_t in
  (forall this__split_fields2:us_split_fields. ((this__split_fields2 = {
  rec__fixed_stream__object__width =
  (this__split_fields1).rec__fixed_stream__object__width;
  rec__fixed_stream__object__name = slide(to_array(temp___279),
  first1(temp___279), 1); rec__ext__ = (this__split_fields1).rec__ext__ }) ->
  (forall fixed_stream__create__result:us_rep.
  ((fixed_stream__create__result = { us_split_fields1 = this__split_fields2;
  attr__tag = this__attr__tag }) ->
  ((forall fixed_stream__create__result1:us_rep.
   elements__function_guard(elements(fixed_stream__create__result1),
   fixed_stream__create__result1)) ->
  (elements(fixed_stream__create__result) = elem_width))))))))))))))))))))))
