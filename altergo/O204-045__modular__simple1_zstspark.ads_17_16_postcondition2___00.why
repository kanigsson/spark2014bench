(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. (0 <= tqtint(i)))

axiom tqtaxiom1 : (forall i:t. (tqtint(i) <= 4294967295))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (32 <= n)) -> (nth(x,
  n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_and(v1, v2), n) = andb(nth(v1, n), nth(v2, n)))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_or(v1, v2), n) = orb(nth(v1, n), nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  32)) -> (nth(bw_not(v),
  n) = notb(nth(v, n)))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  32) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((32 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> (((n + s) <  32) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> ((32 <= (n + s)) -> (nth(asr(b, s), n) = nth(b,
  (32 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  32))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 32))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 32))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

function to_int(x: t) : int =
  (if is_signed_positive(x) then tqtint(x) else (-(4294967296 - tqtint(x))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 4294967295))

axiom to_uint_bounds : (forall v:t. (0 <= tqtint(v)))

axiom to_uint_bounds1 : (forall v:t. (tqtint(v) <  4294967296))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 32)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 4294967295)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) -> sge(x, zeros)))

axiom positive_is_ge_zeros1 :
  (forall x:t. (sge(x, zeros) -> is_signed_positive(x)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  4294967296) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  4294967296)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg :
  (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 4294967296)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  4294967296) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 4294967296)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  4294967296)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) -> eq_sub_bv(a, b, i, n)))

axiom eq_sub_equiv1 :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub_bv(a, b, i, n) ->
  eq_sub(a, b, tqtint(i), tqtint(n))))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 32)]. (eq_sub(x, y, 0, 32) ->
  (x = y)))

type t__ref = { t__content : t
}

function bool_eq(x: t, y: t) : bool = (if (x = y) then true else false)

function bool_ne(x: t, y: t) : bool = (if (not (x = y)) then true else false)

function bool_lt(x: t, y: t) : bool = (if ult(x, y) then true else false)

function bool_le(x: t, y: t) : bool = (if ule(x, y) then true else false)

function bool_gt(x: t, y: t) : bool = (if ugt(x, y) then true else false)

function bool_ge(x: t, y: t) : bool = (if uge(x, y) then true else false)

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

function bv_min(x: t, y: t) : t = (if ule(x, y) then x else y)

function bv_max(x: t, y: t) : t = (if ule(x, y) then y else x)

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type t1

logic tqtint1 : t1 -> int

axiom tqtaxiom2 : (forall i:t1. (0 <= tqtint1(i)))

axiom tqtaxiom3 : (forall i:t1. (tqtint1(i) <= 18446744073709551615))

logic nth1 : t1, int -> bool

axiom nth_out_of_bound1 :
  (forall x:t1. forall n:int. (((n <  0) or (64 <= n)) -> (nth1(x,
  n) = false)))

logic zeros1 : t1

axiom Nth_zeros1 : (forall n:int. (nth1(zeros1, n) = false))

logic one1 : t1

logic ones1 : t1

axiom Nth_ones1 :
  (forall n:int. (((0 <= n) and (n <  64)) -> (nth1(ones1, n) = true)))

logic bw_and1 : t1, t1 -> t1

axiom Nth_bw_and1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth1(bw_and1(v1, v2), n) = andb(nth1(v1, n), nth1(v2, n)))))

logic bw_or1 : t1, t1 -> t1

axiom Nth_bw_or1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth1(bw_or1(v1, v2), n) = orb(nth1(v1, n), nth1(v2, n)))))

logic bw_xor1 : t1, t1 -> t1

axiom Nth_bw_xor1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth1(bw_xor1(v1, v2), n) = xorb(nth1(v1, n), nth1(v2, n)))))

logic bw_not1 : t1 -> t1

axiom Nth_bw_not1 :
  (forall v:t1. forall n:int. (((0 <= n) and (n <  64)) -> (nth1(bw_not1(v),
  n) = notb(nth1(v, n)))))

logic lsr1 : t1, int -> t1

axiom Lsr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  64) -> (nth1(lsr1(b, s), n) = nth1(b, (n + s)))))))

axiom Lsr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((64 <= (n + s)) -> (nth1(lsr1(b, s), n) = false)))))

axiom lsr_zeros1 : (forall x:t1. (lsr1(x, 0) = x))

logic asr1 : t1, int -> t1

axiom Asr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  64)) -> (((n + s) <  64) -> (nth1(asr1(b, s), n) = nth1(b,
  (n + s)))))))

axiom Asr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  64)) -> ((64 <= (n + s)) -> (nth1(asr1(b, s), n) = nth1(b,
  (64 - 1)))))))

axiom asr_zeros1 : (forall x:t1. (asr1(x, 0) = x))

logic lsl1 : t1, int -> t1

axiom Lsl_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  64))) -> (nth1(lsl1(b, s), n) = nth1(b, (n - s)))))

axiom Lsl_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth1(lsl1(b, s), n) = false)))

axiom lsl_zeros1 : (forall x:t1. (lsl1(x, 0) = x))

logic rotate_right1 : t1, int -> t1

axiom Nth_rotate_right1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  64)) ->
  ((0 <= n) -> (nth1(rotate_right1(v, n), i) = nth1(v, ((i + n) % 64))))))

logic rotate_left1 : t1, int -> t1

axiom Nth_rotate_left1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  64)) ->
  ((0 <= n) -> (nth1(rotate_left1(v, n), i) = nth1(v, ((i - n) % 64))))))

logic is_signed_positive1 : t1 -> prop

logic of_int1 : int -> t1

function to_int1(x: t1) : int =
  (if is_signed_positive1(x) then tqtint1(x) else (-(18446744073709551616 - tqtint1(x))))

axiom to_uint_extensionality1 :
  (forall v:t1. forall vqt:t1. ((tqtint1(v) = tqtint1(vqt)) -> (v = vqt)))

axiom to_int_extensionality1 :
  (forall v:t1. forall vqt:t1. ((to_int1(v) = to_int1(vqt)) -> (v = vqt)))

predicate uint_in_range1(i: int) = ((0 <= i) and (i <= 18446744073709551615))

axiom to_uint_bounds2 : (forall v:t1. (0 <= tqtint1(v)))

axiom to_uint_bounds3 : (forall v:t1. (tqtint1(v) <  18446744073709551616))

axiom to_uint_of_int1 :
  (forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (tqtint1(of_int1(i)) = i)))

logic size_bv1 : t1

axiom to_uint_size_bv1 : (tqtint1(size_bv1) = 64)

axiom to_uint_zeros1 : (tqtint1(zeros1) = 0)

axiom to_uint_one1 : (tqtint1(one1) = 1)

axiom to_uint_ones1 : (tqtint1(ones1) = 18446744073709551615)

predicate ult1(x: t1, y: t1) = (tqtint1(x) <  tqtint1(y))

predicate ule1(x: t1, y: t1) = (tqtint1(x) <= tqtint1(y))

predicate ugt1(x: t1, y: t1) = (tqtint1(y) <  tqtint1(x))

predicate uge1(x: t1, y: t1) = (tqtint1(y) <= tqtint1(x))

predicate slt1(v1: t1, v2: t1) = (to_int1(v1) <  to_int1(v2))

predicate sle1(v1: t1, v2: t1) = (to_int1(v1) <= to_int1(v2))

predicate sgt1(v1: t1, v2: t1) = (to_int1(v2) <  to_int1(v1))

predicate sge1(v1: t1, v2: t1) = (to_int1(v2) <= to_int1(v1))

axiom positive_is_ge_zeros2 :
  (forall x:t1. (is_signed_positive1(x) -> sge1(x, zeros1)))

axiom positive_is_ge_zeros3 :
  (forall x:t1. (sge1(x, zeros1) -> is_signed_positive1(x)))

logic add1 : t1, t1 -> t1

axiom to_uint_add_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) + tqtint1(v2)) <  18446744073709551616) -> (tqtint1(add1(v1,
  v2)) = (tqtint1(v1) + tqtint1(v2)))))

logic sub1 : t1, t1 -> t1

axiom to_uint_sub_bounded1 :
  (forall v1:t1. forall v2:t1. (((0 <= (tqtint1(v1) - tqtint1(v2))) and
  ((tqtint1(v1) - tqtint1(v2)) <  18446744073709551616)) -> (tqtint1(sub1(v1,
  v2)) = (tqtint1(v1) - tqtint1(v2)))))

logic neg1 : t1 -> t1

axiom to_uint_neg1 :
  (forall v:t1. (tqtint1(neg1(v)) = ((-tqtint1(v)) % 18446744073709551616)))

logic mul1 : t1, t1 -> t1

axiom to_uint_mul_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) * tqtint1(v2)) <  18446744073709551616) -> (tqtint1(mul1(v1,
  v2)) = (tqtint1(v1) * tqtint1(v2)))))

logic udiv1 : t1, t1 -> t1

axiom to_uint_udiv1 :
  (forall v1:t1. forall v2:t1. (tqtint1(udiv1(v1,
  v2)) = (tqtint1(v1) / tqtint1(v2))))

logic urem1 : t1, t1 -> t1

axiom to_uint_urem1 :
  (forall v1:t1. forall v2:t1. (tqtint1(urem1(v1,
  v2)) = (tqtint1(v1) % tqtint1(v2))))

logic lsr_bv1 : t1, t1 -> t1

axiom lsr_bv_is_lsr1 :
  (forall x:t1. forall n:t1. (lsr_bv1(x, n) = lsr1(x, tqtint1(n))))

axiom to_uint_lsr1 :
  (forall v:t1. forall n:t1. (tqtint1(lsr_bv1(v,
  n)) = (tqtint1(v) / pow2(tqtint1(n)))))

logic asr_bv1 : t1, t1 -> t1

axiom asr_bv_is_asr1 :
  (forall x:t1. forall n:t1. (asr_bv1(x, n) = asr1(x, tqtint1(n))))

logic lsl_bv1 : t1, t1 -> t1

axiom lsl_bv_is_lsl1 :
  (forall x:t1. forall n:t1. (lsl_bv1(x, n) = lsl1(x, tqtint1(n))))

axiom to_uint_lsl1 :
  (forall v:t1. forall n:t1. (tqtint1(lsl_bv1(v,
  n)) = ((tqtint1(v) * pow2(tqtint1(n))) % 18446744073709551616)))

logic rotate_right_bv1 : t1, t1 -> t1

logic rotate_left_bv1 : t1, t1 -> t1

axiom rotate_left_bv_is_rotate_left1 :
  (forall v:t1. forall n:t1. (rotate_left_bv1(v, n) = rotate_left1(v,
  tqtint1(n))))

axiom rotate_right_bv_is_rotate_right1 :
  (forall v:t1. forall n:t1. (rotate_right_bv1(v, n) = rotate_right1(v,
  tqtint1(n))))

logic nth_bv1 : t1, t1 -> bool

axiom Nth_bv_is_nth1 :
  (forall x:t1. forall i:t1. (nth1(x, tqtint1(i)) = nth_bv1(x, i)))

axiom Nth_bv_is_nth21 :
  (forall x:t1. forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (nth_bv1(x, of_int1(i)) = nth1(x, i))))

logic eq_sub_bv1 : t1, t1, t1, t1 -> prop

predicate eq_sub1(a: t1, b: t1, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth1(a, j) = nth1(b,
  j))))

axiom eq_sub_equiv2 :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub1(a, b,
  tqtint1(i), tqtint1(n)) -> eq_sub_bv1(a, b, i, n)))

axiom eq_sub_equiv3 :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub_bv1(a, b, i,
  n) -> eq_sub1(a, b, tqtint1(i), tqtint1(n))))

axiom Extensionality1 :
  (forall x:t1. forall y:t1 [eq_sub1(x, y, 0, 64)]. (eq_sub1(x, y, 0, 64) ->
  (x = y)))

type t__ref1 = { t__content1 : t1
}

function bool_eq1(x: t1, y: t1) : bool = (if (x = y) then true else false)

function bool_ne1(x: t1, y: t1) : bool =
  (if (not (x = y)) then true else false)

function bool_lt1(x: t1, y: t1) : bool = (if ult1(x, y) then true else false)

function bool_le1(x: t1, y: t1) : bool = (if ule1(x, y) then true else false)

function bool_gt1(x: t1, y: t1) : bool = (if ugt1(x, y) then true else false)

function bool_ge1(x: t1, y: t1) : bool = (if uge1(x, y) then true else false)

logic power1 : t1, int -> t1

axiom Power_02 : (forall x:t1. (power1(x, 0) = one1))

axiom Power_12 : (forall x:t1. (power1(x, 1) = x))

axiom Power_s2 :
  (forall x:t1. forall n:int. ((0 <= n) -> (power1(x, (n + 1)) = mul1(x,
  power1(x, n)))))

axiom Power_s_alt1 :
  (forall x:t1. forall n:int. ((0 <  n) -> (power1(x, n) = mul1(x, power1(x,
  (n - 1))))))

axiom Power_sum2 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = mul1(power1(x, n), power1(x, m))))))

axiom Power_mult1 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult21 :
  (forall x:t1. forall y:t1. forall n:int. ((0 <= n) -> (power1(mul1(x, y),
  n) = mul1(power1(x, n), power1(y, n)))))

function bv_min1(x: t1, y: t1) : t1 = (if ule1(x, y) then x else y)

function bv_max1(x: t1, y: t1) : t1 = (if ule1(x, y) then y else x)

axiom bv_min_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_min1(x, y)) = min(tqtint1(x),
  tqtint1(y))))

axiom bv_max_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_max1(x, y)) = max(tqtint1(x),
  tqtint1(y))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq2(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int2(b: bool) : int = (if (b = true) then 1 else 0)

function of_int2(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type t2

logic tqtint2 : t2 -> int

axiom tqtaxiom4 : (forall i:t2. (0 <= tqtint2(i)))

axiom tqtaxiom5 : (forall i:t2. (tqtint2(i) <= 255))

logic nth2 : t2, int -> bool

axiom nth_out_of_bound2 :
  (forall x:t2. forall n:int. (((n <  0) or (8 <= n)) -> (nth2(x,
  n) = false)))

logic zeros2 : t2

axiom Nth_zeros2 : (forall n:int. (nth2(zeros2, n) = false))

logic one2 : t2

logic ones2 : t2

axiom Nth_ones2 :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth2(ones2, n) = true)))

logic bw_and2 : t2, t2 -> t2

axiom Nth_bw_and2 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth2(bw_and2(v1, v2), n) = andb(nth2(v1, n), nth2(v2, n)))))

logic bw_or2 : t2, t2 -> t2

axiom Nth_bw_or2 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth2(bw_or2(v1, v2), n) = orb(nth2(v1, n), nth2(v2, n)))))

logic bw_xor2 : t2, t2 -> t2

axiom Nth_bw_xor2 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth2(bw_xor2(v1, v2), n) = xorb(nth2(v1, n), nth2(v2, n)))))

logic bw_not2 : t2 -> t2

axiom Nth_bw_not2 :
  (forall v:t2. forall n:int. (((0 <= n) and (n <  8)) -> (nth2(bw_not2(v),
  n) = notb(nth2(v, n)))))

logic lsr2 : t2, int -> t2

axiom Lsr_nth_low2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth2(lsr2(b, s), n) = nth2(b, (n + s)))))))

axiom Lsr_nth_high2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth2(lsr2(b, s), n) = false)))))

axiom lsr_zeros2 : (forall x:t2. (lsr2(x, 0) = x))

logic asr2 : t2, int -> t2

axiom Asr_nth_low2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth2(asr2(b, s), n) = nth2(b,
  (n + s)))))))

axiom Asr_nth_high2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth2(asr2(b, s), n) = nth2(b,
  (8 - 1)))))))

axiom asr_zeros2 : (forall x:t2. (asr2(x, 0) = x))

logic lsl2 : t2, int -> t2

axiom Lsl_nth_high2 :
  (forall b:t2. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth2(lsl2(b, s), n) = nth2(b, (n - s)))))

axiom Lsl_nth_low2 :
  (forall b:t2. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth2(lsl2(b, s), n) = false)))

axiom lsl_zeros2 : (forall x:t2. (lsl2(x, 0) = x))

logic rotate_right2 : t2, int -> t2

axiom Nth_rotate_right2 :
  (forall v:t2. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth2(rotate_right2(v, n), i) = nth2(v, ((i + n) % 8))))))

logic rotate_left2 : t2, int -> t2

axiom Nth_rotate_left2 :
  (forall v:t2. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth2(rotate_left2(v, n), i) = nth2(v, ((i - n) % 8))))))

logic is_signed_positive2 : t2 -> prop

logic of_int3 : int -> t2

function to_int3(x: t2) : int =
  (if is_signed_positive2(x) then tqtint2(x) else (-(256 - tqtint2(x))))

axiom to_uint_extensionality2 :
  (forall v:t2. forall vqt:t2. ((tqtint2(v) = tqtint2(vqt)) -> (v = vqt)))

axiom to_int_extensionality2 :
  (forall v:t2. forall vqt:t2. ((to_int3(v) = to_int3(vqt)) -> (v = vqt)))

predicate uint_in_range2(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds4 : (forall v:t2. (0 <= tqtint2(v)))

axiom to_uint_bounds5 : (forall v:t2. (tqtint2(v) <  256))

axiom to_uint_of_int2 :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint2(of_int3(i)) = i)))

logic size_bv2 : t2

axiom to_uint_size_bv2 : (tqtint2(size_bv2) = 8)

axiom to_uint_zeros2 : (tqtint2(zeros2) = 0)

axiom to_uint_one2 : (tqtint2(one2) = 1)

axiom to_uint_ones2 : (tqtint2(ones2) = 255)

predicate ult2(x: t2, y: t2) = (tqtint2(x) <  tqtint2(y))

predicate ule2(x: t2, y: t2) = (tqtint2(x) <= tqtint2(y))

predicate ugt2(x: t2, y: t2) = (tqtint2(y) <  tqtint2(x))

predicate uge2(x: t2, y: t2) = (tqtint2(y) <= tqtint2(x))

predicate slt2(v1: t2, v2: t2) = (to_int3(v1) <  to_int3(v2))

predicate sle2(v1: t2, v2: t2) = (to_int3(v1) <= to_int3(v2))

predicate sgt2(v1: t2, v2: t2) = (to_int3(v2) <  to_int3(v1))

predicate sge2(v1: t2, v2: t2) = (to_int3(v2) <= to_int3(v1))

axiom positive_is_ge_zeros4 :
  (forall x:t2. (is_signed_positive2(x) -> sge2(x, zeros2)))

axiom positive_is_ge_zeros5 :
  (forall x:t2. (sge2(x, zeros2) -> is_signed_positive2(x)))

logic add2 : t2, t2 -> t2

axiom to_uint_add_bounded2 :
  (forall v1:t2. forall v2:t2. (((tqtint2(v1) + tqtint2(v2)) <  256) ->
  (tqtint2(add2(v1, v2)) = (tqtint2(v1) + tqtint2(v2)))))

logic sub2 : t2, t2 -> t2

axiom to_uint_sub_bounded2 :
  (forall v1:t2. forall v2:t2. (((0 <= (tqtint2(v1) - tqtint2(v2))) and
  ((tqtint2(v1) - tqtint2(v2)) <  256)) -> (tqtint2(sub2(v1,
  v2)) = (tqtint2(v1) - tqtint2(v2)))))

logic neg2 : t2 -> t2

axiom to_uint_neg2 :
  (forall v:t2. (tqtint2(neg2(v)) = ((-tqtint2(v)) % 256)))

logic mul2 : t2, t2 -> t2

axiom to_uint_mul_bounded2 :
  (forall v1:t2. forall v2:t2. (((tqtint2(v1) * tqtint2(v2)) <  256) ->
  (tqtint2(mul2(v1, v2)) = (tqtint2(v1) * tqtint2(v2)))))

logic udiv2 : t2, t2 -> t2

axiom to_uint_udiv2 :
  (forall v1:t2. forall v2:t2. (tqtint2(udiv2(v1,
  v2)) = (tqtint2(v1) / tqtint2(v2))))

logic urem2 : t2, t2 -> t2

axiom to_uint_urem2 :
  (forall v1:t2. forall v2:t2. (tqtint2(urem2(v1,
  v2)) = (tqtint2(v1) % tqtint2(v2))))

logic lsr_bv2 : t2, t2 -> t2

axiom lsr_bv_is_lsr2 :
  (forall x:t2. forall n:t2. (lsr_bv2(x, n) = lsr2(x, tqtint2(n))))

axiom to_uint_lsr2 :
  (forall v:t2. forall n:t2. (tqtint2(lsr_bv2(v,
  n)) = (tqtint2(v) / pow2(tqtint2(n)))))

logic asr_bv2 : t2, t2 -> t2

axiom asr_bv_is_asr2 :
  (forall x:t2. forall n:t2. (asr_bv2(x, n) = asr2(x, tqtint2(n))))

logic lsl_bv2 : t2, t2 -> t2

axiom lsl_bv_is_lsl2 :
  (forall x:t2. forall n:t2. (lsl_bv2(x, n) = lsl2(x, tqtint2(n))))

axiom to_uint_lsl2 :
  (forall v:t2. forall n:t2. (tqtint2(lsl_bv2(v,
  n)) = ((tqtint2(v) * pow2(tqtint2(n))) % 256)))

logic rotate_right_bv2 : t2, t2 -> t2

logic rotate_left_bv2 : t2, t2 -> t2

axiom rotate_left_bv_is_rotate_left2 :
  (forall v:t2. forall n:t2. (rotate_left_bv2(v, n) = rotate_left2(v,
  tqtint2(n))))

axiom rotate_right_bv_is_rotate_right2 :
  (forall v:t2. forall n:t2. (rotate_right_bv2(v, n) = rotate_right2(v,
  tqtint2(n))))

logic nth_bv2 : t2, t2 -> bool

axiom Nth_bv_is_nth3 :
  (forall x:t2. forall i:t2. (nth2(x, tqtint2(i)) = nth_bv2(x, i)))

axiom Nth_bv_is_nth22 :
  (forall x:t2. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv2(x,
  of_int3(i)) = nth2(x, i))))

logic eq_sub_bv2 : t2, t2, t2, t2 -> prop

predicate eq_sub2(a: t2, b: t2, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth2(a, j) = nth2(b,
  j))))

axiom eq_sub_equiv4 :
  (forall a:t2. forall b:t2. forall i:t2. forall n:t2. (eq_sub2(a, b,
  tqtint2(i), tqtint2(n)) -> eq_sub_bv2(a, b, i, n)))

axiom eq_sub_equiv5 :
  (forall a:t2. forall b:t2. forall i:t2. forall n:t2. (eq_sub_bv2(a, b, i,
  n) -> eq_sub2(a, b, tqtint2(i), tqtint2(n))))

axiom Extensionality2 :
  (forall x:t2. forall y:t2 [eq_sub2(x, y, 0, 8)]. (eq_sub2(x, y, 0, 8) ->
  (x = y)))

type t__ref2 = { t__content2 : t2
}

function bool_eq3(x: t2, y: t2) : bool = (if (x = y) then true else false)

function bool_ne2(x: t2, y: t2) : bool =
  (if (not (x = y)) then true else false)

function bool_lt2(x: t2, y: t2) : bool = (if ult2(x, y) then true else false)

function bool_le2(x: t2, y: t2) : bool = (if ule2(x, y) then true else false)

function bool_gt2(x: t2, y: t2) : bool = (if ugt2(x, y) then true else false)

function bool_ge2(x: t2, y: t2) : bool = (if uge2(x, y) then true else false)

logic power2 : t2, int -> t2

axiom Power_03 : (forall x:t2. (power2(x, 0) = one2))

axiom Power_13 : (forall x:t2. (power2(x, 1) = x))

axiom Power_s3 :
  (forall x:t2. forall n:int. ((0 <= n) -> (power2(x, (n + 1)) = mul2(x,
  power2(x, n)))))

axiom Power_s_alt2 :
  (forall x:t2. forall n:int. ((0 <  n) -> (power2(x, n) = mul2(x, power2(x,
  (n - 1))))))

axiom Power_sum3 :
  (forall x:t2. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power2(x, (n + m)) = mul2(power2(x, n), power2(x, m))))))

axiom Power_mult3 :
  (forall x:t2. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power2(x, (n * m)) = power2(power2(x, n), m)))))

axiom Power_mult22 :
  (forall x:t2. forall y:t2. forall n:int. ((0 <= n) -> (power2(mul2(x, y),
  n) = mul2(power2(x, n), power2(y, n)))))

function bv_min2(x: t2, y: t2) : t2 = (if ule2(x, y) then x else y)

function bv_max2(x: t2, y: t2) : t2 = (if ule2(x, y) then y else x)

axiom bv_min_to_uint2 :
  (forall x:t2. forall y:t2. (tqtint2(bv_min2(x, y)) = min(tqtint2(x),
  tqtint2(y))))

axiom bv_max_to_uint2 :
  (forall x:t2. forall y:t2. (tqtint2(bv_max2(x, y)) = max(tqtint2(x),
  tqtint2(y))))

type unsigned8

logic attr__ATTRIBUTE_MODULUS : t2

function bool_eq4(x: t2, y: t2) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : t2 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> t2

logic user_eq : unsigned8, unsigned8 -> bool

logic dummy : unsigned8

type unsigned8__ref = { unsigned8__content : unsigned8
}

function unsigned8__ref_unsigned8__content__projection(a: unsigned8__ref) : unsigned8 =
  (a).unsigned8__content

logic to_rep : unsigned8 -> t2

logic of_rep : t2 -> unsigned8

axiom inversion_axiom :
  (forall x:unsigned8 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom coerce_axiom :
  (forall x:t2 [to_rep(of_rep(x))]. (to_rep(of_rep(x)) = x))

function to_int4(x: unsigned8) : int = tqtint2(to_rep(x))

axiom range_int_axiom :
  (forall x:unsigned8 [to_int4(x)]. uint_in_range2(to_int4(x)))

type map__ref = { map__content : (t1,unsigned8) farray
}

logic slide : (t1,unsigned8) farray, t1, t1 -> (t1,unsigned8) farray

axiom slide_eq :
  (forall a:(t1,unsigned8) farray.
  (forall first:t1 [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(t1,unsigned8) farray.
  (forall old_first:t1.
  (forall new_first:t1.
  (forall i:t1 [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[sub1(i, sub1(new_first, old_first))]))))))

function bool_eq5(a: (t1,unsigned8) farray, a__first: t1, a__last: t1,
  b: (t1,unsigned8) farray, b__first: t1, b__last: t1) : bool =
  (if ((if ule1(a__first, a__last) then (ule1(b__first, b__last) and
  (sub1(a__last, a__first) = sub1(b__last, b__first))) else ugt1(b__first,
  b__last)) and
  (forall temp___idx_154:t1. ((ule1(a__first, temp___idx_154) and
  ule1(temp___idx_154, a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[add1(sub1(b__first, a__first),
  temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(t1,unsigned8) farray. forall b:(t1,unsigned8) farray.
  (forall a__first:t1. forall a__last:t1. forall b__first:t1.
  forall b__last:t1. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> (ule1(a__first, a__last) -> ule1(b__first, b__last)))))

axiom bool_eq_rev1 :
  (forall a:(t1,unsigned8) farray. forall b:(t1,unsigned8) farray.
  (forall a__first:t1. forall a__last:t1. forall b__first:t1.
  forall b__last:t1. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> (ule1(a__first, a__last) -> (sub1(a__last,
  a__first) = sub1(b__last, b__first))))))

axiom bool_eq_rev2 :
  (forall a:(t1,unsigned8) farray. forall b:(t1,unsigned8) farray.
  (forall a__first:t1. forall a__last:t1. forall b__first:t1.
  forall b__last:t1. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not ule1(a__first, a__last)) -> ugt1(b__first,
  b__last)))))

axiom bool_eq_rev3 :
  (forall a:(t1,unsigned8) farray. forall b:(t1,unsigned8) farray.
  (forall a__first:t1. forall a__last:t1. forall b__first:t1.
  forall b__last:t1. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:t1. ((ule1(a__first, temp___idx_154) and
  ule1(temp___idx_154, a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[add1(sub1(b__first, a__first),
  temp___idx_154)]))))))))

logic attr__ATTRIBUTE_ADDRESS3 : int

logic toBig : t2 -> t1

logic toSmall : t1 -> t2

logic rliteral : t1

axiom rliteral_axiom : (tqtint1(rliteral) = 255)

axiom toSmall_to_uint :
  (forall x:t1. (ule1(x, rliteral) -> (tqtint1(x) = tqtint2(toSmall(x)))))

axiom toBig_to_uint : (forall x:t2. (tqtint2(x) = tqtint1(toBig(x))))

logic attr__ATTRIBUTE_ADDRESS4 : int

logic toBig1 : t -> t1

logic toSmall1 : t1 -> t

logic rliteral1 : t1

axiom rliteral_axiom1 : (tqtint1(rliteral1) = 4294967295)

axiom toSmall_to_uint1 :
  (forall x:t1. (ule1(x, rliteral1) -> (tqtint1(x) = tqtint(toSmall1(x)))))

axiom toBig_to_uint1 : (forall x:t. (tqtint(x) = tqtint1(toBig1(x))))

logic edi : t1 -> t

logic edi__function_guard : t, t1 -> prop

type unsigned64

logic attr__ATTRIBUTE_MODULUS1 : t1

function bool_eq6(x: t1, y: t1) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> t1

logic user_eq1 : unsigned64, unsigned64 -> bool

logic dummy1 : unsigned64

type unsigned64__ref = { unsigned64__content : unsigned64
}

function unsigned64__ref_unsigned64__content__projection(a: unsigned64__ref) : unsigned64 =
  (a).unsigned64__content

logic rliteral2 : t1

axiom rliteral_axiom2 : (tqtint1(rliteral2) = 0)

logic rliteral3 : t1

axiom rliteral_axiom3 : (tqtint1(rliteral3) = 18446744073709551615)

predicate dynamic_invariant(temp___expr_172: t1, temp___is_init_168: bool,
  temp___skip_constant_169: bool, temp___do_toplevel_170: bool,
  temp___do_typ_inv_171: bool) = true

type unsigned32

logic attr__ATTRIBUTE_MODULUS2 : t

function bool_eq7(x: t, y: t) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> t

logic user_eq2 : unsigned32, unsigned32 -> bool

logic dummy2 : unsigned32

type unsigned32__ref = { unsigned32__content : unsigned32
}

function unsigned32__ref_unsigned32__content__projection(a: unsigned32__ref) : unsigned32 =
  (a).unsigned32__content

logic rliteral4 : t

axiom rliteral_axiom4 : (tqtint(rliteral4) = 0)

logic rliteral5 : t

axiom rliteral_axiom5 : (tqtint(rliteral5) = 4294967295)

predicate dynamic_invariant1(temp___expr_193: t, temp___is_init_189: bool,
  temp___skip_constant_190: bool, temp___do_toplevel_191: bool,
  temp___do_typ_inv_192: bool) = true

logic rliteral6 : t1

axiom rliteral_axiom6 : (tqtint1(rliteral6) = 4294967295)

axiom edi__post_axiom :
  (forall x86__rdi:t1 [edi(x86__rdi)]. (dynamic_invariant(x86__rdi, true,
  true, true, true) -> (let result = edi(x86__rdi) : t in
  (edi__function_guard(result, x86__rdi) ->
  (result = toSmall1(bw_and1(x86__rdi, rliteral6)))))))

axiom edi__post_axiom1 :
  (forall x86__rdi:t1 [edi(x86__rdi)]. (dynamic_invariant(x86__rdi, true,
  true, true, true) -> (let result = edi(x86__rdi) : t in
  (edi__function_guard(result, x86__rdi) -> dynamic_invariant1(result, true,
  false, true, true)))))

logic toBig2 : t2 -> t

logic toSmall2 : t -> t2

logic rliteral7 : t

axiom rliteral_axiom7 : (tqtint(rliteral7) = 255)

axiom toSmall_to_uint2 :
  (forall x:t. (ule(x, rliteral7) -> (tqtint(x) = tqtint2(toSmall2(x)))))

axiom toBig_to_uint2 : (forall x:t2. (tqtint2(x) = tqtint(toBig2(x))))

logic attr__ATTRIBUTE_ADDRESS5 : int

type t3

logic tqtint3 : t3 -> int

axiom tqtaxiom6 : (forall i:t3. (0 <= tqtint3(i)))

axiom tqtaxiom7 : (forall i:t3. (tqtint3(i) <= 65535))

logic nth3 : t3, int -> bool

axiom nth_out_of_bound3 :
  (forall x:t3. forall n:int. (((n <  0) or (16 <= n)) -> (nth3(x,
  n) = false)))

logic zeros3 : t3

axiom Nth_zeros3 : (forall n:int. (nth3(zeros3, n) = false))

logic one3 : t3

logic ones3 : t3

axiom Nth_ones3 :
  (forall n:int. (((0 <= n) and (n <  16)) -> (nth3(ones3, n) = true)))

logic bw_and3 : t3, t3 -> t3

axiom Nth_bw_and3 :
  (forall v1:t3. forall v2:t3. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth3(bw_and3(v1, v2), n) = andb(nth3(v1, n), nth3(v2, n)))))

logic bw_or3 : t3, t3 -> t3

axiom Nth_bw_or3 :
  (forall v1:t3. forall v2:t3. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth3(bw_or3(v1, v2), n) = orb(nth3(v1, n), nth3(v2, n)))))

logic bw_xor3 : t3, t3 -> t3

axiom Nth_bw_xor3 :
  (forall v1:t3. forall v2:t3. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth3(bw_xor3(v1, v2), n) = xorb(nth3(v1, n), nth3(v2, n)))))

logic bw_not3 : t3 -> t3

axiom Nth_bw_not3 :
  (forall v:t3. forall n:int. (((0 <= n) and (n <  16)) -> (nth3(bw_not3(v),
  n) = notb(nth3(v, n)))))

logic lsr3 : t3, int -> t3

axiom Lsr_nth_low3 :
  (forall b:t3. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  16) -> (nth3(lsr3(b, s), n) = nth3(b, (n + s)))))))

axiom Lsr_nth_high3 :
  (forall b:t3. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((16 <= (n + s)) -> (nth3(lsr3(b, s), n) = false)))))

axiom lsr_zeros3 : (forall x:t3. (lsr3(x, 0) = x))

logic asr3 : t3, int -> t3

axiom Asr_nth_low3 :
  (forall b:t3. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> (((n + s) <  16) -> (nth3(asr3(b, s), n) = nth3(b,
  (n + s)))))))

axiom Asr_nth_high3 :
  (forall b:t3. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> ((16 <= (n + s)) -> (nth3(asr3(b, s), n) = nth3(b,
  (16 - 1)))))))

axiom asr_zeros3 : (forall x:t3. (asr3(x, 0) = x))

logic lsl3 : t3, int -> t3

axiom Lsl_nth_high3 :
  (forall b:t3. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  16))) -> (nth3(lsl3(b, s), n) = nth3(b, (n - s)))))

axiom Lsl_nth_low3 :
  (forall b:t3. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth3(lsl3(b, s), n) = false)))

axiom lsl_zeros3 : (forall x:t3. (lsl3(x, 0) = x))

logic rotate_right3 : t3, int -> t3

axiom Nth_rotate_right3 :
  (forall v:t3. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth3(rotate_right3(v, n), i) = nth3(v, ((i + n) % 16))))))

logic rotate_left3 : t3, int -> t3

axiom Nth_rotate_left3 :
  (forall v:t3. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth3(rotate_left3(v, n), i) = nth3(v, ((i - n) % 16))))))

logic is_signed_positive3 : t3 -> prop

logic of_int4 : int -> t3

function to_int5(x: t3) : int =
  (if is_signed_positive3(x) then tqtint3(x) else (-(65536 - tqtint3(x))))

axiom to_uint_extensionality3 :
  (forall v:t3. forall vqt:t3. ((tqtint3(v) = tqtint3(vqt)) -> (v = vqt)))

axiom to_int_extensionality3 :
  (forall v:t3. forall vqt:t3. ((to_int5(v) = to_int5(vqt)) -> (v = vqt)))

predicate uint_in_range3(i: int) = ((0 <= i) and (i <= 65535))

axiom to_uint_bounds6 : (forall v:t3. (0 <= tqtint3(v)))

axiom to_uint_bounds7 : (forall v:t3. (tqtint3(v) <  65536))

axiom to_uint_of_int3 :
  (forall i:int. (((0 <= i) and (i <  65536)) -> (tqtint3(of_int4(i)) = i)))

logic size_bv3 : t3

axiom to_uint_size_bv3 : (tqtint3(size_bv3) = 16)

axiom to_uint_zeros3 : (tqtint3(zeros3) = 0)

axiom to_uint_one3 : (tqtint3(one3) = 1)

axiom to_uint_ones3 : (tqtint3(ones3) = 65535)

predicate ult3(x: t3, y: t3) = (tqtint3(x) <  tqtint3(y))

predicate ule3(x: t3, y: t3) = (tqtint3(x) <= tqtint3(y))

predicate ugt3(x: t3, y: t3) = (tqtint3(y) <  tqtint3(x))

predicate uge3(x: t3, y: t3) = (tqtint3(y) <= tqtint3(x))

predicate slt3(v1: t3, v2: t3) = (to_int5(v1) <  to_int5(v2))

predicate sle3(v1: t3, v2: t3) = (to_int5(v1) <= to_int5(v2))

predicate sgt3(v1: t3, v2: t3) = (to_int5(v2) <  to_int5(v1))

predicate sge3(v1: t3, v2: t3) = (to_int5(v2) <= to_int5(v1))

axiom positive_is_ge_zeros6 :
  (forall x:t3. (is_signed_positive3(x) -> sge3(x, zeros3)))

axiom positive_is_ge_zeros7 :
  (forall x:t3. (sge3(x, zeros3) -> is_signed_positive3(x)))

logic add3 : t3, t3 -> t3

axiom to_uint_add_bounded3 :
  (forall v1:t3. forall v2:t3. (((tqtint3(v1) + tqtint3(v2)) <  65536) ->
  (tqtint3(add3(v1, v2)) = (tqtint3(v1) + tqtint3(v2)))))

logic sub3 : t3, t3 -> t3

axiom to_uint_sub_bounded3 :
  (forall v1:t3. forall v2:t3. (((0 <= (tqtint3(v1) - tqtint3(v2))) and
  ((tqtint3(v1) - tqtint3(v2)) <  65536)) -> (tqtint3(sub3(v1,
  v2)) = (tqtint3(v1) - tqtint3(v2)))))

logic neg3 : t3 -> t3

axiom to_uint_neg3 :
  (forall v:t3. (tqtint3(neg3(v)) = ((-tqtint3(v)) % 65536)))

logic mul3 : t3, t3 -> t3

axiom to_uint_mul_bounded3 :
  (forall v1:t3. forall v2:t3. (((tqtint3(v1) * tqtint3(v2)) <  65536) ->
  (tqtint3(mul3(v1, v2)) = (tqtint3(v1) * tqtint3(v2)))))

logic udiv3 : t3, t3 -> t3

axiom to_uint_udiv3 :
  (forall v1:t3. forall v2:t3. (tqtint3(udiv3(v1,
  v2)) = (tqtint3(v1) / tqtint3(v2))))

logic urem3 : t3, t3 -> t3

axiom to_uint_urem3 :
  (forall v1:t3. forall v2:t3. (tqtint3(urem3(v1,
  v2)) = (tqtint3(v1) % tqtint3(v2))))

logic lsr_bv3 : t3, t3 -> t3

axiom lsr_bv_is_lsr3 :
  (forall x:t3. forall n:t3. (lsr_bv3(x, n) = lsr3(x, tqtint3(n))))

axiom to_uint_lsr3 :
  (forall v:t3. forall n:t3. (tqtint3(lsr_bv3(v,
  n)) = (tqtint3(v) / pow2(tqtint3(n)))))

logic asr_bv3 : t3, t3 -> t3

axiom asr_bv_is_asr3 :
  (forall x:t3. forall n:t3. (asr_bv3(x, n) = asr3(x, tqtint3(n))))

logic lsl_bv3 : t3, t3 -> t3

axiom lsl_bv_is_lsl3 :
  (forall x:t3. forall n:t3. (lsl_bv3(x, n) = lsl3(x, tqtint3(n))))

axiom to_uint_lsl3 :
  (forall v:t3. forall n:t3. (tqtint3(lsl_bv3(v,
  n)) = ((tqtint3(v) * pow2(tqtint3(n))) % 65536)))

logic rotate_right_bv3 : t3, t3 -> t3

logic rotate_left_bv3 : t3, t3 -> t3

axiom rotate_left_bv_is_rotate_left3 :
  (forall v:t3. forall n:t3. (rotate_left_bv3(v, n) = rotate_left3(v,
  tqtint3(n))))

axiom rotate_right_bv_is_rotate_right3 :
  (forall v:t3. forall n:t3. (rotate_right_bv3(v, n) = rotate_right3(v,
  tqtint3(n))))

logic nth_bv3 : t3, t3 -> bool

axiom Nth_bv_is_nth4 :
  (forall x:t3. forall i:t3. (nth3(x, tqtint3(i)) = nth_bv3(x, i)))

axiom Nth_bv_is_nth23 :
  (forall x:t3. forall i:int. (((0 <= i) and (i <  65536)) -> (nth_bv3(x,
  of_int4(i)) = nth3(x, i))))

logic eq_sub_bv3 : t3, t3, t3, t3 -> prop

predicate eq_sub3(a: t3, b: t3, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth3(a, j) = nth3(b,
  j))))

axiom eq_sub_equiv6 :
  (forall a:t3. forall b:t3. forall i:t3. forall n:t3. (eq_sub3(a, b,
  tqtint3(i), tqtint3(n)) -> eq_sub_bv3(a, b, i, n)))

axiom eq_sub_equiv7 :
  (forall a:t3. forall b:t3. forall i:t3. forall n:t3. (eq_sub_bv3(a, b, i,
  n) -> eq_sub3(a, b, tqtint3(i), tqtint3(n))))

axiom Extensionality3 :
  (forall x:t3. forall y:t3 [eq_sub3(x, y, 0, 16)]. (eq_sub3(x, y, 0, 16) ->
  (x = y)))

type t__ref3 = { t__content3 : t3
}

function bool_eq8(x: t3, y: t3) : bool = (if (x = y) then true else false)

function bool_ne3(x: t3, y: t3) : bool =
  (if (not (x = y)) then true else false)

function bool_lt3(x: t3, y: t3) : bool = (if ult3(x, y) then true else false)

function bool_le3(x: t3, y: t3) : bool = (if ule3(x, y) then true else false)

function bool_gt3(x: t3, y: t3) : bool = (if ugt3(x, y) then true else false)

function bool_ge3(x: t3, y: t3) : bool = (if uge3(x, y) then true else false)

logic power3 : t3, int -> t3

axiom Power_04 : (forall x:t3. (power3(x, 0) = one3))

axiom Power_14 : (forall x:t3. (power3(x, 1) = x))

axiom Power_s4 :
  (forall x:t3. forall n:int. ((0 <= n) -> (power3(x, (n + 1)) = mul3(x,
  power3(x, n)))))

axiom Power_s_alt3 :
  (forall x:t3. forall n:int. ((0 <  n) -> (power3(x, n) = mul3(x, power3(x,
  (n - 1))))))

axiom Power_sum4 :
  (forall x:t3. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power3(x, (n + m)) = mul3(power3(x, n), power3(x, m))))))

axiom Power_mult4 :
  (forall x:t3. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power3(x, (n * m)) = power3(power3(x, n), m)))))

axiom Power_mult23 :
  (forall x:t3. forall y:t3. forall n:int. ((0 <= n) -> (power3(mul3(x, y),
  n) = mul3(power3(x, n), power3(y, n)))))

function bv_min3(x: t3, y: t3) : t3 = (if ule3(x, y) then x else y)

function bv_max3(x: t3, y: t3) : t3 = (if ule3(x, y) then y else x)

axiom bv_min_to_uint3 :
  (forall x:t3. forall y:t3. (tqtint3(bv_min3(x, y)) = min(tqtint3(x),
  tqtint3(y))))

axiom bv_max_to_uint3 :
  (forall x:t3. forall y:t3. (tqtint3(bv_max3(x, y)) = max(tqtint3(x),
  tqtint3(y))))

logic toBig3 : t3 -> t

logic toSmall3 : t -> t3

logic rliteral8 : t

axiom rliteral_axiom8 : (tqtint(rliteral8) = 65535)

axiom toSmall_to_uint3 :
  (forall x:t. (ule(x, rliteral8) -> (tqtint(x) = tqtint3(toSmall3(x)))))

axiom toBig_to_uint3 : (forall x:t3. (tqtint3(x) = tqtint(toBig3(x))))

logic readmem16 : t1, (t1,unsigned8) farray -> t3

logic readmem16__function_guard : t3, t1, (t1,unsigned8) farray -> prop

logic readmem32 : t1, (t1,unsigned8) farray -> t

logic readmem32__function_guard : t, t1, (t1,unsigned8) farray -> prop

logic rliteral9 : t1

axiom rliteral_axiom9 : (tqtint1(rliteral9) = 2)

logic rliteral10 : t

axiom rliteral_axiom10 : (tqtint(rliteral10) = 65536)

axiom readmem32__post_axiom :
  (forall addr:t1. (dynamic_invariant(addr, true, true, true, true) ->
  (forall addr1:t1. forall x86__memory:(t1,unsigned8) farray.
  readmem16__function_guard(readmem16(addr1, x86__memory), addr1,
  x86__memory))))

axiom readmem32__post_axiom1 :
  (forall addr:t1. (dynamic_invariant(addr, true, true, true, true) ->
  (forall addr1:t1. forall x86__memory:(t1,unsigned8) farray.
  readmem16__function_guard(readmem16(add1(addr1, rliteral9), x86__memory),
  add1(addr1, rliteral9), x86__memory))))

axiom readmem32__post_axiom2 :
  (forall addr:t1.
  (forall x86__memory:(t1,unsigned8) farray [readmem32(addr, x86__memory)].
  (dynamic_invariant(addr, true, true, true, true) -> (let result =
  readmem32(addr, x86__memory) : t in (readmem32__function_guard(result,
  addr, x86__memory) -> (result = add(toBig3(readmem16(addr, x86__memory)),
  mul(toBig3(readmem16(add1(addr, rliteral9), x86__memory)),
  rliteral10))))))))

axiom readmem32__post_axiom3 :
  (forall addr:t1.
  (forall x86__memory:(t1,unsigned8) farray [readmem32(addr, x86__memory)].
  (dynamic_invariant(addr, true, true, true, true) -> (let result =
  readmem32(addr, x86__memory) : t in (readmem32__function_guard(result,
  addr, x86__memory) -> uge(result, rliteral4))))))

axiom readmem32__post_axiom4 :
  (forall addr:t1.
  (forall x86__memory:(t1,unsigned8) farray [readmem32(addr, x86__memory)].
  (dynamic_invariant(addr, true, true, true, true) -> (let result =
  readmem32(addr, x86__memory) : t in (readmem32__function_guard(result,
  addr, x86__memory) -> dynamic_invariant1(result, true, false, true,
  true))))))

logic attr__ATTRIBUTE_ADDRESS6 : int

logic eax : t1 -> t

logic eax__function_guard : t, t1 -> prop

axiom eax__post_axiom :
  (forall x86__rax:t1 [eax(x86__rax)]. (dynamic_invariant(x86__rax, true,
  true, true, true) -> (let result = eax(x86__rax) : t in
  (eax__function_guard(result, x86__rax) ->
  (result = toSmall1(bw_and1(x86__rax, rliteral6)))))))

axiom eax__post_axiom1 :
  (forall x86__rax:t1 [eax(x86__rax)]. (dynamic_invariant(x86__rax, true,
  true, true, true) -> (let result = eax(x86__rax) : t in
  (eax__function_guard(result, x86__rax) -> dynamic_invariant1(result, true,
  false, true, true)))))

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic edx : t1 -> t

logic edx__function_guard : t, t1 -> prop

axiom edx__post_axiom :
  (forall x86__rdx:t1 [edx(x86__rdx)]. (dynamic_invariant(x86__rdx, true,
  true, true, true) -> (let result = edx(x86__rdx) : t in
  (edx__function_guard(result, x86__rdx) ->
  (result = toSmall1(bw_and1(x86__rdx, rliteral6)))))))

axiom edx__post_axiom1 :
  (forall x86__rdx:t1 [edx(x86__rdx)]. (dynamic_invariant(x86__rdx, true,
  true, true, true) -> (let result = edx(x86__rdx) : t in
  (edx__function_guard(result, x86__rdx) -> dynamic_invariant1(result, true,
  false, true, true)))))

logic readmem64 : t1, (t1,unsigned8) farray -> t1

logic readmem64__function_guard : t1, t1, (t1,unsigned8) farray -> prop

logic rliteral11 : t1

axiom rliteral_axiom11 : (tqtint1(rliteral11) = 4)

logic rliteral12 : t1

axiom rliteral_axiom12 : (tqtint1(rliteral12) = 4294967296)

axiom readmem64__post_axiom :
  (forall addr:t1. (dynamic_invariant(addr, true, true, true, true) ->
  (forall addr1:t1. forall x86__memory:(t1,unsigned8) farray.
  readmem32__function_guard(readmem32(addr1, x86__memory), addr1,
  x86__memory))))

axiom readmem64__post_axiom1 :
  (forall addr:t1. (dynamic_invariant(addr, true, true, true, true) ->
  (forall addr1:t1. forall x86__memory:(t1,unsigned8) farray.
  readmem32__function_guard(readmem32(add1(addr1, rliteral11), x86__memory),
  add1(addr1, rliteral11), x86__memory))))

axiom readmem64__post_axiom2 :
  (forall addr:t1.
  (forall x86__memory:(t1,unsigned8) farray [readmem64(addr, x86__memory)].
  (dynamic_invariant(addr, true, true, true, true) -> (let result =
  readmem64(addr, x86__memory) : t1 in (readmem64__function_guard(result,
  addr, x86__memory) -> (result = add1(toBig1(readmem32(addr, x86__memory)),
  mul1(toBig1(readmem32(add1(addr, rliteral11), x86__memory)),
  rliteral12))))))))

axiom readmem64__post_axiom3 :
  (forall addr:t1.
  (forall x86__memory:(t1,unsigned8) farray [readmem64(addr, x86__memory)].
  (dynamic_invariant(addr, true, true, true, true) -> (let result =
  readmem64(addr, x86__memory) : t1 in (readmem64__function_guard(result,
  addr, x86__memory) -> uge1(result, rliteral2))))))

axiom readmem64__post_axiom4 :
  (forall addr:t1.
  (forall x86__memory:(t1,unsigned8) farray [readmem64(addr, x86__memory)].
  (dynamic_invariant(addr, true, true, true, true) -> (let result =
  readmem64(addr, x86__memory) : t1 in (readmem64__function_guard(result,
  addr, x86__memory) -> dynamic_invariant(result, true, false, true,
  true))))))

type unsigned641

logic attr__ATTRIBUTE_MODULUS3 : t1

function bool_eq9(x: t1, y: t1) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> t1

logic user_eq3 : unsigned641, unsigned641 -> bool

logic dummy3 : unsigned641

type unsigned64__ref1 = { unsigned64__content1 : unsigned641
}

function unsigned64__ref_unsigned64__content__2__projection(a: unsigned64__ref1) : unsigned641 =
  (a).unsigned64__content1

predicate dynamic_invariant2(temp___expr_179: t1, temp___is_init_175: bool,
  temp___skip_constant_176: bool, temp___do_toplevel_177: bool,
  temp___do_typ_inv_178: bool) = true

type unsigned16

logic attr__ATTRIBUTE_MODULUS4 : t3

function bool_eq10(x: t3, y: t3) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : t3 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> t3

logic user_eq4 : unsigned16, unsigned16 -> bool

logic dummy4 : unsigned16

type unsigned16__ref = { unsigned16__content : unsigned16
}

function unsigned16__ref_unsigned16__content__projection(a: unsigned16__ref) : unsigned16 =
  (a).unsigned16__content

logic rliteral13 : t3

axiom rliteral_axiom13 : (tqtint3(rliteral13) = 0)

logic rliteral14 : t3

axiom rliteral_axiom14 : (tqtint3(rliteral14) = 65535)

predicate dynamic_invariant3(temp___expr_246: t3, temp___is_init_242: bool,
  temp___skip_constant_243: bool, temp___do_toplevel_244: bool,
  temp___do_typ_inv_245: bool) = true

logic rliteral15 : t2

axiom rliteral_axiom15 : (tqtint2(rliteral15) = 0)

logic rliteral16 : t2

axiom rliteral_axiom16 : (tqtint2(rliteral16) = 255)

predicate dynamic_invariant4(temp___expr_216: t2, temp___is_init_212: bool,
  temp___skip_constant_213: bool, temp___do_toplevel_214: bool,
  temp___do_typ_inv_215: bool) = true

logic toBig4 : t2 -> t3

logic toSmall4 : t3 -> t2

logic rliteral17 : t3

axiom rliteral_axiom17 : (tqtint3(rliteral17) = 255)

axiom toSmall_to_uint4 :
  (forall x:t3. (ule3(x, rliteral17) -> (tqtint3(x) = tqtint2(toSmall4(x)))))

axiom toBig_to_uint4 : (forall x:t2. (tqtint2(x) = tqtint3(toBig4(x))))

logic rliteral18 : t1

axiom rliteral_axiom18 : (tqtint1(rliteral18) = 1)

logic rliteral19 : t3

axiom rliteral_axiom19 : (tqtint3(rliteral19) = 256)

axiom readmem16__post_axiom :
  (forall addr:t1.
  (forall x86__memory:(t1,unsigned8) farray [readmem16(addr, x86__memory)].
  (dynamic_invariant(addr, true, true, true, true) -> (let result =
  readmem16(addr, x86__memory) : t3 in (readmem16__function_guard(result,
  addr, x86__memory) -> (result = add3(toBig4(to_rep((x86__memory[addr]))),
  mul3(toBig4(to_rep((x86__memory[add1(addr, rliteral18)]))),
  rliteral19))))))))

axiom readmem16__post_axiom1 :
  (forall addr:t1.
  (forall x86__memory:(t1,unsigned8) farray [readmem16(addr, x86__memory)].
  (dynamic_invariant(addr, true, true, true, true) -> (let result =
  readmem16(addr, x86__memory) : t3 in (readmem16__function_guard(result,
  addr, x86__memory) -> uge3(result, rliteral13))))))

axiom readmem16__post_axiom2 :
  (forall addr:t1.
  (forall x86__memory:(t1,unsigned8) farray [readmem16(addr, x86__memory)].
  (dynamic_invariant(addr, true, true, true, true) -> (let result =
  readmem16(addr, x86__memory) : t3 in (readmem16__function_guard(result,
  addr, x86__memory) -> dynamic_invariant3(result, true, false, true,
  true))))))

logic rliteral20 : t1

axiom rliteral_axiom20 : (tqtint1(rliteral20) = 8)

logic rliteral21 : t1

axiom rliteral_axiom21 : (tqtint1(rliteral21) = 256)

logic rliteral22 : t1

axiom rliteral_axiom22 : (tqtint1(rliteral22) = 65536)

logic rliteral23 : t1

axiom rliteral_axiom23 : (tqtint1(rliteral23) = 3)

logic rliteral24 : t1

axiom rliteral_axiom24 : (tqtint1(rliteral24) = 16777216)

logic rliteral25 : t1

axiom rliteral_axiom25 : (tqtint1(rliteral25) = 5)

logic rliteral26 : t1

axiom rliteral_axiom26 : (tqtint1(rliteral26) = 1099511627776)

logic rliteral27 : t1

axiom rliteral_axiom27 : (tqtint1(rliteral27) = 6)

logic rliteral28 : t1

axiom rliteral_axiom28 : (tqtint1(rliteral28) = 281474976710656)

logic rliteral29 : t1

axiom rliteral_axiom29 : (tqtint1(rliteral29) = 7)

logic rliteral30 : t1

axiom rliteral_axiom30 : (tqtint1(rliteral30) = 72057594037927936)

logic rliteral31 : t1

axiom rliteral_axiom31 : (tqtint1(rliteral31) = 20)

logic rliteral32 : t

axiom rliteral_axiom32 : (tqtint(rliteral32) = 256)

logic rliteral33 : t

axiom rliteral_axiom33 : (tqtint(rliteral33) = 16777216)

logic rliteral34 : t1

axiom rliteral_axiom34 : (tqtint1(rliteral34) = 32)

logic rliteral35 : t1

axiom rliteral_axiom35 : (tqtint1(rliteral35) = 18446744069414584320)

logic rliteral36 : t1

axiom rliteral_axiom36 : (tqtint1(rliteral36) = 12)

logic rliteral37 : t

axiom rliteral_axiom37 : (tqtint(rliteral37) = 2)

logic rliteral38 : t

axiom rliteral_axiom38 : (tqtint(rliteral38) = 13)

logic rliteral39 : t

axiom rliteral_axiom39 : (tqtint(rliteral39) = 2147483647)

 (* File "simple1_zstspark.ads", line 12, characters 0-0 *)
goal defqtvc :
  (forall rsp:t1. forall rbp:t1. forall memory:(t1,unsigned8) farray.
  forall rdi:t1. forall rsi:t1. forall rax:t1. forall rdx:t1.
  (forall rsp1:t1. ((rsp1 = rsp) -> (dynamic_invariant(rax, true, false,
  true, true) -> (dynamic_invariant(rdx, true, false, true, true) ->
  (dynamic_invariant(rsp, true, false, true, true) -> (dynamic_invariant(rbp,
  true, false, true, true) -> (dynamic_invariant(rsi, true, false, true,
  true) -> (dynamic_invariant(rdi, true, false, true, true) ->
  (forall saversp:t1. ((saversp = rsp) -> (dynamic_invariant2(saversp, true,
  false, true, true) -> (let o = sub1(rsp, rliteral20) : t1 in
  (forall memory1:(t1,unsigned8) farray. ((memory1 = memory) ->
  (forall memory2:(t1,unsigned8) farray.
  (((add1(add1(add1(add1(add1(add1(add1(toBig(to_rep((memory2[o]))),
  mul1(toBig(to_rep((memory2[add1(o, rliteral18)]))), rliteral21)),
  mul1(toBig(to_rep((memory2[add1(o, rliteral9)]))), rliteral22)),
  mul1(toBig(to_rep((memory2[add1(o, rliteral23)]))), rliteral24)),
  mul1(toBig(to_rep((memory2[add1(o, rliteral11)]))), rliteral12)),
  mul1(toBig(to_rep((memory2[add1(o, rliteral25)]))), rliteral26)),
  mul1(toBig(to_rep((memory2[add1(o, rliteral27)]))), rliteral28)),
  mul1(toBig(to_rep((memory2[add1(o, rliteral29)]))), rliteral30)) = rbp) and
  (forall i:t1. ((ule1(rliteral2, i) and ule1(i, rliteral3)) ->
  (((((((((not (i = o)) and (not (i = add1(o, rliteral18)))) and
  (not (i = add1(o, rliteral9)))) and (not (i = add1(o, rliteral23)))) and
  (not (i = add1(o, rliteral11)))) and (not (i = add1(o, rliteral25)))) and
  (not (i = add1(o, rliteral27)))) and (not (i = add1(o, rliteral29)))) ->
  (to_rep((memory2[i])) = to_rep((memory1[i]))))))) ->
  (forall rsp2:t1. ((rsp2 = sub1(rsp, rliteral20)) -> ((rsp2 = sub1(saversp,
  rliteral20)) ->
  (forall rbp1:t1. ((rbp1 = rsp2) -> (let o1 = edi(rdi) : t in
  ((edi__function_guard(o1, rdi) and (dynamic_invariant1(o1, true, false,
  true, true) and (o1 = toSmall1(bw_and1(rdi, rliteral6))))) -> (let o2 =
  sub1(rbp1, rliteral31) : t1 in
  (forall memory3:(t1,unsigned8) farray. ((memory3 = memory2) ->
  (forall memory4:(t1,unsigned8) farray.
  (((add(add(add(toBig2(to_rep((memory4[o2]))),
  mul(toBig2(to_rep((memory4[add1(o2, rliteral18)]))), rliteral32)),
  mul(toBig2(to_rep((memory4[add1(o2, rliteral9)]))), rliteral10)),
  mul(toBig2(to_rep((memory4[add1(o2, rliteral23)]))), rliteral33)) = o1) and
  (forall i:t1. ((ule1(rliteral2, i) and ule1(i, rliteral3)) ->
  (((((not (i = o2)) and (not (i = add1(o2, rliteral18)))) and
  (not (i = add1(o2, rliteral9)))) and (not (i = add1(o2, rliteral23)))) ->
  (to_rep((memory4[i])) = to_rep((memory3[i]))))))) -> (let o3 = sub1(rbp1,
  rliteral34) : t1 in
  (forall memory5:(t1,unsigned8) farray. ((memory5 = memory4) ->
  (forall memory6:(t1,unsigned8) farray.
  (((add1(add1(add1(add1(add1(add1(add1(toBig(to_rep((memory6[o3]))),
  mul1(toBig(to_rep((memory6[add1(o3, rliteral18)]))), rliteral21)),
  mul1(toBig(to_rep((memory6[add1(o3, rliteral9)]))), rliteral22)),
  mul1(toBig(to_rep((memory6[add1(o3, rliteral23)]))), rliteral24)),
  mul1(toBig(to_rep((memory6[add1(o3, rliteral11)]))), rliteral12)),
  mul1(toBig(to_rep((memory6[add1(o3, rliteral25)]))), rliteral26)),
  mul1(toBig(to_rep((memory6[add1(o3, rliteral27)]))), rliteral28)),
  mul1(toBig(to_rep((memory6[add1(o3, rliteral29)]))),
  rliteral30)) = rsi) and
  (forall i:t1. ((ule1(rliteral2, i) and ule1(i, rliteral3)) ->
  (((((((((not (i = o3)) and (not (i = add1(o3, rliteral18)))) and
  (not (i = add1(o3, rliteral9)))) and (not (i = add1(o3, rliteral23)))) and
  (not (i = add1(o3, rliteral11)))) and (not (i = add1(o3, rliteral25)))) and
  (not (i = add1(o3, rliteral27)))) and (not (i = add1(o3, rliteral29)))) ->
  (to_rep((memory6[i])) = to_rep((memory5[i]))))))) -> (let o4 = sub1(rbp1,
  rliteral31) : t1 in (let o5 = readmem32(o4, memory6) : t in
  ((forall memory7:(t1,unsigned8) farray. forall o6:t1.
   readmem16__function_guard(readmem16(o6, memory7), o6, memory7)) ->
  ((forall memory7:(t1,unsigned8) farray. forall o6:t1.
   readmem16__function_guard(readmem16(add1(o6, rliteral9), memory7),
   add1(o6, rliteral9), memory7)) ->
  ((readmem32__function_guard(o5, o4, memory6) and (dynamic_invariant1(o5,
  true, false, true, true) and ((o5 = add(toBig3(readmem16(o4, memory6)),
  mul(toBig3(readmem16(add1(o4, rliteral9), memory6)), rliteral10))) and
  uge(o5, rliteral4)))) ->
  (forall rax1:t1. ((rax1 = rax) ->
  (forall rax2:t1. (((rax2 = bw_or1(bw_and1(rax1, rliteral35),
  toBig1(o5))) and dynamic_invariant(rax2, true, true, true, true)) ->
  (let o6 = eax(rax2) : t in ((eax__function_guard(o6, rax2) and
  (dynamic_invariant1(o6, true, false, true, true) and
  (o6 = toSmall1(bw_and1(rax2, rliteral6))))) -> (let o7 = sub1(rbp1,
  rliteral20) : t1 in
  (forall memory7:(t1,unsigned8) farray. ((memory7 = memory6) ->
  (forall memory8:(t1,unsigned8) farray.
  (((add(add(add(toBig2(to_rep((memory8[o7]))),
  mul(toBig2(to_rep((memory8[add1(o7, rliteral18)]))), rliteral32)),
  mul(toBig2(to_rep((memory8[add1(o7, rliteral9)]))), rliteral10)),
  mul(toBig2(to_rep((memory8[add1(o7, rliteral23)]))), rliteral33)) = o6) and
  (forall i:t1. ((ule1(rliteral2, i) and ule1(i, rliteral3)) ->
  (((((not (i = o7)) and (not (i = add1(o7, rliteral18)))) and
  (not (i = add1(o7, rliteral9)))) and (not (i = add1(o7, rliteral23)))) ->
  (to_rep((memory8[i])) = to_rep((memory7[i]))))))) -> (let o8 = sub1(rbp1,
  rliteral36) : t1 in
  (forall memory9:(t1,unsigned8) farray. ((memory9 = memory8) ->
  (forall memory10:(t1,unsigned8) farray.
  (((add(add(add(toBig2(to_rep((memory10[o8]))),
  mul(toBig2(to_rep((memory10[add1(o8, rliteral18)]))), rliteral32)),
  mul(toBig2(to_rep((memory10[add1(o8, rliteral9)]))), rliteral10)),
  mul(toBig2(to_rep((memory10[add1(o8, rliteral23)]))),
  rliteral33)) = rliteral37) and
  (forall i:t1. ((ule1(rliteral2, i) and ule1(i, rliteral3)) ->
  (((((not (i = o8)) and (not (i = add1(o8, rliteral18)))) and
  (not (i = add1(o8, rliteral9)))) and (not (i = add1(o8, rliteral23)))) ->
  (to_rep((memory10[i])) = to_rep((memory9[i]))))))) -> (let o9 = sub1(rbp1,
  rliteral11) : t1 in
  (forall memory11:(t1,unsigned8) farray. ((memory11 = memory10) ->
  (forall memory12:(t1,unsigned8) farray.
  (((add(add(add(toBig2(to_rep((memory12[o9]))),
  mul(toBig2(to_rep((memory12[add1(o9, rliteral18)]))), rliteral32)),
  mul(toBig2(to_rep((memory12[add1(o9, rliteral9)]))), rliteral10)),
  mul(toBig2(to_rep((memory12[add1(o9, rliteral23)]))),
  rliteral33)) = rliteral38) and
  (forall i:t1. ((ule1(rliteral2, i) and ule1(i, rliteral3)) ->
  (((((not (i = o9)) and (not (i = add1(o9, rliteral18)))) and
  (not (i = add1(o9, rliteral9)))) and (not (i = add1(o9, rliteral23)))) ->
  (to_rep((memory12[i])) = to_rep((memory11[i]))))))) -> (let o10 =
  sub1(rbp1, rliteral20) : t1 in (let o11 = readmem32(o10, memory12) : t in
  ((forall memory13:(t1,unsigned8) farray. forall o12:t1.
   readmem16__function_guard(readmem16(o12, memory13), o12, memory13)) ->
  ((forall memory13:(t1,unsigned8) farray. forall o12:t1.
   readmem16__function_guard(readmem16(add1(o12, rliteral9), memory13),
   add1(o12, rliteral9), memory13)) ->
  ((readmem32__function_guard(o11, o10, memory12) and
  (dynamic_invariant1(o11, true, false, true, true) and
  ((o11 = add(toBig3(readmem16(o10, memory12)),
  mul(toBig3(readmem16(add1(o10, rliteral9), memory12)), rliteral10))) and
  uge(o11, rliteral4)))) ->
  (forall rax3:t1. ((rax3 = rax2) ->
  (forall rax4:t1. (((rax4 = bw_or1(bw_and1(rax3, rliteral35),
  toBig1(o11))) and dynamic_invariant(rax4, true, true, true, true)) ->
  (let o12 = sub1(rbp1, rliteral11) : t1 in (let o13 = readmem32(o12,
  memory12) : t in
  ((forall memory13:(t1,unsigned8) farray. forall o14:t1.
   readmem16__function_guard(readmem16(o14, memory13), o14, memory13)) ->
  ((forall memory13:(t1,unsigned8) farray. forall o14:t1.
   readmem16__function_guard(readmem16(add1(o14, rliteral9), memory13),
   add1(o14, rliteral9), memory13)) ->
  ((readmem32__function_guard(o13, o12, memory12) and
  (dynamic_invariant1(o13, true, false, true, true) and
  ((o13 = add(toBig3(readmem16(o12, memory12)),
  mul(toBig3(readmem16(add1(o12, rliteral9), memory12)), rliteral10))) and
  uge(o13, rliteral4)))) -> (let o14 = eax(rax4) : t in
  ((eax__function_guard(o14, rax4) and (dynamic_invariant1(o14, true, false,
  true, true) and (o14 = toSmall1(bw_and1(rax4, rliteral6))))) ->
  (forall zeroflag:bool. ((zeroflag = (if (sub(o14,
  o13) = rliteral4) then true else false)) -> (let o15 = sub1(rbp1,
  rliteral11) : t1 in (let o16 = readmem32(o15, memory12) : t in
  ((forall memory13:(t1,unsigned8) farray. forall o17:t1.
   readmem16__function_guard(readmem16(o17, memory13), o17, memory13)) ->
  ((forall memory13:(t1,unsigned8) farray. forall o17:t1.
   readmem16__function_guard(readmem16(add1(o17, rliteral9), memory13),
   add1(o17, rliteral9), memory13)) ->
  ((readmem32__function_guard(o16, o15, memory12) and
  (dynamic_invariant1(o16, true, false, true, true) and
  ((o16 = add(toBig3(readmem16(o15, memory12)),
  mul(toBig3(readmem16(add1(o15, rliteral9), memory12)), rliteral10))) and
  uge(o16, rliteral4)))) -> (let o17 = eax(rax4) : t in
  ((eax__function_guard(o17, rax4) and (dynamic_invariant1(o17, true, false,
  true, true) and (o17 = toSmall1(bw_and1(rax4, rliteral6))))) ->
  (forall signflag:bool. ((signflag = (if ugt(sub(o17, o16),
  rliteral39) then true else false)) -> (let o18 = sub1(rbp1, rliteral11)
  : t1 in (let o19 = readmem32(o18, memory12) : t in
  ((forall memory13:(t1,unsigned8) farray. forall o20:t1.
   readmem16__function_guard(readmem16(o20, memory13), o20, memory13)) ->
  ((forall memory13:(t1,unsigned8) farray. forall o20:t1.
   readmem16__function_guard(readmem16(add1(o20, rliteral9), memory13),
   add1(o20, rliteral9), memory13)) ->
  ((readmem32__function_guard(o19, o18, memory12) and
  (dynamic_invariant1(o19, true, false, true, true) and
  ((o19 = add(toBig3(readmem16(o18, memory12)),
  mul(toBig3(readmem16(add1(o18, rliteral9), memory12)), rliteral10))) and
  uge(o19, rliteral4)))) -> (let o20 = eax(rax4) : t in
  ((eax__function_guard(o20, rax4) and (dynamic_invariant1(o20, true, false,
  true, true) and (o20 = toSmall1(bw_and1(rax4, rliteral6))))) ->
  (((signflag = true) or (let o21 = eax(rax4) : t in
  (eax__function_guard(o21, rax4) and (dynamic_invariant1(o21, true, false,
  true, true) and (o21 = toSmall1(bw_and1(rax4, rliteral6))))))) ->
  ((forall memory13:(t1,unsigned8) farray. forall o21:t1.
   readmem16__function_guard(readmem16(o21, memory13), o21, memory13)) ->
  ((forall memory13:(t1,unsigned8) farray. forall o21:t1.
   readmem16__function_guard(readmem16(add1(o21, rliteral9), memory13),
   add1(o21, rliteral9), memory13)) ->
  (((not ((not (signflag = true)) and ugt(eax(rax4), rliteral39))) or
  (let o21 = sub1(rbp1, rliteral11) : t1 in (let o22 = readmem32(o21,
  memory12) : t in (readmem32__function_guard(o22, o21, memory12) and
  (dynamic_invariant1(o22, true, false, true, true) and
  ((o22 = add(toBig3(readmem16(o21, memory12)),
  mul(toBig3(readmem16(add1(o21, rliteral9), memory12)), rliteral10))) and
  uge(o22, rliteral4))))))) ->
  ((forall memory13:(t1,unsigned8) farray. forall o21:t1.
   readmem16__function_guard(readmem16(o21, memory13), o21, memory13)) ->
  ((forall memory13:(t1,unsigned8) farray. forall o21:t1.
   readmem16__function_guard(readmem16(add1(o21, rliteral9), memory13),
   add1(o21, rliteral9), memory13)) ->
  (((not (signflag = true)) or (let o21 = sub1(rbp1, rliteral11) : t1 in
  (let o22 = readmem32(o21, memory12) : t in (readmem32__function_guard(o22,
  o21, memory12) and (dynamic_invariant1(o22, true, false, true, true) and
  ((o22 = add(toBig3(readmem16(o21, memory12)),
  mul(toBig3(readmem16(add1(o21, rliteral9), memory12)), rliteral10))) and
  uge(o22, rliteral4))))))) -> (((not ((signflag = true) and
  ugt(readmem32(sub1(rbp1, rliteral11), memory12), rliteral39))) or
  (let o21 = eax(rax4) : t in (eax__function_guard(o21, rax4) and
  (dynamic_invariant1(o21, true, false, true, true) and
  (o21 = toSmall1(bw_and1(rax4, rliteral6))))))) ->
  (forall overflowflag:bool. ((overflowflag = orb((if ((signflag = true) and
  ugt(readmem32(sub1(rbp1, rliteral11), memory12),
  rliteral39)) then (if ule(eax(rax4),
  rliteral39) then true else false) else false),
  (if ((not (signflag = true)) and ugt(eax(rax4),
  rliteral39)) then (if ule(readmem32(sub1(rbp1, rliteral11), memory12),
  rliteral39) then true else false) else false))) ->
  (forall spark__branch:bool. forall memory13:(t1,unsigned8) farray.
  forall rax5:t1.
  ((forall memory14:(t1,unsigned8) farray. forall o21:t1.
   readmem16__function_guard(readmem16(o21, memory14), o21, memory14)) ->
  ((forall memory14:(t1,unsigned8) farray. forall o21:t1.
   readmem16__function_guard(readmem16(add1(o21, rliteral9), memory14),
   add1(o21, rliteral9), memory14)) ->
  ((forall memory14:(t1,unsigned8) farray. forall o21:t1.
   readmem16__function_guard(readmem16(o21, memory14), o21, memory14)) ->
  ((forall memory14:(t1,unsigned8) farray. forall o21:t1.
   readmem16__function_guard(readmem16(add1(o21, rliteral9), memory14),
   add1(o21, rliteral9), memory14)) ->
  ((forall memory14:(t1,unsigned8) farray. forall o21:t1.
   readmem16__function_guard(readmem16(o21, memory14), o21, memory14)) ->
  ((forall memory14:(t1,unsigned8) farray. forall o21:t1.
   readmem16__function_guard(readmem16(add1(o21, rliteral9), memory14),
   add1(o21, rliteral9), memory14)) ->
  ((forall memory14:(t1,unsigned8) farray. forall o21:t1.
   readmem16__function_guard(readmem16(o21, memory14), o21, memory14)) ->
  ((forall memory14:(t1,unsigned8) farray. forall o21:t1.
   readmem16__function_guard(readmem16(add1(o21, rliteral9), memory14),
   add1(o21, rliteral9), memory14)) ->
  ((forall memory14:(t1,unsigned8) farray. forall o21:t1.
   readmem16__function_guard(readmem16(o21, memory14), o21, memory14)) ->
  ((forall memory14:(t1,unsigned8) farray. forall o21:t1.
   readmem16__function_guard(readmem16(add1(o21, rliteral9), memory14),
   add1(o21, rliteral9), memory14)) ->
  (((spark__branch = (if (to_int2(zeroflag) = to_int2(overflowflag)) then false else true)) and
  (if (spark__branch = true) then (let o21 = sub1(rbp1, rliteral11) : t1 in
  (let o22 = readmem32(o21, memory12) : t in ((readmem32__function_guard(o22,
  o21, memory12) and (dynamic_invariant1(o22, true, false, true, true) and
  ((o22 = add(toBig3(readmem16(o21, memory12)),
  mul(toBig3(readmem16(add1(o21, rliteral9), memory12)), rliteral10))) and
  uge(o22, rliteral4)))) and
  (exists rax6:t1. ((rax6 = rax4) and
  (exists rax7:t1. (((rax7 = bw_or1(bw_and1(rax6, rliteral35),
  toBig1(o22))) and dynamic_invariant(rax7, true, true, true, true)) and
  (let o23 = sub1(rbp1, rliteral20) : t1 in (let o24 = readmem32(o23,
  memory12) : t in ((readmem32__function_guard(o24, o23, memory12) and
  (dynamic_invariant1(o24, true, false, true, true) and
  ((o24 = add(toBig3(readmem16(o23, memory12)),
  mul(toBig3(readmem16(add1(o23, rliteral9), memory12)), rliteral10))) and
  uge(o24, rliteral4)))) and (let o25 = eax(rax7) : t in
  ((eax__function_guard(o25, rax7) and (dynamic_invariant1(o25, true, false,
  true, true) and (o25 = toSmall1(bw_and1(rax7, rliteral6))))) and
  (exists rax8:t1. ((rax8 = rax7) and (((rax5 = bw_or1(bw_and1(rax8,
  rliteral35), toBig1(sub(o25, o24)))) and dynamic_invariant(rax5, true,
  true, true, true)) and (let o26 = eax(rax5) : t in
  ((eax__function_guard(o26, rax5) and (dynamic_invariant1(o26, true, false,
  true, true) and (o26 = toSmall1(bw_and1(rax5, rliteral6))))) and (let o27 =
  sub1(rbp1, rliteral36) : t1 in
  (exists memory14:(t1,unsigned8) farray. ((memory14 = memory12) and
  ((add(add(add(toBig2(to_rep((memory13[o27]))),
  mul(toBig2(to_rep((memory13[add1(o27, rliteral18)]))), rliteral32)),
  mul(toBig2(to_rep((memory13[add1(o27, rliteral9)]))), rliteral10)),
  mul(toBig2(to_rep((memory13[add1(o27, rliteral23)]))),
  rliteral33)) = o26) and
  (forall i:t1. ((ule1(rliteral2, i) and ule1(i, rliteral3)) ->
  (((((not (i = o27)) and (not (i = add1(o27, rliteral18)))) and
  (not (i = add1(o27, rliteral9)))) and (not (i = add1(o27, rliteral23)))) ->
  (to_rep((memory13[i])) = to_rep((memory14[i]))))))))))))))))))))))))))) else (let o21 =
  sub1(rbp1, rliteral20) : t1 in (let o22 = readmem32(o21, memory12) : t in
  ((readmem32__function_guard(o22, o21, memory12) and
  (dynamic_invariant1(o22, true, false, true, true) and
  ((o22 = add(toBig3(readmem16(o21, memory12)),
  mul(toBig3(readmem16(add1(o21, rliteral9), memory12)), rliteral10))) and
  uge(o22, rliteral4)))) and
  (exists rax6:t1. ((rax6 = rax4) and
  (exists rax7:t1. (((rax7 = bw_or1(bw_and1(rax6, rliteral35),
  toBig1(o22))) and dynamic_invariant(rax7, true, true, true, true)) and
  (let o23 = sub1(rbp1, rliteral36) : t1 in (let o24 = readmem32(o23,
  memory12) : t in ((readmem32__function_guard(o24, o23, memory12) and
  (dynamic_invariant1(o24, true, false, true, true) and
  ((o24 = add(toBig3(readmem16(o23, memory12)),
  mul(toBig3(readmem16(add1(o23, rliteral9), memory12)), rliteral10))) and
  uge(o24, rliteral4)))) and (let o25 = eax(rax7) : t in
  ((eax__function_guard(o25, rax7) and (dynamic_invariant1(o25, true, false,
  true, true) and (o25 = toSmall1(bw_and1(rax7, rliteral6))))) and
  (exists rax8:t1. ((rax8 = rax7) and
  (exists rax9:t1. (((rax9 = bw_or1(bw_and1(rax8, rliteral35),
  toBig1(sub(o25, o24)))) and dynamic_invariant(rax9, true, true, true,
  true)) and (let o26 = eax(rax9) : t in ((eax__function_guard(o26, rax9) and
  (dynamic_invariant1(o26, true, false, true, true) and
  (o26 = toSmall1(bw_and1(rax9, rliteral6))))) and
  (exists rdx1:t1. ((rdx1 = rdx) and
  (exists rdx2:t1. (((rdx2 = bw_or1(bw_and1(rdx1, rliteral35),
  toBig1(o26))) and dynamic_invariant(rdx2, true, true, true, true)) and
  (let o27 = sub1(rbp1, rliteral11) : t1 in (let o28 = readmem32(o27,
  memory12) : t in ((readmem32__function_guard(o28, o27, memory12) and
  (dynamic_invariant1(o28, true, false, true, true) and
  ((o28 = add(toBig3(readmem16(o27, memory12)),
  mul(toBig3(readmem16(add1(o27, rliteral9), memory12)), rliteral10))) and
  uge(o28, rliteral4)))) and
  (exists rax10:t1. ((rax10 = rax9) and
  (exists rax11:t1. (((rax11 = bw_or1(bw_and1(rax10, rliteral35),
  toBig1(o28))) and dynamic_invariant(rax11, true, true, true, true)) and
  (let o29 = edx(rdx2) : t in ((edx__function_guard(o29, rdx2) and
  (dynamic_invariant1(o29, true, false, true, true) and
  (o29 = toSmall1(bw_and1(rdx2, rliteral6))))) and (let o30 = eax(rax11)
  : t in ((eax__function_guard(o30, rax11) and (dynamic_invariant1(o30, true,
  false, true, true) and (o30 = toSmall1(bw_and1(rax11, rliteral6))))) and
  (exists rax12:t1. ((rax12 = rax11) and (((rax5 = bw_or1(bw_and1(rax12,
  rliteral35), toBig1(add(o30, o29)))) and dynamic_invariant(rax5, true,
  true, true, true)) and (let o31 = eax(rax5) : t in
  ((eax__function_guard(o31, rax5) and (dynamic_invariant1(o31, true, false,
  true, true) and (o31 = toSmall1(bw_and1(rax5, rliteral6))))) and (let o32 =
  sub1(rbp1, rliteral36) : t1 in
  (exists memory14:(t1,unsigned8) farray. ((memory14 = memory12) and
  ((add(add(add(toBig2(to_rep((memory13[o32]))),
  mul(toBig2(to_rep((memory13[add1(o32, rliteral18)]))), rliteral32)),
  mul(toBig2(to_rep((memory13[add1(o32, rliteral9)]))), rliteral10)),
  mul(toBig2(to_rep((memory13[add1(o32, rliteral23)]))),
  rliteral33)) = o31) and
  (forall i:t1. ((ule1(rliteral2, i) and ule1(i, rliteral3)) ->
  (((((not (i = o32)) and (not (i = add1(o32, rliteral18)))) and
  (not (i = add1(o32, rliteral9)))) and (not (i = add1(o32, rliteral23)))) ->
  (to_rep((memory13[i])) = to_rep((memory14[i])))))))))))))))))))))))))))))))))))))))))))))))))) ->
  (let o21 = sub1(rbp1, rliteral20) : t1 in (let o22 = readmem32(o21,
  memory13) : t in
  ((forall memory14:(t1,unsigned8) farray. forall o23:t1.
   readmem16__function_guard(readmem16(o23, memory14), o23, memory14)) ->
  ((forall memory14:(t1,unsigned8) farray. forall o23:t1.
   readmem16__function_guard(readmem16(add1(o23, rliteral9), memory14),
   add1(o23, rliteral9), memory14)) ->
  ((readmem32__function_guard(o22, o21, memory13) and
  (dynamic_invariant1(o22, true, false, true, true) and
  ((o22 = add(toBig3(readmem16(o21, memory13)),
  mul(toBig3(readmem16(add1(o21, rliteral9), memory13)), rliteral10))) and
  uge(o22, rliteral4)))) ->
  (forall rax6:t1. ((rax6 = rax5) ->
  (forall rax7:t1. (((rax7 = bw_or1(bw_and1(rax6, rliteral35),
  toBig1(o22))) and dynamic_invariant(rax7, true, true, true, true)) ->
  (let o23 = sub1(rbp1, rliteral11) : t1 in (let o24 = readmem32(o23,
  memory13) : t in
  ((forall memory14:(t1,unsigned8) farray. forall o25:t1.
   readmem16__function_guard(readmem16(o25, memory14), o25, memory14)) ->
  ((forall memory14:(t1,unsigned8) farray. forall o25:t1.
   readmem16__function_guard(readmem16(add1(o25, rliteral9), memory14),
   add1(o25, rliteral9), memory14)) ->
  ((readmem32__function_guard(o24, o23, memory13) and
  (dynamic_invariant1(o24, true, false, true, true) and
  ((o24 = add(toBig3(readmem16(o23, memory13)),
  mul(toBig3(readmem16(add1(o23, rliteral9), memory13)), rliteral10))) and
  uge(o24, rliteral4)))) -> (let o25 = eax(rax7) : t in
  ((eax__function_guard(o25, rax7) and (dynamic_invariant1(o25, true, false,
  true, true) and (o25 = toSmall1(bw_and1(rax7, rliteral6))))) ->
  (forall zeroflag1:bool. ((zeroflag1 = (if (sub(o25,
  o24) = rliteral4) then true else false)) -> (let o26 = sub1(rbp1,
  rliteral11) : t1 in (let o27 = readmem32(o26, memory13) : t in
  ((forall memory14:(t1,unsigned8) farray. forall o28:t1.
   readmem16__function_guard(readmem16(o28, memory14), o28, memory14)) ->
  ((forall memory14:(t1,unsigned8) farray. forall o28:t1.
   readmem16__function_guard(readmem16(add1(o28, rliteral9), memory14),
   add1(o28, rliteral9), memory14)) ->
  ((readmem32__function_guard(o27, o26, memory13) and
  (dynamic_invariant1(o27, true, false, true, true) and
  ((o27 = add(toBig3(readmem16(o26, memory13)),
  mul(toBig3(readmem16(add1(o26, rliteral9), memory13)), rliteral10))) and
  uge(o27, rliteral4)))) -> (let o28 = eax(rax7) : t in
  ((eax__function_guard(o28, rax7) and (dynamic_invariant1(o28, true, false,
  true, true) and (o28 = toSmall1(bw_and1(rax7, rliteral6))))) ->
  (forall signflag1:bool. ((signflag1 = (if ugt(sub(o28, o27),
  rliteral39) then true else false)) -> (let o29 = sub1(rbp1, rliteral11)
  : t1 in (let o30 = readmem32(o29, memory13) : t in
  ((forall memory14:(t1,unsigned8) farray. forall o31:t1.
   readmem16__function_guard(readmem16(o31, memory14), o31, memory14)) ->
  ((forall memory14:(t1,unsigned8) farray. forall o31:t1.
   readmem16__function_guard(readmem16(add1(o31, rliteral9), memory14),
   add1(o31, rliteral9), memory14)) ->
  ((readmem32__function_guard(o30, o29, memory13) and
  (dynamic_invariant1(o30, true, false, true, true) and
  ((o30 = add(toBig3(readmem16(o29, memory13)),
  mul(toBig3(readmem16(add1(o29, rliteral9), memory13)), rliteral10))) and
  uge(o30, rliteral4)))) -> (let o31 = eax(rax7) : t in
  ((eax__function_guard(o31, rax7) and (dynamic_invariant1(o31, true, false,
  true, true) and (o31 = toSmall1(bw_and1(rax7, rliteral6))))) ->
  (((signflag1 = true) or (let o32 = eax(rax7) : t in
  (eax__function_guard(o32, rax7) and (dynamic_invariant1(o32, true, false,
  true, true) and (o32 = toSmall1(bw_and1(rax7, rliteral6))))))) ->
  ((forall memory14:(t1,unsigned8) farray. forall o32:t1.
   readmem16__function_guard(readmem16(o32, memory14), o32, memory14)) ->
  ((forall memory14:(t1,unsigned8) farray. forall o32:t1.
   readmem16__function_guard(readmem16(add1(o32, rliteral9), memory14),
   add1(o32, rliteral9), memory14)) ->
  (((not ((not (signflag1 = true)) and ugt(eax(rax7), rliteral39))) or
  (let o32 = sub1(rbp1, rliteral11) : t1 in (let o33 = readmem32(o32,
  memory13) : t in (readmem32__function_guard(o33, o32, memory13) and
  (dynamic_invariant1(o33, true, false, true, true) and
  ((o33 = add(toBig3(readmem16(o32, memory13)),
  mul(toBig3(readmem16(add1(o32, rliteral9), memory13)), rliteral10))) and
  uge(o33, rliteral4))))))) ->
  ((forall memory14:(t1,unsigned8) farray. forall o32:t1.
   readmem16__function_guard(readmem16(o32, memory14), o32, memory14)) ->
  ((forall memory14:(t1,unsigned8) farray. forall o32:t1.
   readmem16__function_guard(readmem16(add1(o32, rliteral9), memory14),
   add1(o32, rliteral9), memory14)) ->
  (((not (signflag1 = true)) or (let o32 = sub1(rbp1, rliteral11) : t1 in
  (let o33 = readmem32(o32, memory13) : t in (readmem32__function_guard(o33,
  o32, memory13) and (dynamic_invariant1(o33, true, false, true, true) and
  ((o33 = add(toBig3(readmem16(o32, memory13)),
  mul(toBig3(readmem16(add1(o32, rliteral9), memory13)), rliteral10))) and
  uge(o33, rliteral4))))))) -> (((not ((signflag1 = true) and
  ugt(readmem32(sub1(rbp1, rliteral11), memory13), rliteral39))) or
  (let o32 = eax(rax7) : t in (eax__function_guard(o32, rax7) and
  (dynamic_invariant1(o32, true, false, true, true) and
  (o32 = toSmall1(bw_and1(rax7, rliteral6))))))) ->
  (forall overflowflag1:bool.
  ((overflowflag1 = orb((if ((signflag1 = true) and ugt(readmem32(sub1(rbp1,
  rliteral11), memory13), rliteral39)) then (if ule(eax(rax7),
  rliteral39) then true else false) else false),
  (if ((not (signflag1 = true)) and ugt(eax(rax7),
  rliteral39)) then (if ule(readmem32(sub1(rbp1, rliteral11), memory13),
  rliteral39) then true else false) else false))) ->
  (forall memory14:(t1,unsigned8) farray. forall rax8:t1.
  ((forall memory15:(t1,unsigned8) farray. forall o32:t1.
   readmem16__function_guard(readmem16(o32, memory15), o32, memory15)) ->
  ((forall memory15:(t1,unsigned8) farray. forall o32:t1.
   readmem16__function_guard(readmem16(add1(o32, rliteral9), memory15),
   add1(o32, rliteral9), memory15)) ->
  ((forall memory15:(t1,unsigned8) farray. forall o32:t1.
   readmem16__function_guard(readmem16(o32, memory15), o32, memory15)) ->
  ((forall memory15:(t1,unsigned8) farray. forall o32:t1.
   readmem16__function_guard(readmem16(add1(o32, rliteral9), memory15),
   add1(o32, rliteral9), memory15)) ->
  ((exists spark__branch1:bool.
   ((spark__branch1 = (if (to_int2(zeroflag1) = to_int2(overflowflag1)) then false else true)) and
   (if (spark__branch1 = true) then (let o32 = sub1(rbp1, rliteral36) : t1 in
   (let o33 = readmem32(o32, memory13) : t in
   ((readmem32__function_guard(o33, o32, memory13) and
   (dynamic_invariant1(o33, true, false, true, true) and
   ((o33 = add(toBig3(readmem16(o32, memory13)),
   mul(toBig3(readmem16(add1(o32, rliteral9), memory13)), rliteral10))) and
   uge(o33, rliteral4)))) and
   (exists rax9:t1. ((rax9 = rax7) and (((rax8 = bw_or1(bw_and1(rax9,
   rliteral35), toBig1(o33))) and dynamic_invariant(rax8, true, true, true,
   true)) and (let o34 = eax(rax8) : t in ((eax__function_guard(o34,
   rax8) and (dynamic_invariant1(o34, true, false, true, true) and
   (o34 = toSmall1(bw_and1(rax8, rliteral6))))) and (let o35 = sub1(rbp1,
   rliteral20) : t1 in (let o36 = readmem32(o35, memory13) : t in
   ((readmem32__function_guard(o36, o35, memory13) and
   (dynamic_invariant1(o36, true, false, true, true) and
   ((o36 = add(toBig3(readmem16(o35, memory13)),
   mul(toBig3(readmem16(add1(o35, rliteral9), memory13)), rliteral10))) and
   uge(o36, rliteral4)))) and (let o37 = sub1(rbp1, rliteral20) : t1 in
   (exists memory15:(t1,unsigned8) farray. ((memory15 = memory13) and
   ((add(add(add(toBig2(to_rep((memory14[o37]))),
   mul(toBig2(to_rep((memory14[add1(o37, rliteral18)]))), rliteral32)),
   mul(toBig2(to_rep((memory14[add1(o37, rliteral9)]))), rliteral10)),
   mul(toBig2(to_rep((memory14[add1(o37, rliteral23)]))),
   rliteral33)) = add(o36, o34)) and
   (forall i:t1. ((ule1(rliteral2, i) and ule1(i, rliteral3)) ->
   (((((not (i = o37)) and (not (i = add1(o37, rliteral18)))) and
   (not (i = add1(o37, rliteral9)))) and (not (i = add1(o37,
   rliteral23)))) -> (to_rep((memory14[i])) = to_rep((memory15[i]))))))))))))))))))))) else ((memory14 = memory13) and
   (rax8 = rax7))))) ->
  (forall rax9:t1. ((rax9 = rax8) ->
  (forall rax10:t1. (((rax10 = bw_or1(bw_and1(rax9, rliteral35),
  toBig1(rliteral4))) and dynamic_invariant(rax10, true, true, true,
  true)) -> ((rsp2 = sub1(saversp, rliteral20)) -> (let o32 = add1(rsp2,
  rliteral2) : t1 in (let o33 = readmem64(o32, memory14) : t1 in
  ((forall memory15:(t1,unsigned8) farray. forall o34:t1.
   readmem32__function_guard(readmem32(o34, memory15), o34, memory15)) ->
  ((forall memory15:(t1,unsigned8) farray. forall o34:t1.
   readmem32__function_guard(readmem32(add1(o34, rliteral11), memory15),
   add1(o34, rliteral11), memory15)) ->
  ((readmem64__function_guard(o33, o32, memory14) and (dynamic_invariant(o33,
  true, false, true, true) and ((o33 = add1(toBig1(readmem32(o32, memory14)),
  mul1(toBig1(readmem32(add1(o32, rliteral11), memory14)), rliteral12))) and
  uge1(o33, rliteral2)))) ->
  (forall rsp3:t1. ((rsp3 = add1(rsp2, rliteral20)) ->
  ((rsp3 = add1(sub1(saversp, rliteral20), rliteral20)) ->
  ((rsp3 = add1(saversp, rliteral2)) -> ((rsp3 = saversp) ->
  (forall rsp4:t1. ((rsp4 = add1(rsp3, rliteral20)) -> (rsp4 = add1(rsp1,
  rliteral20)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
