(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

logic attr__ATTRIBUTE_ADDRESS : int

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic b : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type ta2D1

logic ta2D1qtint : ta2D1 -> int

axiom ta2D1qtaxiom : (forall i:ta2D1. (1 <= ta2D1qtint(i)))

axiom ta2D1qtaxiom1 : (forall i:ta2D1. (ta2D1qtint(i) <= 2))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : ta2D1, ta2D1 -> bool

logic dummy1 : ta2D1

type ta2D1__ref = { ta2D1__content : ta2D1
}

function ta2D1__ref_ta2D1__content__projection(a: ta2D1__ref) : ta2D1 =
  (a).ta2D1__content

logic temp_____aggregate_def_367 : int, int -> (int,integer) farray

logic temp_____aggregate_def_372 : int -> (int,integer) farray

logic temp_____aggregate_def_376 : int, int -> (int,integer) farray

logic temp_____aggregate_def_381 : int, int -> (int,integer) farray

logic temp_____aggregate_def_386 : int, int -> (int,integer) farray

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 2)

axiom def_axiom :
  (forall temp___369:int. forall temp___370:int.
  ((dynamic_invariant(temp___369, true, true, true, true) and
  dynamic_invariant(temp___370, true, true, true, true)) ->
  (to_rep((temp_____aggregate_def_367(temp___369,
  temp___370)[1])) = temp___369)))

axiom def_axiom1 :
  (forall temp___369:int. forall temp___370:int.
  ((dynamic_invariant(temp___369, true, true, true, true) and
  dynamic_invariant(temp___370, true, true, true, true)) ->
  ((temp_____aggregate_def_367(temp___369, temp___370)[2]) = rliteral)))

axiom def_axiom2 :
  (forall temp___374:int. (dynamic_invariant(temp___374, true, true, true,
  true) ->
  (forall temp___375:int.
  (to_rep((temp_____aggregate_def_372(temp___374)[temp___375])) = temp___374))))

axiom def_axiom3 :
  (forall temp___378:int. forall temp___379:int.
  ((dynamic_invariant(temp___378, true, true, true, true) and
  dynamic_invariant(temp___379, true, true, true, true)) ->
  (forall temp___380:int. ((temp___380 = 1) ->
  (to_rep((temp_____aggregate_def_376(temp___378,
  temp___379)[temp___380])) = temp___378)))))

axiom def_axiom4 :
  (forall temp___378:int. forall temp___379:int.
  ((dynamic_invariant(temp___378, true, true, true, true) and
  dynamic_invariant(temp___379, true, true, true, true)) ->
  (forall temp___380:int. ((not (temp___380 = 1)) ->
  (to_rep((temp_____aggregate_def_376(temp___378,
  temp___379)[temp___380])) = temp___379)))))

axiom def_axiom5 :
  (forall temp___383:int. forall temp___384:int.
  ((dynamic_invariant(temp___383, true, true, true, true) and
  dynamic_invariant(temp___384, true, true, true, true)) ->
  (forall temp___385:int. ((temp___385 = 1) ->
  ((temp_____aggregate_def_381(temp___383,
  temp___384)[temp___385]) = rliteral)))))

axiom def_axiom6 :
  (forall temp___383:int. forall temp___384:int.
  ((dynamic_invariant(temp___383, true, true, true, true) and
  dynamic_invariant(temp___384, true, true, true, true)) ->
  (forall temp___385:int. ((not (temp___385 = 1)) ->
  (to_rep((temp_____aggregate_def_381(temp___383,
  temp___384)[temp___385])) = temp___384)))))

axiom def_axiom7 :
  (forall temp___388:int. forall temp___389:int.
  ((dynamic_invariant(temp___388, true, true, true, true) and
  dynamic_invariant(temp___389, true, true, true, true)) ->
  (forall temp___390:int. ((temp___390 = 2) ->
  ((temp_____aggregate_def_386(temp___388,
  temp___389)[temp___390]) = rliteral)))))

axiom def_axiom8 :
  (forall temp___388:int. forall temp___389:int.
  ((dynamic_invariant(temp___388, true, true, true, true) and
  dynamic_invariant(temp___389, true, true, true, true)) ->
  (forall temp___390:int. ((not (temp___390 = 2)) ->
  (to_rep((temp_____aggregate_def_386(temp___388,
  temp___389)[temp___390])) = temp___389)))))

 (* File "arr_aggregate.ads", line 14, characters 0-0 *)
goal defqtvc :
  (forall one:int.
  (forall one1:int. ((one1 = one) -> (dynamic_invariant(one, true, false,
  true, true) -> (dynamic_invariant(b, true, false, true, true) ->
  ((one = 1) ->
  (forall a:(int,integer) farray.
  ((exists spark__branch:bool.
   ((spark__branch = (if (b = 1) then true else false)) and
   (if (spark__branch = true) then (a = temp_____aggregate_def_367(one,
   2)) else (exists spark__branch1:bool.
            ((spark__branch1 = (if (b = 2) then true else false)) and
            (if (spark__branch1 = true) then (a = temp_____aggregate_def_372(one)) else 
            (exists spark__branch2:bool.
            ((spark__branch2 = (if (b = 3) then true else false)) and
            (if (spark__branch2 = true) then (a = temp_____aggregate_def_376(one,
            one)) else (exists spark__branch3:bool.
                       ((spark__branch3 = (if (b = 4) then true else false)) and
                       (if (spark__branch3 = true) then (a = temp_____aggregate_def_381(2,
                       one)) else (a = temp_____aggregate_def_386(2, one)))))))))))))) ->
  ((not (b = 1)) -> ((not (b = 2)) -> ((not (b = 3)) -> ((b = 4) ->
  (forall o:int. ((to_rep((a[2])) = o) -> (1 <= one)))))))))))))))
