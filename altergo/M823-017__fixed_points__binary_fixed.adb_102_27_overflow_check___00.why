(* this is a prelude for Alt-Ergo integer arithmetic *)
(* this is a prelude for Alt-Ergo real arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic x : int

logic attr__ATTRIBUTE_ADDRESS : int

type ttB

predicate in_range1(x1: int) = (((- 32768) <= x1) and (x1 <= 32767))

logic dummy : ttB

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : ttB, ttB -> bool

type ttB__ref = { ttB__content : ttB
}

function ttB__ref_ttB__content__projection(a: ttB__ref) : ttB =
  (a).ttB__content

axiom add_div :
  (forall x1:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x1 + y) / z) = ((x1 / z) + (y / z)))))

axiom sub_div :
  (forall x1:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x1 - y) / z) = ((x1 / z) - (y / z)))))

axiom neg_div :
  (forall x1:real. forall y:real. ((not (y = 0.0)) ->
  (((-x1) / y) = (-(x1 / y)))))

axiom assoc_mul_div :
  (forall x1:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x1 * y) / z) = (x1 * (y / z)))))

axiom assoc_div_mul :
  (forall x1:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x1 / y) / z) = (x1 / (y * z)))))

axiom assoc_div_div :
  (forall x1:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x1 / (y / z)) = ((x1 * z) / y))))

axiom Injective :
  (forall x1:int. forall y:int. ((real_of_int(x1) = real_of_int(y)) ->
  (x1 = y)))

axiom Monotonic :
  (forall x1:int. forall y:int. ((x1 <= y) ->
  (real_of_int(x1) <= real_of_int(y))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x1:int. forall y:int. ((not (y = 0)) -> (x1 = ((y * div(x1,
  y)) + mod(x1, y)))))

axiom Div_bound :
  (forall x1:int. forall y:int. (((0 <= x1) and (0 <  y)) -> (0 <= div(x1,
  y))))

axiom Div_bound1 :
  (forall x1:int. forall y:int. (((0 <= x1) and (0 <  y)) -> (div(x1,
  y) <= x1)))

axiom Mod_bound :
  (forall x1:int. forall y:int. ((not (y = 0)) -> ((-abs_int(y)) <  mod(x1,
  y))))

axiom Mod_bound1 :
  (forall x1:int. forall y:int. ((not (y = 0)) -> (mod(x1,
  y) <  abs_int(y))))

axiom Div_sign_pos :
  (forall x1:int. forall y:int. (((0 <= x1) and (0 <  y)) -> (0 <= div(x1,
  y))))

axiom Div_sign_neg :
  (forall x1:int. forall y:int. (((x1 <= 0) and (0 <  y)) -> (div(x1,
  y) <= 0)))

axiom Mod_sign_pos :
  (forall x1:int. forall y:int. (((0 <= x1) and (not (y = 0))) ->
  (0 <= mod(x1, y))))

axiom Mod_sign_neg :
  (forall x1:int. forall y:int. (((x1 <= 0) and (not (y = 0))) -> (mod(x1,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x1:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x1,
  y) * y)) <= abs_int(x1))))

axiom Div_1 : (forall x1:int. (div(x1, 1) = x1))

axiom Mod_1 : (forall x1:int. (mod(x1, 1) = 0))

axiom Div_inf :
  (forall x1:int. forall y:int. (((0 <= x1) and (x1 <  y)) -> (div(x1,
  y) = 0)))

axiom Mod_inf :
  (forall x1:int. forall y:int. (((0 <= x1) and (x1 <  y)) -> (mod(x1,
  y) = x1)))

axiom Div_mult :
  (forall x1:int. forall y:int. forall z:int [div(((x1 * y) + z), x1)].
  (((0 <  x1) and ((0 <= y) and (0 <= z))) -> (div(((x1 * y) + z),
  x1) = (y + div(z, x1)))))

axiom Mod_mult :
  (forall x1:int. forall y:int. forall z:int [mod(((x1 * y) + z), x1)].
  (((0 <  x1) and ((0 <= y) and (0 <= z))) -> (mod(((x1 * y) + z),
  x1) = mod(z, x1))))

axiom Div_mod1 :
  (forall x1:int. forall y:int. ((not (y = 0)) ->
  (x1 = ((y * (x1 / y)) + (x1 % y)))))

axiom Mod_bound2 :
  (forall x1:int. forall y:int. ((not (y = 0)) -> (0 <= (x1 % y))))

axiom Mod_bound3 :
  (forall x1:int. forall y:int. ((not (y = 0)) -> ((x1 % y) <  abs_int(y))))

axiom Div_unique :
  (forall x1:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x1) and (x1 <  ((q * y) + y))) -> ((x1 / y) = q))))

axiom Div_bound2 :
  (forall x1:int. forall y:int. (((0 <= x1) and (0 <  y)) ->
  (0 <= (x1 / y))))

axiom Div_bound3 :
  (forall x1:int. forall y:int. (((0 <= x1) and (0 <  y)) ->
  ((x1 / y) <= x1)))

axiom Mod_11 : (forall x1:int. ((x1 % 1) = 0))

axiom Div_11 : (forall x1:int. ((x1 / 1) = x1))

axiom Div_inf1 :
  (forall x1:int. forall y:int. (((0 <= x1) and (x1 <  y)) ->
  ((x1 / y) = 0)))

axiom Div_inf_neg :
  (forall x1:int. forall y:int. (((0 <  x1) and (x1 <= y)) ->
  (((-x1) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x1:int. forall y:int. forall z:int [(((x1 * y) + z) / x1)].
  ((0 <  x1) -> ((((x1 * y) + z) / x1) = (y + (z / x1)))))

axiom Mod_mult1 :
  (forall x1:int. forall y:int. forall z:int [(((x1 * y) + z) % x1)].
  ((0 <  x1) -> ((((x1 * y) + z) % x1) = (z % x1))))

function mod1(x1: int, y: int) : int =
  (if (0 <  y) then (x1 % y) else ((x1 % y) + y))

predicate pos_div_relation(res: int, num: int, den: int) = (let exact =
  div(num, den) : int in
  (if (num = 0) then (res = 0) else (if (num = (exact * den)) then (res = exact) else ((exact <= res) and
  (res <= (exact + 1))))))

logic fxp_div_int : int, int -> int

axiom fxp_div_int_def :
  (forall x1:int.
  (forall y:int [fxp_div_int(x1, y)]. ((x1 = 0) -> (fxp_div_int(x1, y) = 0))))

axiom fxp_div_int_def1 :
  (forall x1:int.
  (forall y:int [fxp_div_int(x1, y)]. ((not (x1 = 0)) -> (((0 <  x1) and
  (0 <  y)) -> pos_div_relation(fxp_div_int(x1, y), x1, y)))))

axiom fxp_div_int_def2 :
  (forall x1:int.
  (forall y:int [fxp_div_int(x1, y)]. ((not (x1 = 0)) -> ((not ((0 <  x1) and
  (0 <  y))) -> (((x1 <  0) and (y <  0)) -> pos_div_relation(fxp_div_int(x1,
  y), (-x1), (-y)))))))

axiom fxp_div_int_def3 :
  (forall x1:int.
  (forall y:int [fxp_div_int(x1, y)]. ((not (x1 = 0)) -> ((not ((0 <  x1) and
  (0 <  y))) -> ((not ((x1 <  0) and (y <  0))) -> (((x1 <  0) and
  (0 <  y)) -> pos_div_relation((-fxp_div_int(x1, y)), (-x1), y)))))))

axiom fxp_div_int_def4 :
  (forall x1:int.
  (forall y:int [fxp_div_int(x1, y)]. ((not (x1 = 0)) -> ((not ((0 <  x1) and
  (0 <  y))) -> ((not ((x1 <  0) and (y <  0))) -> ((not ((x1 <  0) and
  (0 <  y))) -> (((0 <  x1) and (y <  0)) ->
  pos_div_relation((-fxp_div_int(x1, y)), x1, (-y)))))))))

logic to_int1 : int -> int

axiom to_int_def :
  (forall x1:int [to_int1(x1)]. ((x1 = 0) -> (to_int1(x1) = 0)))

axiom to_int_def1 :
  (forall x1:int [to_int1(x1)]. ((not (x1 = 0)) -> ((0 <  x1) ->
  pos_div_relation(to_int1(x1), (x1 * 1), 256))))

axiom to_int_def2 :
  (forall x1:int [to_int1(x1)]. ((not (x1 = 0)) -> ((not (0 <  x1)) ->
  pos_div_relation((-to_int1(x1)), ((-x1) * 1), 256))))

logic of_int1 : int -> int

axiom of_int_def :
  (forall x1:int [of_int1(x1)]. ((x1 = 0) -> (of_int1(x1) = 0)))

axiom of_int_def1 :
  (forall x1:int [of_int1(x1)]. ((not (x1 = 0)) -> ((0 <  x1) ->
  pos_div_relation(of_int1(x1), (x1 * 256), 1))))

axiom of_int_def2 :
  (forall x1:int [of_int1(x1)]. ((not (x1 = 0)) -> ((not (0 <  x1)) ->
  pos_div_relation((-of_int1(x1)), ((-x1) * 256), 1))))

type t

predicate in_range2(x1: int) = (((- 2560) <= x1) and (x1 <= 2560))

logic dummy1 : t

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : t, t -> bool

type t__ref = { t__content : t
}

function t__ref_t__content__projection(a: t__ref) : t = (a).t__content

predicate dynamic_invariant(temp___expr_158: int, temp___is_init_154: bool,
  temp___skip_constant_155: bool, temp___do_toplevel_156: bool,
  temp___do_typ_inv_157: bool) = (((temp___is_init_154 = true) or
  ((- 2560) <= 2560)) -> in_range2(temp___expr_158))

axiom cdiv_cases :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((0 <  d) -> (div(n,
  d) = (n / d)))))

axiom cdiv_cases1 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((0 <  d) -> (div(n,
  d) = (-((-n) / d))))))

axiom cdiv_cases2 :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((d <  0) -> (div(n,
  d) = (-(n / (-d)))))))

axiom cdiv_cases3 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((d <  0) -> (div(n,
  d) = ((-n) / (-d))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))))

axiom cmod_cases1 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))))

axiom cmod_cases2 :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))))

axiom cmod_cases3 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d)))))))

 (* File "binary_fixed.ads", line 23, characters 0-0 *)
goal defqtvc : (dynamic_invariant(x, true, false, true, true) ->
  ((((- 1280) <= x) and (x <= 1280)) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (0 <= x) then true else false)) ->
  ((spark__branch = true) -> ((not (x <  0)) -> in_range1((x * 2))))))))
