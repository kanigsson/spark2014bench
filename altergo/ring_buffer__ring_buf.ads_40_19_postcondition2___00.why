(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type ar_index

logic ar_indexqtint : ar_index -> int

axiom ar_indexqtaxiom : (forall i:ar_index. (0 <= ar_indexqtint(i)))

axiom ar_indexqtaxiom1 : (forall i:ar_index. (ar_indexqtint(i) <= 9999))

predicate in_range(x: int) = ((0 <= x) and (x <= 9999))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : ar_index, ar_index -> bool

logic dummy : ar_index

type ar_index__ref = { ar_index__content : ar_index
}

function ar_index__ref_ar_index__content__projection(a: ar_index__ref) : ar_index =
  (a).ar_index__content

function to_rep(x: ar_index) : int = ar_indexqtint(x)

logic of_rep : int -> ar_index

axiom inversion_axiom :
  (forall x:ar_index [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:ar_index [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type length_type

logic length_typeqtint : length_type -> int

axiom length_typeqtaxiom : (forall i:length_type. (0 <= length_typeqtint(i)))

axiom length_typeqtaxiom1 :
  (forall i:length_type. (length_typeqtint(i) <= 10000))

predicate in_range1(x: int) = ((0 <= x) and (x <= 10000))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : length_type, length_type -> bool

logic dummy1 : length_type

type length_type__ref = { length_type__content : length_type
}

function length_type__ref_length_type__content__projection(a: length_type__ref) : length_type =
  (a).length_type__content

function to_rep1(x: length_type) : int = length_typeqtint(x)

logic of_rep1 : int -> length_type

axiom inversion_axiom1 :
  (forall x:length_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:length_type [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep2(x: integer) : int = integerqtint(x)

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep2((a[temp___idx_154])) = to_rep2((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep2((a[temp___idx_154])) = to_rep2((b[((b__first - a__first) + temp___idx_154)]))))))))

logic dummy3 : (int,integer) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq3 : (int,integer) farray, (int,integer) farray -> bool

type us_split_fields = { rec__ring_buf__ring_buffer__data :
(int,integer) farray; rec__ring_buf__ring_buffer__first : ar_index;
rec__ring_buf__ring_buffer__length : length_type
}

function us_split_fields_rec__ring_buf__ring_buffer__data__projection(a: us_split_fields) : (int,integer) farray =
  (a).rec__ring_buf__ring_buffer__data

function us_split_fields_rec__ring_buf__ring_buffer__first__projection(a: us_split_fields) : ar_index =
  (a).rec__ring_buf__ring_buffer__first

function us_split_fields_rec__ring_buf__ring_buffer__length__projection(a: us_split_fields) : length_type =
  (a).rec__ring_buf__ring_buffer__length

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq4(a: us_rep, b: us_rep) : bool =
  (if (((bool_eq3(((a).us_split_fields1).rec__ring_buf__ring_buffer__data, 0,
  9999, ((b).us_split_fields1).rec__ring_buf__ring_buffer__data, 0,
  9999) = true) and
  (to_rep(((a).us_split_fields1).rec__ring_buf__ring_buffer__first) = to_rep(((b).us_split_fields1).rec__ring_buf__ring_buffer__first))) and
  (to_rep1(((a).us_split_fields1).rec__ring_buf__ring_buffer__length) = to_rep1(((b).us_split_fields1).rec__ring_buf__ring_buffer__length))) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic ring_buf__ring_buffer__data__first__bit : int

logic ring_buf__ring_buffer__data__last__bit : int

logic ring_buf__ring_buffer__data__position : int

axiom ring_buf__ring_buffer__data__first__bit_axiom :
  (0 <= ring_buf__ring_buffer__data__first__bit)

axiom ring_buf__ring_buffer__data__last__bit_axiom :
  (ring_buf__ring_buffer__data__first__bit <  ring_buf__ring_buffer__data__last__bit)

axiom ring_buf__ring_buffer__data__position_axiom :
  (0 <= ring_buf__ring_buffer__data__position)

logic ring_buf__ring_buffer__first__first__bit : int

logic ring_buf__ring_buffer__first__last__bit : int

logic ring_buf__ring_buffer__first__position : int

axiom ring_buf__ring_buffer__first__first__bit_axiom :
  (0 <= ring_buf__ring_buffer__first__first__bit)

axiom ring_buf__ring_buffer__first__last__bit_axiom :
  (ring_buf__ring_buffer__first__first__bit <  ring_buf__ring_buffer__first__last__bit)

axiom ring_buf__ring_buffer__first__position_axiom :
  (0 <= ring_buf__ring_buffer__first__position)

logic ring_buf__ring_buffer__length__first__bit : int

logic ring_buf__ring_buffer__length__last__bit : int

logic ring_buf__ring_buffer__length__position : int

axiom ring_buf__ring_buffer__length__first__bit_axiom :
  (0 <= ring_buf__ring_buffer__length__first__bit)

axiom ring_buf__ring_buffer__length__last__bit_axiom :
  (ring_buf__ring_buffer__length__first__bit <  ring_buf__ring_buffer__length__last__bit)

axiom ring_buf__ring_buffer__length__position_axiom :
  (0 <= ring_buf__ring_buffer__length__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type ring_buffer__ref = { ring_buffer__content : us_rep
}

function ring_buffer__ref_ring_buffer__content__projection(a: ring_buffer__ref) : us_rep =
  (a).ring_buffer__content

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

axiom is_empty__def_axiom :
  (forall r:us_rep [is_empty(r)]. ((is_empty(r) = true) ->
  (to_rep1(((r).us_split_fields1).rec__ring_buf__ring_buffer__length) = 0)))

axiom is_empty__def_axiom1 :
  (forall r:us_rep [is_empty(r)].
  ((to_rep1(((r).us_split_fields1).rec__ring_buf__ring_buffer__length) = 0) ->
  (is_empty(r) = true)))

logic attr__ATTRIBUTE_ADDRESS : int

logic temp_____aggregate_def_221 : int -> (int,integer) farray

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range2(temp___expr_18))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 0)

axiom def_axiom :
  (forall temp___223:int. (dynamic_invariant(temp___223, true, true, true,
  true) ->
  (forall temp___224:int.
  ((temp_____aggregate_def_221(temp___223)[temp___224]) = rliteral))))

predicate dynamic_invariant1(temp___expr_162: int, temp___is_init_158: bool,
  temp___skip_constant_159: bool, temp___do_toplevel_160: bool,
  temp___do_typ_inv_161: bool) = (((temp___is_init_158 = true) or
  (0 <= 9999)) -> in_range(temp___expr_162))

predicate dynamic_invariant2(temp___expr_169: int, temp___is_init_165: bool,
  temp___skip_constant_166: bool, temp___do_toplevel_167: bool,
  temp___do_typ_inv_168: bool) = (((temp___is_init_165 = true) or
  (0 <= 10000)) -> in_range1(temp___expr_169))

logic rliteral1 : length_type

axiom rliteral_axiom1 : (length_typeqtint(rliteral1) = 0)

logic rliteral2 : ar_index

axiom rliteral_axiom2 : (ar_indexqtint(rliteral2) = 0)

 (* File "ring_buf.ads", line 39, characters 0-0 *)
goal defqtvc :
  (forall r__split_fields:us_split_fields.
  (forall r__split_fields1:us_split_fields. ((r__split_fields1 = {
  rec__ring_buf__ring_buffer__data =
  (r__split_fields).rec__ring_buf__ring_buffer__data;
  rec__ring_buf__ring_buffer__first =
  (r__split_fields).rec__ring_buf__ring_buffer__first;
  rec__ring_buf__ring_buffer__length = rliteral1 }) ->
  (forall r__split_fields2:us_split_fields. ((r__split_fields2 = {
  rec__ring_buf__ring_buffer__data =
  (r__split_fields1).rec__ring_buf__ring_buffer__data;
  rec__ring_buf__ring_buffer__first = rliteral2;
  rec__ring_buf__ring_buffer__length =
  (r__split_fields1).rec__ring_buf__ring_buffer__length }) ->
  (forall r__split_fields3:us_split_fields. ((r__split_fields3 = {
  rec__ring_buf__ring_buffer__data = temp_____aggregate_def_221(0);
  rec__ring_buf__ring_buffer__first =
  (r__split_fields2).rec__ring_buf__ring_buffer__first;
  rec__ring_buf__ring_buffer__length =
  (r__split_fields2).rec__ring_buf__ring_buffer__length }) ->
  ((forall r__split_fields4:us_split_fields.
   is_empty__function_guard(is_empty({ us_split_fields1 = r__split_fields4
   }), { us_split_fields1 = r__split_fields4 })) ->
  (is_empty({ us_split_fields1 = r__split_fields3 }) = true)))))))))
