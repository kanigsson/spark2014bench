(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic x : int

logic attr__ATTRIBUTE_ADDRESS : int

logic y : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type ttB

logic ttBqtint : ttB -> int

axiom ttBqtaxiom : (forall i:ttB. ((- 128) <= ttBqtint(i)))

axiom ttBqtaxiom1 : (forall i:ttB. (ttBqtint(i) <= 127))

predicate in_range(x1: int) = (((- 128) <= x1) and (x1 <= 127))

function bool_eq(x1: int, y1: int) : bool =
  (if (x1 = y1) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : ttB, ttB -> bool

logic dummy : ttB

type ttB__ref = { ttB__content : ttB
}

function ttB__ref_ttB__content__projection(a: ttB__ref) : ttB =
  (a).ttB__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. (1 <= tqtint(i)))

axiom tqtaxiom1 : (forall i:t. (tqtint(i) <= 100))

predicate in_range1(x1: int) = ((1 <= x1) and (x1 <= 100))

function bool_eq1(x1: int, y1: int) : bool =
  (if (x1 = y1) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : t, t -> bool

logic dummy1 : t

type t__ref = { t__content : t
}

function t__ref_t__content__projection(a: t__ref) : t = (a).t__content

predicate dynamic_invariant(temp___expr_159: int, temp___is_init_155: bool,
  temp___skip_constant_156: bool, temp___do_toplevel_157: bool,
  temp___do_typ_inv_158: bool) = (((temp___is_init_155 = true) or
  (1 <= 100)) -> in_range1(temp___expr_159))

 (* File "over.ads", line 4, characters 0-0 *)
goal defqtvc :
  (forall res:int. (dynamic_invariant(x, true, false, true, true) ->
  (dynamic_invariant(y, true, false, true, true) -> (dynamic_invariant(res,
  false, false, true, true) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (50 <  x) then (if (50 <  y) then true else false) else false)) ->
  ((spark__branch = true) -> in_range((x + y)))))))))
