(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type ct

logic user_eq : ct, ct -> bool

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic dummy : ct

type ct__ref = { ct__content : ct
}

function ct__ref_ct__content__projection(a: ct__ref) : ct = (a).ct__content

type us_split_fields = { rec__pred_comp__r__c : ct
}

function us_split_fields_rec__pred_comp__r__c__projection(a: us_split_fields) : ct =
  (a).rec__pred_comp__r__c

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq(a: us_rep, b: us_rep) : bool =
  (if true then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic pred_comp__r__c__first__bit : int

logic pred_comp__r__c__last__bit : int

logic pred_comp__r__c__position : int

axiom pred_comp__r__c__first__bit_axiom : (0 <= pred_comp__r__c__first__bit)

axiom pred_comp__r__c__last__bit_axiom :
  (pred_comp__r__c__first__bit <  pred_comp__r__c__last__bit)

axiom pred_comp__r__c__position_axiom : (0 <= pred_comp__r__c__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type r__ref = { r__content : us_rep
}

function r__ref_r__content__projection(a: r__ref) : us_rep = (a).r__content

logic attr__ATTRIBUTE_ADDRESS : int

predicate dynamic_invariant(temp___expr_190: us_rep,
  temp___is_init_186: bool, temp___skip_constant_187: bool,
  temp___do_toplevel_188: bool, temp___do_typ_inv_189: bool) = false

logic c3b : ct

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant1(temp___expr_180: ct, temp___is_init_176: bool,
  temp___skip_constant_177: bool, temp___do_toplevel_178: bool,
  temp___do_typ_inv_179: bool) = (not (temp___do_toplevel_178 = true))

predicate dynamic_predicate(temp___184: ct) = false

 (* File "pred_comp.adb", line 1, characters 0-0 *)
goal defqtvc : (forall usf:ct. dynamic_predicate(usf))
