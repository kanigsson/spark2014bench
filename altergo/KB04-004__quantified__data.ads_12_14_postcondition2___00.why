(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type map__ref = { map__content : (int,bool) farray
}

logic slide : (int,bool) farray, int, int -> (int,bool) farray

axiom slide_eq :
  (forall a:(int,bool) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,bool) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq1(a: (int,bool) farray, a__first: int, a__last: int,
  b: (int,bool) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_int((a[temp___idx_154])) = to_int((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_int((a[temp___idx_154])) = to_int((b[((b__first - a__first) + temp___idx_154)]))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "data.ads", line 11, characters 0-0 *)
goal defqtvc :
  (forall x:(int,bool) farray.
  (forall x1:(int,bool) farray. ((x1 = x) ->
  (forall i:int. ((i = 1) ->
  (forall x2:(int,bool) farray.
  ((x2 = (x[i <- (if ((x[i]) = true) then false else true)])) ->
  (forall i1:int. ((i1 = 2) ->
  (forall x3:(int,bool) farray.
  ((x3 = (x2[i1 <- (if ((x2[i1]) = true) then false else true)])) ->
  (forall i2:int. ((i2 = 3) ->
  (forall x4:(int,bool) farray.
  ((x4 = (x3[i2 <- (if ((x3[i2]) = true) then false else true)])) ->
  (forall i3:int. ((i3 = 4) ->
  (forall x5:(int,bool) farray.
  ((x5 = (x4[i3 <- (if ((x4[i3]) = true) then false else true)])) ->
  (forall i4:int. ((i4 = 5) ->
  (forall x6:(int,bool) farray.
  ((x6 = (x5[i4 <- (if ((x5[i4]) = true) then false else true)])) ->
  (forall i5:int. ((i5 = 6) ->
  (forall x7:(int,bool) farray.
  ((x7 = (x6[i5 <- (if ((x6[i5]) = true) then false else true)])) ->
  (forall i6:int. ((i6 = 7) ->
  (forall x8:(int,bool) farray.
  ((x8 = (x7[i6 <- (if ((x7[i6]) = true) then false else true)])) ->
  (forall i7:int. ((i7 = 8) ->
  (forall x9:(int,bool) farray.
  ((x9 = (x8[i7 <- (if ((x8[i7]) = true) then false else true)])) ->
  (forall i8:int. ((i8 = 9) ->
  (forall x10:(int,bool) farray.
  ((x10 = (x9[i8 <- (if ((x9[i8]) = true) then false else true)])) ->
  (forall i9:int. ((i9 = 10) ->
  (forall x11:(int,bool) farray.
  ((x11 = (x10[i9 <- (if ((x10[i9]) = true) then false else true)])) ->
  (forall i10:int. (((1 <= i10) and (i10 <= 10)) -> (((x11[i10]) = true) ->
  (not ((x1[i10]) = true))))))))))))))))))))))))))))))))))))))))))))))))
