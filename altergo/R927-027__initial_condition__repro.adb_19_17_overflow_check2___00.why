(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic invariant__ : int, int -> bool

logic invariant____function_guard : bool, int, int -> prop

axiom invariant____def_axiom :
  (forall repro__b:int. forall repro__a:int [invariant__(repro__b,
  repro__a)]. ((invariant__(repro__b, repro__a) = true) -> (0 <= repro__a)))

axiom invariant____def_axiom1 :
  (forall repro__b:int. forall repro__a:int [invariant__(repro__b,
  repro__a)]. ((invariant__(repro__b, repro__a) = true) -> (repro__b <= 0)))

axiom invariant____def_axiom2 :
  (forall repro__b:int. forall repro__a:int [invariant__(repro__b,
  repro__a)]. ((invariant__(repro__b, repro__a) = true) ->
  ((repro__a + repro__b) = 0)))

axiom invariant____def_axiom3 :
  (forall repro__b:int. forall repro__a:int [invariant__(repro__b,
  repro__a)]. ((((0 <= repro__a) and (repro__b <= 0)) and
  ((repro__a + repro__b) = 0)) -> (invariant__(repro__b, repro__a) = true)))

 (* File "repro.ads", line 11, characters 0-0 *)
goal defqtvc :
  (forall a:int. forall b:int. (dynamic_invariant(a, true, false, true,
  true) -> (dynamic_invariant(b, true, false, true, true) ->
  ((forall a1:int. forall b1:int. invariant____function_guard(invariant__(b1,
   a1), b1, a1)) ->
  ((invariant__(b, a) = true) ->
  (forall spark__branch:bool.
  ((spark__branch = andb((if (a <  2147483647) then true else false),
  (if ((- 2147483648) <  b) then true else false))) ->
  ((spark__branch = true) -> in_range1((a + 1))))))))))
