(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type item

logic itemqtint : item -> int

axiom itemqtaxiom : (forall i:item. (0 <= itemqtint(i)))

axiom itemqtaxiom1 : (forall i:item. (itemqtint(i) <= 20))

predicate in_range2(x: int) = ((0 <= x) and (x <= 20))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : item, item -> bool

logic dummy1 : item

type item__ref = { item__content : item
}

function item__ref_item__content__projection(a: item__ref) : item =
  (a).item__content

function to_rep1(x: item) : int = itemqtint(x)

logic of_rep1 : int -> item

axiom inversion_axiom1 :
  (forall x:item [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:item [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,item) farray
}

logic slide : (int,item) farray, int, int -> (int,item) farray

axiom slide_eq :
  (forall a:(int,item) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,item) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,item) farray, a__first: int, a__last: int,
  b: (int,item) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,item) farray. forall b:(int,item) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,item) farray. forall b:(int,item) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,item) farray. forall b:(int,item) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,item) farray. forall b:(int,item) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)]))))))))

logic a__first : integer

logic a__last : integer

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic is_full : us_private -> bool

logic is_full__function_guard : bool, us_private -> prop

logic attr__ATTRIBUTE_ADDRESS2 : int

logic is_empty : us_private -> bool

logic is_empty__function_guard : bool, us_private -> prop

predicate dynamic_invariant(temp___expr_168: int, temp___is_init_164: bool,
  temp___skip_constant_165: bool, temp___do_toplevel_166: bool,
  temp___do_typ_inv_167: bool) = (((temp___is_init_164 = true) or
  (0 <= 20)) -> in_range2(temp___expr_168))

type array_range

logic array_rangeqtint : array_range -> int

axiom array_rangeqtaxiom : (forall i:array_range. (1 <= array_rangeqtint(i)))

axiom array_rangeqtaxiom1 :
  (forall i:array_range. (array_rangeqtint(i) <= 10000))

predicate in_range3(x: int) = ((1 <= x) and (x <= 10000))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : array_range, array_range -> bool

logic dummy2 : array_range

type array_range__ref = { array_range__content : array_range
}

function array_range__ref_array_range__content__projection(a: array_range__ref) : array_range =
  (a).array_range__content

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,item) farray; rt : t
}

function to_array(a: us_t) : (int,item) farray = (a).elts

function of_array(a: (int,item) farray, f: int, l: int) : us_t = { elts = a;
  rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

function length1(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type array_of_items__ref = { array_of_items__content : us_t
}

function array_of_items__ref_array_of_items__content__projection(a: array_of_items__ref) : us_t =
  (a).array_of_items__content

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate dynamic_invariant2(temp___expr_161: int, temp___is_init_157: bool,
  temp___skip_constant_158: bool, temp___do_toplevel_159: bool,
  temp___do_typ_inv_160: bool) = (((temp___is_init_157 = true) or
  (1 <= 10000)) -> in_range3(temp___expr_161))

predicate dynamic_invariant3(temp___expr_175: us_t, temp___is_init_171: bool,
  temp___skip_constant_172: bool, temp___do_toplevel_173: bool,
  temp___do_typ_inv_174: bool) = ((not (temp___skip_constant_172 = true)) ->
  dynamic_property(1, 10000, first1(temp___expr_175),
  last1(temp___expr_175)))

 (* File "reverser_using_a_stack_with_body.ads", line 9, characters 0-0 *)
goal defqtvc :
  (forall a:(int,item) farray. forall sp:us_private. (dynamic_property(1,
  10000, to_rep(a__first), to_rep(a__last)) ->
  (((0 <  length(to_rep(a__first), to_rep(a__last))) and
  (length(to_rep(a__first), to_rep(a__last)) <= 100)) ->
  (forall sp1:us_private.
  ((exists temp___192:int. ((to_rep(a__first) = temp___192) and
   (exists temp___193:int. ((to_rep(a__last) = temp___193) and
   (exists i:int. ((i = temp___192) and
   (if (andb((if (temp___192 <= i) then true else false),
   (if (i <= temp___193) then true else false)) = true) then (exists i1:int.
                                                             exists sp2:us_private.
                                                             (((to_rep(a__first) <= i1) and
                                                             (i1 <= to_rep(a__last))) and
                                                             (let o =
                                                             is_full(sp2)
                                                             : bool in
                                                             (is_full__function_guard(o,
                                                             sp2) and
                                                             (if (o = true) then (sp1 = sp2) else (
                                                             (exists o1:int.
                                                             (to_rep1((a[i1])) = o1)) and
                                                             (i1 = temp___193))))))) else (sp1 = sp)))))))) ->
  (forall temp___194:int. ((to_rep(a__first) = temp___194) ->
  (forall temp___195:int. ((to_rep(a__last) = temp___195) ->
  (forall j:int. ((j = temp___194) ->
  ((andb((if (temp___194 <= j) then true else false),
  (if (j <= temp___195) then true else false)) = true) ->
  (forall a1:(int,item) farray. forall sp2:us_private. forall j1:int.
  ((andb((if (forall temp___198:int. (((to_rep(a__first) <= temp___198) and
             (temp___198 <= to_rep(a__last))) ->
             (((temp___195 <  temp___198) or ((temp___198 <  temp___194) or
             (j1 <= temp___198))) -> ((a1[temp___198]) = (a[temp___198]))))) then true else false),
  (if ((to_rep(a__first) <= j1) and
  (j1 <= to_rep(a__last))) then true else false)) = true) -> (let o =
  is_empty(sp2) : bool in (is_empty__function_guard(o, sp2) ->
  ((not (o = true)) ->
  (forall o1:int. ((to_rep1((a1[j1])) = o1) ->
  ((forall sp3:us_private. is_empty__function_guard(is_empty(sp3), sp3)) ->
  (not (is_empty(sp2) = true))))))))))))))))))))))
