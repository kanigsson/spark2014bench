(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__po_t__p_intT__condition : bool;
rec__po_t__the_protected_int : integer
}

function us_split_fields_rec__po_t__p_intT__condition__projection(a: us_split_fields) : bool =
  (a).rec__po_t__p_intT__condition

function us_split_fields_rec__po_t__the_protected_int__projection(a: us_split_fields) : integer =
  (a).rec__po_t__the_protected_int

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic po_t__p_intT__condition__first__bit : int

logic po_t__p_intT__condition__last__bit : int

logic po_t__p_intT__condition__position : int

axiom po_t__p_intT__condition__first__bit_axiom :
  (0 <= po_t__p_intT__condition__first__bit)

axiom po_t__p_intT__condition__last__bit_axiom :
  (po_t__p_intT__condition__first__bit <  po_t__p_intT__condition__last__bit)

axiom po_t__p_intT__condition__position_axiom :
  (0 <= po_t__p_intT__condition__position)

logic user_eq1 : us_rep, us_rep -> bool

type p_intT__ref = { p_intT__content : us_rep
}

function p_intT__ref_p_intT__content__projection(a: p_intT__ref) : us_rep =
  (a).p_intT__content

logic get : us_rep -> int

logic get__function_guard : int, us_rep -> prop

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range1(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE1 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> bool

predicate default_initial_assumption(temp___expr_184: us_rep,
  temp___skip_top_level_185: bool) =
  ((((temp___expr_184).us_split_fields1).rec__po_t__p_intT__condition = of_int(1)) and
  (to_rep(((temp___expr_184).us_split_fields1).rec__po_t__the_protected_int) = 0))

axiom get__post_axiom :
  (forall self__:us_rep [get(self__)]. (let result = get(self__) : int in
  (get__function_guard(result, self__) -> dynamic_invariant(result, true,
  false, true, true))))

axiom get__def_axiom :
  (forall self__:us_rep [get(self__)].
  (get(self__) = (if (0 <= to_rep(((self__).us_split_fields1).rec__po_t__the_protected_int)) then to_rep(((self__).us_split_fields1).rec__po_t__the_protected_int) else (to_rep(((self__).us_split_fields1).rec__po_t__the_protected_int) + 10))))

logic attr__ATTRIBUTE_ADDRESS : int

type us_split_fields2 = { rec__po_t__hidden_poT__the_protected_int : integer;
rec__po_t__hidden_poT__switch : bool
}

function us_split_fields_rec__po_t__hidden_poT__the_protected_int__projection(a: us_split_fields2) : integer =
  (a).rec__po_t__hidden_poT__the_protected_int

function us_split_fields_rec__po_t__hidden_poT__switch__projection(a: us_split_fields2) : bool =
  (a).rec__po_t__hidden_poT__switch

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic po_t__hidden_poT__the_protected_int__first__bit : int

logic po_t__hidden_poT__the_protected_int__last__bit : int

logic po_t__hidden_poT__the_protected_int__position : int

axiom po_t__hidden_poT__the_protected_int__first__bit_axiom :
  (0 <= po_t__hidden_poT__the_protected_int__first__bit)

axiom po_t__hidden_poT__the_protected_int__last__bit_axiom :
  (po_t__hidden_poT__the_protected_int__first__bit <  po_t__hidden_poT__the_protected_int__last__bit)

axiom po_t__hidden_poT__the_protected_int__position_axiom :
  (0 <= po_t__hidden_poT__the_protected_int__position)

logic po_t__hidden_poT__switch__first__bit : int

logic po_t__hidden_poT__switch__last__bit : int

logic po_t__hidden_poT__switch__position : int

axiom po_t__hidden_poT__switch__first__bit_axiom :
  (0 <= po_t__hidden_poT__switch__first__bit)

axiom po_t__hidden_poT__switch__last__bit_axiom :
  (po_t__hidden_poT__switch__first__bit <  po_t__hidden_poT__switch__last__bit)

axiom po_t__hidden_poT__switch__position_axiom :
  (0 <= po_t__hidden_poT__switch__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

type hidden_poT__ref = { hidden_poT__content : us_rep1
}

function hidden_poT__ref_hidden_poT__content__projection(a: hidden_poT__ref) : us_rep1 =
  (a).hidden_poT__content

logic get1 : us_rep1 -> int

logic get__function_guard1 : int, us_rep1 -> prop

predicate default_initial_assumption1(temp___expr_191: us_rep1,
  temp___skip_top_level_192: bool) =
  ((to_rep(((temp___expr_191).us_split_fields3).rec__po_t__hidden_poT__the_protected_int) = 0) and
  (((temp___expr_191).us_split_fields3).rec__po_t__hidden_poT__switch = of_int(1)))

axiom get__post_axiom1 :
  (forall self__:us_rep1 [get1(self__)]. (let result = get1(self__) : int in
  (get__function_guard1(result, self__) -> dynamic_invariant(result, true,
  false, true, true))))

axiom get__def_axiom1 :
  (forall self__:us_rep1 [get1(self__)].
  (get1(self__) = (if (0 <= to_rep(((self__).us_split_fields3).rec__po_t__hidden_poT__the_protected_int)) then to_rep(((self__).us_split_fields3).rec__po_t__hidden_poT__the_protected_int) else (to_rep(((self__).us_split_fields3).rec__po_t__hidden_poT__the_protected_int) + 10))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic x : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic y : int

logic attr__ATTRIBUTE_ADDRESS3 : int

 (* File "po_t.ads", line 1, characters 0-0 *)
goal defqtvc :
  (forall p_int__split_fields:us_split_fields.
  forall hidden_po__split_fields:us_split_fields2.
  (default_initial_assumption({ us_split_fields1 = p_int__split_fields },
  false) -> (default_initial_assumption1({ us_split_fields3 =
  hidden_po__split_fields }, false) ->
  (forall us_self__compl:us_split_fields.
  (forall p_int__split_fields1:us_split_fields.
  ((p_int__split_fields1 = us_self__compl) ->
  (forall us_self__compl1:us_split_fields2.
  (forall hidden_po__split_fields1:us_split_fields2.
  ((hidden_po__split_fields1 = us_self__compl1) ->
  (forall p_int__split_fields2:us_split_fields. (let o = { us_split_fields1 =
  p_int__split_fields2 } : us_rep in (let po_t__B_1__x__assume = get(o)
  : int in ((get__function_guard(po_t__B_1__x__assume, o) and
  (dynamic_invariant(po_t__B_1__x__assume, true, false, true, true) and
  (po_t__B_1__x__assume = (if (0 <= to_rep((p_int__split_fields2).rec__po_t__the_protected_int)) then to_rep((p_int__split_fields2).rec__po_t__the_protected_int) else (to_rep((p_int__split_fields2).rec__po_t__the_protected_int) + 10))))) ->
  ((po_t__B_1__x__assume = x) -> (dynamic_invariant(x, true, false, true,
  true) ->
  (forall hidden_po__split_fields2:us_split_fields2. (let o1 = {
  us_split_fields3 = hidden_po__split_fields2 } : us_rep1 in
  (let po_t__B_1__y__assume = get1(o1) : int in
  ((get__function_guard1(po_t__B_1__y__assume, o1) and
  (dynamic_invariant(po_t__B_1__y__assume, true, false, true, true) and
  (po_t__B_1__y__assume = (if (0 <= to_rep((hidden_po__split_fields2).rec__po_t__hidden_poT__the_protected_int)) then to_rep((hidden_po__split_fields2).rec__po_t__hidden_poT__the_protected_int) else (to_rep((hidden_po__split_fields2).rec__po_t__hidden_poT__the_protected_int) + 10))))) ->
  ((po_t__B_1__y__assume = y) -> (dynamic_invariant(y, true, false, true,
  true) -> (x = y))))))))))))))))))))))
