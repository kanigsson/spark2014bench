(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type element

logic elementqtint : element -> int

axiom elementqtaxiom : (forall i:element. (0 <= elementqtint(i)))

axiom elementqtaxiom1 : (forall i:element. (elementqtint(i) <= 9))

predicate in_range(x: int) = ((0 <= x) and (x <= 9))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : element, element -> bool

logic dummy : element

type element__ref = { element__content : element
}

function element__ref_element__content__projection(a: element__ref) : element =
  (a).element__content

function to_rep(x: element) : int = elementqtint(x)

logic of_rep : int -> element

axiom inversion_axiom :
  (forall x:element [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:element [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__this_parent__object__a : element; rec__ext__ :
us_private
}

function us_split_fields_rec__this_parent__object__a__projection(a: us_split_fields) : element =
  (a).rec__this_parent__object__a

function us_split_fields_rec__ext____projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__projection(a: us_rep) : int = (a).attr__tag

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__this_parent__object__a) = to_rep(((b).us_split_fields1).rec__this_parent__object__a)) then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic this_parent__object__a__first__bit : int

logic this_parent__object__a__last__bit : int

logic this_parent__object__a__position : int

axiom this_parent__object__a__first__bit_axiom :
  (0 <= this_parent__object__a__first__bit)

axiom this_parent__object__a__last__bit_axiom :
  (this_parent__object__a__first__bit <  this_parent__object__a__last__bit)

axiom this_parent__object__a__position_axiom :
  (0 <= this_parent__object__a__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type object__ref = { object__content : us_rep
}

function object__ref_object__content__projection(a: object__ref) : us_rep =
  (a).object__content

type us_split_fields2 = { rec__this_instance__object__b : element;
rec__this_parent__object__a1 : element; rec__ext__1 : us_private
}

function us_split_fields_rec__this_instance__object__b__projection(a: us_split_fields2) : element =
  (a).rec__this_instance__object__b

function us_split_fields_rec__this_parent__object__a__2__projection(a: us_split_fields2) : element =
  (a).rec__this_parent__object__a1

function us_split_fields_rec__ext____2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_attr__tag__2__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : element, us_private -> us_private

logic extract__this_instance__object__b : us_private -> element

axiom extract__this_instance__object__b__conv :
  (forall this_instance__object__b:element.
  (forall rec__ext__2:us_private.
  (extract__this_instance__object__b(hide_ext__(this_instance__object__b,
  rec__ext__2)) = this_instance__object__b)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__this_parent__object__a =
  ((a).us_split_fields3).rec__this_parent__object__a1; rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__this_instance__object__b,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__this_instance__object__b =
  extract__this_instance__object__b(((r).us_split_fields1).rec__ext__);
  rec__this_parent__object__a1 =
  ((r).us_split_fields1).rec__this_parent__object__a; rec__ext__1 =
  extract__ext__(((r).us_split_fields1).rec__ext__) }; attr__tag1 =
  (r).attr__tag }

function bool_eq2(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep(((a).us_split_fields3).rec__this_instance__object__b) = to_rep(((b).us_split_fields3).rec__this_instance__object__b)) and
  (to_rep(((a).us_split_fields3).rec__this_parent__object__a1) = to_rep(((b).us_split_fields3).rec__this_parent__object__a1))) then true else false)

logic us_tag1 : int

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic this_instance__object__b__first__bit : int

logic this_instance__object__b__last__bit : int

logic this_instance__object__b__position : int

axiom this_instance__object__b__first__bit_axiom :
  (0 <= this_instance__object__b__first__bit)

axiom this_instance__object__b__last__bit_axiom :
  (this_instance__object__b__first__bit <  this_instance__object__b__last__bit)

axiom this_instance__object__b__position_axiom :
  (0 <= this_instance__object__b__position)

logic this_parent__object__a__first__bit1 : int

logic this_parent__object__a__last__bit1 : int

logic this_parent__object__a__position1 : int

axiom this_parent__object__a__first__bit_axiom1 :
  (0 <= this_parent__object__a__first__bit1)

axiom this_parent__object__a__last__bit_axiom1 :
  (this_parent__object__a__first__bit1 <  this_parent__object__a__last__bit1)

axiom this_parent__object__a__position_axiom1 :
  (0 <= this_parent__object__a__position1)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy2 : us_rep1

type object__ref1 = { object__content1 : us_rep1
}

function object__ref_object__content__2__projection(a: object__ref1) : us_rep1 =
  (a).object__content1

predicate default_initial_assumption(temp___expr_183: us_rep1,
  temp___skip_top_level_184: bool) = ((temp___expr_183).attr__tag1 = us_tag1)

logic this__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant(temp___expr_167: int, temp___is_init_163: bool,
  temp___skip_constant_164: bool, temp___do_toplevel_165: bool,
  temp___do_typ_inv_166: bool) = (((temp___is_init_163 = true) or
  (0 <= 9)) -> in_range(temp___expr_167))

predicate default_initial_assumption1(temp___expr_175: us_rep,
  temp___skip_top_level_176: bool) = ((temp___expr_175).attr__tag = us_tag)

 (* File "generic_parent-child_instance.ads", line 19, characters 0-0 *)
goal defqtvc :
  (forall this__split_fields:us_split_fields2.
  (forall step:int. ((step = 1) -> (dynamic_invariant(step, true, false,
  true, true) ->
  (forall spark__branch:bool. forall this__split_fields1:us_split_fields2.
  ((exists o:int.
   ((to_rep((this__split_fields).rec__this_parent__object__a1) = o) and
   ((spark__branch = (if (o <= (9 - step)) then true else false)) and
   (if (spark__branch = true) then (exists o1:int.
                                   ((to_rep((this__split_fields).rec__this_parent__object__a1) = o1) and
                                   (let o2 = (o1 + step) : int in
                                   (in_range(o2) and
                                   (exists o3:element. ((to_rep(o3) = o2) and
                                   (this__split_fields1 = {
                                   rec__this_instance__object__b =
                                   (this__split_fields).rec__this_instance__object__b;
                                   rec__this_parent__object__a1 = o3;
                                   rec__ext__1 =
                                   (this__split_fields).rec__ext__1 }))))))) else (this__split_fields1 = this__split_fields))))) ->
  (forall o:int.
  ((to_rep((this__split_fields1).rec__this_instance__object__b) = o) ->
  (forall spark__branch1:bool.
  ((spark__branch1 = (if ((0 + step) <= o) then true else false)) ->
  ((spark__branch1 = true) ->
  (forall o1:int.
  ((to_rep((this__split_fields1).rec__this_instance__object__b) = o1) ->
  in_range((o1 - step)))))))))))))))
