(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_main_type

type us_rep = { rec__binary_search__tree_acc__is_null_pointer : bool;
rec__binary_search__tree_acc__pointer_address : int;
rec__binary_search__tree_acc__pointer_value_abstr : us_main_type
}

function us_rep_rec__binary_search__tree_acc__is_null_pointer__projection(a: us_rep) : bool =
  (a).rec__binary_search__tree_acc__is_null_pointer

function us_rep_rec__binary_search__tree_acc__pointer_address__projection(a: us_rep) : int =
  (a).rec__binary_search__tree_acc__pointer_address

function us_rep_rec__binary_search__tree_acc__pointer_value_abstr__projection(a: us_rep) : us_main_type =
  (a).rec__binary_search__tree_acc__pointer_value_abstr

type us_rep__ref = { us_rep__content : us_rep
}

function us_rep__ref___rep__content__projection(a: us_rep__ref) : us_rep =
  (a).us_rep__content

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if (((a).rec__binary_search__tree_acc__is_null_pointer = (b).rec__binary_search__tree_acc__is_null_pointer) and
  ((not ((a).rec__binary_search__tree_acc__is_null_pointer = true)) ->
  (((a).rec__binary_search__tree_acc__pointer_address = (b).rec__binary_search__tree_acc__pointer_address) and
  ((a).rec__binary_search__tree_acc__pointer_value_abstr = (b).rec__binary_search__tree_acc__pointer_value_abstr)))) then true else false)

logic dummy1 : us_rep

type t2b__ref = { t2b__content : us_rep
}

function t2b__ref_t2b__content__projection(a: t2b__ref) : us_rep =
  (a).t2b__content

logic m_contains : us_rep, int -> bool

logic m_contains__function_guard : bool, us_rep, int -> prop

logic dummy2 : us_rep

type tree_acc__ref = { tree_acc__content : us_rep
}

function tree_acc__ref_tree_acc__content__projection(a: tree_acc__ref) : us_rep =
  (a).tree_acc__content

type us_split_fields = { rec__binary_search__tree__data : integer;
rec__binary_search__tree__left : us_rep; rec__binary_search__tree__right :
us_rep
}

function us_split_fields_rec__binary_search__tree__data__projection(a: us_split_fields) : integer =
  (a).rec__binary_search__tree__data

function us_split_fields_rec__binary_search__tree__left__projection(a: us_split_fields) : us_rep =
  (a).rec__binary_search__tree__left

function us_split_fields_rec__binary_search__tree__right__projection(a: us_split_fields) : us_rep =
  (a).rec__binary_search__tree__right

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

function bool_eq3(a: us_rep1, b: us_rep1) : bool =
  (if (((to_rep(((a).us_split_fields1).rec__binary_search__tree__data) = to_rep(((b).us_split_fields1).rec__binary_search__tree__data)) and
  (bool_eq2(((a).us_split_fields1).rec__binary_search__tree__left,
  ((b).us_split_fields1).rec__binary_search__tree__left) = true)) and
  (bool_eq2(((a).us_split_fields1).rec__binary_search__tree__right,
  ((b).us_split_fields1).rec__binary_search__tree__right) = true)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic binary_search__tree__data__first__bit : int

logic binary_search__tree__data__last__bit : int

logic binary_search__tree__data__position : int

axiom binary_search__tree__data__first__bit_axiom :
  (0 <= binary_search__tree__data__first__bit)

axiom binary_search__tree__data__last__bit_axiom :
  (binary_search__tree__data__first__bit <  binary_search__tree__data__last__bit)

axiom binary_search__tree__data__position_axiom :
  (0 <= binary_search__tree__data__position)

logic binary_search__tree__left__first__bit : int

logic binary_search__tree__left__last__bit : int

logic binary_search__tree__left__position : int

axiom binary_search__tree__left__first__bit_axiom :
  (0 <= binary_search__tree__left__first__bit)

axiom binary_search__tree__left__last__bit_axiom :
  (binary_search__tree__left__first__bit <  binary_search__tree__left__last__bit)

axiom binary_search__tree__left__position_axiom :
  (0 <= binary_search__tree__left__position)

logic binary_search__tree__right__first__bit : int

logic binary_search__tree__right__last__bit : int

logic binary_search__tree__right__position : int

axiom binary_search__tree__right__first__bit_axiom :
  (0 <= binary_search__tree__right__first__bit)

axiom binary_search__tree__right__last__bit_axiom :
  (binary_search__tree__right__first__bit <  binary_search__tree__right__last__bit)

axiom binary_search__tree__right__position_axiom :
  (0 <= binary_search__tree__right__position)

logic user_eq1 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type tree__ref = { tree__content : us_rep1
}

function tree__ref_tree__content__projection(a: tree__ref) : us_rep1 =
  (a).tree__content

logic us_open : us_main_type -> us_rep1

logic us_close : us_rep1 -> us_main_type

axiom close_open :
  (forall x:us_main_type [us_open(x)]. (us_close(us_open(x)) = x))

axiom open_close :
  (forall x:us_rep1 [us_close(x)]. (us_open(us_close(x)) = x))

function rec__binary_search__tree_acc__pointer_value(a: us_rep) : us_rep1 =
  us_open((a).rec__binary_search__tree_acc__pointer_value_abstr)

predicate rec__binary_search__tree_acc__pointer_value__pred(a: us_rep) =
  (not ((a).rec__binary_search__tree_acc__is_null_pointer = true))

logic us_null_pointer : us_rep

axiom us_null_pointer__def_axiom :
  ((us_null_pointer).rec__binary_search__tree_acc__is_null_pointer = true)

axiom m_contains__def_axiom :
  (forall t:us_rep.
  (forall v:int [m_contains(t, v)]. ((m_contains(t, v) = true) ->
  (not (bool_eq2(t, us_null_pointer) = true)))))

axiom m_contains__def_axiom1 :
  (forall t:us_rep.
  (forall v:int [m_contains(t, v)]. ((m_contains(t, v) = true) ->
  ((not (bool_eq2(t, us_null_pointer) = true)) ->
  (((v = to_rep(((rec__binary_search__tree_acc__pointer_value(t)).us_split_fields1).rec__binary_search__tree__data)) or
  (m_contains(((rec__binary_search__tree_acc__pointer_value(t)).us_split_fields1).rec__binary_search__tree__left,
  v) = true)) or
  (m_contains(((rec__binary_search__tree_acc__pointer_value(t)).us_split_fields1).rec__binary_search__tree__right,
  v) = true))))))

axiom m_contains__def_axiom2 :
  (forall t:us_rep.
  (forall v:int [m_contains(t, v)]. (((not (bool_eq2(t,
  us_null_pointer) = true)) and
  (((v = to_rep(((rec__binary_search__tree_acc__pointer_value(t)).us_split_fields1).rec__binary_search__tree__data)) or
  (m_contains(((rec__binary_search__tree_acc__pointer_value(t)).us_split_fields1).rec__binary_search__tree__left,
  v) = true)) or
  (m_contains(((rec__binary_search__tree_acc__pointer_value(t)).us_split_fields1).rec__binary_search__tree__right,
  v) = true))) -> (m_contains(t, v) = true))))

logic v : int

logic attr__ATTRIBUTE_ADDRESS : int

logic dummy4 : us_rep

type t3b__ref = { t3b__content : us_rep
}

function t3b__ref_t3b__content__projection(a: t3b__ref) : us_rep =
  (a).t3b__content

logic t : us_rep

logic attr__ATTRIBUTE_ADDRESS1 : int

logic olt : int, us_rep -> bool

logic olt__function_guard : bool, int, us_rep -> prop

predicate default_initial_assumption(temp___expr_212: us_rep,
  temp___skip_top_level_213: bool) =
  ((temp___expr_212).rec__binary_search__tree_acc__is_null_pointer = true)

predicate default_initial_assumption1(temp___expr_219: us_rep1,
  temp___skip_top_level_220: bool) =
  (((((temp___expr_219).us_split_fields1).rec__binary_search__tree__left).rec__binary_search__tree_acc__is_null_pointer = true) and
  ((((temp___expr_219).us_split_fields1).rec__binary_search__tree__right).rec__binary_search__tree_acc__is_null_pointer = true))

 (* File "binary_search.adb", line 26, characters 0-0 *)
goal defqtvc : (dynamic_invariant(v, true, false, true, true) ->
  (forall binary_search__Olt__result:bool.
  ((exists spark__branch:bool. ((spark__branch = bool_eq2(t,
   us_null_pointer)) and
   (if (spark__branch = true) then (binary_search__Olt__result = of_int(1)) else (
   (forall i:int. ((((- 2147483648) <= i) and (i <= 2147483647)) ->
   ((m_contains(((rec__binary_search__tree_acc__pointer_value(t)).us_split_fields1).rec__binary_search__tree__left,
   i) = true) -> (m_contains(t, i) = true)))) and
   ((forall i:int. ((((- 2147483648) <= i) and (i <= 2147483647)) ->
    ((m_contains(((rec__binary_search__tree_acc__pointer_value(t)).us_split_fields1).rec__binary_search__tree__right,
    i) = true) -> (m_contains(t, i) = true)))) and
   (let o =
   ((rec__binary_search__tree_acc__pointer_value(t)).us_split_fields1).rec__binary_search__tree__right
   : us_rep in (let o1 = v : int in (let o2 = olt(o1, o) : bool in
   ((((o2 = true) <->
   (forall i:int. ((((- 2147483648) <= i) and (i <= 2147483647)) ->
   ((m_contains(o, i) = true) -> (o1 <  i))))) and ((o2 = true) <->
   ((bool_eq2(o, us_null_pointer) = true) or
   (((o1 <  to_rep(((rec__binary_search__tree_acc__pointer_value(o)).us_split_fields1).rec__binary_search__tree__data)) and
   (olt(o1,
   ((rec__binary_search__tree_acc__pointer_value(o)).us_split_fields1).rec__binary_search__tree__left) = true)) and
   (olt(o1,
   ((rec__binary_search__tree_acc__pointer_value(o)).us_split_fields1).rec__binary_search__tree__right) = true))))) and
   (let o3 =
   ((rec__binary_search__tree_acc__pointer_value(t)).us_split_fields1).rec__binary_search__tree__left
   : us_rep in (let o4 = v : int in (let o5 = olt(o4, o3) : bool in
   ((((o5 = true) <->
   (forall i:int. ((((- 2147483648) <= i) and (i <= 2147483647)) ->
   ((m_contains(o3, i) = true) -> (o4 <  i))))) and ((o5 = true) <->
   ((bool_eq2(o3, us_null_pointer) = true) or
   (((o4 <  to_rep(((rec__binary_search__tree_acc__pointer_value(o3)).us_split_fields1).rec__binary_search__tree__data)) and
   (olt(o4,
   ((rec__binary_search__tree_acc__pointer_value(o3)).us_split_fields1).rec__binary_search__tree__left) = true)) and
   (olt(o4,
   ((rec__binary_search__tree_acc__pointer_value(o3)).us_split_fields1).rec__binary_search__tree__right) = true))))) and
   (exists o6:int.
   ((to_rep(((rec__binary_search__tree_acc__pointer_value(t)).us_split_fields1).rec__binary_search__tree__data) = o6) and
   (binary_search__Olt__result = andb(andb((if (v <  o6) then true else false),
   o5), o2))))))))))))))))) ->
  ((forall i:int. ((((- 2147483648) <= i) and (i <= 2147483647)) ->
   ((m_contains(t, i) = true) -> (v <  i)))) ->
  (binary_search__Olt__result = true)))))
