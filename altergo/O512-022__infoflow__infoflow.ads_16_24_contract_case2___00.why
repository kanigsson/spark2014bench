(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type character

predicate in_range1(x: int) = ((0 <= x) and (x <= 255))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : character, character -> bool

logic dummy : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

predicate dynamic_invariant(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range1(temp___expr_74))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic attr__ATTRIBUTE_ADDRESS15 : int

logic attr__ATTRIBUTE_ADDRESS16 : int

logic attr__ATTRIBUTE_ADDRESS17 : int

logic attr__ATTRIBUTE_ADDRESS18 : int

logic attr__ATTRIBUTE_ADDRESS19 : int

 (* File "infoflow.ads", line 8, characters 0-0 *)
goal defqtvc :
  (forall in_0_rdy_v1:bool. forall in_1_rdy_v1:bool.
  forall out_0_rdy_v1:bool. forall out_1_rdy_v1:bool. forall in_0_dat_v1:int.
  forall in_1_dat_v1:int. forall out_0_dat_v1:int. forall out_1_dat_v1:int.
  forall in_0_rdy_v2:bool. forall in_1_rdy_v2:bool. forall out_0_rdy_v2:bool.
  forall out_1_rdy_v2:bool. forall in_0_dat_v2:int. forall in_1_dat_v2:int.
  forall out_0_dat_v2:int. forall out_1_dat_v2:int. forall data_0_v1:int.
  forall data_1_v1:int. forall data_0_v2:int. forall data_1_v2:int.
  (dynamic_invariant(in_0_dat_v1, true, false, true, true) ->
  (dynamic_invariant(in_1_dat_v1, true, false, true, true) ->
  (dynamic_invariant(out_0_dat_v1, true, false, true, true) ->
  (dynamic_invariant(out_1_dat_v1, true, false, true, true) ->
  (dynamic_invariant(in_0_dat_v2, true, false, true, true) ->
  (dynamic_invariant(in_1_dat_v2, true, false, true, true) ->
  (dynamic_invariant(out_0_dat_v2, true, false, true, true) ->
  (dynamic_invariant(out_1_dat_v2, true, false, true, true) ->
  (forall spark__branch:bool. forall out_0_dat_v11:int.
  ((dynamic_invariant(data_0_v1, false, false, true, true) and
  (dynamic_invariant(data_1_v1, false, false, true, true) and
  (exists spark__branch1:bool. (((spark__branch1 = andb(in_0_rdy_v1,
  (if (out_1_rdy_v1 = true) then false else true))) and
  ((not (spark__branch1 = true)) or
  (exists data_0_v11:int. (data_0_v11 = in_0_dat_v1)))) and
  ((spark__branch = andb(in_1_rdy_v1,
  (if (out_0_rdy_v1 = true) then false else true))) and
  (if (spark__branch = true) then (exists data_1_v11:int.
                                  ((data_1_v11 = in_1_dat_v1) and
                                  (out_0_dat_v11 = data_1_v11))) else (out_0_dat_v11 = out_0_dat_v1))))))) ->
  (forall out_0_dat_v21:int. ((dynamic_invariant(data_0_v2, false, false,
  true, true) and (dynamic_invariant(data_1_v2, false, false, true, true) and
  (exists spark__branch1:bool. (((spark__branch1 = andb(in_0_rdy_v2,
  (if (out_1_rdy_v2 = true) then false else true))) and
  ((not (spark__branch1 = true)) or
  (exists data_0_v21:int. (data_0_v21 = in_0_dat_v2)))) and
  (exists spark__branch2:bool. ((spark__branch2 = andb(in_1_rdy_v2,
  (if (out_0_rdy_v2 = true) then false else true))) and
  (if (spark__branch2 = true) then (exists data_1_v21:int.
                                   ((data_1_v21 = in_1_dat_v2) and
                                   (out_0_dat_v21 = data_1_v21))) else (out_0_dat_v21 = out_0_dat_v2)))))))) ->
  (((andb(andb(bool_eq(in_1_dat_v1, in_1_dat_v2), andb(in_1_rdy_v1,
  notb(out_0_rdy_v1))), andb(in_1_rdy_v2, notb(out_0_rdy_v2))) = true) ->
  (out_0_dat_v11 = out_0_dat_v21)) -> ((andb(andb(bool_eq(out_0_dat_v1,
  out_0_dat_v2), orb(notb(in_1_rdy_v1), out_0_rdy_v1)),
  orb(notb(in_1_rdy_v2), out_0_rdy_v2)) = true) ->
  (out_0_dat_v11 = out_0_dat_v21))))))))))))))))
