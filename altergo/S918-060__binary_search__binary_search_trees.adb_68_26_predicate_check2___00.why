(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep1(x: natural) : int = naturalqtint(x)

logic of_rep1 : int -> natural

axiom inversion_axiom1 :
  (forall x:natural [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:natural [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_main_type

type us_rep = { rec__binary_search_trees__node_access__is_null_pointer :
bool; rec__binary_search_trees__node_access__pointer_address : int;
rec__binary_search_trees__node_access__pointer_value_abstr : us_main_type
}

function us_rep_rec__binary_search_trees__node_access__is_null_pointer__projection(a: us_rep) : bool =
  (a).rec__binary_search_trees__node_access__is_null_pointer

function us_rep_rec__binary_search_trees__node_access__pointer_address__projection(a: us_rep) : int =
  (a).rec__binary_search_trees__node_access__pointer_address

function us_rep_rec__binary_search_trees__node_access__pointer_value_abstr__projection(a: us_rep) : us_main_type =
  (a).rec__binary_search_trees__node_access__pointer_value_abstr

type us_rep__ref = { us_rep__content : us_rep
}

function us_rep__ref___rep__content__projection(a: us_rep__ref) : us_rep =
  (a).us_rep__content

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if (((a).rec__binary_search_trees__node_access__is_null_pointer = (b).rec__binary_search_trees__node_access__is_null_pointer) and
  ((not ((a).rec__binary_search_trees__node_access__is_null_pointer = true)) ->
  (((a).rec__binary_search_trees__node_access__pointer_address = (b).rec__binary_search_trees__node_access__pointer_address) and
  ((a).rec__binary_search_trees__node_access__pointer_value_abstr = (b).rec__binary_search_trees__node_access__pointer_value_abstr)))) then true else false)

logic dummy2 : us_rep

type node_access__ref = { node_access__content : us_rep
}

function node_access__ref_node_access__content__projection(a: node_access__ref) : us_rep =
  (a).node_access__content

type us_split_fields = { rec__binary_search_trees__binary_search_tree__root :
us_rep; rec__binary_search_trees__binary_search_tree__size : natural
}

function us_split_fields_rec__binary_search_trees__binary_search_tree__root__projection(a: us_split_fields) : us_rep =
  (a).rec__binary_search_trees__binary_search_tree__root

function us_split_fields_rec__binary_search_trees__binary_search_tree__size__projection(a: us_split_fields) : natural =
  (a).rec__binary_search_trees__binary_search_tree__size

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

function bool_eq3(a: us_rep1, b: us_rep1) : bool =
  (if ((bool_eq2(((a).us_split_fields1).rec__binary_search_trees__binary_search_tree__root,
  ((b).us_split_fields1).rec__binary_search_trees__binary_search_tree__root) = true) and
  (to_rep1(((a).us_split_fields1).rec__binary_search_trees__binary_search_tree__size) = to_rep1(((b).us_split_fields1).rec__binary_search_trees__binary_search_tree__size))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic binary_search_trees__binary_search_tree__root__first__bit : int

logic binary_search_trees__binary_search_tree__root__last__bit : int

logic binary_search_trees__binary_search_tree__root__position : int

axiom binary_search_trees__binary_search_tree__root__first__bit_axiom :
  (0 <= binary_search_trees__binary_search_tree__root__first__bit)

axiom binary_search_trees__binary_search_tree__root__last__bit_axiom :
  (binary_search_trees__binary_search_tree__root__first__bit <  binary_search_trees__binary_search_tree__root__last__bit)

axiom binary_search_trees__binary_search_tree__root__position_axiom :
  (0 <= binary_search_trees__binary_search_tree__root__position)

logic binary_search_trees__binary_search_tree__size__first__bit : int

logic binary_search_trees__binary_search_tree__size__last__bit : int

logic binary_search_trees__binary_search_tree__size__position : int

axiom binary_search_trees__binary_search_tree__size__first__bit_axiom :
  (0 <= binary_search_trees__binary_search_tree__size__first__bit)

axiom binary_search_trees__binary_search_tree__size__last__bit_axiom :
  (binary_search_trees__binary_search_tree__size__first__bit <  binary_search_trees__binary_search_tree__size__last__bit)

axiom binary_search_trees__binary_search_tree__size__position_axiom :
  (0 <= binary_search_trees__binary_search_tree__size__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type binary_search_tree__ref = { binary_search_tree__content : us_rep1
}

function binary_search_tree__ref_binary_search_tree__content__projection(a: binary_search_tree__ref) : us_rep1 =
  (a).binary_search_tree__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq4(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range2(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE2 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> bool

type us_split_fields2 = { rec__binary_search_trees__tree_node__data :
integer; rec__binary_search_trees__tree_node__left : us_rep;
rec__binary_search_trees__tree_node__right : us_rep
}

function us_split_fields_rec__binary_search_trees__tree_node__data__projection(a: us_split_fields2) : integer =
  (a).rec__binary_search_trees__tree_node__data

function us_split_fields_rec__binary_search_trees__tree_node__left__projection(a: us_split_fields2) : us_rep =
  (a).rec__binary_search_trees__tree_node__left

function us_split_fields_rec__binary_search_trees__tree_node__right__projection(a: us_split_fields2) : us_rep =
  (a).rec__binary_search_trees__tree_node__right

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep2 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__2__projection(a: us_rep2) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq5(a: us_rep2, b: us_rep2) : bool =
  (if (((to_rep(((a).us_split_fields3).rec__binary_search_trees__tree_node__data) = to_rep(((b).us_split_fields3).rec__binary_search_trees__tree_node__data)) and
  (bool_eq2(((a).us_split_fields3).rec__binary_search_trees__tree_node__left,
  ((b).us_split_fields3).rec__binary_search_trees__tree_node__left) = true)) and
  (bool_eq2(((a).us_split_fields3).rec__binary_search_trees__tree_node__right,
  ((b).us_split_fields3).rec__binary_search_trees__tree_node__right) = true)) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic binary_search_trees__tree_node__data__first__bit : int

logic binary_search_trees__tree_node__data__last__bit : int

logic binary_search_trees__tree_node__data__position : int

axiom binary_search_trees__tree_node__data__first__bit_axiom :
  (0 <= binary_search_trees__tree_node__data__first__bit)

axiom binary_search_trees__tree_node__data__last__bit_axiom :
  (binary_search_trees__tree_node__data__first__bit <  binary_search_trees__tree_node__data__last__bit)

axiom binary_search_trees__tree_node__data__position_axiom :
  (0 <= binary_search_trees__tree_node__data__position)

logic binary_search_trees__tree_node__left__first__bit : int

logic binary_search_trees__tree_node__left__last__bit : int

logic binary_search_trees__tree_node__left__position : int

axiom binary_search_trees__tree_node__left__first__bit_axiom :
  (0 <= binary_search_trees__tree_node__left__first__bit)

axiom binary_search_trees__tree_node__left__last__bit_axiom :
  (binary_search_trees__tree_node__left__first__bit <  binary_search_trees__tree_node__left__last__bit)

axiom binary_search_trees__tree_node__left__position_axiom :
  (0 <= binary_search_trees__tree_node__left__position)

logic binary_search_trees__tree_node__right__first__bit : int

logic binary_search_trees__tree_node__right__last__bit : int

logic binary_search_trees__tree_node__right__position : int

axiom binary_search_trees__tree_node__right__first__bit_axiom :
  (0 <= binary_search_trees__tree_node__right__first__bit)

axiom binary_search_trees__tree_node__right__last__bit_axiom :
  (binary_search_trees__tree_node__right__first__bit <  binary_search_trees__tree_node__right__last__bit)

axiom binary_search_trees__tree_node__right__position_axiom :
  (0 <= binary_search_trees__tree_node__right__position)

logic user_eq3 : us_rep2, us_rep2 -> bool

logic dummy4 : us_rep2

type tree_node__ref = { tree_node__content : us_rep2
}

function tree_node__ref_tree_node__content__projection(a: tree_node__ref) : us_rep2 =
  (a).tree_node__content

logic us_open : us_main_type -> us_rep2

logic us_close : us_rep2 -> us_main_type

axiom close_open :
  (forall x:us_main_type [us_open(x)]. (us_close(us_open(x)) = x))

axiom open_close :
  (forall x:us_rep2 [us_close(x)]. (us_open(us_close(x)) = x))

function rec__binary_search_trees__node_access__pointer_value(a: us_rep) : us_rep2 =
  us_open((a).rec__binary_search_trees__node_access__pointer_value_abstr)

predicate rec__binary_search_trees__node_access__pointer_value__pred(a: us_rep) =
  (not ((a).rec__binary_search_trees__node_access__is_null_pointer = true))

logic us_null_pointer : us_rep

axiom us_null_pointer__def_axiom :
  ((us_null_pointer).rec__binary_search_trees__node_access__is_null_pointer = true)

predicate dynamic_invariant1(temp___expr_171: us_rep1,
  temp___is_init_167: bool, temp___skip_constant_168: bool,
  temp___do_toplevel_169: bool, temp___do_typ_inv_170: bool) =
  ((temp___do_toplevel_169 = true) ->
  ((to_rep1(((temp___expr_171).us_split_fields1).rec__binary_search_trees__binary_search_tree__size) = 0) <->
  (bool_eq2(((temp___expr_171).us_split_fields1).rec__binary_search_trees__binary_search_tree__root,
  us_null_pointer) = true)))

predicate default_initial_assumption(temp___expr_173: us_rep1,
  temp___skip_top_level_174: bool) =
  ((((temp___expr_173).us_split_fields1).rec__binary_search_trees__binary_search_tree__root = us_null_pointer) and
  (to_rep1(((temp___expr_173).us_split_fields1).rec__binary_search_trees__binary_search_tree__size) = 0))

predicate dynamic_predicate(temp___175: us_rep1) =
  ((to_rep1(((temp___175).us_split_fields1).rec__binary_search_trees__binary_search_tree__size) = 0) <->
  (bool_eq2(((temp___175).us_split_fields1).rec__binary_search_trees__binary_search_tree__root,
  us_null_pointer) = true))

logic attr__ATTRIBUTE_ADDRESS : int

logic item : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic size : us_rep1 -> int

logic size__function_guard : int, us_rep1 -> prop

predicate dynamic_invariant2(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

axiom size__post_axiom :
  (forall tree:us_rep1 [size(tree)]. (dynamic_invariant1(tree, true, true,
  true, true) -> (let result = size(tree) : int in
  (size__function_guard(result, tree) -> dynamic_invariant2(result, true,
  false, true, true)))))

axiom size__def_axiom :
  (forall tree:us_rep1 [size(tree)]. (dynamic_invariant1(tree, true, true,
  true, true) ->
  (size(tree) = to_rep1(((tree).us_split_fields1).rec__binary_search_trees__binary_search_tree__size))))

logic i3s : us_rep1

logic attr__ATTRIBUTE_ADDRESS2 : int

logic dummy5 : us_rep

type t2b__ref = { t2b__content : us_rep
}

function t2b__ref_t2b__content__projection(a: t2b__ref) : us_rep =
  (a).t2b__content

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate default_initial_assumption1(temp___expr_165: us_rep,
  temp___skip_top_level_166: bool) =
  ((temp___expr_165).rec__binary_search_trees__node_access__is_null_pointer = true)

predicate default_initial_assumption2(temp___expr_184: us_rep2,
  temp___skip_top_level_185: bool) =
  (((((temp___expr_184).us_split_fields3).rec__binary_search_trees__tree_node__left).rec__binary_search_trees__node_access__is_null_pointer = true) and
  ((((temp___expr_184).us_split_fields3).rec__binary_search_trees__tree_node__right).rec__binary_search_trees__node_access__is_null_pointer = true))

 (* File "binary_search_trees.ads", line 12, characters 0-0 *)
goal defqtvc :
  (forall tree__split_fields:us_split_fields.
  forall new_node__pointer_value:us_split_fields2.
  forall new_node__pointer_address:int.
  forall new_node__is_null_pointer:bool. (dynamic_invariant1(i3s, true,
  false, true, true) -> (dynamic_invariant1(i3s, true, false, true, true) ->
  (dynamic_invariant1({ us_split_fields1 = tree__split_fields }, true, false,
  true, true) -> (dynamic_invariant(item, true, false, true, true) ->
  ((forall tree__split_fields1:us_split_fields. size__function_guard(size({
   us_split_fields1 = tree__split_fields1 }), { us_split_fields1 =
   tree__split_fields1 })) ->
  ((size({ us_split_fields1 = tree__split_fields }) <  2147483647) ->
  (default_initial_assumption1({
  rec__binary_search_trees__node_access__is_null_pointer =
  new_node__is_null_pointer;
  rec__binary_search_trees__node_access__pointer_address =
  new_node__pointer_address;
  rec__binary_search_trees__node_access__pointer_value_abstr = us_close({
  us_split_fields3 = new_node__pointer_value }) }, false) ->
  (forall spark__branch:bool.
  ((spark__branch = bool_eq2((tree__split_fields).rec__binary_search_trees__binary_search_tree__root,
  us_null_pointer)) -> ((not (spark__branch = true)) -> (let o =
  (tree__split_fields).rec__binary_search_trees__binary_search_tree__root
  : us_rep in
  (forall o1:int.
  ((to_rep1((tree__split_fields).rec__binary_search_trees__binary_search_tree__size) = o1) ->
  (forall binary_search_trees__insert__insert_node__size:int.
  forall binary_search_trees__insert__insert_node__starting_at__value:us_split_fields2.
  ((((binary_search_trees__insert__insert_node__size = o1) or
  (binary_search_trees__insert__insert_node__size = (o1 + 1))) and
  ((not ((o).rec__binary_search_trees__node_access__is_null_pointer = true)) and
  dynamic_invariant2(binary_search_trees__insert__insert_node__size, true,
  true, true, true))) -> dynamic_predicate({ us_split_fields1 = {
  rec__binary_search_trees__binary_search_tree__root = {
  rec__binary_search_trees__node_access__is_null_pointer =
  (o).rec__binary_search_trees__node_access__is_null_pointer;
  rec__binary_search_trees__node_access__pointer_address =
  (o).rec__binary_search_trees__node_access__pointer_address;
  rec__binary_search_trees__node_access__pointer_value_abstr = us_close({
  us_split_fields3 =
  binary_search_trees__insert__insert_node__starting_at__value }) };
  rec__binary_search_trees__binary_search_tree__size =
  (tree__split_fields).rec__binary_search_trees__binary_search_tree__size }
  })))))))))))))))))
