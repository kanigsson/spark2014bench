(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type us_main_type

type us_rep = { rec__incomplete_types__p1__with_discr_ptr__is_null_pointer :
bool; rec__incomplete_types__p1__with_discr_ptr__pointer_address : int;
rec__incomplete_types__p1__with_discr_ptr__pointer_value_abstr : us_main_type
}

function us_rep_rec__incomplete_types__p1__with_discr_ptr__is_null_pointer__projection(a: us_rep) : bool =
  (a).rec__incomplete_types__p1__with_discr_ptr__is_null_pointer

function us_rep_rec__incomplete_types__p1__with_discr_ptr__pointer_address__projection(a: us_rep) : int =
  (a).rec__incomplete_types__p1__with_discr_ptr__pointer_address

function us_rep_rec__incomplete_types__p1__with_discr_ptr__pointer_value_abstr__projection(a: us_rep) : us_main_type =
  (a).rec__incomplete_types__p1__with_discr_ptr__pointer_value_abstr

type us_rep__ref = { us_rep__content : us_rep
}

function us_rep__ref___rep__content__projection(a: us_rep__ref) : us_rep =
  (a).us_rep__content

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if (((a).rec__incomplete_types__p1__with_discr_ptr__is_null_pointer = (b).rec__incomplete_types__p1__with_discr_ptr__is_null_pointer) and
  ((not ((a).rec__incomplete_types__p1__with_discr_ptr__is_null_pointer = true)) ->
  (((a).rec__incomplete_types__p1__with_discr_ptr__pointer_address = (b).rec__incomplete_types__p1__with_discr_ptr__pointer_address) and
  ((a).rec__incomplete_types__p1__with_discr_ptr__pointer_value_abstr = (b).rec__incomplete_types__p1__with_discr_ptr__pointer_value_abstr)))) then true else false)

logic dummy : us_rep

type with_discr_ptr__ref = { with_discr_ptr__content : us_rep
}

function with_discr_ptr__ref_with_discr_ptr__content__projection(a: with_discr_ptr__ref) : us_rep =
  (a).with_discr_ptr__content

type us_split_discrs = { rec__incomplete_types__p1__with_discr__x : bool
}

function us_split_discrs_rec__incomplete_types__p1__with_discr__x__projection(a: us_split_discrs) : bool =
  (a).rec__incomplete_types__p1__with_discr__x

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__incomplete_types__p1__with_discr__y : us_rep
}

function us_split_fields_rec__incomplete_types__p1__with_discr__y__projection(a: us_split_fields) : us_rep =
  (a).rec__incomplete_types__p1__with_discr__y

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep1, b: us_rep1) : bool =
  (if ((to_int(((a).us_split_discrs1).rec__incomplete_types__p1__with_discr__x) = to_int(((b).us_split_discrs1).rec__incomplete_types__p1__with_discr__x)) and
  (bool_eq1(((a).us_split_fields1).rec__incomplete_types__p1__with_discr__y,
  ((b).us_split_fields1).rec__incomplete_types__p1__with_discr__y) = true)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic incomplete_types__p1__with_discr__x__first__bit : int

logic incomplete_types__p1__with_discr__x__last__bit : int

logic incomplete_types__p1__with_discr__x__position : int

axiom incomplete_types__p1__with_discr__x__first__bit_axiom :
  (0 <= incomplete_types__p1__with_discr__x__first__bit)

axiom incomplete_types__p1__with_discr__x__last__bit_axiom :
  (incomplete_types__p1__with_discr__x__first__bit <  incomplete_types__p1__with_discr__x__last__bit)

axiom incomplete_types__p1__with_discr__x__position_axiom :
  (0 <= incomplete_types__p1__with_discr__x__position)

logic incomplete_types__p1__with_discr__y__first__bit : int

logic incomplete_types__p1__with_discr__y__last__bit : int

logic incomplete_types__p1__with_discr__y__position : int

axiom incomplete_types__p1__with_discr__y__first__bit_axiom :
  (0 <= incomplete_types__p1__with_discr__y__first__bit)

axiom incomplete_types__p1__with_discr__y__last__bit_axiom :
  (incomplete_types__p1__with_discr__y__first__bit <  incomplete_types__p1__with_discr__y__last__bit)

axiom incomplete_types__p1__with_discr__y__position_axiom :
  (0 <= incomplete_types__p1__with_discr__y__position)

logic user_eq : us_rep1, us_rep1 -> bool

logic dummy1 : us_rep1

type with_discr__ref = { with_discr__content : us_rep1
}

function with_discr__ref_with_discr__content__projection(a: with_discr__ref) : us_rep1 =
  (a).with_discr__content

predicate in_range1(rec__incomplete_types__p1__with_discr__x1: bool,
  a: us_rep1) =
  (rec__incomplete_types__p1__with_discr__x1 = ((a).us_split_discrs1).rec__incomplete_types__p1__with_discr__x)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic incomplete_types__p1__with_discr__x__first__bit1 : int

logic incomplete_types__p1__with_discr__x__last__bit1 : int

logic incomplete_types__p1__with_discr__x__position1 : int

axiom incomplete_types__p1__with_discr__x__first__bit_axiom1 :
  (0 <= incomplete_types__p1__with_discr__x__first__bit1)

axiom incomplete_types__p1__with_discr__x__last__bit_axiom1 :
  (incomplete_types__p1__with_discr__x__first__bit1 <  incomplete_types__p1__with_discr__x__last__bit1)

axiom incomplete_types__p1__with_discr__x__position_axiom1 :
  (0 <= incomplete_types__p1__with_discr__x__position1)

logic incomplete_types__p1__with_discr__y__first__bit1 : int

logic incomplete_types__p1__with_discr__y__last__bit1 : int

logic incomplete_types__p1__with_discr__y__position1 : int

axiom incomplete_types__p1__with_discr__y__first__bit_axiom1 :
  (0 <= incomplete_types__p1__with_discr__y__first__bit1)

axiom incomplete_types__p1__with_discr__y__last__bit_axiom1 :
  (incomplete_types__p1__with_discr__y__first__bit1 <  incomplete_types__p1__with_discr__y__last__bit1)

axiom incomplete_types__p1__with_discr__y__position_axiom1 :
  (0 <= incomplete_types__p1__with_discr__y__position1)

logic user_eq1 : us_rep1, us_rep1 -> bool

logic dummy2 : us_rep1

type t1s__ref = { t1s__content : us_rep1
}

function t1s__ref_t1s__content__projection(a: t1s__ref) : us_rep1 =
  (a).t1s__content

logic attr__ATTRIBUTE_ADDRESS : int

logic us_open : us_main_type -> us_rep1

logic us_close : us_rep1 -> us_main_type

axiom close_open :
  (forall x:us_main_type [us_open(x)]. (us_close(us_open(x)) = x))

axiom open_close :
  (forall x:us_rep1 [us_close(x)]. (us_open(us_close(x)) = x))

function rec__incomplete_types__p1__with_discr_ptr__pointer_value(a: us_rep) : us_rep1 =
  us_open((a).rec__incomplete_types__p1__with_discr_ptr__pointer_value_abstr)

predicate rec__incomplete_types__p1__with_discr_ptr__pointer_value__pred(a: us_rep) =
  (not ((a).rec__incomplete_types__p1__with_discr_ptr__is_null_pointer = true))

logic us_null_pointer : us_rep

axiom us_null_pointer__def_axiom :
  ((us_null_pointer).rec__incomplete_types__p1__with_discr_ptr__is_null_pointer = true)

logic temp___dynamic_invariant_164 : us_rep, bool, bool, bool, bool -> prop

predicate dynamic_invariant(temp___expr_162: us_rep,
  temp___is_init_158: bool, temp___skip_constant_159: bool,
  temp___do_toplevel_160: bool, temp___do_typ_inv_161: bool) =
  ((not ((temp___expr_162).rec__incomplete_types__p1__with_discr_ptr__is_null_pointer = true)) ->
  (in_range1(of_int(1),
  rec__incomplete_types__p1__with_discr_ptr__pointer_value(temp___expr_162)) and
  temp___dynamic_invariant_164(((rec__incomplete_types__p1__with_discr_ptr__pointer_value(temp___expr_162)).us_split_fields1).rec__incomplete_types__p1__with_discr__y,
  true, false, true, temp___do_typ_inv_161)))

axiom def_axiom :
  (forall temp___expr_169:us_rep.
  (forall temp___is_init_165:bool. forall temp___skip_constant_166:bool.
  forall temp___do_toplevel_167:bool. forall temp___do_typ_inv_168:bool
  [temp___dynamic_invariant_164(temp___expr_169, temp___is_init_165,
  temp___skip_constant_166, temp___do_toplevel_167, temp___do_typ_inv_168)].
  (temp___dynamic_invariant_164(temp___expr_169, temp___is_init_165,
  temp___skip_constant_166, temp___do_toplevel_167, temp___do_typ_inv_168) ->
  ((not ((temp___expr_169).rec__incomplete_types__p1__with_discr_ptr__is_null_pointer = true)) ->
  in_range1(of_int(1),
  rec__incomplete_types__p1__with_discr_ptr__pointer_value(temp___expr_169))))))

axiom def_axiom1 :
  (forall temp___expr_169:us_rep.
  (forall temp___is_init_165:bool. forall temp___skip_constant_166:bool.
  forall temp___do_toplevel_167:bool. forall temp___do_typ_inv_168:bool
  [temp___dynamic_invariant_164(temp___expr_169, temp___is_init_165,
  temp___skip_constant_166, temp___do_toplevel_167, temp___do_typ_inv_168)].
  (temp___dynamic_invariant_164(temp___expr_169, temp___is_init_165,
  temp___skip_constant_166, temp___do_toplevel_167, temp___do_typ_inv_168) ->
  ((not ((temp___expr_169).rec__incomplete_types__p1__with_discr_ptr__is_null_pointer = true)) ->
  temp___dynamic_invariant_164(((rec__incomplete_types__p1__with_discr_ptr__pointer_value(temp___expr_169)).us_split_fields1).rec__incomplete_types__p1__with_discr__y,
  true, false, true, temp___do_typ_inv_168)))))

axiom def_axiom2 :
  (forall temp___expr_169:us_rep.
  (forall temp___is_init_165:bool. forall temp___skip_constant_166:bool.
  forall temp___do_toplevel_167:bool. forall temp___do_typ_inv_168:bool
  [temp___dynamic_invariant_164(temp___expr_169, temp___is_init_165,
  temp___skip_constant_166, temp___do_toplevel_167, temp___do_typ_inv_168)].
  (((not ((temp___expr_169).rec__incomplete_types__p1__with_discr_ptr__is_null_pointer = true)) ->
  (in_range1(of_int(1),
  rec__incomplete_types__p1__with_discr_ptr__pointer_value(temp___expr_169)) and
  temp___dynamic_invariant_164(((rec__incomplete_types__p1__with_discr_ptr__pointer_value(temp___expr_169)).us_split_fields1).rec__incomplete_types__p1__with_discr__y,
  true, false, true, temp___do_typ_inv_168))) ->
  temp___dynamic_invariant_164(temp___expr_169, temp___is_init_165,
  temp___skip_constant_166, temp___do_toplevel_167, temp___do_typ_inv_168))))

predicate default_initial_assumption(temp___expr_171: us_rep,
  temp___skip_top_level_172: bool) =
  ((temp___expr_171).rec__incomplete_types__p1__with_discr_ptr__is_null_pointer = true)

predicate in_range2(rec__incomplete_types__p1__with_discr__x1: bool,
  a: us_rep1) =
  (rec__incomplete_types__p1__with_discr__x1 = ((a).us_split_discrs1).rec__incomplete_types__p1__with_discr__x)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic incomplete_types__p1__with_discr__x__first__bit2 : int

logic incomplete_types__p1__with_discr__x__last__bit2 : int

logic incomplete_types__p1__with_discr__x__position2 : int

axiom incomplete_types__p1__with_discr__x__first__bit_axiom2 :
  (0 <= incomplete_types__p1__with_discr__x__first__bit2)

axiom incomplete_types__p1__with_discr__x__last__bit_axiom2 :
  (incomplete_types__p1__with_discr__x__first__bit2 <  incomplete_types__p1__with_discr__x__last__bit2)

axiom incomplete_types__p1__with_discr__x__position_axiom2 :
  (0 <= incomplete_types__p1__with_discr__x__position2)

logic incomplete_types__p1__with_discr__y__first__bit2 : int

logic incomplete_types__p1__with_discr__y__last__bit2 : int

logic incomplete_types__p1__with_discr__y__position2 : int

axiom incomplete_types__p1__with_discr__y__first__bit_axiom2 :
  (0 <= incomplete_types__p1__with_discr__y__first__bit2)

axiom incomplete_types__p1__with_discr__y__last__bit_axiom2 :
  (incomplete_types__p1__with_discr__y__first__bit2 <  incomplete_types__p1__with_discr__y__last__bit2)

axiom incomplete_types__p1__with_discr__y__position_axiom2 :
  (0 <= incomplete_types__p1__with_discr__y__position2)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type t3s__ref = { t3s__content : us_rep1
}

function t3s__ref_t3s__content__projection(a: t3s__ref) : us_rep1 =
  (a).t3s__content

logic oeq : us_rep1, us_rep1 -> bool

logic oeq__function_guard : bool, us_rep1, us_rep1 -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep1. forall b:us_rep1. oeq__function_guard(oeq(a, b), a, b))

axiom user_eq__def_axiom1 :
  (forall a:us_rep1. forall b:us_rep1 [user_eq(a, b)]. (user_eq(a,
  b) = oeq(a, b)))

predicate dynamic_invariant1(temp___expr_178: us_rep1,
  temp___is_init_174: bool, temp___skip_constant_175: bool,
  temp___do_toplevel_176: bool, temp___do_typ_inv_177: bool) =
  ((not ((((temp___expr_178).us_split_fields1).rec__incomplete_types__p1__with_discr__y).rec__incomplete_types__p1__with_discr_ptr__is_null_pointer = true)) ->
  (in_range1(of_int(1),
  rec__incomplete_types__p1__with_discr_ptr__pointer_value(((temp___expr_178).us_split_fields1).rec__incomplete_types__p1__with_discr__y)) and
  temp___dynamic_invariant_164(((rec__incomplete_types__p1__with_discr_ptr__pointer_value(((temp___expr_178).us_split_fields1).rec__incomplete_types__p1__with_discr__y)).us_split_fields1).rec__incomplete_types__p1__with_discr__y,
  true, false, true, temp___do_typ_inv_177)))

axiom oeq__def_axiom :
  (forall x:us_rep1. forall y:us_rep1 [oeq(x, y)]. (oeq(x, y) = true))

axiom user_eq__def_axiom2 :
  (forall a:us_rep1. forall b:us_rep1. oeq__function_guard(oeq(a, b), a, b))

axiom user_eq__def_axiom3 :
  (forall a:us_rep1. forall b:us_rep1 [user_eq1(a, b)]. (user_eq1(a,
  b) = oeq(a, b)))

axiom user_eq__def_axiom4 :
  (forall a:us_rep1. forall b:us_rep1. oeq__function_guard(oeq(a, b), a, b))

axiom user_eq__def_axiom5 :
  (forall a:us_rep1. forall b:us_rep1 [user_eq2(a, b)]. (user_eq2(a,
  b) = oeq(a, b)))

 (* File "incomplete_types.ads", line 2, characters 0-0 *)
goal defqtvc : in_range1(of_int(1), { us_split_discrs1 = {
  rec__incomplete_types__p1__with_discr__x = of_int(0) }; us_split_fields1 =
  { rec__incomplete_types__p1__with_discr__y = us_null_pointer } })
