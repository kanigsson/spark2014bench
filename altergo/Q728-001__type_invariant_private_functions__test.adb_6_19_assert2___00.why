(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__test_type__t__f : integer
}

function us_split_fields_rec__test_type__t__f__projection(a: us_split_fields) : integer =
  (a).rec__test_type__t__f

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__test_type__t__f) = to_rep(((b).us_split_fields1).rec__test_type__t__f)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic test_type__t__f__first__bit : int

logic test_type__t__f__last__bit : int

logic test_type__t__f__position : int

axiom test_type__t__f__first__bit_axiom : (0 <= test_type__t__f__first__bit)

axiom test_type__t__f__last__bit_axiom :
  (test_type__t__f__first__bit <  test_type__t__f__last__bit)

axiom test_type__t__f__position_axiom : (0 <= test_type__t__f__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type t__ref = { t__content : us_rep
}

function t__ref_t__content__projection(a: t__ref) : us_rep = (a).t__content

logic attr__ATTRIBUTE_ADDRESS : int

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq2 : natural, natural -> bool

logic dummy2 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_182: us_rep,
  temp___is_init_178: bool, temp___skip_constant_179: bool,
  temp___do_toplevel_180: bool, temp___do_typ_inv_181: bool) =
  ((temp___do_typ_inv_181 = true) ->
  in_range1(to_rep(((temp___expr_182).us_split_fields1).rec__test_type__t__f)))

predicate default_initial_assumption(temp___expr_185: us_rep,
  temp___skip_top_level_186: bool) =
  (to_rep(((temp___expr_185).us_split_fields1).rec__test_type__t__f) = 0)

predicate type_invariant(temp___187: us_rep) =
  in_range1(to_rep(((temp___187).us_split_fields1).rec__test_type__t__f))

logic decr_int : us_rep -> us_rep

logic decr_int__function_guard : us_rep, us_rep -> prop

logic saturate : us_rep -> us_rep

logic saturate__function_guard : us_rep, us_rep -> prop

logic decr : us_rep -> us_rep

logic decr__function_guard : us_rep, us_rep -> prop

axiom decr__post_axiom :
  (forall x:us_rep [decr(x)]. (dynamic_invariant(x, true, true, true,
  true) -> (let result = decr(x) : us_rep in (decr__function_guard(result,
  x) -> dynamic_invariant(result, true, false, true, true)))))

axiom decr__def_axiom :
  (forall x:us_rep [decr(x)]. (dynamic_invariant(x, true, true, true,
  true) -> (forall x1:us_rep. decr_int__function_guard(decr_int(x1), x1))))

axiom decr__def_axiom1 :
  (forall x:us_rep [decr(x)]. (dynamic_invariant(x, true, true, true,
  true) -> (forall x1:us_rep. decr_int__function_guard(decr_int(x1), x1))))

axiom decr__def_axiom2 :
  (forall x:us_rep [decr(x)]. (dynamic_invariant(x, true, true, true,
  true) ->
  (forall x1:us_rep. saturate__function_guard(saturate(decr_int(x1)),
  decr_int(x1)))))

axiom decr__def_axiom3 :
  (forall x:us_rep [decr(x)]. (dynamic_invariant(x, true, true, true,
  true) -> (decr(x) = saturate(decr_int(x)))))

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

predicate dynamic_invariant2(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

axiom decr_int__post_axiom :
  (forall x:us_rep [decr_int(x)]. ((dynamic_invariant(x, true, true, true,
  true) and
  ((- 2147483648) <  to_rep(((x).us_split_fields1).rec__test_type__t__f))) ->
  (let result = decr_int(x) : us_rep in (decr_int__function_guard(result,
  x) -> dynamic_invariant(result, true, false, true, false)))))

axiom decr_int__def_axiom :
  (forall x:us_rep [decr_int(x)]. (dynamic_invariant(x, true, true, true,
  true) -> (decr_int(x) = { us_split_fields1 = { rec__test_type__t__f =
  of_rep((to_rep(((x).us_split_fields1).rec__test_type__t__f) - 1)) } })))

axiom saturate__post_axiom :
  (forall x:us_rep [saturate(x)]. (dynamic_invariant(x, true, true, true,
  true) -> (let result = saturate(x) : us_rep in
  (saturate__function_guard(result, x) -> dynamic_invariant(result, true,
  false, true, false)))))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 0)

axiom saturate__def_axiom :
  (forall x:us_rep [saturate(x)]. (dynamic_invariant(x, true, true, true,
  true) ->
  (saturate(x) = (if (to_rep(((x).us_split_fields1).rec__test_type__t__f) <  0) then {
  us_split_fields1 = { rec__test_type__t__f = rliteral } } else x))))

 (* File "test.adb", line 2, characters 0-0 *)
goal defqtvc :
  (forall x__split_fields:integer. (default_initial_assumption({
  us_split_fields1 = { rec__test_type__t__f = x__split_fields } }, false) ->
  (dynamic_invariant({ us_split_fields1 = { rec__test_type__t__f =
  x__split_fields } }, false, false, true, true) -> (let o = {
  us_split_fields1 = { rec__test_type__t__f = x__split_fields } } : us_rep in
  (let test__y__assume = decr(o) : us_rep in
  ((forall o1:us_rep. decr_int__function_guard(decr_int(o1), o1)) ->
  ((forall o1:us_rep. decr_int__function_guard(decr_int(o1), o1)) ->
  ((forall o1:us_rep. saturate__function_guard(saturate(decr_int(o1)),
   decr_int(o1))) ->
  ((decr__function_guard(test__y__assume, o) and
  (dynamic_invariant(test__y__assume, true, false, true, true) and
  (test__y__assume = saturate(decr_int(o))))) ->
  (forall y__split_fields:integer. (({ rec__test_type__t__f = y__split_fields
  } = (test__y__assume).us_split_fields1) -> (dynamic_invariant({
  us_split_fields1 = { rec__test_type__t__f = y__split_fields } }, true,
  false, true, true) -> (not (bool_eq1({ us_split_fields1 = {
  rec__test_type__t__f = x__split_fields } }, { us_split_fields1 = {
  rec__test_type__t__f = y__split_fields } }) = true))))))))))))))
