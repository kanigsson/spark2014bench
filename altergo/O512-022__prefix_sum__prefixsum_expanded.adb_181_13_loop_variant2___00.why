(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (div(x, y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((-abs_int(y)) <  mod(x,
  y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (mod(x, y) <  abs_int(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <  y) then (x % y) else ((x % y) + y))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant1(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_invariant2(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_46))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic all_elements_in : (int,integer) farray, int -> bool

logic all_elements_in__function_guard : bool, (int,integer) farray,
  int -> prop

axiom all_elements_in__def_axiom :
  (forall a:(int,integer) farray.
  (forall max:int [all_elements_in(a, max)]. ((all_elements_in(a,
  max) = true) ->
  (forall k:int. (((0 <= k) and (k <= 7)) -> ((-max) <= to_rep((a[k]))))))))

axiom all_elements_in__def_axiom1 :
  (forall a:(int,integer) farray.
  (forall max:int [all_elements_in(a, max)]. ((all_elements_in(a,
  max) = true) ->
  (forall k:int. (((0 <= k) and (k <= 7)) -> (to_rep((a[k])) <= max))))))

axiom all_elements_in__def_axiom2 :
  (forall a:(int,integer) farray.
  (forall max:int [all_elements_in(a, max)].
  ((forall k:int. (((0 <= k) and (k <= 7)) -> (let temp___179 =
   to_rep((a[k])) : int in (((-max) <= temp___179) and
   (temp___179 <= max))))) ->
  (all_elements_in(a, max) = true))))

logic intermediate_form : (int,integer) farray, (int,integer) farray -> bool

logic intermediate_form__function_guard : bool, (int,integer) farray,
  (int,integer) farray -> prop

axiom intermediate_form__def_axiom :
  (forall a:(int,integer) farray. forall b:(int,integer) farray
  [intermediate_form(a, b)]. ((intermediate_form(a, b) = true) ->
  (to_rep((a[7])) = (((((((to_rep((b[0])) + to_rep((b[1]))) + to_rep((b[2]))) + to_rep((b[3]))) + to_rep((b[4]))) + to_rep((b[5]))) + to_rep((b[6]))) + to_rep((b[7]))))))

axiom intermediate_form__def_axiom1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray
  [intermediate_form(a, b)]. ((intermediate_form(a, b) = true) ->
  (to_rep((a[3])) = (((to_rep((b[3])) + to_rep((b[2]))) + to_rep((b[1]))) + to_rep((b[0]))))))

axiom intermediate_form__def_axiom2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray
  [intermediate_form(a, b)]. ((intermediate_form(a, b) = true) ->
  (to_rep((a[5])) = (to_rep((b[5])) + to_rep((b[4]))))))

axiom intermediate_form__def_axiom3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray
  [intermediate_form(a, b)]. ((intermediate_form(a, b) = true) ->
  (to_rep((a[1])) = (to_rep((b[1])) + to_rep((b[0]))))))

axiom intermediate_form__def_axiom4 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray
  [intermediate_form(a, b)]. ((intermediate_form(a, b) = true) ->
  (to_rep((a[0])) = to_rep((b[0])))))

axiom intermediate_form__def_axiom5 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray
  [intermediate_form(a, b)]. ((intermediate_form(a, b) = true) ->
  (to_rep((a[2])) = to_rep((b[2])))))

axiom intermediate_form__def_axiom6 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray
  [intermediate_form(a, b)]. ((intermediate_form(a, b) = true) ->
  (to_rep((a[4])) = to_rep((b[4])))))

axiom intermediate_form__def_axiom7 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray
  [intermediate_form(a, b)]. ((intermediate_form(a, b) = true) ->
  (to_rep((a[6])) = to_rep((b[6])))))

axiom intermediate_form__def_axiom8 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray
  [intermediate_form(a, b)].
  (((((((((to_rep((a[7])) = (((((((to_rep((b[0])) + to_rep((b[1]))) + to_rep((b[2]))) + to_rep((b[3]))) + to_rep((b[4]))) + to_rep((b[5]))) + to_rep((b[6]))) + to_rep((b[7])))) and
  (to_rep((a[3])) = (((to_rep((b[3])) + to_rep((b[2]))) + to_rep((b[1]))) + to_rep((b[0]))))) and
  (to_rep((a[5])) = (to_rep((b[5])) + to_rep((b[4]))))) and
  (to_rep((a[1])) = (to_rep((b[1])) + to_rep((b[0]))))) and
  (to_rep((a[0])) = to_rep((b[0])))) and
  (to_rep((a[2])) = to_rep((b[2])))) and
  (to_rep((a[4])) = to_rep((b[4])))) and
  (to_rep((a[6])) = to_rep((b[6])))) -> (intermediate_form(a, b) = true)))

logic ghost__ : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic input_space : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

type index

logic indexqtint : index -> int

axiom indexqtaxiom : (forall i:index. (0 <= indexqtint(i)))

axiom indexqtaxiom1 : (forall i:index. (indexqtint(i) <= 7))

predicate in_range4(x: int) = ((0 <= x) and (x <= 7))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : index, index -> bool

logic dummy3 : index

type index__ref = { index__content : index
}

function index__ref_index__content__projection(a: index__ref) : index =
  (a).index__content

predicate dynamic_invariant3(temp___expr_163: int, temp___is_init_159: bool,
  temp___skip_constant_160: bool, temp___do_toplevel_161: bool,
  temp___do_typ_inv_162: bool) = (((temp___is_init_159 = true) or
  (0 <= 7)) -> in_range4(temp___expr_163))

axiom cdiv_cases :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((0 <  d) -> (div(n,
  d) = (n / d)))))

axiom cdiv_cases1 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((0 <  d) -> (div(n,
  d) = (-((-n) / d))))))

axiom cdiv_cases2 :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((d <  0) -> (div(n,
  d) = (-(n / (-d)))))))

axiom cdiv_cases3 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((d <  0) -> (div(n,
  d) = ((-n) / (-d))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))))

axiom cmod_cases1 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))))

axiom cmod_cases2 :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))))

axiom cmod_cases3 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d)))))))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 0)

 (* File "prefixsum_expanded.ads", line 47, characters 0-0 *)
goal defqtvc :
  (forall a:(int,integer) farray. forall left:int. forall right:int.
  forall temp:int. (dynamic_invariant2(input_space, true, false, true,
  true) -> (((((all_elements_in(ghost__, 1000000) = true) and
  (all_elements_in(a, 8000000) = true)) and (input_space = 8)) and
  (intermediate_form(a, ghost__) = true)) -> (let o = input_space : int in
  (in_range2(o) ->
  (forall space:int. ((space = o) -> (dynamic_invariant1(space, true, false,
  true, true) -> (dynamic_invariant1(left, false, false, true, true) ->
  (dynamic_invariant1(right, false, false, true, true) ->
  (dynamic_invariant(temp, false, false, true, true) ->
  (forall a1:(int,integer) farray. ((a1 = (a[7 <- rliteral])) ->
  (forall space1:int. ((space1 = div(space, 2)) ->
  (forall saved_a:(int,integer) farray. ((saved_a = a1) ->
  (((((((((to_rep((saved_a[0])) = to_rep((ghost__[0]))) and
  (to_rep((saved_a[1])) = (to_rep((ghost__[0])) + to_rep((ghost__[1]))))) and
  (to_rep((saved_a[2])) = to_rep((ghost__[2])))) and
  (to_rep((saved_a[3])) = (((to_rep((ghost__[0])) + to_rep((ghost__[1]))) + to_rep((ghost__[2]))) + to_rep((ghost__[3]))))) and
  (to_rep((saved_a[4])) = to_rep((ghost__[4])))) and
  (to_rep((saved_a[5])) = (to_rep((ghost__[4])) + to_rep((ghost__[5]))))) and
  (to_rep((saved_a[6])) = to_rep((ghost__[6])))) and
  (to_rep((saved_a[7])) = 0)) -> ((0 <  space1) ->
  (forall temp___loop_entry_281:(int,integer) farray.
  ((temp___loop_entry_281 = a1) ->
  (forall temp___loop_entry_285:(int,integer) farray.
  ((temp___loop_entry_285 = a1) ->
  (forall temp___loop_entry_284:(int,integer) farray.
  ((temp___loop_entry_284 = a1) ->
  (forall temp___loop_entry_291:(int,integer) farray.
  ((temp___loop_entry_291 = a1) ->
  (forall temp___loop_entry_280:(int,integer) farray.
  ((temp___loop_entry_280 = a1) ->
  (forall temp___loop_entry_290:(int,integer) farray.
  ((temp___loop_entry_290 = a1) ->
  (forall temp___loop_entry_279:(int,integer) farray.
  ((temp___loop_entry_279 = a1) ->
  (forall temp___loop_entry_283:(int,integer) farray.
  ((temp___loop_entry_283 = a1) ->
  (forall temp___loop_entry_289:(int,integer) farray.
  ((temp___loop_entry_289 = a1) ->
  (forall temp___loop_entry_288:(int,integer) farray.
  ((temp___loop_entry_288 = a1) ->
  (forall temp___loop_entry_278:(int,integer) farray.
  ((temp___loop_entry_278 = a1) ->
  (forall temp___loop_entry_287:(int,integer) farray.
  ((temp___loop_entry_287 = a1) ->
  (forall temp___loop_entry_282:(int,integer) farray.
  ((temp___loop_entry_282 = a1) ->
  (forall temp___loop_entry_286:(int,integer) farray.
  ((temp___loop_entry_286 = a1) ->
  ((exists o1:bool. (if (orb(orb((if (space1 = 4) then true else false),
   (if (space1 = 2) then true else false)),
   (if (space1 = 1) then true else false)) = true) then (let o2 = ((div(4,
   space1) * 8) * 1000000) : int in (in_range3(o2) and
   ((o1 = all_elements_in(a1, o2)) and ((o1 = true) <->
   (forall k:int. (((0 <= k) and (k <= 7)) -> (let temp___176 =
   to_rep((a1[k])) : int in (((-o2) <= temp___176) and (temp___176 <= o2))))))))) else (o1 = false))) ->
  (forall a2:(int,integer) farray. forall space2:int. forall left1:int.
  forall right1:int. forall temp1:int. ((((((space2 = 4) or (space2 = 2)) or
  (space2 = 1)) and (all_elements_in(a2, ((div(4,
  space2) * 8) * 1000000)) = true)) and
  (forall k:int. (((0 <= k) and (k <= 7)) ->
  (if (space2 = 4) then (to_rep((a2[k])) = to_rep((temp___loop_entry_278[k]))) else (if ((space2 = 2) and
  ((k = 7) or
  (k = 3))) then ((to_rep((a2[7])) = (to_rep((temp___loop_entry_279[7])) + to_rep((temp___loop_entry_280[3])))) and
  (to_rep((a2[3])) = to_rep((temp___loop_entry_281[7])))) else (if (space2 = 2) then (to_rep((a2[k])) = to_rep((temp___loop_entry_282[k]))) else (if ((((k = 1) or
  (k = 3)) or (k = 5)) or
  (k = 7)) then ((((to_rep((a2[1])) = to_rep((temp___loop_entry_283[7]))) and
  (to_rep((a2[3])) = (to_rep((temp___loop_entry_284[1])) + to_rep((temp___loop_entry_285[7]))))) and
  (to_rep((a2[5])) = (to_rep((temp___loop_entry_286[7])) + to_rep((temp___loop_entry_287[3]))))) and
  (to_rep((a2[7])) = ((to_rep((temp___loop_entry_288[5])) + to_rep((temp___loop_entry_289[7]))) + to_rep((temp___loop_entry_290[3]))))) else (to_rep((a2[k])) = to_rep((temp___loop_entry_291[k])))))))))) ->
  ((andb((if (((dynamic_invariant(temp1, false, true, true, true) and
  dynamic_invariant1(space2, true, true, true, true)) and
  dynamic_invariant1(left1, false, true, true, true)) and
  dynamic_invariant1(right1, false, true, true, true)) then true else false),
  (if (0 <  space2) then true else false)) = true) ->
  (forall temp___292:int. ((temp___292 = space2) -> (let o1 = (space2 * 2)
  : int in (in_range1(o1) -> (let o2 = (o1 - 1) : int in (in_range1(o2) ->
  (in_range2(o2) ->
  (forall right2:int. ((right2 = o2) -> ((right2 <  8) ->
  (forall temp___loop_entry_269:(int,integer) farray.
  ((temp___loop_entry_269 = a2) ->
  (forall temp___loop_entry_268:(int,integer) farray.
  ((temp___loop_entry_268 = a2) ->
  (forall temp___loop_entry_266:(int,integer) farray.
  ((temp___loop_entry_266 = a2) ->
  (forall temp___loop_entry_264:(int,integer) farray.
  ((temp___loop_entry_264 = a2) ->
  (forall temp___loop_entry_263:(int,integer) farray.
  ((temp___loop_entry_263 = a2) ->
  ((exists o3:bool.
   (if (forall k:int. (((0 <= k) and (k <= 7)) -> (if ((0 <= k) and
       (k <= (right2 - (space2 * 2)))) then (if (mod1((k + 1),
       (2 * space2)) = 0) then (to_rep((a2[k])) = (to_rep((temp___loop_entry_263[k])) + to_rep((temp___loop_entry_264[(k - space2)])))) else (if (mod1((k + 1),
       space2) = 0) then (to_rep((a2[k])) = to_rep((temp___loop_entry_266[(k + space2)]))) else (to_rep((a2[k])) = to_rep((temp___loop_entry_268[k]))))) else (to_rep((a2[k])) = to_rep((temp___loop_entry_269[k])))))) then (o3 = (if (mod1((right2 + 1),
   (space2 * 2)) = 0) then true else false)) else (o3 = false))) ->
  (forall a3:(int,integer) farray. forall left2:int. forall right3:int.
  forall temp2:int.
  ((((forall k:int. (((0 <= k) and (k <= 7)) -> (if ((0 <= k) and
     (k <= (right3 - (space2 * 2)))) then (if (mod1((k + 1),
     (2 * space2)) = 0) then (to_rep((a3[k])) = (to_rep((temp___loop_entry_263[k])) + to_rep((temp___loop_entry_264[(k - space2)])))) else (if (mod1((k + 1),
     space2) = 0) then (to_rep((a3[k])) = to_rep((temp___loop_entry_266[(k + space2)]))) else (to_rep((a3[k])) = to_rep((temp___loop_entry_268[k]))))) else (to_rep((a3[k])) = to_rep((temp___loop_entry_269[k])))))) and
  (mod1((right3 + 1), (space2 * 2)) = 0)) and (not (8 <= right3))) ->
  ((andb((if ((dynamic_invariant(temp2, false, true, true, true) and
  dynamic_invariant1(left2, false, true, true, true)) and
  dynamic_invariant1(right3, false, true, true, true)) then true else false),
  (if (right3 <  8) then true else false)) = true) ->
  (forall temp___270:int. ((temp___270 = right3) -> (let o3 =
  (right3 - space2) : int in (in_range1(o3) -> (in_range2(o3) ->
  (forall left3:int. ((left3 = o3) -> (((0 <= right3) and (right3 <= 7)) ->
  (forall o4:int. ((to_rep((a3[right3])) = o4) ->
  (forall temp3:int. ((temp3 = o4) -> (((0 <= right3) and (right3 <= 7)) ->
  (forall o5:int. ((to_rep((a3[right3])) = o5) -> (((0 <= left3) and
  (left3 <= 7)) ->
  (forall o6:int. ((to_rep((a3[left3])) = o6) -> (let o7 = (o6 + o5) : int in
  (in_range1(o7) ->
  (forall o8:integer. ((to_rep(o8) = o7) -> (((0 <= right3) and
  (right3 <= 7)) ->
  (forall a4:(int,integer) farray. ((a4 = (a3[right3 <- o8])) ->
  (forall o9:integer. ((to_rep(o9) = temp3) -> (((0 <= left3) and
  (left3 <= 7)) ->
  (forall a5:(int,integer) farray. ((a5 = (a4[left3 <- o9])) -> (let o10 =
  (space2 * 2) : int in (in_range1(o10) -> (let o11 = (right3 + o10) : int in
  (in_range1(o11) -> (in_range2(o11) ->
  (forall right4:int. ((right4 = o11) -> ((right4 <  8) ->
  (temp___270 <  right4))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
