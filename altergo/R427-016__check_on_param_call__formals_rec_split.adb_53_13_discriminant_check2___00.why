(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

logic x : bool

logic attr__ATTRIBUTE_ADDRESS : int

logic y : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

logic b1 : bool

logic attr__ATTRIBUTE_ADDRESS2 : int

logic b2 : bool

logic attr__ATTRIBUTE_ADDRESS3 : int

function to_rep(x1: integer) : int = integerqtint(x1)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x1:integer [to_rep(x1)]. (of_rep(to_rep(x1)) = x1))

axiom range_axiom : (forall x1:integer [to_rep(x1)]. in_range1(to_rep(x1)))

axiom coerce_axiom :
  (forall x1:int [to_rep(of_rep(x1))]. (in_range1(x1) ->
  (to_rep(of_rep(x1)) = x1)))

type us_split_discrs = { rec__formals_rec_split__rec__d : bool
}

function us_split_discrs_rec__formals_rec_split__rec__d__projection(a: us_split_discrs) : bool =
  (a).rec__formals_rec_split__rec__d

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__formals_rec_split__rec__f : integer
}

function us_split_fields_rec__formals_rec_split__rec__f__projection(a: us_split_fields) : integer =
  (a).rec__formals_rec_split__rec__f

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

predicate formals_rec_split__rec__f__pred(a: us_rep) =
  (to_int(((a).us_split_discrs1).rec__formals_rec_split__rec__d) = 1)

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if ((to_int(((a).us_split_discrs1).rec__formals_rec_split__rec__d) = to_int(((b).us_split_discrs1).rec__formals_rec_split__rec__d)) and
  (formals_rec_split__rec__f__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__formals_rec_split__rec__f) = to_rep(((b).us_split_fields1).rec__formals_rec_split__rec__f)))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic formals_rec_split__rec__d__first__bit : int

logic formals_rec_split__rec__d__last__bit : int

logic formals_rec_split__rec__d__position : int

axiom formals_rec_split__rec__d__first__bit_axiom :
  (0 <= formals_rec_split__rec__d__first__bit)

axiom formals_rec_split__rec__d__last__bit_axiom :
  (formals_rec_split__rec__d__first__bit <  formals_rec_split__rec__d__last__bit)

axiom formals_rec_split__rec__d__position_axiom :
  (0 <= formals_rec_split__rec__d__position)

logic formals_rec_split__rec__f__first__bit : int

logic formals_rec_split__rec__f__last__bit : int

logic formals_rec_split__rec__f__position : int

axiom formals_rec_split__rec__f__first__bit_axiom :
  (0 <= formals_rec_split__rec__f__first__bit)

axiom formals_rec_split__rec__f__last__bit_axiom :
  (formals_rec_split__rec__f__first__bit <  formals_rec_split__rec__f__last__bit)

axiom formals_rec_split__rec__f__position_axiom :
  (0 <= formals_rec_split__rec__f__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type rec____ref = { rec____content : us_rep
}

function rec____ref_rec____content__projection(a: rec____ref) : us_rep =
  (a).rec____content

predicate in_range2(rec__formals_rec_split__rec__d1: bool, a: us_rep) =
  (rec__formals_rec_split__rec__d1 = ((a).us_split_discrs1).rec__formals_rec_split__rec__d)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic formals_rec_split__rec__d__first__bit1 : int

logic formals_rec_split__rec__d__last__bit1 : int

logic formals_rec_split__rec__d__position1 : int

axiom formals_rec_split__rec__d__first__bit_axiom1 :
  (0 <= formals_rec_split__rec__d__first__bit1)

axiom formals_rec_split__rec__d__last__bit_axiom1 :
  (formals_rec_split__rec__d__first__bit1 <  formals_rec_split__rec__d__last__bit1)

axiom formals_rec_split__rec__d__position_axiom1 :
  (0 <= formals_rec_split__rec__d__position1)

logic formals_rec_split__rec__f__first__bit1 : int

logic formals_rec_split__rec__f__last__bit1 : int

logic formals_rec_split__rec__f__position1 : int

axiom formals_rec_split__rec__f__first__bit_axiom1 :
  (0 <= formals_rec_split__rec__f__first__bit1)

axiom formals_rec_split__rec__f__last__bit_axiom1 :
  (formals_rec_split__rec__f__first__bit1 <  formals_rec_split__rec__f__last__bit1)

axiom formals_rec_split__rec__f__position_axiom1 :
  (0 <= formals_rec_split__rec__f__position1)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type constr_rec__ref = { constr_rec__content : us_rep
}

function constr_rec__ref_constr_rec__content__projection(a: constr_rec__ref) : us_rep =
  (a).constr_rec__content

predicate dynamic_invariant(temp___expr_164: us_rep,
  temp___is_init_160: bool, temp___skip_constant_161: bool,
  temp___do_toplevel_162: bool, temp___do_typ_inv_163: bool) =
  ((not (temp___skip_constant_161 = true)) -> in_range2(x, temp___expr_164))

predicate default_initial_assumption(temp___expr_166: us_rep,
  temp___skip_top_level_167: bool) =
  ((((temp___expr_166).us_split_discrs1).rec__formals_rec_split__rec__d = x) and
  (formals_rec_split__rec__f__pred(temp___expr_166) ->
  (to_rep(((temp___expr_166).us_split_fields1).rec__formals_rec_split__rec__f) = 1)))

predicate in_range3(rec__formals_rec_split__rec__d1: bool, a: us_rep) =
  (rec__formals_rec_split__rec__d1 = ((a).us_split_discrs1).rec__formals_rec_split__rec__d)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic formals_rec_split__rec__d__first__bit2 : int

logic formals_rec_split__rec__d__last__bit2 : int

logic formals_rec_split__rec__d__position2 : int

axiom formals_rec_split__rec__d__first__bit_axiom2 :
  (0 <= formals_rec_split__rec__d__first__bit2)

axiom formals_rec_split__rec__d__last__bit_axiom2 :
  (formals_rec_split__rec__d__first__bit2 <  formals_rec_split__rec__d__last__bit2)

axiom formals_rec_split__rec__d__position_axiom2 :
  (0 <= formals_rec_split__rec__d__position2)

logic formals_rec_split__rec__f__first__bit2 : int

logic formals_rec_split__rec__f__last__bit2 : int

logic formals_rec_split__rec__f__position2 : int

axiom formals_rec_split__rec__f__first__bit_axiom2 :
  (0 <= formals_rec_split__rec__f__first__bit2)

axiom formals_rec_split__rec__f__last__bit_axiom2 :
  (formals_rec_split__rec__f__first__bit2 <  formals_rec_split__rec__f__last__bit2)

axiom formals_rec_split__rec__f__position_axiom2 :
  (0 <= formals_rec_split__rec__f__position2)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type constr_rec_2__ref = { constr_rec_2__content : us_rep
}

function constr_rec_2__ref_constr_rec_2__content__projection(a: constr_rec_2__ref) : us_rep =
  (a).constr_rec_2__content

predicate dynamic_invariant1(temp___expr_173: us_rep,
  temp___is_init_169: bool, temp___skip_constant_170: bool,
  temp___do_toplevel_171: bool, temp___do_typ_inv_172: bool) =
  ((not (temp___skip_constant_170 = true)) -> in_range3(y, temp___expr_173))

predicate default_initial_assumption1(temp___expr_175: us_rep,
  temp___skip_top_level_176: bool) =
  ((((temp___expr_175).us_split_discrs1).rec__formals_rec_split__rec__d = y) and
  (formals_rec_split__rec__f__pred(temp___expr_175) ->
  (to_rep(((temp___expr_175).us_split_fields1).rec__formals_rec_split__rec__f) = 1)))

logic v__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS4 : int

logic u__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS5 : int

predicate dynamic_invariant2(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 1)

 (* File "formals_rec_split.adb", line 1, characters 0-0 *)
goal defqtvc :
  (forall v__split_fields:integer. forall u__split_fields:integer.
  (default_initial_assumption({ us_split_discrs1 = v__split_discrs;
  us_split_fields1 = { rec__formals_rec_split__rec__f = v__split_fields } },
  false) -> (dynamic_invariant({ us_split_discrs1 = v__split_discrs;
  us_split_fields1 = { rec__formals_rec_split__rec__f = v__split_fields } },
  false, false, true, true) -> (default_initial_assumption1({
  us_split_discrs1 = u__split_discrs; us_split_fields1 = {
  rec__formals_rec_split__rec__f = u__split_fields } }, false) ->
  (dynamic_invariant1({ us_split_discrs1 = u__split_discrs;
  us_split_fields1 = { rec__formals_rec_split__rec__f = u__split_fields } },
  false, false, true, true) ->
  (forall v__split_fields1:integer. (dynamic_invariant({ us_split_discrs1 =
  v__split_discrs; us_split_fields1 = { rec__formals_rec_split__rec__f =
  v__split_fields1 } }, true, true, true, true) ->
  (forall spark__branch:bool. forall u__split_fields1:integer.
  (((spark__branch = y) and
  (if (spark__branch = true) then (u__split_fields1 = rliteral) else (u__split_fields1 = u__split_fields))) ->
  (forall spark__branch1:bool. ((spark__branch1 = b1) ->
  ((not (spark__branch1 = true)) ->
  (forall spark__branch2:bool. ((spark__branch2 = b2) ->
  ((spark__branch2 = true) -> in_range2(x, { us_split_discrs1 =
  u__split_discrs; us_split_fields1 = { rec__formals_rec_split__rec__f =
  u__split_fields1 } }))))))))))))))))
