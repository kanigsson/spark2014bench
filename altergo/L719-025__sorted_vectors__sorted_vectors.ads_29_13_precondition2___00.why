(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type capacity_range

logic capacity_rangeqtint : capacity_range -> int

axiom capacity_rangeqtaxiom :
  (forall i:capacity_range. (0 <= capacity_rangeqtint(i)))

axiom capacity_rangeqtaxiom1 :
  (forall i:capacity_range. (capacity_rangeqtint(i) <= 100))

predicate in_range2(x: int) = ((0 <= x) and (x <= 100))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : capacity_range, capacity_range -> bool

logic dummy1 : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref_capacity_range__content__projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

function to_rep(x: capacity_range) : int = capacity_rangeqtint(x)

logic of_rep : int -> capacity_range

axiom inversion_axiom :
  (forall x:capacity_range [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:capacity_range [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__sorted_vectors__my_vectors__vector__capacity :
capacity_range
}

function us_split_discrs_rec__sorted_vectors__my_vectors__vector__capacity__projection(a: us_split_discrs) : capacity_range =
  (a).rec__sorted_vectors__my_vectors__vector__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__sorted_vectors__my_vectors__vector :
us_main_type
}

function us_split_fields_rec__sorted_vectors__my_vectors__vector__projection(a: us_split_fields) : us_main_type =
  (a).rec__sorted_vectors__my_vectors__vector

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__sorted_vectors__my_vectors__vector__capacity) = to_rep(((b).us_split_discrs1).rec__sorted_vectors__my_vectors__vector__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__sorted_vectors__my_vectors__vector,
  ((b).us_split_fields1).rec__sorted_vectors__my_vectors__vector) = true)) then true else false)

predicate in_range3(rec__sorted_vectors__my_vectors__vector__capacity1: int,
  a: us_split_discrs) =
  (rec__sorted_vectors__my_vectors__vector__capacity1 = to_rep((a).rec__sorted_vectors__my_vectors__vector__capacity))

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic sorted_vectors__my_vectors__vector__capacity__first__bit : int

logic sorted_vectors__my_vectors__vector__capacity__last__bit : int

logic sorted_vectors__my_vectors__vector__capacity__position : int

axiom sorted_vectors__my_vectors__vector__capacity__first__bit_axiom :
  (0 <= sorted_vectors__my_vectors__vector__capacity__first__bit)

axiom sorted_vectors__my_vectors__vector__capacity__last__bit_axiom :
  (sorted_vectors__my_vectors__vector__capacity__first__bit <  sorted_vectors__my_vectors__vector__capacity__last__bit)

axiom sorted_vectors__my_vectors__vector__capacity__position_axiom :
  (0 <= sorted_vectors__my_vectors__vector__capacity__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type vector__ref = { vector__content : us_rep
}

function vector__ref_vector__content__projection(a: vector__ref) : us_rep =
  (a).vector__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

function capacity(container: us_rep) : int =
  to_rep(((container).us_split_discrs1).rec__sorted_vectors__my_vectors__vector__capacity)

logic capacity__function_guard : int, us_rep -> prop

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq2(a, b)]. (user_eq2(a,
  b) = oeq(a, b)))

predicate dynamic_invariant(temp___expr_250: int, temp___is_init_246: bool,
  temp___skip_constant_247: bool, temp___do_toplevel_248: bool,
  temp___do_typ_inv_249: bool) = (((temp___is_init_246 = true) or
  (0 <= 100)) -> in_range2(temp___expr_250))

axiom length__post_axiom :
  (forall container:us_rep [length(container)].
  (length(container) <= capacity(container)))

axiom length__post_axiom1 :
  (forall container:us_rep [length(container)].
  dynamic_invariant(length(container), true, false, true, true))

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep1

logic bool_eq4 : us_rep1, us_rep1 -> bool

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type sequence__ref = { sequence__content : us_rep1
}

function sequence__ref_sequence__content__projection(a: sequence__ref) : us_rep1 =
  (a).sequence__content

logic get : us_rep1, int -> int

logic get__function_guard : int, us_rep1, int -> prop

logic length1 : us_rep1 -> int

logic length__function_guard1 : int, us_rep1 -> prop

function last(container: us_rep1) : int = (0 + length1(container))

logic last__function_guard : int, us_rep1 -> prop

type element_type

logic element_typeqtint : element_type -> int

axiom element_typeqtaxiom :
  (forall i:element_type. (1 <= element_typeqtint(i)))

axiom element_typeqtaxiom1 :
  (forall i:element_type. (element_typeqtint(i) <= 100))

predicate in_range4(x: int) = ((1 <= x) and (x <= 100))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : element_type, element_type -> bool

logic dummy4 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_element_type__content__3__projection(a: element_type__ref) : element_type =
  (a).element_type__content

predicate dynamic_invariant1(temp___expr_274: int, temp___is_init_270: bool,
  temp___skip_constant_271: bool, temp___do_toplevel_272: bool,
  temp___do_typ_inv_273: bool) = (((temp___is_init_270 = true) or
  (1 <= 100)) -> in_range4(temp___expr_274))

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. (0 <= extended_indexqtint(i)))

axiom extended_indexqtaxiom1 :
  (forall i:extended_index. (extended_indexqtint(i) <= 100))

predicate in_range5(x: int) = ((0 <= x) and (x <= 100))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : extended_index, extended_index -> bool

logic dummy5 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref_extended_index__content__2__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

predicate dynamic_invariant2(temp___expr_281: int, temp___is_init_277: bool,
  temp___skip_constant_278: bool, temp___do_toplevel_279: bool,
  temp___do_typ_inv_280: bool) = (((temp___is_init_277 = true) or
  (0 <= 100)) -> in_range5(temp___expr_281))

logic bool_eq7 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq7(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq7(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length2(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function oeq1(left: us_rep1, right: us_rep1) : bool =
  andb(bool_eq7(length1(left), length1(right)),
  (if (forall n:int. (((1 <= n) and (n <= last(left))) -> (get(left,
      n) = get(right, n)))) then true else false))

logic oeq__function_guard1 : bool, us_rep1, us_rep1 -> prop

axiom user_eq__def_axiom1 :
  (forall a:us_rep1. forall b:us_rep1 [user_eq3(a, b)]. (user_eq3(a,
  b) = oeq1(a, b)))

predicate default_initial_assumption(temp___expr_289: us_rep1,
  temp___skip_top_level_290: bool) =
  ((not (temp___skip_top_level_290 = true)) ->
  (length1(temp___expr_289) = 0))

axiom get__post_axiom :
  (forall container:us_rep1.
  (forall position:int [get(container, position)].
  ((dynamic_invariant2(position, true, true, true, true) and
  ((1 <= position) and (position <= last(container)))) ->
  dynamic_invariant1(get(container, position), true, false, true, true))))

logic model : us_rep -> us_rep1

logic model__function_guard : us_rep1, us_rep -> prop

axiom model__post_axiom :
  (forall container:us_rep [model(container)].
  (length1(model(container)) = length(container)))

logic first_index__function_guard : int, us_rep -> prop

type index_type

logic index_typeqtint : index_type -> int

axiom index_typeqtaxiom : (forall i:index_type. (1 <= index_typeqtint(i)))

axiom index_typeqtaxiom1 : (forall i:index_type. (index_typeqtint(i) <= 100))

predicate in_range6(x: int) = ((1 <= x) and (x <= 100))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : index_type, index_type -> bool

logic dummy6 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref_index_type__content__2__projection(a: index_type__ref) : index_type =
  (a).index_type__content

predicate dynamic_invariant3(temp___expr_222: int, temp___is_init_218: bool,
  temp___skip_constant_219: bool, temp___do_toplevel_220: bool,
  temp___do_typ_inv_221: bool) = (((temp___is_init_218 = true) or
  (1 <= 100)) -> in_range6(temp___expr_222))

function element(container: us_rep, index: int) : int = get(model(container),
  index)

logic element__function_guard : int, us_rep, int -> prop

function last_index(container: us_rep) : int = last(model(container))

logic last_index__function_guard : int, us_rep -> prop

type element_type1

logic element_typeqtint1 : element_type1 -> int

axiom element_typeqtaxiom2 :
  (forall i:element_type1. (1 <= element_typeqtint1(i)))

axiom element_typeqtaxiom3 :
  (forall i:element_type1. (element_typeqtint1(i) <= 100))

predicate in_range7(x: int) = ((1 <= x) and (x <= 100))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : element_type1, element_type1 -> bool

logic dummy7 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref_element_type__content__2__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

predicate dynamic_invariant4(temp___expr_229: int, temp___is_init_225: bool,
  temp___skip_constant_226: bool, temp___do_toplevel_227: bool,
  temp___do_typ_inv_228: bool) = (((temp___is_init_225 = true) or
  (1 <= 100)) -> in_range7(temp___expr_229))

function range_equal(left: us_rep1, right: us_rep1, fst: int,
  lst: int) : bool =
  (if (forall i:int. (((fst <= i) and (i <= lst)) -> (get(left,
      i) = get(right, i)))) then true else false)

logic range_equal__function_guard : bool, us_rep1, us_rep1, int, int -> prop

function range_shifted(left: us_rep1, right: us_rep1, fst: int, lst: int,
  offset: int) : bool =
  andb((if (forall i:int. (((fst <= i) and (i <= lst)) -> (get(left,
           i) = get(right, (i + offset))))) then true else false),
  (if (forall i:int. ((((fst + offset) <= i) and (i <= (lst + offset))) ->
      (get(left, (i - offset)) = get(right, i)))) then true else false))

logic range_shifted__function_guard : bool, us_rep1, us_rep1, int, int,
  int -> prop

logic my_lt : int, int -> bool

logic my_lt__function_guard : bool, int, int -> prop

axiom temp___result_202qtdef :
  (forall container:us_rep1. forall i:int. forall j:int.
  my_lt__function_guard(my_lt(get(container, i), get(container, j)),
  get(container, i), get(container, j)))

function m_elements_sorted(container: us_rep1) : bool =
  (if (forall i:int. (((1 <= i) and (i <= last(container))) ->
      (forall j:int. (((i <= j) and (j <= last(container))) ->
      ((get(container, i) = get(container, j)) or (my_lt(get(container, i),
      get(container, j)) = true)))))) then true else false)

logic m_elements_sorted__function_guard : bool, us_rep1 -> prop

logic is_sorted : us_rep -> bool

logic is_sorted__function_guard : bool, us_rep -> prop

axiom is_sorted__post_axiom :
  (forall container:us_rep [is_sorted(container)].
  ((is_sorted(container) = true) ->
  (m_elements_sorted(model(container)) = true)))

axiom is_sorted__post_axiom1 :
  (forall container:us_rep [is_sorted(container)].
  ((m_elements_sorted(model(container)) = true) ->
  (is_sorted(container) = true)))

logic container__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS : int

logic new_item : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type element_type2

logic element_typeqtint2 : element_type2 -> int

axiom element_typeqtaxiom4 :
  (forall i:element_type2. (1 <= element_typeqtint2(i)))

axiom element_typeqtaxiom5 :
  (forall i:element_type2. (element_typeqtint2(i) <= 100))

predicate in_range8(x: int) = ((1 <= x) and (x <= 100))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq8 : element_type2, element_type2 -> bool

logic dummy8 : element_type2

type element_type__ref2 = { element_type__content2 : element_type2
}

function element_type__ref_element_type__content__projection(a: element_type__ref2) : element_type2 =
  (a).element_type__content2

predicate dynamic_invariant5(temp___expr_208: int, temp___is_init_204: bool,
  temp___skip_constant_205: bool, temp___do_toplevel_206: bool,
  temp___do_typ_inv_207: bool) = (((temp___is_init_204 = true) or
  (1 <= 100)) -> in_range8(temp___expr_208))

type index_type1

logic index_typeqtint1 : index_type1 -> int

axiom index_typeqtaxiom2 : (forall i:index_type1. (1 <= index_typeqtint1(i)))

axiom index_typeqtaxiom3 :
  (forall i:index_type1. (index_typeqtint1(i) <= 100))

predicate in_range9(x: int) = ((1 <= x) and (x <= 100))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq9 : index_type1, index_type1 -> bool

logic dummy9 : index_type1

type index_type__ref1 = { index_type__content1 : index_type1
}

function index_type__ref_index_type__content__projection(a: index_type__ref1) : index_type1 =
  (a).index_type__content1

predicate dynamic_invariant6(temp___expr_215: int, temp___is_init_211: bool,
  temp___skip_constant_212: bool, temp___do_toplevel_213: bool,
  temp___do_typ_inv_214: bool) = (((temp___is_init_211 = true) or
  (1 <= 100)) -> in_range9(temp___expr_215))

predicate dynamic_invariant7(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

axiom my_lt__def_axiom :
  (forall i1:int. forall i2:int [my_lt(i1, i2)]. ((my_lt(i1, i2) = true) ->
  (i1 <  i2)))

axiom my_lt__def_axiom1 :
  (forall i1:int. forall i2:int [my_lt(i1, i2)]. ((i1 <  i2) -> (my_lt(i1,
  i2) = true)))

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range10(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq12(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq10 : count_type, count_type -> bool

logic dummy10 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

predicate dynamic_invariant8(temp___expr_243: int, temp___is_init_239: bool,
  temp___skip_constant_240: bool, temp___do_toplevel_241: bool,
  temp___do_typ_inv_242: bool) = (((temp___is_init_239 = true) or
  (0 <= 2147483647)) -> in_range10(temp___expr_243))

type extended_index1

logic extended_indexqtint1 : extended_index1 -> int

axiom extended_indexqtaxiom2 :
  (forall i:extended_index1. (0 <= extended_indexqtint1(i)))

axiom extended_indexqtaxiom3 :
  (forall i:extended_index1. (extended_indexqtint1(i) <= 101))

predicate in_range11(x: int) = ((0 <= x) and (x <= 101))

function bool_eq13(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq11 : extended_index1, extended_index1 -> bool

logic dummy11 : extended_index1

type extended_index__ref1 = { extended_index__content1 : extended_index1
}

function extended_index__ref_extended_index__content__projection(a: extended_index__ref1) : extended_index1 =
  (a).extended_index__content1

predicate dynamic_invariant9(temp___expr_236: int, temp___is_init_232: bool,
  temp___skip_constant_233: bool, temp___do_toplevel_234: bool,
  temp___do_typ_inv_235: bool) = (((temp___is_init_232 = true) or
  (0 <= 101)) -> in_range11(temp___expr_236))

axiom oeq__post_axiom :
  (forall left:us_rep. forall right:us_rep [oeq(left, right)]. ((oeq(left,
  right) = true) -> (oeq1(model(left), model(right)) = true)))

axiom oeq__post_axiom1 :
  (forall left:us_rep. forall right:us_rep [oeq(left, right)].
  ((oeq1(model(left), model(right)) = true) -> (oeq(left, right) = true)))

axiom length__post_axiom2 :
  (forall container:us_rep1 [length1(container)].
  ((0 + length1(container)) <= 100))

axiom length__post_axiom3 :
  (forall container:us_rep1 [length1(container)].
  dynamic_invariant8(length1(container), true, false, true, true))

 (* File "sorted_vectors.ads", line 20, characters 0-0 *)
goal defqtvc :
  (forall container__split_fields:us_main_type. forall position:int.
  (dynamic_invariant5(new_item, true, false, true, true) ->
  (dynamic_invariant6(position, false, false, true, true) -> ((length({
  us_split_discrs1 = container__split_discrs; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields }
  }) <  to_rep((container__split_discrs).rec__sorted_vectors__my_vectors__vector__capacity)) ->
  (let usf = model({ us_split_discrs1 = container__split_discrs;
  us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields } }) : us_rep1 in ((dynamic_invariant3(1, true,
  false, true, true) and (1 = 1)) ->
  (forall position1:int. ((position1 = 1) ->
  (forall position2:int. ((let o = { us_split_discrs1 =
  container__split_discrs; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields } }
  : us_rep in (let o1 = length(o) : int in ((dynamic_invariant(o1, true,
  false, true, true) and (o1 <= capacity(o))) and
  (((not (position1 <= o1)) or (let o2 = { us_split_discrs1 =
  container__split_discrs; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields } }
  : us_rep in (let o3 = element(o2, position1) : int in
  (dynamic_invariant4(o3, true, false, true, true) and (o3 = get(model(o2),
  position1)))))) and (if ((position1 <= o1) and (element({
  us_split_discrs1 = container__split_discrs; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields } },
  position1) <  new_item)) then ((dynamic_invariant3(1, true, false, true,
  true) and (1 = 1)) and (((position1 = 1) or (let o2 = (position1 - 1)
  : int in (in_range6(o2) and (let o3 = { us_split_discrs1 =
  container__split_discrs; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields } }
  : us_rep in (let o4 = element(o3, o2) : int in (dynamic_invariant4(o4,
  true, false, true, true) and (o4 = get(model(o3), o2)))))))) and
  (exists position3:int. (((position3 = 1) or (element({ us_split_discrs1 =
  container__split_discrs; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields } },
  (position3 - 1)) <  new_item)) and ((andb((if dynamic_invariant6(position3,
  false, true, true, true) then true else false), (if ((position3 <= length({
  us_split_discrs1 = container__split_discrs; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields } })) and
  (element({ us_split_discrs1 = container__split_discrs; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields } },
  position3) <  new_item)) then true else false)) = true) and (let o2 =
  (position3 + 1) : int in (in_range9(o2) and ((position2 = o2) and (let o3 =
  { us_split_discrs1 = container__split_discrs; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields } }
  : us_rep in (let o4 = length(o3) : int in ((dynamic_invariant(o4, true,
  false, true, true) and (o4 <= capacity(o3))) and
  (((not (position2 <= o4)) or (let o5 = { us_split_discrs1 =
  container__split_discrs; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields } }
  : us_rep in (let o6 = element(o5, position2) : int in
  (dynamic_invariant4(o6, true, false, true, true) and (o6 = get(model(o5),
  position2)))))) and (not ((position2 <= o4) and (element({
  us_split_discrs1 = container__split_discrs; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields } },
  position2) <  new_item))))))))))))))) else (position2 = position1)))))) ->
  (let o = container__split_discrs : us_split_discrs in
  (forall container__split_fields1:us_main_type. (((((length({
  us_split_discrs1 = o; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields1 }
  }) = (length({ us_split_discrs1 = o; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields }
  }) + 1)) and (range_equal(model({ us_split_discrs1 = o; us_split_fields1 =
  { rec__sorted_vectors__my_vectors__vector = container__split_fields } }),
  model({ us_split_discrs1 = o; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields1 } }), 1,
  (position2 - 1)) = true)) and (get(model({ us_split_discrs1 = o;
  us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields1 } }), position2) = new_item)) and
  (range_shifted(model({ us_split_discrs1 = o; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields } }),
  model({ us_split_discrs1 = o; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields1 } }),
  position2, last_index({ us_split_discrs1 = o; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields } }),
  1) = true)) -> (let o1 = { us_split_discrs1 = container__split_discrs;
  us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields1 } } : us_rep in (let o2 = length(o1) : int in
  ((dynamic_invariant(o2, true, false, true, true) and
  (o2 <= capacity(o1))) -> ((dynamic_invariant3(1, true, false, true,
  true) and (1 = 1)) -> (let o3 =
  andb((if (1 <= position2) then true else false),
  (if (position2 <= o2) then true else false)) : bool in
  (((not (o3 = true)) or (let o4 = { us_split_discrs1 =
  container__split_discrs; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields1 } }
  : us_rep in (let o5 = length(o4) : int in (dynamic_invariant(o5, true,
  false, true, true) and (o5 <= capacity(o4)))))) -> (((not ((o3 = true) and
  (length({ us_split_discrs1 = container__split_discrs; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields1 }
  }) = (length({ us_split_discrs1 = container__split_discrs;
  us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields } }) + 1)))) or (let o4 = { us_split_discrs1 =
  container__split_discrs; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields1 } }
  : us_rep in (let o5 = element(o4, position2) : int in
  (dynamic_invariant4(o5, true, false, true, true) and (o5 = get(model(o4),
  position2)))))) -> ((((o3 = true) and (length({ us_split_discrs1 =
  container__split_discrs; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields1 }
  }) = (length({ us_split_discrs1 = container__split_discrs;
  us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields } }) + 1))) and (element({ us_split_discrs1 =
  container__split_discrs; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields1 } },
  position2) = new_item)) -> (let o4 = m_elements_sorted(usf) : bool in
  ((forall usf1:us_rep1. forall i:int. forall j:int.
   my_lt__function_guard(my_lt(get(usf1, i), get(usf1, j)), get(usf1, i),
   get(usf1, j))) ->
  (((o4 = true) <->
  (forall i:int. (((1 <= i) and (i <= last(usf))) ->
  (forall j:int. (((i <= j) and (j <= last(usf))) -> ((get(usf, i) = get(usf,
  j)) or (my_lt(get(usf, i), get(usf, j)) = true))))))) ->
  (((not (o4 = true)) or (((if (o4 = true) then is_sorted({
  us_split_discrs1 = container__split_discrs; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields1 }
  }) else of_int(1)) = true) <-> (m_elements_sorted(model({
  us_split_discrs1 = container__split_discrs; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields1 }
  })) = true))) -> ((let o5 = { us_split_discrs1 = container__split_discrs;
  us_split_fields1 = { rec__sorted_vectors__my_vectors__vector =
  container__split_fields1 } } : us_rep in (let o6 = length(o5) : int in
  (dynamic_invariant(o6, true, false, true, true) and
  (o6 <= capacity(o5))))) ->
  (forall usf1:int. ((andb((if (1 <= usf1) then true else false),
  (if (usf1 <= (position2 - 1)) then true else false)) = true) ->
  (in_range5(usf1) -> (dynamic_invariant1(get(model({ us_split_discrs1 =
  container__split_discrs; us_split_fields1 = {
  rec__sorted_vectors__my_vectors__vector = container__split_fields } }),
  usf1), true, false, true, true) -> (in_range6(usf1) -> (1 <= usf1))))))))))))))))))))))))))))))))
