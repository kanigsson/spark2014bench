(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__tagged_types__root__i : integer; rec__ext__ :
us_private
}

function us_split_fields_rec__tagged_types__root__i__projection(a: us_split_fields) : integer =
  (a).rec__tagged_types__root__i

function us_split_fields_rec__ext____projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__projection(a: us_rep) : int = (a).attr__tag

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__tagged_types__root__i) = to_rep(((b).us_split_fields1).rec__tagged_types__root__i)) then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic tagged_types__root__i__first__bit : int

logic tagged_types__root__i__last__bit : int

logic tagged_types__root__i__position : int

axiom tagged_types__root__i__first__bit_axiom :
  (0 <= tagged_types__root__i__first__bit)

axiom tagged_types__root__i__last__bit_axiom :
  (tagged_types__root__i__first__bit <  tagged_types__root__i__last__bit)

axiom tagged_types__root__i__position_axiom :
  (0 <= tagged_types__root__i__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type root__ref = { root__content : us_rep
}

function root__ref_root__content__projection(a: root__ref) : us_rep =
  (a).root__content

type us_split_fields2 = { rec__tagged_types__child__j : integer;
rec__tagged_types__root__i1 : integer; rec__ext__1 : us_private
}

function us_split_fields_rec__tagged_types__child__j__projection(a: us_split_fields2) : integer =
  (a).rec__tagged_types__child__j

function us_split_fields_rec__tagged_types__root__i__2__projection(a: us_split_fields2) : integer =
  (a).rec__tagged_types__root__i1

function us_split_fields_rec__ext____2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_attr__tag__2__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : integer, us_private -> us_private

logic extract__tagged_types__child__j : us_private -> integer

axiom extract__tagged_types__child__j__conv :
  (forall tagged_types__child__j:integer.
  (forall rec__ext__2:us_private.
  (extract__tagged_types__child__j(hide_ext__(tagged_types__child__j,
  rec__ext__2)) = tagged_types__child__j)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__tagged_types__root__i =
  ((a).us_split_fields3).rec__tagged_types__root__i1; rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__tagged_types__child__j,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__tagged_types__child__j =
  extract__tagged_types__child__j(((r).us_split_fields1).rec__ext__);
  rec__tagged_types__root__i1 =
  ((r).us_split_fields1).rec__tagged_types__root__i; rec__ext__1 =
  extract__ext__(((r).us_split_fields1).rec__ext__) }; attr__tag1 =
  (r).attr__tag }

function bool_eq2(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep(((a).us_split_fields3).rec__tagged_types__child__j) = to_rep(((b).us_split_fields3).rec__tagged_types__child__j)) and
  (to_rep(((a).us_split_fields3).rec__tagged_types__root__i1) = to_rep(((b).us_split_fields3).rec__tagged_types__root__i1))) then true else false)

logic us_tag1 : int

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic tagged_types__child__j__first__bit : int

logic tagged_types__child__j__last__bit : int

logic tagged_types__child__j__position : int

axiom tagged_types__child__j__first__bit_axiom :
  (0 <= tagged_types__child__j__first__bit)

axiom tagged_types__child__j__last__bit_axiom :
  (tagged_types__child__j__first__bit <  tagged_types__child__j__last__bit)

axiom tagged_types__child__j__position_axiom :
  (0 <= tagged_types__child__j__position)

logic tagged_types__root__i__first__bit1 : int

logic tagged_types__root__i__last__bit1 : int

logic tagged_types__root__i__position1 : int

axiom tagged_types__root__i__first__bit_axiom1 :
  (0 <= tagged_types__root__i__first__bit1)

axiom tagged_types__root__i__last__bit_axiom1 :
  (tagged_types__root__i__first__bit1 <  tagged_types__root__i__last__bit1)

axiom tagged_types__root__i__position_axiom1 :
  (0 <= tagged_types__root__i__position1)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy2 : us_rep1

type child__ref = { child__content : us_rep1
}

function child__ref_child__content__projection(a: child__ref) : us_rep1 =
  (a).child__content

logic x__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

predicate default_initial_assumption(temp___expr_191: us_rep1,
  temp___skip_top_level_192: bool) = ((temp___expr_191).attr__tag1 = us_tag1)

logic g : us_rep -> int

logic g__function_guard : int, us_rep -> prop

logic g1 : int, us_rep -> int

logic g__function_guard1 : int, int, us_rep -> prop

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

logic f : us_rep -> int

logic f__function_guard : int, us_rep -> prop

logic f1 : int, us_rep -> int

logic f__function_guard1 : int, int, us_rep -> prop

predicate default_initial_assumption1(temp___expr_183: us_rep,
  temp___skip_top_level_184: bool) = ((temp___expr_183).attr__tag = us_tag)

axiom g__post_axiom :
  (forall x:us_rep [g(x)]. (let result = g(x) : int in
  (g__function_guard(result, x) -> dynamic_invariant(result, true, false,
  true, true))))

axiom g__post__dispatch_axiom :
  (forall attr__tag2:int.
  (forall x:us_rep [g1(attr__tag2, x)]. (let result = g1(attr__tag2, x)
  : int in (g__function_guard1(result, attr__tag2, x) ->
  dynamic_invariant(result, true, false, true, true)))))

axiom tagged_types__root__compat_axiom :
  (forall x:us_rep [g1(us_tag, x)]. (g__function_guard1(g1(us_tag, x),
  us_tag, x) -> (forall x1:us_rep. g__function_guard(g(x1), x1))))

axiom tagged_types__root__compat_axiom1 :
  (forall x:us_rep [g1(us_tag, x)]. (g__function_guard1(g1(us_tag, x),
  us_tag, x) -> (g(x) = g1(us_tag, x))))

axiom tagged_types__child__compat_axiom :
  (forall x:us_rep [g1(us_tag1, x)]. (g__function_guard1(g1(us_tag1, x),
  us_tag1, x) -> (forall x1:us_rep. g__function_guard(g(x1), x1))))

axiom tagged_types__child__compat_axiom1 :
  (forall x:us_rep [g1(us_tag1, x)]. (g__function_guard1(g1(us_tag1, x),
  us_tag1, x) -> (g(x) = g1(us_tag1, x))))

axiom g__def_axiom :
  (forall x:us_rep. f__function_guard1(f1((x).attr__tag, x), (x).attr__tag,
  x))

axiom g__def_axiom1 : (forall x:us_rep [g(x)]. (g(x) = f1((x).attr__tag, x)))

logic f2 : us_rep1 -> int

logic f__function_guard2 : int, us_rep1 -> prop

logic f3 : int, us_rep1 -> int

logic f__function_guard3 : int, int, us_rep1 -> prop

axiom f__post_axiom :
  (forall x:us_rep [f(x)]. (let result = f(x) : int in
  (f__function_guard(result, x) -> dynamic_invariant(result, true, false,
  true, true))))

axiom f__post__dispatch_axiom :
  (forall attr__tag2:int.
  (forall x:us_rep [f1(attr__tag2, x)]. (let result = f1(attr__tag2, x)
  : int in (f__function_guard1(result, attr__tag2, x) ->
  dynamic_invariant(result, true, false, true, true)))))

axiom tagged_types__root__compat_axiom2 :
  (forall x:us_rep [f1(us_tag, x)]. (f__function_guard1(f1(us_tag, x),
  us_tag, x) -> (forall x1:us_rep. f__function_guard(f(x1), x1))))

axiom tagged_types__root__compat_axiom3 :
  (forall x:us_rep [f1(us_tag, x)]. (f__function_guard1(f1(us_tag, x),
  us_tag, x) -> (f(x) = f1(us_tag, x))))

axiom tagged_types__child__compat_axiom2 :
  (forall x:us_rep [f1(us_tag1, x)]. (f__function_guard1(f1(us_tag1, x),
  us_tag1, x) ->
  (forall x1:us_rep. f__function_guard2(f2(of_base(x1)), of_base(x1)))))

axiom tagged_types__child__compat_axiom3 :
  (forall x:us_rep [f1(us_tag1, x)]. (f__function_guard1(f1(us_tag1, x),
  us_tag1, x) -> (f2(of_base(x)) = f1(us_tag1, x))))

axiom f__def_axiom :
  (forall x:us_rep [f(x)].
  (f(x) = to_rep(((x).us_split_fields1).rec__tagged_types__root__i)))

axiom f__post_axiom1 :
  (forall x:us_rep1 [f2(x)]. (let result = f2(x) : int in
  (f__function_guard2(result, x) -> dynamic_invariant(result, true, false,
  true, true))))

axiom f__post__dispatch_axiom1 :
  (forall attr__tag2:int.
  (forall x:us_rep1 [f3(attr__tag2, x)]. (let result = f3(attr__tag2, x)
  : int in (f__function_guard3(result, attr__tag2, x) ->
  dynamic_invariant(result, true, false, true, true)))))

axiom tagged_types__child__compat_axiom4 :
  (forall x:us_rep1 [f3(us_tag1, x)]. (f__function_guard3(f3(us_tag1, x),
  us_tag1, x) -> (forall x1:us_rep1. f__function_guard2(f2(x1), x1))))

axiom tagged_types__child__compat_axiom5 :
  (forall x:us_rep1 [f3(us_tag1, x)]. (f__function_guard3(f3(us_tag1, x),
  us_tag1, x) -> (f2(x) = f3(us_tag1, x))))

axiom f__def_axiom1 :
  (forall x:us_rep1 [f2(x)].
  (f2(x) = to_rep(((x).us_split_fields3).rec__tagged_types__child__j)))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 2)

logic rliteral1 : integer

axiom rliteral_axiom1 : (integerqtint(rliteral1) = 1)

 (* File "test_redispatch.adb", line 2, characters 0-0 *)
goal defqtvc :
  (forall x__split_fields:us_split_fields2. ((x__split_fields = {
  rec__tagged_types__child__j = rliteral; rec__tagged_types__root__i1 =
  rliteral1; rec__ext__1 = us_null_ext__ }) -> ((x__attr__tag = us_tag1) ->
  ((forall x__split_fields1:us_split_fields2. g__function_guard(g(to_base({
   us_split_fields3 = x__split_fields1; attr__tag1 = x__attr__tag })),
   to_base({ us_split_fields3 = x__split_fields1; attr__tag1 = x__attr__tag
   }))) ->
  (g(to_base({ us_split_fields3 = x__split_fields; attr__tag1 = x__attr__tag
  })) = 2)))))
