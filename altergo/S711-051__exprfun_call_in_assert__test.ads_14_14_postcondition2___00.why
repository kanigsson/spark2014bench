(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type field_type

predicate in_range(x: int) = ((0 <= x) and (x <= 3))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : field_type, field_type -> bool

logic dummy : field_type

type field_type__ref = { field_type__content : field_type
}

function field_type__ref_field_type__content__projection(a: field_type__ref) : field_type =
  (a).field_type__content

logic to_rep : field_type -> int

logic of_rep : int -> field_type

axiom inversion_axiom :
  (forall x:field_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:field_type [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type state_type

predicate in_range1(x: int) = ((0 <= x) and (x <= 1))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : state_type, state_type -> bool

logic dummy1 : state_type

type state_type__ref = { state_type__content : state_type
}

function state_type__ref_state_type__content__projection(a: state_type__ref) : state_type =
  (a).state_type__content

logic to_rep1 : state_type -> int

logic of_rep1 : int -> state_type

axiom inversion_axiom1 :
  (forall x:state_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:state_type [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_discrs = { rec__test__element_type__state : state_type
}

function us_split_discrs_rec__test__element_type__state__projection(a: us_split_discrs) : state_type =
  (a).rec__test__element_type__state

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_rep = { us_split_discrs1 : us_split_discrs
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if (to_rep1(((a).us_split_discrs1).rec__test__element_type__state) = to_rep1(((b).us_split_discrs1).rec__test__element_type__state)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic test__element_type__state__first__bit : int

logic test__element_type__state__last__bit : int

logic test__element_type__state__position : int

axiom test__element_type__state__first__bit_axiom :
  (0 <= test__element_type__state__first__bit)

axiom test__element_type__state__last__bit_axiom :
  (test__element_type__state__first__bit <  test__element_type__state__last__bit)

axiom test__element_type__state__position_axiom :
  (0 <= test__element_type__state__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type element_type__ref = { element_type__content : us_rep
}

function element_type__ref_element_type__content__projection(a: element_type__ref) : us_rep =
  (a).element_type__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq2((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq2((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))))

logic dummy3 : (int,us_rep) farray

logic value__size1 : int

logic object__size1 : int

logic component__size : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq3 : (int,us_rep) farray, (int,us_rep) farray -> bool

type us_split_fields = { rec__test__context_type__field : field_type;
rec__test__context_type__elements : (int,us_rep) farray
}

function us_split_fields_rec__test__context_type__field__projection(a: us_split_fields) : field_type =
  (a).rec__test__context_type__field

function us_split_fields_rec__test__context_type__elements__projection(a: us_split_fields) : (int,us_rep) farray =
  (a).rec__test__context_type__elements

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

function bool_eq4(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep(((a).us_split_fields1).rec__test__context_type__field) = to_rep(((b).us_split_fields1).rec__test__context_type__field)) and
  (bool_eq3(((a).us_split_fields1).rec__test__context_type__elements, 0, 3,
  ((b).us_split_fields1).rec__test__context_type__elements, 0,
  3) = true)) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic test__context_type__field__first__bit : int

logic test__context_type__field__last__bit : int

logic test__context_type__field__position : int

axiom test__context_type__field__first__bit_axiom :
  (0 <= test__context_type__field__first__bit)

axiom test__context_type__field__last__bit_axiom :
  (test__context_type__field__first__bit <  test__context_type__field__last__bit)

axiom test__context_type__field__position_axiom :
  (0 <= test__context_type__field__position)

logic test__context_type__elements__first__bit : int

logic test__context_type__elements__last__bit : int

logic test__context_type__elements__position : int

axiom test__context_type__elements__first__bit_axiom :
  (0 <= test__context_type__elements__first__bit)

axiom test__context_type__elements__last__bit_axiom :
  (test__context_type__elements__first__bit <  test__context_type__elements__last__bit)

axiom test__context_type__elements__position_axiom :
  (0 <= test__context_type__elements__position)

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy4 : us_rep1

type context_type__ref = { context_type__content : us_rep1
}

function context_type__ref_context_type__content__projection(a: context_type__ref) : us_rep1 =
  (a).context_type__content

logic context_field : us_rep1 -> int

logic context_field__function_guard : int, us_rep1 -> prop

predicate default_initial_assumption(temp___expr_198: us_rep1,
  temp___skip_top_level_199: bool) =
  (forall temp___202:int. (((0 <= temp___202) and (temp___202 <= 3)) ->
  (to_rep1((((((temp___expr_198).us_split_fields1).rec__test__context_type__elements[temp___202])).us_split_discrs1).rec__test__element_type__state) = 1)))

predicate dynamic_invariant(temp___expr_160: int, temp___is_init_156: bool,
  temp___skip_constant_157: bool, temp___do_toplevel_158: bool,
  temp___do_typ_inv_159: bool) = (((temp___is_init_156 = true) or
  (0 <= 3)) -> in_range(temp___expr_160))

axiom context_field__post_axiom :
  (forall context:us_rep1 [context_field(context)]. (let result =
  context_field(context) : int in (context_field__function_guard(result,
  context) -> dynamic_invariant(result, true, false, true, true))))

axiom context_field__def_axiom :
  (forall context:us_rep1 [context_field(context)].
  (context_field(context) = to_rep(((context).us_split_fields1).rec__test__context_type__field)))

logic attr__ATTRIBUTE_ADDRESS : int

predicate in_range2(rec__test__element_type__state1: int, a: us_rep) =
  (rec__test__element_type__state1 = to_rep1(((a).us_split_discrs1).rec__test__element_type__state))

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic test__element_type__state__first__bit1 : int

logic test__element_type__state__last__bit1 : int

logic test__element_type__state__position1 : int

axiom test__element_type__state__first__bit_axiom1 :
  (0 <= test__element_type__state__first__bit1)

axiom test__element_type__state__last__bit_axiom1 :
  (test__element_type__state__first__bit1 <  test__element_type__state__last__bit1)

axiom test__element_type__state__position_axiom1 :
  (0 <= test__element_type__state__position1)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : us_rep

type t2b__ref = { t2b__content : us_rep
}

function t2b__ref_t2b__content__projection(a: t2b__ref) : us_rep =
  (a).t2b__content

predicate default_initial_assumption1(temp___expr_186: (int,us_rep) farray,
  temp___skip_top_level_187: bool) =
  (forall temp___188:int. (((0 <= temp___188) and (temp___188 <= 3)) ->
  (to_rep1((((temp___expr_186[temp___188])).us_split_discrs1).rec__test__element_type__state) = 1)))

predicate dynamic_invariant1(temp___expr_167: int, temp___is_init_163: bool,
  temp___skip_constant_164: bool, temp___do_toplevel_165: bool,
  temp___do_typ_inv_166: bool) = (((temp___is_init_163 = true) or
  (0 <= 1)) -> in_range1(temp___expr_167))

predicate default_initial_assumption2(temp___expr_176: us_rep,
  temp___skip_top_level_177: bool) =
  (to_rep1(((temp___expr_176).us_split_discrs1).rec__test__element_type__state) = 1)

 (* File "test.ads", line 12, characters 0-0 *)
goal defqtvc :
  (forall context__split_fields:us_split_fields.
  ((forall context__split_fields1:us_split_fields.
   context_field__function_guard(context_field({ us_split_fields1 =
   context__split_fields1 }), { us_split_fields1 = context__split_fields1 })) ->
  ((context_field({ us_split_fields1 = context__split_fields }) = 0) ->
  (forall o:state_type. ((to_rep1(o) = 0) ->
  (forall context__split_fields1:us_split_fields.
  ((context__split_fields1 = { rec__test__context_type__field =
  (context__split_fields).rec__test__context_type__field;
  rec__test__context_type__elements =
  ((context__split_fields).rec__test__context_type__elements[1 <- {
  us_split_discrs1 = { rec__test__element_type__state = o } }]) }) ->
  (forall o1:field_type. ((to_rep(o1) = 1) ->
  (forall context__split_fields2:us_split_fields.
  ((context__split_fields2 = { rec__test__context_type__field = o1;
  rec__test__context_type__elements =
  (context__split_fields1).rec__test__context_type__elements }) ->
  ((to_rep((context__split_fields2).rec__test__context_type__field) = 1) ->
  ((forall context__split_fields3:us_split_fields.
   context_field__function_guard(context_field({ us_split_fields1 =
   context__split_fields3 }), { us_split_fields1 = context__split_fields3 })) ->
  ((context_field({ us_split_fields1 = context__split_fields2 }) = 1) ->
  ((forall context__split_fields3:us_split_fields.
   context_field__function_guard(context_field({ us_split_fields1 =
   context__split_fields3 }), { us_split_fields1 = context__split_fields3 })) ->
  (context_field({ us_split_fields1 = context__split_fields2 }) = 1))))))))))))))))
