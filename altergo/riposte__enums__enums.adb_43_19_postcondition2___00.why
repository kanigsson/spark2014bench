(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic a : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type big_type

predicate in_range1(x: int) = ((0 <= x) and (x <= 8))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : big_type, big_type -> bool

logic dummy : big_type

type big_type__ref = { big_type__content : big_type
}

function big_type__ref_big_type__content__projection(a1: big_type__ref) : big_type =
  (a1).big_type__content

predicate dynamic_invariant(temp___expr_169: int, temp___is_init_165: bool,
  temp___skip_constant_166: bool, temp___do_toplevel_167: bool,
  temp___do_typ_inv_168: bool) = (((temp___is_init_165 = true) or
  (0 <= 8)) -> in_range1(temp___expr_169))

 (* File "enums.adb", line 42, characters 0-0 *)
goal defqtvc : (dynamic_invariant(a, true, false, true, true) ->
  (forall r:bool.
  ((exists spark__branch:bool.
   ((spark__branch = (if (a = 0) then true else false)) and
   (if (spark__branch = true) then (r = of_int(1)) else (exists spark__branch1:bool.
                                                        ((spark__branch1 = (if (a = 1) then true else false)) and
                                                        (if (spark__branch1 = true) then (r = of_int(1)) else 
                                                        (exists spark__branch2:bool.
                                                        ((spark__branch2 = (if (a = 2) then true else false)) and
                                                        (if (spark__branch2 = true) then (r = (if (a = 2) then true else false)) else 
                                                        (exists spark__branch3:bool.
                                                        ((spark__branch3 = (if (a = 3) then true else false)) and
                                                        (if (spark__branch3 = true) then (r = (if (a = 8) then false else true)) else 
                                                        (exists spark__branch4:bool.
                                                        ((spark__branch4 = (if (a = 4) then true else false)) and
                                                        (if (spark__branch4 = true) then (r = (if (a <  6) then true else false)) else 
                                                        (exists spark__branch5:bool.
                                                        ((spark__branch5 = (if (a = 7) then true else false)) and
                                                        (if (spark__branch5 = true) then (r = (if (a <  5) then true else false)) else (r = of_int(0)))))))))))))))))))) ->
  (forall enums__enum_lt_5__result:bool. ((enums__enum_lt_5__result = r) ->
  ((enums__enum_lt_5__result = true) -> (a <  5)))))))
