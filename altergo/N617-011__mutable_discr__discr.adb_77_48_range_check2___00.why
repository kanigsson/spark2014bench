(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

logic c : int

logic attr__ATTRIBUTE_ADDRESS : int

type us_split_discrs = { rec__discr__r6__with_bad_default1__d : natural
}

function us_split_discrs_rec__discr__r6__with_bad_default1__d__projection(a: us_split_discrs) : natural =
  (a).rec__discr__r6__with_bad_default1__d

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__3__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_rep = { us_split_discrs1 : us_split_discrs
}

function us_rep___split_discrs__3__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_discrs1).rec__discr__r6__with_bad_default1__d) = to_rep(((b).us_split_discrs1).rec__discr__r6__with_bad_default1__d)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic discr__r6__with_bad_default1__d__first__bit : int

logic discr__r6__with_bad_default1__d__last__bit : int

logic discr__r6__with_bad_default1__d__position : int

axiom discr__r6__with_bad_default1__d__first__bit_axiom :
  (0 <= discr__r6__with_bad_default1__d__first__bit)

axiom discr__r6__with_bad_default1__d__last__bit_axiom :
  (discr__r6__with_bad_default1__d__first__bit <  discr__r6__with_bad_default1__d__last__bit)

axiom discr__r6__with_bad_default1__d__position_axiom :
  (0 <= discr__r6__with_bad_default1__d__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type with_bad_default1__ref = { with_bad_default1__content : us_rep
}

function with_bad_default1__ref_with_bad_default1__content__projection(a: with_bad_default1__ref) : us_rep =
  (a).with_bad_default1__content

logic d1__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate default_initial_assumption(temp___expr_224: us_rep,
  temp___skip_top_level_225: bool) =
  (to_rep(((temp___expr_224).us_split_discrs1).rec__discr__r6__with_bad_default1__d) = (c + 1))

logic f : int -> int

logic f__function_guard : int, int -> prop

axiom f__post_axiom :
  (forall x:int [f(x)]. ((dynamic_invariant(x, true, true, true, true) and
  (0 <  x)) -> (let result = f(x) : int in (f__function_guard(result, x) ->
  dynamic_invariant(result, true, false, true, true)))))

axiom f__def_axiom :
  (forall x:int [f(x)]. (dynamic_invariant(x, true, true, true, true) ->
  (f(x) = (x - 1))))

type us_split_discrs2 = { rec__discr__r6__with_bad_default2__d : natural
}

function us_split_discrs_rec__discr__r6__with_bad_default2__d__projection(a: us_split_discrs2) : natural =
  (a).rec__discr__r6__with_bad_default2__d

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___split_discrs__content__4__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_rep1 = { us_split_discrs3 : us_split_discrs2
}

function us_rep___split_discrs__4__projection(a: us_rep1) : us_split_discrs2 =
  (a).us_split_discrs3

function bool_eq3(a: us_rep1, b: us_rep1) : bool =
  (if (to_rep(((a).us_split_discrs3).rec__discr__r6__with_bad_default2__d) = to_rep(((b).us_split_discrs3).rec__discr__r6__with_bad_default2__d)) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic discr__r6__with_bad_default2__d__first__bit : int

logic discr__r6__with_bad_default2__d__last__bit : int

logic discr__r6__with_bad_default2__d__position : int

axiom discr__r6__with_bad_default2__d__first__bit_axiom :
  (0 <= discr__r6__with_bad_default2__d__first__bit)

axiom discr__r6__with_bad_default2__d__last__bit_axiom :
  (discr__r6__with_bad_default2__d__first__bit <  discr__r6__with_bad_default2__d__last__bit)

axiom discr__r6__with_bad_default2__d__position_axiom :
  (0 <= discr__r6__with_bad_default2__d__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type with_bad_default2__ref = { with_bad_default2__content : us_rep1
}

function with_bad_default2__ref_with_bad_default2__content__projection(a: with_bad_default2__ref) : us_rep1 =
  (a).with_bad_default2__content

logic d2__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS2 : int

axiom temp___result_236qtdef : f__function_guard(f(c), c)

predicate default_initial_assumption1(temp___expr_233: us_rep1,
  temp___skip_top_level_234: bool) =
  (to_rep(((temp___expr_233).us_split_discrs3).rec__discr__r6__with_bad_default2__d) = f(c))

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

 (* File "discr.ads", line 18, characters 0-0 *)
goal defqtvc : (dynamic_invariant(c, true, false, true, true) -> (let o =
  (c + 1) : int in (in_range(o) -> in_range1(o))))
