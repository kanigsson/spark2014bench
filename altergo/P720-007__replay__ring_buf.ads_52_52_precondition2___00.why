(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (div(x, y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((-abs_int(y)) <  mod(x,
  y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (mod(x, y) <  abs_int(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <  y) then (x % y) else ((x % y) + y))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type ar_index

logic ar_indexqtint : ar_index -> int

axiom ar_indexqtaxiom : (forall i:ar_index. (0 <= ar_indexqtint(i)))

axiom ar_indexqtaxiom1 : (forall i:ar_index. (ar_indexqtint(i) <= 9999))

predicate in_range1(x: int) = ((0 <= x) and (x <= 9999))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : ar_index, ar_index -> bool

logic dummy1 : ar_index

type ar_index__ref = { ar_index__content : ar_index
}

function ar_index__ref_ar_index__content__projection(a: ar_index__ref) : ar_index =
  (a).ar_index__content

function to_rep1(x: ar_index) : int = ar_indexqtint(x)

logic of_rep1 : int -> ar_index

axiom inversion_axiom1 :
  (forall x:ar_index [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:ar_index [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type length_type

logic length_typeqtint : length_type -> int

axiom length_typeqtaxiom : (forall i:length_type. (0 <= length_typeqtint(i)))

axiom length_typeqtaxiom1 :
  (forall i:length_type. (length_typeqtint(i) <= 10000))

predicate in_range2(x: int) = ((0 <= x) and (x <= 10000))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : length_type, length_type -> bool

logic dummy2 : length_type

type length_type__ref = { length_type__content : length_type
}

function length_type__ref_length_type__content__projection(a: length_type__ref) : length_type =
  (a).length_type__content

function to_rep2(x: length_type) : int = length_typeqtint(x)

logic of_rep2 : int -> length_type

axiom inversion_axiom2 :
  (forall x:length_type [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:length_type [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic dummy3 : (int,integer) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq3 : (int,integer) farray, (int,integer) farray -> bool

type us_split_fields = { rec__ring_buf__ring_buffer__data :
(int,integer) farray; rec__ring_buf__ring_buffer__first : ar_index;
rec__ring_buf__ring_buffer__length : length_type
}

function us_split_fields_rec__ring_buf__ring_buffer__data__projection(a: us_split_fields) : (int,integer) farray =
  (a).rec__ring_buf__ring_buffer__data

function us_split_fields_rec__ring_buf__ring_buffer__first__projection(a: us_split_fields) : ar_index =
  (a).rec__ring_buf__ring_buffer__first

function us_split_fields_rec__ring_buf__ring_buffer__length__projection(a: us_split_fields) : length_type =
  (a).rec__ring_buf__ring_buffer__length

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq4(a: us_rep, b: us_rep) : bool =
  (if (((bool_eq3(((a).us_split_fields1).rec__ring_buf__ring_buffer__data, 0,
  9999, ((b).us_split_fields1).rec__ring_buf__ring_buffer__data, 0,
  9999) = true) and
  (to_rep1(((a).us_split_fields1).rec__ring_buf__ring_buffer__first) = to_rep1(((b).us_split_fields1).rec__ring_buf__ring_buffer__first))) and
  (to_rep2(((a).us_split_fields1).rec__ring_buf__ring_buffer__length) = to_rep2(((b).us_split_fields1).rec__ring_buf__ring_buffer__length))) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic ring_buf__ring_buffer__data__first__bit : int

logic ring_buf__ring_buffer__data__last__bit : int

logic ring_buf__ring_buffer__data__position : int

axiom ring_buf__ring_buffer__data__first__bit_axiom :
  (0 <= ring_buf__ring_buffer__data__first__bit)

axiom ring_buf__ring_buffer__data__last__bit_axiom :
  (ring_buf__ring_buffer__data__first__bit <  ring_buf__ring_buffer__data__last__bit)

axiom ring_buf__ring_buffer__data__position_axiom :
  (0 <= ring_buf__ring_buffer__data__position)

logic ring_buf__ring_buffer__first__first__bit : int

logic ring_buf__ring_buffer__first__last__bit : int

logic ring_buf__ring_buffer__first__position : int

axiom ring_buf__ring_buffer__first__first__bit_axiom :
  (0 <= ring_buf__ring_buffer__first__first__bit)

axiom ring_buf__ring_buffer__first__last__bit_axiom :
  (ring_buf__ring_buffer__first__first__bit <  ring_buf__ring_buffer__first__last__bit)

axiom ring_buf__ring_buffer__first__position_axiom :
  (0 <= ring_buf__ring_buffer__first__position)

logic ring_buf__ring_buffer__length__first__bit : int

logic ring_buf__ring_buffer__length__last__bit : int

logic ring_buf__ring_buffer__length__position : int

axiom ring_buf__ring_buffer__length__first__bit_axiom :
  (0 <= ring_buf__ring_buffer__length__first__bit)

axiom ring_buf__ring_buffer__length__last__bit_axiom :
  (ring_buf__ring_buffer__length__first__bit <  ring_buf__ring_buffer__length__last__bit)

axiom ring_buf__ring_buffer__length__position_axiom :
  (0 <= ring_buf__ring_buffer__length__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type ring_buffer__ref = { ring_buffer__content : us_rep
}

function ring_buffer__ref_ring_buffer__content__projection(a: ring_buffer__ref) : us_rep =
  (a).ring_buffer__content

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

axiom is_empty__def_axiom :
  (forall r:us_rep [is_empty(r)]. ((is_empty(r) = true) ->
  (to_rep2(((r).us_split_fields1).rec__ring_buf__ring_buffer__length) = 0)))

axiom is_empty__def_axiom1 :
  (forall r:us_rep [is_empty(r)].
  ((to_rep2(((r).us_split_fields1).rec__ring_buf__ring_buffer__length) = 0) ->
  (is_empty(r) = true)))

logic head : us_rep -> int

logic head__function_guard : int, us_rep -> prop

axiom head__post_axiom :
  (forall r:us_rep. is_empty__function_guard(is_empty(r), r))

axiom head__post_axiom1 :
  (forall r:us_rep [head(r)]. ((not (is_empty(r) = true)) -> (let result =
  head(r) : int in (head__function_guard(result, r) ->
  dynamic_invariant(result, true, false, true, true)))))

axiom head__def_axiom :
  (forall r:us_rep [head(r)].
  (head(r) = to_rep((((r).us_split_fields1).rec__ring_buf__ring_buffer__data[to_rep1(((r).us_split_fields1).rec__ring_buf__ring_buffer__first)]))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant1(temp___expr_162: int, temp___is_init_158: bool,
  temp___skip_constant_159: bool, temp___do_toplevel_160: bool,
  temp___do_typ_inv_161: bool) = (((temp___is_init_158 = true) or
  (0 <= 9999)) -> in_range1(temp___expr_162))

predicate dynamic_invariant2(temp___expr_169: int, temp___is_init_165: bool,
  temp___skip_constant_166: bool, temp___do_toplevel_167: bool,
  temp___do_typ_inv_168: bool) = (((temp___is_init_165 = true) or
  (0 <= 10000)) -> in_range2(temp___expr_169))

axiom cdiv_cases :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((0 <  d) -> (div(n,
  d) = (n / d)))))

axiom cdiv_cases1 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((0 <  d) -> (div(n,
  d) = (-((-n) / d))))))

axiom cdiv_cases2 :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((d <  0) -> (div(n,
  d) = (-(n / (-d)))))))

axiom cdiv_cases3 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((d <  0) -> (div(n,
  d) = ((-n) / (-d))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))))

axiom cmod_cases1 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))))

axiom cmod_cases2 :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))))

axiom cmod_cases3 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d)))))))

 (* File "ring_buf.ads", line 49, characters 0-0 *)
goal defqtvc :
  (forall r__split_fields:us_split_fields. forall element:int.
  (forall r__split_fields1:us_split_fields.
  ((r__split_fields1 = r__split_fields) -> (dynamic_invariant(element, false,
  false, true, true) ->
  ((forall r__split_fields2:us_split_fields.
   is_empty__function_guard(is_empty({ us_split_fields1 = r__split_fields2
   }), { us_split_fields1 = r__split_fields2 })) ->
  ((not (is_empty({ us_split_fields1 = r__split_fields }) = true)) ->
  (forall o:int.
  ((to_rep1((r__split_fields).rec__ring_buf__ring_buffer__first) = o) ->
  (forall o1:int.
  ((to_rep(((r__split_fields).rec__ring_buf__ring_buffer__data[o])) = o1) ->
  (forall element1:int. ((element1 = o1) ->
  (forall o2:int.
  ((to_rep1((r__split_fields).rec__ring_buf__ring_buffer__first) = o2) ->
  (forall o3:ar_index. ((to_rep1(o3) = mod1((o2 + 1), 10000)) ->
  (forall r__split_fields2:us_split_fields. ((r__split_fields2 = {
  rec__ring_buf__ring_buffer__data =
  (r__split_fields).rec__ring_buf__ring_buffer__data;
  rec__ring_buf__ring_buffer__first = o3;
  rec__ring_buf__ring_buffer__length =
  (r__split_fields).rec__ring_buf__ring_buffer__length }) ->
  (forall o4:int.
  ((to_rep2((r__split_fields2).rec__ring_buf__ring_buffer__length) = o4) ->
  (let o5 = (o4 - 1) : int in (in_range2(o5) ->
  (forall o6:length_type. ((to_rep2(o6) = o5) ->
  (forall r__split_fields3:us_split_fields. ((r__split_fields3 = {
  rec__ring_buf__ring_buffer__data =
  (r__split_fields2).rec__ring_buf__ring_buffer__data;
  rec__ring_buf__ring_buffer__first =
  (r__split_fields2).rec__ring_buf__ring_buffer__first;
  rec__ring_buf__ring_buffer__length = o6 }) ->
  (forall o7:int.
  ((to_rep2((r__split_fields3).rec__ring_buf__ring_buffer__length) = o7) ->
  ((o7 = (to_rep2((r__split_fields).rec__ring_buf__ring_buffer__length) - 1)) ->
  ((forall usf:us_rep. is_empty__function_guard(is_empty(usf), usf)) ->
  (not (is_empty({ us_split_fields1 = r__split_fields }) = true))))))))))))))))))))))))))))))))
