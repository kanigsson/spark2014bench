(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_invariant1(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range2(temp___expr_46))

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type read_status

predicate in_range4(x: int) = ((0 <= x) and (x <= 2))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : read_status, read_status -> bool

logic dummy3 : read_status

type read_status__ref = { read_status__content : read_status
}

function read_status__ref_read_status__content__projection(a: read_status__ref) : read_status =
  (a).read_status__content

logic to_rep1 : read_status -> int

logic of_rep1 : int -> read_status

axiom inversion_axiom1 :
  (forall x:read_status [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:read_status [to_rep1(x)]. in_range4(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range4(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_discrs = { rec__file_io__read_result__status : read_status
}

function us_split_discrs_rec__file_io__read_result__status__projection(a: us_split_discrs) : read_status =
  (a).rec__file_io__read_result__status

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__file_io__read_result__c : character
}

function us_split_fields_rec__file_io__read_result__c__projection(a: us_split_fields) : character =
  (a).rec__file_io__read_result__c

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__2__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

predicate file_io__read_result__c__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__file_io__read_result__status) = 0)

function bool_eq5(a: us_rep, b: us_rep) : bool =
  (if ((to_rep1(((a).us_split_discrs1).rec__file_io__read_result__status) = to_rep1(((b).us_split_discrs1).rec__file_io__read_result__status)) and
  (file_io__read_result__c__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__file_io__read_result__c) = to_rep(((b).us_split_fields1).rec__file_io__read_result__c)))) then true else false)

predicate in_range5(rec__file_io__read_result__status1: int,
  a: us_split_discrs) =
  (rec__file_io__read_result__status1 = to_rep1((a).rec__file_io__read_result__status))

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic file_io__read_result__status__first__bit : int

logic file_io__read_result__status__last__bit : int

logic file_io__read_result__status__position : int

axiom file_io__read_result__status__first__bit_axiom :
  (0 <= file_io__read_result__status__first__bit)

axiom file_io__read_result__status__last__bit_axiom :
  (file_io__read_result__status__first__bit <  file_io__read_result__status__last__bit)

axiom file_io__read_result__status__position_axiom :
  (0 <= file_io__read_result__status__position)

logic file_io__read_result__c__first__bit : int

logic file_io__read_result__c__last__bit : int

logic file_io__read_result__c__position : int

axiom file_io__read_result__c__first__bit_axiom :
  (0 <= file_io__read_result__c__first__bit)

axiom file_io__read_result__c__last__bit_axiom :
  (file_io__read_result__c__first__bit <  file_io__read_result__c__last__bit)

axiom file_io__read_result__c__position_axiom :
  (0 <= file_io__read_result__c__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type read_result__ref = { read_result__content : us_rep
}

function read_result__ref_read_result__content__projection(a: read_result__ref) : us_rep =
  (a).read_result__content

logic current_read__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS : int

predicate default_initial_assumption(temp___expr_217: us_rep,
  temp___skip_top_level_218: bool) =
  (to_rep1(((temp___expr_217).us_split_discrs1).rec__file_io__read_result__status) = 2)

logic next_read__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep1

logic bool_eq6 : us_rep1, us_rep1 -> bool

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy5 : us_rep1

type file__ref = { file__content : us_rep1
}

function file__ref_file__content__projection(a: file__ref) : us_rep1 =
  (a).file__content

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic local_invariant : us_rep1, int, us_split_fields, us_split_discrs, int,
  us_split_fields, us_split_discrs -> bool

logic local_invariant__function_guard : bool, us_rep1, int, us_split_fields,
  us_split_discrs, int, us_split_fields, us_split_discrs -> prop

logic size : us_rep1 -> int

logic size__function_guard : int, us_rep1 -> prop

logic index : us_rep1 -> int

logic index__function_guard : int, us_rep1 -> prop

axiom local_invariant__def_axiom :
  (forall lexer__the_file:us_rep1.
  size__function_guard(size(lexer__the_file), lexer__the_file))

axiom local_invariant__def_axiom1 :
  (forall lexer__the_file:us_rep1.
  size__function_guard(size(lexer__the_file), lexer__the_file))

axiom local_invariant__def_axiom2 :
  (forall lexer__the_file:us_rep1.
  index__function_guard(index(lexer__the_file), lexer__the_file))

axiom local_invariant__def_axiom3 :
  (forall lexer__the_file:us_rep1.
  (forall lexer__next_idx:int. forall lexer__current_idx:int.
  (forall lexer__current_read__fields:us_split_fields.
  forall lexer__next_read__fields:us_split_fields.
  (forall lexer__current_read__discrs:us_split_discrs.
  forall lexer__next_read__discrs:us_split_discrs
  [local_invariant(lexer__the_file, lexer__next_idx,
  lexer__current_read__fields, lexer__current_read__discrs,
  lexer__current_idx, lexer__next_read__fields, lexer__next_read__discrs)].
  ((local_invariant(lexer__the_file, lexer__next_idx,
  lexer__current_read__fields, lexer__current_read__discrs,
  lexer__current_idx, lexer__next_read__fields,
  lexer__next_read__discrs) = true) ->
  (not (current_read__attr__constrained = true)))))))

axiom local_invariant__def_axiom4 :
  (forall lexer__the_file:us_rep1.
  (forall lexer__next_idx:int. forall lexer__current_idx:int.
  (forall lexer__current_read__fields:us_split_fields.
  forall lexer__next_read__fields:us_split_fields.
  (forall lexer__current_read__discrs:us_split_discrs.
  forall lexer__next_read__discrs:us_split_discrs
  [local_invariant(lexer__the_file, lexer__next_idx,
  lexer__current_read__fields, lexer__current_read__discrs,
  lexer__current_idx, lexer__next_read__fields, lexer__next_read__discrs)].
  ((local_invariant(lexer__the_file, lexer__next_idx,
  lexer__current_read__fields, lexer__current_read__discrs,
  lexer__current_idx, lexer__next_read__fields,
  lexer__next_read__discrs) = true) ->
  (not (next_read__attr__constrained = true)))))))

axiom local_invariant__def_axiom5 :
  (forall lexer__the_file:us_rep1.
  (forall lexer__next_idx:int. forall lexer__current_idx:int.
  (forall lexer__current_read__fields:us_split_fields.
  forall lexer__next_read__fields:us_split_fields.
  (forall lexer__current_read__discrs:us_split_discrs.
  forall lexer__next_read__discrs:us_split_discrs
  [local_invariant(lexer__the_file, lexer__next_idx,
  lexer__current_read__fields, lexer__current_read__discrs,
  lexer__current_idx, lexer__next_read__fields, lexer__next_read__discrs)].
  ((local_invariant(lexer__the_file, lexer__next_idx,
  lexer__current_read__fields, lexer__current_read__discrs,
  lexer__current_idx, lexer__next_read__fields,
  lexer__next_read__discrs) = true) ->
  (lexer__current_idx <= size(lexer__the_file)))))))

axiom local_invariant__def_axiom6 :
  (forall lexer__the_file:us_rep1.
  (forall lexer__next_idx:int. forall lexer__current_idx:int.
  (forall lexer__current_read__fields:us_split_fields.
  forall lexer__next_read__fields:us_split_fields.
  (forall lexer__current_read__discrs:us_split_discrs.
  forall lexer__next_read__discrs:us_split_discrs
  [local_invariant(lexer__the_file, lexer__next_idx,
  lexer__current_read__fields, lexer__current_read__discrs,
  lexer__current_idx, lexer__next_read__fields, lexer__next_read__discrs)].
  ((local_invariant(lexer__the_file, lexer__next_idx,
  lexer__current_read__fields, lexer__current_read__discrs,
  lexer__current_idx, lexer__next_read__fields,
  lexer__next_read__discrs) = true) ->
  (lexer__next_idx <= size(lexer__the_file)))))))

axiom local_invariant__def_axiom7 :
  (forall lexer__the_file:us_rep1.
  (forall lexer__next_idx:int. forall lexer__current_idx:int.
  (forall lexer__current_read__fields:us_split_fields.
  forall lexer__next_read__fields:us_split_fields.
  (forall lexer__current_read__discrs:us_split_discrs.
  forall lexer__next_read__discrs:us_split_discrs
  [local_invariant(lexer__the_file, lexer__next_idx,
  lexer__current_read__fields, lexer__current_read__discrs,
  lexer__current_idx, lexer__next_read__fields, lexer__next_read__discrs)].
  ((local_invariant(lexer__the_file, lexer__next_idx,
  lexer__current_read__fields, lexer__current_read__discrs,
  lexer__current_idx, lexer__next_read__fields,
  lexer__next_read__discrs) = true) ->
  (lexer__next_idx = index(lexer__the_file)))))))

axiom local_invariant__def_axiom8 :
  (forall lexer__the_file:us_rep1.
  (forall lexer__next_idx:int. forall lexer__current_idx:int.
  (forall lexer__current_read__fields:us_split_fields.
  forall lexer__next_read__fields:us_split_fields.
  (forall lexer__current_read__discrs:us_split_discrs.
  forall lexer__next_read__discrs:us_split_discrs
  [local_invariant(lexer__the_file, lexer__next_idx,
  lexer__current_read__fields, lexer__current_read__discrs,
  lexer__current_idx, lexer__next_read__fields, lexer__next_read__discrs)].
  ((local_invariant(lexer__the_file, lexer__next_idx,
  lexer__current_read__fields, lexer__current_read__discrs,
  lexer__current_idx, lexer__next_read__fields,
  lexer__next_read__discrs) = true) ->
  (lexer__current_idx <= lexer__next_idx))))))

axiom local_invariant__def_axiom9 :
  (forall lexer__the_file:us_rep1.
  (forall lexer__next_idx:int. forall lexer__current_idx:int.
  (forall lexer__current_read__fields:us_split_fields.
  forall lexer__next_read__fields:us_split_fields.
  (forall lexer__current_read__discrs:us_split_discrs.
  forall lexer__next_read__discrs:us_split_discrs
  [local_invariant(lexer__the_file, lexer__next_idx,
  lexer__current_read__fields, lexer__current_read__discrs,
  lexer__current_idx, lexer__next_read__fields, lexer__next_read__discrs)].
  ((local_invariant(lexer__the_file, lexer__next_idx,
  lexer__current_read__fields, lexer__current_read__discrs,
  lexer__current_idx, lexer__next_read__fields,
  lexer__next_read__discrs) = true) -> ((to_rep1((({ us_split_discrs1 =
  lexer__next_read__discrs; us_split_fields1 = lexer__next_read__fields
  }).us_split_discrs1).rec__file_io__read_result__status) = 0) ->
  (to_rep1((({ us_split_discrs1 = lexer__current_read__discrs;
  us_split_fields1 = lexer__current_read__fields
  }).us_split_discrs1).rec__file_io__read_result__status) = 0)))))))

axiom local_invariant__def_axiom10 :
  (forall lexer__the_file:us_rep1.
  (forall lexer__next_idx:int. forall lexer__current_idx:int.
  (forall lexer__current_read__fields:us_split_fields.
  forall lexer__next_read__fields:us_split_fields.
  (forall lexer__current_read__discrs:us_split_discrs.
  forall lexer__next_read__discrs:us_split_discrs
  [local_invariant(lexer__the_file, lexer__next_idx,
  lexer__current_read__fields, lexer__current_read__discrs,
  lexer__current_idx, lexer__next_read__fields, lexer__next_read__discrs)].
  ((local_invariant(lexer__the_file, lexer__next_idx,
  lexer__current_read__fields, lexer__current_read__discrs,
  lexer__current_idx, lexer__next_read__fields,
  lexer__next_read__discrs) = true) -> ((to_rep1((({ us_split_discrs1 =
  lexer__next_read__discrs; us_split_fields1 = lexer__next_read__fields
  }).us_split_discrs1).rec__file_io__read_result__status) = 0) ->
  (lexer__current_idx = (lexer__next_idx - 1))))))))

axiom local_invariant__def_axiom11 :
  (forall lexer__the_file:us_rep1.
  (forall lexer__next_idx:int. forall lexer__current_idx:int.
  (forall lexer__current_read__fields:us_split_fields.
  forall lexer__next_read__fields:us_split_fields.
  (forall lexer__current_read__discrs:us_split_discrs.
  forall lexer__next_read__discrs:us_split_discrs
  [local_invariant(lexer__the_file, lexer__next_idx,
  lexer__current_read__fields, lexer__current_read__discrs,
  lexer__current_idx, lexer__next_read__fields, lexer__next_read__discrs)].
  ((local_invariant(lexer__the_file, lexer__next_idx,
  lexer__current_read__fields, lexer__current_read__discrs,
  lexer__current_idx, lexer__next_read__fields,
  lexer__next_read__discrs) = true) -> ((not (to_rep1((({ us_split_discrs1 =
  lexer__next_read__discrs; us_split_fields1 = lexer__next_read__fields
  }).us_split_discrs1).rec__file_io__read_result__status) = 0)) ->
  (lexer__current_idx = lexer__next_idx)))))))

axiom local_invariant__def_axiom12 :
  (forall lexer__the_file:us_rep1.
  (forall lexer__next_idx:int. forall lexer__current_idx:int.
  (forall lexer__current_read__fields:us_split_fields.
  forall lexer__next_read__fields:us_split_fields.
  (forall lexer__current_read__discrs:us_split_discrs.
  forall lexer__next_read__discrs:us_split_discrs
  [local_invariant(lexer__the_file, lexer__next_idx,
  lexer__current_read__fields, lexer__current_read__discrs,
  lexer__current_idx, lexer__next_read__fields, lexer__next_read__discrs)].
  ((((((((not (current_read__attr__constrained = true)) and
  (not (next_read__attr__constrained = true))) and
  (lexer__current_idx <= size(lexer__the_file))) and
  (lexer__next_idx <= size(lexer__the_file))) and
  (lexer__next_idx = index(lexer__the_file))) and
  (lexer__current_idx <= lexer__next_idx)) and (if (to_rep1((({
  us_split_discrs1 = lexer__next_read__discrs; us_split_fields1 =
  lexer__next_read__fields
  }).us_split_discrs1).rec__file_io__read_result__status) = 0) then ((to_rep1((({
  us_split_discrs1 = lexer__current_read__discrs; us_split_fields1 =
  lexer__current_read__fields
  }).us_split_discrs1).rec__file_io__read_result__status) = 0) and
  (lexer__current_idx = (lexer__next_idx - 1))) else (lexer__current_idx = lexer__next_idx))) ->
  (local_invariant(lexer__the_file, lexer__next_idx,
  lexer__current_read__fields, lexer__current_read__discrs,
  lexer__current_idx, lexer__next_read__fields,
  lexer__next_read__discrs) = true))))))

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

predicate dynamic_invariant2(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range3(temp___expr_74))

predicate dynamic_invariant3(temp___expr_208: int, temp___is_init_204: bool,
  temp___skip_constant_205: bool, temp___do_toplevel_206: bool,
  temp___do_typ_inv_207: bool) = (((temp___is_init_204 = true) or
  (0 <= 2)) -> in_range4(temp___expr_208))

axiom size__post_axiom : (forall f:us_rep1 [size(f)]. in_range1(size(f)))

axiom index__post_axiom : (forall f:us_rep1 [index(f)]. in_range1(index(f)))

 (* File "lexer.adb", line 171, characters 0-0 *)
goal defqtvc :
  (forall current_read__split_fields:character.
  forall current_read__split_discrs:read_status.
  forall next_read__split_fields:character.
  forall next_read__split_discrs:read_status. forall current_idx:int.
  forall the_file:us_rep1. forall next_idx:int. forall current_line:int.
  forall current_col:int.
  (forall current_idx1:int. ((current_idx1 = current_idx) ->
  ((current_read__attr__constrained = false) ->
  (dynamic_invariant1(current_line, true, false, true, true) ->
  (dynamic_invariant(current_col, true, false, true, true) ->
  (dynamic_invariant(current_idx, true, false, true, true) ->
  ((next_read__attr__constrained = false) -> (dynamic_invariant(next_idx,
  true, false, true, true) ->
  ((forall current_read__split_fields1:character.
   forall current_read__split_discrs1:read_status.
   forall next_read__split_fields1:character.
   forall next_read__split_discrs1:read_status. forall current_idx2:int.
   forall the_file1:us_rep1. forall next_idx1:int.
   local_invariant__function_guard(local_invariant(the_file1, next_idx1, {
   rec__file_io__read_result__c = current_read__split_fields1 }, {
   rec__file_io__read_result__status = current_read__split_discrs1 },
   current_idx2, { rec__file_io__read_result__c = next_read__split_fields1 },
   { rec__file_io__read_result__status = next_read__split_discrs1 }),
   the_file1, next_idx1, { rec__file_io__read_result__c =
   current_read__split_fields1 }, { rec__file_io__read_result__status =
   current_read__split_discrs1 }, current_idx2, {
   rec__file_io__read_result__c = next_read__split_fields1 }, {
   rec__file_io__read_result__status = next_read__split_discrs1 })) ->
  ((local_invariant(the_file, next_idx, { rec__file_io__read_result__c =
  current_read__split_fields }, { rec__file_io__read_result__status =
  current_read__split_discrs }, current_idx, { rec__file_io__read_result__c =
  next_read__split_fields }, { rec__file_io__read_result__status =
  next_read__split_discrs }) = true) ->
  (forall temp___loop_entry_609:int.
  ((temp___loop_entry_609 = current_idx) ->
  (forall current_idx2:int. ((current_idx2 = current_idx) ->
  (forall current_read__split_fields1:character.
  forall current_read__split_discrs1:read_status.
  forall next_read__split_fields1:character.
  forall next_read__split_discrs1:read_status. forall current_idx3:int.
  forall the_file1:us_rep1. forall next_idx1:int. forall current_line1:int.
  forall current_col1:int.
  ((forall current_read__split_fields2:character.
   forall current_read__split_discrs2:read_status.
   forall next_read__split_fields2:character.
   forall next_read__split_discrs2:read_status. forall current_idx4:int.
   forall the_file2:us_rep1. forall next_idx2:int.
   local_invariant__function_guard(local_invariant(the_file2, next_idx2, {
   rec__file_io__read_result__c = current_read__split_fields2 }, {
   rec__file_io__read_result__status = current_read__split_discrs2 },
   current_idx4, { rec__file_io__read_result__c = next_read__split_fields2 },
   { rec__file_io__read_result__status = next_read__split_discrs2 }),
   the_file2, next_idx2, { rec__file_io__read_result__c =
   current_read__split_fields2 }, { rec__file_io__read_result__status =
   current_read__split_discrs2 }, current_idx4, {
   rec__file_io__read_result__c = next_read__split_fields2 }, {
   rec__file_io__read_result__status = next_read__split_discrs2 })) ->
  ((((local_invariant(the_file1, next_idx1, { rec__file_io__read_result__c =
  current_read__split_fields1 }, { rec__file_io__read_result__status =
  current_read__split_discrs1 }, current_idx3, {
  rec__file_io__read_result__c = next_read__split_fields1 }, {
  rec__file_io__read_result__status = next_read__split_discrs1 }) = true) and
  (current_idx2 <= current_idx3)) and (((dynamic_invariant(next_idx1, true,
  true, true, true) and dynamic_invariant1(current_line1, true, true, true,
  true)) and dynamic_invariant(current_col1, true, true, true, true)) and
  dynamic_invariant(current_idx3, true, true, true, true))) ->
  (forall o:int. ((to_rep1(current_read__split_discrs1) = o) -> ((o = 0) ->
  (forall o1:int. ((to_rep(current_read__split_fields1) = o1) ->
  ((o1 = 59) ->
  (forall current_idx4:int. ((current_idx4 = current_idx3) ->
  (forall current_read__split_fields2:character.
  forall current_read__split_discrs2:read_status.
  forall next_read__split_fields2:character.
  forall next_read__split_discrs2:read_status. forall current_idx5:int.
  forall the_file2:us_rep1. forall next_idx2:int. forall current_line2:int.
  forall current_col2:int.
  ((forall current_read__split_fields3:character.
   forall current_read__split_discrs3:read_status.
   forall next_read__split_fields3:character.
   forall next_read__split_discrs3:read_status. forall current_idx6:int.
   forall the_file3:us_rep1. forall next_idx3:int.
   local_invariant__function_guard(local_invariant(the_file3, next_idx3, {
   rec__file_io__read_result__c = current_read__split_fields3 }, {
   rec__file_io__read_result__status = current_read__split_discrs3 },
   current_idx6, { rec__file_io__read_result__c = next_read__split_fields3 },
   { rec__file_io__read_result__status = next_read__split_discrs3 }),
   the_file3, next_idx3, { rec__file_io__read_result__c =
   current_read__split_fields3 }, { rec__file_io__read_result__status =
   current_read__split_discrs3 }, current_idx6, {
   rec__file_io__read_result__c = next_read__split_fields3 }, {
   rec__file_io__read_result__status = next_read__split_discrs3 })) ->
  ((((local_invariant(the_file2, next_idx2, { rec__file_io__read_result__c =
  current_read__split_fields2 }, { rec__file_io__read_result__status =
  current_read__split_discrs2 }, current_idx5, {
  rec__file_io__read_result__c = next_read__split_fields2 }, {
  rec__file_io__read_result__status = next_read__split_discrs2 }) = true) and
  (if (to_rep1(current_read__split_discrs2) = 0) then (current_idx4 <  current_idx5) else (current_idx4 <= current_idx5))) and
  (((dynamic_invariant(next_idx2, true, true, true, true) and
  dynamic_invariant1(current_line2, true, true, true, true)) and
  dynamic_invariant(current_col2, true, true, true, true)) and
  dynamic_invariant(current_idx5, true, true, true, true))) ->
  (forall o2:int. ((to_rep1(current_read__split_discrs2) = o2) ->
  ((o2 = 0) -> (let o3 = local_invariant(the_file2, next_idx2, {
  rec__file_io__read_result__c = current_read__split_fields2 }, {
  rec__file_io__read_result__status = current_read__split_discrs2 },
  current_idx5, { rec__file_io__read_result__c = next_read__split_fields2 },
  { rec__file_io__read_result__status = next_read__split_discrs2 }) : bool in
  ((forall the_file3:us_rep1. size__function_guard(size(the_file3),
   the_file3)) ->
  ((forall the_file3:us_rep1. size__function_guard(size(the_file3),
   the_file3)) ->
  ((forall the_file3:us_rep1. index__function_guard(index(the_file3),
   the_file3)) ->
  ((local_invariant__function_guard(o3, the_file2, next_idx2, {
  rec__file_io__read_result__c = current_read__split_fields2 }, {
  rec__file_io__read_result__status = current_read__split_discrs2 },
  current_idx5, { rec__file_io__read_result__c = next_read__split_fields2 },
  { rec__file_io__read_result__status = next_read__split_discrs2 }) and
  ((o3 = true) <-> (((((((not (current_read__attr__constrained = true)) and
  (not (next_read__attr__constrained = true))) and
  (current_idx5 <= size(the_file2))) and (next_idx2 <= size(the_file2))) and
  (next_idx2 = index(the_file2))) and (current_idx5 <= next_idx2)) and
  (if (to_rep1(next_read__split_discrs2) = 0) then ((to_rep1(current_read__split_discrs2) = 0) and
  (current_idx5 = (next_idx2 - 1))) else (current_idx5 = next_idx2))))) ->
  (forall current_read__split_fields3:character.
  forall current_read__split_discrs3:read_status.
  forall next_read__split_fields3:character.
  forall next_read__split_discrs3:read_status. forall current_idx6:int.
  forall the_file3:us_rep1. forall next_idx3:int. forall current_line3:int.
  forall current_col3:int.
  ((forall current_read__split_fields4:character.
   forall current_read__split_discrs4:read_status.
   forall next_read__split_fields4:character.
   forall next_read__split_discrs4:read_status. forall current_idx7:int.
   forall the_file4:us_rep1. forall next_idx4:int.
   local_invariant__function_guard(local_invariant(the_file4, next_idx4, {
   rec__file_io__read_result__c = current_read__split_fields4 }, {
   rec__file_io__read_result__status = current_read__split_discrs4 },
   current_idx7, { rec__file_io__read_result__c = next_read__split_fields4 },
   { rec__file_io__read_result__status = next_read__split_discrs4 }),
   the_file4, next_idx4, { rec__file_io__read_result__c =
   current_read__split_fields4 }, { rec__file_io__read_result__status =
   current_read__split_discrs4 }, current_idx7, {
   rec__file_io__read_result__c = next_read__split_fields4 }, {
   rec__file_io__read_result__status = next_read__split_discrs4 })) ->
  (((local_invariant(the_file3, next_idx3, { rec__file_io__read_result__c =
  current_read__split_fields3 }, { rec__file_io__read_result__status =
  current_read__split_discrs3 }, current_idx6, {
  rec__file_io__read_result__c = next_read__split_fields3 }, {
  rec__file_io__read_result__status = next_read__split_discrs3 }) = true) and
  (temp___loop_entry_609 <  current_idx6)) ->
  ((((dynamic_invariant(next_idx3, true, true, true, true) and
  dynamic_invariant1(current_line3, true, true, true, true)) and
  dynamic_invariant(current_col3, true, true, true, true)) and
  dynamic_invariant(current_idx6, true, true, true, true)) ->
  (forall temp___611:int. ((temp___611 = current_idx6) ->
  (forall current_idx7:int. ((current_idx7 = current_idx6) ->
  (forall current_read__split_fields4:character.
  forall current_read__split_discrs4:read_status.
  forall next_read__split_fields4:character.
  forall next_read__split_discrs4:read_status. forall current_idx8:int.
  forall the_file4:us_rep1. forall next_idx4:int. forall current_line4:int.
  forall current_col4:int.
  ((forall current_read__split_fields5:character.
   forall current_read__split_discrs5:read_status.
   forall next_read__split_fields5:character.
   forall next_read__split_discrs5:read_status. forall current_idx9:int.
   forall the_file5:us_rep1. forall next_idx5:int.
   local_invariant__function_guard(local_invariant(the_file5, next_idx5, {
   rec__file_io__read_result__c = current_read__split_fields5 }, {
   rec__file_io__read_result__status = current_read__split_discrs5 },
   current_idx9, { rec__file_io__read_result__c = next_read__split_fields5 },
   { rec__file_io__read_result__status = next_read__split_discrs5 }),
   the_file5, next_idx5, { rec__file_io__read_result__c =
   current_read__split_fields5 }, { rec__file_io__read_result__status =
   current_read__split_discrs5 }, current_idx9, {
   rec__file_io__read_result__c = next_read__split_fields5 }, {
   rec__file_io__read_result__status = next_read__split_discrs5 })) ->
  ((((local_invariant(the_file4, next_idx4, { rec__file_io__read_result__c =
  current_read__split_fields4 }, { rec__file_io__read_result__status =
  current_read__split_discrs4 }, current_idx8, {
  rec__file_io__read_result__c = next_read__split_fields4 }, {
  rec__file_io__read_result__status = next_read__split_discrs4 }) = true) and
  (current_idx7 <= current_idx8)) and (((dynamic_invariant(next_idx4, true,
  true, true, true) and dynamic_invariant1(current_line4, true, true, true,
  true)) and dynamic_invariant(current_col4, true, true, true, true)) and
  dynamic_invariant(current_idx8, true, true, true, true))) ->
  (forall o4:int. ((to_rep1(current_read__split_discrs4) = o4) ->
  ((o4 = 0) ->
  (forall o5:int. ((to_rep(current_read__split_fields4) = o5) ->
  ((o5 = 59) ->
  (forall current_idx9:int. ((current_idx9 = current_idx8) ->
  (forall current_read__split_fields5:character.
  forall current_read__split_discrs5:read_status.
  forall next_read__split_fields5:character.
  forall next_read__split_discrs5:read_status. forall current_idx10:int.
  forall the_file5:us_rep1. forall next_idx5:int. forall current_line5:int.
  forall current_col5:int.
  ((forall current_read__split_fields6:character.
   forall current_read__split_discrs6:read_status.
   forall next_read__split_fields6:character.
   forall next_read__split_discrs6:read_status. forall current_idx11:int.
   forall the_file6:us_rep1. forall next_idx6:int.
   local_invariant__function_guard(local_invariant(the_file6, next_idx6, {
   rec__file_io__read_result__c = current_read__split_fields6 }, {
   rec__file_io__read_result__status = current_read__split_discrs6 },
   current_idx11, { rec__file_io__read_result__c = next_read__split_fields6
   }, { rec__file_io__read_result__status = next_read__split_discrs6 }),
   the_file6, next_idx6, { rec__file_io__read_result__c =
   current_read__split_fields6 }, { rec__file_io__read_result__status =
   current_read__split_discrs6 }, current_idx11, {
   rec__file_io__read_result__c = next_read__split_fields6 }, {
   rec__file_io__read_result__status = next_read__split_discrs6 })) ->
  ((((local_invariant(the_file5, next_idx5, { rec__file_io__read_result__c =
  current_read__split_fields5 }, { rec__file_io__read_result__status =
  current_read__split_discrs5 }, current_idx10, {
  rec__file_io__read_result__c = next_read__split_fields5 }, {
  rec__file_io__read_result__status = next_read__split_discrs5 }) = true) and
  (if (to_rep1(current_read__split_discrs5) = 0) then (current_idx9 <  current_idx10) else (current_idx9 <= current_idx10))) and
  (((dynamic_invariant(next_idx5, true, true, true, true) and
  dynamic_invariant1(current_line5, true, true, true, true)) and
  dynamic_invariant(current_col5, true, true, true, true)) and
  dynamic_invariant(current_idx10, true, true, true, true))) ->
  (forall o6:int. ((to_rep1(current_read__split_discrs5) = o6) ->
  ((o6 = 0) -> (temp___611 <  current_idx10)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
