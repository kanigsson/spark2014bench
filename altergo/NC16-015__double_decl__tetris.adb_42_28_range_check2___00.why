(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type x_coord

logic x_coordqtint : x_coord -> int

axiom x_coordqtaxiom : (forall i:x_coord. (1 <= x_coordqtint(i)))

axiom x_coordqtaxiom1 : (forall i:x_coord. (x_coordqtint(i) <= 8))

predicate in_range1(x: int) = ((1 <= x) and (x <= 8))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : x_coord, x_coord -> bool

logic dummy : x_coord

type x_coord__ref = { x_coord__content : x_coord
}

function x_coord__ref_x_coord__content__projection(a: x_coord__ref) : x_coord =
  (a).x_coord__content

function to_rep(x: x_coord) : int = x_coordqtint(x)

logic of_rep : int -> x_coord

axiom inversion_axiom :
  (forall x:x_coord [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:x_coord [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type y_coord

logic y_coordqtint : y_coord -> int

axiom y_coordqtaxiom : (forall i:y_coord. (1 <= y_coordqtint(i)))

axiom y_coordqtaxiom1 : (forall i:y_coord. (y_coordqtint(i) <= 16))

predicate in_range2(x: int) = ((1 <= x) and (x <= 16))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : y_coord, y_coord -> bool

logic dummy1 : y_coord

type y_coord__ref = { y_coord__content : y_coord
}

function y_coord__ref_y_coord__content__projection(a: y_coord__ref) : y_coord =
  (a).y_coord__content

function to_rep1(x: y_coord) : int = y_coordqtint(x)

logic of_rep1 : int -> y_coord

axiom inversion_axiom1 :
  (forall x:y_coord [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:y_coord [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type piece_type

predicate in_range3(x: int) = ((1 <= x) and (x <= 7))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : piece_type, piece_type -> bool

logic dummy2 : piece_type

type piece_type__ref = { piece_type__content : piece_type
}

function piece_type__ref_piece_type__content__projection(a: piece_type__ref) : piece_type =
  (a).piece_type__content

logic to_rep2 : piece_type -> int

logic of_rep2 : int -> piece_type

axiom inversion_axiom2 :
  (forall x:piece_type [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:piece_type [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields = { rec__tetris__piece__kind : piece_type;
rec__tetris__piece__y : y_coord; rec__tetris__piece__x : x_coord
}

function us_split_fields_rec__tetris__piece__kind__projection(a: us_split_fields) : piece_type =
  (a).rec__tetris__piece__kind

function us_split_fields_rec__tetris__piece__y__projection(a: us_split_fields) : y_coord =
  (a).rec__tetris__piece__y

function us_split_fields_rec__tetris__piece__x__projection(a: us_split_fields) : x_coord =
  (a).rec__tetris__piece__x

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq4(a: us_rep, b: us_rep) : bool =
  (if (((to_rep2(((a).us_split_fields1).rec__tetris__piece__kind) = to_rep2(((b).us_split_fields1).rec__tetris__piece__kind)) and
  (to_rep1(((a).us_split_fields1).rec__tetris__piece__y) = to_rep1(((b).us_split_fields1).rec__tetris__piece__y))) and
  (to_rep(((a).us_split_fields1).rec__tetris__piece__x) = to_rep(((b).us_split_fields1).rec__tetris__piece__x))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic tetris__piece__kind__first__bit : int

logic tetris__piece__kind__last__bit : int

logic tetris__piece__kind__position : int

axiom tetris__piece__kind__first__bit_axiom :
  (0 <= tetris__piece__kind__first__bit)

axiom tetris__piece__kind__last__bit_axiom :
  (tetris__piece__kind__first__bit <  tetris__piece__kind__last__bit)

axiom tetris__piece__kind__position_axiom :
  (0 <= tetris__piece__kind__position)

logic tetris__piece__y__first__bit : int

logic tetris__piece__y__last__bit : int

logic tetris__piece__y__position : int

axiom tetris__piece__y__first__bit_axiom :
  (0 <= tetris__piece__y__first__bit)

axiom tetris__piece__y__last__bit_axiom :
  (tetris__piece__y__first__bit <  tetris__piece__y__last__bit)

axiom tetris__piece__y__position_axiom : (0 <= tetris__piece__y__position)

logic tetris__piece__x__first__bit : int

logic tetris__piece__x__last__bit : int

logic tetris__piece__x__position : int

axiom tetris__piece__x__first__bit_axiom :
  (0 <= tetris__piece__x__first__bit)

axiom tetris__piece__x__last__bit_axiom :
  (tetris__piece__x__first__bit <  tetris__piece__x__last__bit)

axiom tetris__piece__x__position_axiom : (0 <= tetris__piece__x__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type piece__ref = { piece__content : us_rep
}

function piece__ref_piece__content__projection(a: piece__ref) : us_rep =
  (a).piece__content

logic attr__ATTRIBUTE_ADDRESS : int

logic direction : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic is_valid_move : us_rep, int -> bool

logic is_valid_move__function_guard : bool, us_rep, int -> prop

type action_type

predicate in_range4(x: int) = ((0 <= x) and (x <= 3))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : action_type, action_type -> bool

logic dummy4 : action_type

type action_type__ref = { action_type__content : action_type
}

function action_type__ref_action_type__content__projection(a: action_type__ref) : action_type =
  (a).action_type__content

predicate dynamic_invariant(temp___expr_178: int, temp___is_init_174: bool,
  temp___skip_constant_175: bool, temp___do_toplevel_176: bool,
  temp___do_typ_inv_177: bool) = (((temp___is_init_174 = true) or
  (0 <= 3)) -> in_range4(temp___expr_178))

axiom is_valid_move__def_axiom :
  (forall the_piece:us_rep.
  (forall direction1:int [is_valid_move(the_piece, direction1)].
  ((is_valid_move(the_piece, direction1) = true) ->
  (not ((direction1 = 3) and
  (to_rep1(((the_piece).us_split_fields1).rec__tetris__piece__y) = 16))))))

axiom is_valid_move__def_axiom1 :
  (forall the_piece:us_rep.
  (forall direction1:int [is_valid_move(the_piece, direction1)].
  ((not ((direction1 = 3) and
  (to_rep1(((the_piece).us_split_fields1).rec__tetris__piece__y) = 16))) ->
  (is_valid_move(the_piece, direction1) = true))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_invariant1(temp___expr_164: int, temp___is_init_160: bool,
  temp___skip_constant_161: bool, temp___do_toplevel_162: bool,
  temp___do_typ_inv_163: bool) = (((temp___is_init_160 = true) or
  (1 <= 8)) -> in_range1(temp___expr_164))

predicate dynamic_invariant2(temp___expr_171: int, temp___is_init_167: bool,
  temp___skip_constant_168: bool, temp___do_toplevel_169: bool,
  temp___do_typ_inv_170: bool) = (((temp___is_init_167 = true) or
  (1 <= 16)) -> in_range2(temp___expr_171))

predicate dynamic_invariant3(temp___expr_199: int, temp___is_init_195: bool,
  temp___skip_constant_196: bool, temp___do_toplevel_197: bool,
  temp___do_typ_inv_198: bool) = (((temp___is_init_195 = true) or
  (1 <= 7)) -> in_range3(temp___expr_199))

 (* File "tetris.ads", line 55, characters 0-0 *)
goal defqtvc :
  (forall the_piece__split_fields:us_split_fields.
  (dynamic_invariant(direction, true, false, true, true) ->
  ((forall the_piece__split_fields1:us_split_fields.
   is_valid_move__function_guard(is_valid_move({ us_split_fields1 =
   the_piece__split_fields1 }, direction), { us_split_fields1 =
   the_piece__split_fields1 }, direction)) ->
  ((is_valid_move({ us_split_fields1 = the_piece__split_fields },
  direction) = true) ->
  (forall o:int.
  ((to_rep((the_piece__split_fields).rec__tetris__piece__x) = o) ->
  (forall xnew:int. ((xnew = o) -> (dynamic_invariant1(xnew, true, false,
  true, true) ->
  (forall o1:int.
  ((to_rep1((the_piece__split_fields).rec__tetris__piece__y) = o1) ->
  (forall ynew:int. ((ynew = o1) -> (dynamic_invariant2(ynew, true, false,
  true, true) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (direction = 1) then true else false)) ->
  ((spark__branch = true) ->
  (forall spark__branch1:bool.
  ((spark__branch1 = (if (1 <  xnew) then true else false)) ->
  ((spark__branch1 = true) -> in_range1((xnew - 1))))))))))))))))))))))
