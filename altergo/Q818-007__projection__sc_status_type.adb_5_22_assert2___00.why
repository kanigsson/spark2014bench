(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type us_split_fields = { rec__sc_status_type__bit_pattern_type__x_1 : bool;
rec__sc_status_type__bit_pattern_type__x_12 : bool
}

function us_split_fields_rec__sc_status_type__bit_pattern_type__x_1__projection(a: us_split_fields) : bool =
  (a).rec__sc_status_type__bit_pattern_type__x_1

function us_split_fields_rec__sc_status_type__bit_pattern_type__x_12__projection(a: us_split_fields) : bool =
  (a).rec__sc_status_type__bit_pattern_type__x_12

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if ((to_int(((a).us_split_fields1).rec__sc_status_type__bit_pattern_type__x_1) = to_int(((b).us_split_fields1).rec__sc_status_type__bit_pattern_type__x_1)) and
  (to_int(((a).us_split_fields1).rec__sc_status_type__bit_pattern_type__x_12) = to_int(((b).us_split_fields1).rec__sc_status_type__bit_pattern_type__x_12))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic sc_status_type__bit_pattern_type__x_1__first__bit : int

logic sc_status_type__bit_pattern_type__x_1__last__bit : int

logic sc_status_type__bit_pattern_type__x_1__position : int

axiom sc_status_type__bit_pattern_type__x_1__first__bit_axiom :
  (0 <= sc_status_type__bit_pattern_type__x_1__first__bit)

axiom sc_status_type__bit_pattern_type__x_1__last__bit_axiom :
  (sc_status_type__bit_pattern_type__x_1__first__bit <  sc_status_type__bit_pattern_type__x_1__last__bit)

axiom sc_status_type__bit_pattern_type__x_1__position_axiom :
  (0 <= sc_status_type__bit_pattern_type__x_1__position)

logic sc_status_type__bit_pattern_type__x_12__first__bit : int

logic sc_status_type__bit_pattern_type__x_12__last__bit : int

logic sc_status_type__bit_pattern_type__x_12__position : int

axiom sc_status_type__bit_pattern_type__x_12__first__bit_axiom :
  (0 <= sc_status_type__bit_pattern_type__x_12__first__bit)

axiom sc_status_type__bit_pattern_type__x_12__last__bit_axiom :
  (sc_status_type__bit_pattern_type__x_12__first__bit <  sc_status_type__bit_pattern_type__x_12__last__bit)

axiom sc_status_type__bit_pattern_type__x_12__position_axiom :
  (0 <= sc_status_type__bit_pattern_type__x_12__position)

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type bit_pattern_type__ref = { bit_pattern_type__content : us_rep
}

function bit_pattern_type__ref_bit_pattern_type__content__projection(a: bit_pattern_type__ref) : us_rep =
  (a).bit_pattern_type__content

type us_split_fields2 = { rec__sc_status_type__duplicate_status_type__prime :
us_rep; rec__sc_status_type__duplicate_status_type__shadow : us_rep
}

function us_split_fields_rec__sc_status_type__duplicate_status_type__prime__projection(a: us_split_fields2) : us_rep =
  (a).rec__sc_status_type__duplicate_status_type__prime

function us_split_fields_rec__sc_status_type__duplicate_status_type__shadow__projection(a: us_split_fields2) : us_rep =
  (a).rec__sc_status_type__duplicate_status_type__shadow

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq2(a: us_rep1, b: us_rep1) : bool =
  (if ((bool_eq1(((a).us_split_fields3).rec__sc_status_type__duplicate_status_type__prime,
  ((b).us_split_fields3).rec__sc_status_type__duplicate_status_type__prime) = true) and
  (bool_eq1(((a).us_split_fields3).rec__sc_status_type__duplicate_status_type__shadow,
  ((b).us_split_fields3).rec__sc_status_type__duplicate_status_type__shadow) = true)) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic sc_status_type__duplicate_status_type__prime__first__bit : int

logic sc_status_type__duplicate_status_type__prime__last__bit : int

logic sc_status_type__duplicate_status_type__prime__position : int

axiom sc_status_type__duplicate_status_type__prime__first__bit_axiom :
  (0 <= sc_status_type__duplicate_status_type__prime__first__bit)

axiom sc_status_type__duplicate_status_type__prime__last__bit_axiom :
  (sc_status_type__duplicate_status_type__prime__first__bit <  sc_status_type__duplicate_status_type__prime__last__bit)

axiom sc_status_type__duplicate_status_type__prime__position_axiom :
  (0 <= sc_status_type__duplicate_status_type__prime__position)

logic sc_status_type__duplicate_status_type__shadow__first__bit : int

logic sc_status_type__duplicate_status_type__shadow__last__bit : int

logic sc_status_type__duplicate_status_type__shadow__position : int

axiom sc_status_type__duplicate_status_type__shadow__first__bit_axiom :
  (0 <= sc_status_type__duplicate_status_type__shadow__first__bit)

axiom sc_status_type__duplicate_status_type__shadow__last__bit_axiom :
  (sc_status_type__duplicate_status_type__shadow__first__bit <  sc_status_type__duplicate_status_type__shadow__last__bit)

axiom sc_status_type__duplicate_status_type__shadow__position_axiom :
  (0 <= sc_status_type__duplicate_status_type__shadow__position)

logic user_eq1 : us_rep1, us_rep1 -> bool

logic dummy1 : us_rep1

type duplicate_status_type__ref = { duplicate_status_type__content : us_rep1
}

function duplicate_status_type__ref_duplicate_status_type__content__projection(a: duplicate_status_type__ref) : us_rep1 =
  (a).duplicate_status_type__content

type us_split_fields4 = { rec__sc_status_type__object_type__sc_state :
us_rep1
}

function us_split_fields_rec__sc_status_type__object_type__sc_state__projection(a: us_split_fields4) : us_rep1 =
  (a).rec__sc_status_type__object_type__sc_state

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__4__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___split_fields__4__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function bool_eq3(a: us_rep2, b: us_rep2) : bool =
  (if (bool_eq2(((a).us_split_fields5).rec__sc_status_type__object_type__sc_state,
  ((b).us_split_fields5).rec__sc_status_type__object_type__sc_state) = true) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic sc_status_type__object_type__sc_state__first__bit : int

logic sc_status_type__object_type__sc_state__last__bit : int

logic sc_status_type__object_type__sc_state__position : int

axiom sc_status_type__object_type__sc_state__first__bit_axiom :
  (0 <= sc_status_type__object_type__sc_state__first__bit)

axiom sc_status_type__object_type__sc_state__last__bit_axiom :
  (sc_status_type__object_type__sc_state__first__bit <  sc_status_type__object_type__sc_state__last__bit)

axiom sc_status_type__object_type__sc_state__position_axiom :
  (0 <= sc_status_type__object_type__sc_state__position)

logic user_eq2 : us_rep2, us_rep2 -> bool

logic dummy2 : us_rep2

type object_type__ref = { object_type__content : us_rep2
}

function object_type__ref_object_type__content__projection(a: object_type__ref) : us_rep2 =
  (a).object_type__content

logic this : us_rep2

logic attr__ATTRIBUTE_ADDRESS : int

 (* File "sc_status_type.ads", line 21, characters 0-0 *)
goal defqtvc :
  (bool_eq1(((((this).us_split_fields5).rec__sc_status_type__object_type__sc_state).us_split_fields3).rec__sc_status_type__duplicate_status_type__prime,
  ((((this).us_split_fields5).rec__sc_status_type__object_type__sc_state).us_split_fields3).rec__sc_status_type__duplicate_status_type__shadow) = true)
