(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))))

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq4(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_fields = { rec__vk__tag__fs__name__t : us_main_type; rec__ext__
: us_private
}

function us_split_fields_rec__vk__tag__fs__name__t__projection(a: us_split_fields) : us_main_type =
  (a).rec__vk__tag__fs__name__t

function us_split_fields_rec__ext____projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__projection(a: us_rep) : int = (a).attr__tag

function bool_eq5(a: us_rep, b: us_rep) : bool =
  (if (us_main_eq(((a).us_split_fields1).rec__vk__tag__fs__name__t,
  ((b).us_split_fields1).rec__vk__tag__fs__name__t) = true) then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type mutable_t__ref = { mutable_t__content : us_rep
}

function mutable_t__ref_mutable_t__content__projection(a: mutable_t__ref) : us_rep =
  (a).mutable_t__content

type us_split_fields2 = { rec__vk__tag__t__my_name : us_rep
}

function us_split_fields_rec__vk__tag__t__my_name__projection(a: us_split_fields2) : us_rep =
  (a).rec__vk__tag__t__my_name

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic vk__tag__t__my_name__first__bit : int

logic vk__tag__t__my_name__last__bit : int

logic vk__tag__t__my_name__position : int

axiom vk__tag__t__my_name__first__bit_axiom :
  (0 <= vk__tag__t__my_name__first__bit)

axiom vk__tag__t__my_name__last__bit_axiom :
  (vk__tag__t__my_name__first__bit <  vk__tag__t__my_name__last__bit)

axiom vk__tag__t__my_name__position_axiom :
  (0 <= vk__tag__t__my_name__position)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy5 : us_rep1

type t__ref = { t__content : us_rep1
}

function t__ref_t__content__2__projection(a: t__ref) : us_rep1 =
  (a).t__content

logic attr__ATTRIBUTE_ADDRESS : int

logic us_tag1 : int

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy6 : us_rep

type t__ref1 = { t__content1 : us_rep
}

function t__ref_t__content__projection(a: t__ref1) : us_rep = (a).t__content1

logic length1 : us_rep -> int

logic length__function_guard : int, us_rep -> prop

logic length2 : int, us_rep -> int

logic length__function_guard1 : int, int, us_rep -> prop

axiom temp___result_206qtdef :
  (forall temp___205:us_rep. length__function_guard(length1(temp___205),
  temp___205))

predicate default_initial_assumption(temp___expr_202: us_rep1,
  temp___skip_top_level_203: bool) = (let temp___204 =
  ((temp___expr_202).us_split_fields3).rec__vk__tag__t__my_name : us_rep in
  (((temp___204).attr__tag = us_tag) and (length1(temp___204) = 0)))

logic n__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS1 : int

axiom temp___result_187qtdef :
  (forall temp___186:us_rep. length__function_guard(length1(temp___186),
  temp___186))

predicate default_initial_assumption1(temp___expr_184: us_rep,
  temp___skip_top_level_185: bool) =
  (((temp___expr_184).attr__tag = us_tag1) and
  ((not (temp___skip_top_level_185 = true)) ->
  (length1(temp___expr_184) = 0)))

logic name : us_rep1 -> us_rep

logic name__function_guard : us_rep, us_rep1 -> prop

axiom name__post_axiom :
  (forall this:us_rep1 [name(this)]. (let result = name(this) : us_rep in
  (name__function_guard(result, this) -> ((result).attr__tag = us_tag1))))

axiom name__def_axiom :
  (forall this:us_rep1 [name(this)].
  (name(this) = ((this).us_split_fields3).rec__vk__tag__t__my_name))

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq7 : count_type, count_type -> bool

logic dummy7 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

predicate dynamic_invariant(temp___expr_212: int, temp___is_init_208: bool,
  temp___skip_constant_209: bool, temp___do_toplevel_210: bool,
  temp___do_typ_inv_211: bool) = (((temp___is_init_208 = true) or
  (0 <= 2147483647)) -> in_range3(temp___expr_212))

axiom length__post_axiom :
  (forall this:us_rep [length1(this)]. in_range3(length1(this)))

axiom vk__tag__fs__name__t__compat_axiom :
  (forall this:us_rep [length2(us_tag1, this)].
  (length__function_guard1(length2(us_tag1, this), us_tag1, this) ->
  (forall this1:us_rep. length__function_guard(length1(this1), this1))))

axiom vk__tag__fs__name__t__compat_axiom1 :
  (forall this:us_rep [length2(us_tag1, this)].
  (length__function_guard1(length2(us_tag1, this), us_tag1, this) ->
  (length1(this) = length2(us_tag1, this))))

axiom vk__tag__name_p__mutable_t__compat_axiom :
  (forall this:us_rep [length2(us_tag, this)].
  (length__function_guard1(length2(us_tag, this), us_tag, this) ->
  (forall this1:us_rep. length__function_guard(length1(this1), this1))))

axiom vk__tag__name_p__mutable_t__compat_axiom1 :
  (forall this:us_rep [length2(us_tag, this)].
  (length__function_guard1(length2(us_tag, this), us_tag, this) ->
  (length1(this) = length2(us_tag, this))))

predicate dynamic_invariant1(temp___expr_96: us_t, temp___is_init_92: bool,
  temp___skip_constant_93: bool, temp___do_toplevel_94: bool,
  temp___do_typ_inv_95: bool) = ((not (temp___skip_constant_93 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_96),
  last1(temp___expr_96)))

logic to_string : us_rep -> us_t

logic to_string__function_guard : us_t, us_rep -> prop

logic to_string1 : int, us_rep -> us_t

logic to_string__function_guard1 : us_t, int, us_rep -> prop

axiom vk__tag__fs__name__t__compat_axiom2 :
  (forall this:us_rep [to_string1(us_tag1, this)].
  (to_string__function_guard1(to_string1(us_tag1, this), us_tag1, this) ->
  (forall this1:us_rep. to_string__function_guard(to_string(this1), this1))))

axiom vk__tag__fs__name__t__compat_axiom3 :
  (forall this:us_rep [to_string1(us_tag1, this)].
  (to_string__function_guard1(to_string1(us_tag1, this), us_tag1, this) ->
  (to_string(this) = to_string1(us_tag1, this))))

axiom vk__tag__name_p__mutable_t__compat_axiom2 :
  (forall this:us_rep [to_string1(us_tag, this)].
  (to_string__function_guard1(to_string1(us_tag, this), us_tag, this) ->
  (forall this1:us_rep. to_string__function_guard(to_string(this1), this1))))

axiom vk__tag__name_p__mutable_t__compat_axiom3 :
  (forall this:us_rep [to_string1(us_tag, this)].
  (to_string__function_guard1(to_string1(us_tag, this), us_tag, this) ->
  (to_string(this) = to_string1(us_tag, this))))

logic temp___String_Literal_248 : unit -> (int,character) farray

axiom temp___String_Literal_248__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_248(us_void_param)].
  (to_rep((temp___String_Literal_248(us_void_param)[1])) = 72))

axiom temp___String_Literal_248__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_248(us_void_param)].
  (to_rep((temp___String_Literal_248(us_void_param)[2])) = 101))

axiom temp___String_Literal_248__def_axiom2 :
  (forall us_void_param:unit [temp___String_Literal_248(us_void_param)].
  (to_rep((temp___String_Literal_248(us_void_param)[3])) = 108))

axiom temp___String_Literal_248__def_axiom3 :
  (forall us_void_param:unit [temp___String_Literal_248(us_void_param)].
  (to_rep((temp___String_Literal_248(us_void_param)[4])) = 108))

axiom temp___String_Literal_248__def_axiom4 :
  (forall us_void_param:unit [temp___String_Literal_248(us_void_param)].
  (to_rep((temp___String_Literal_248(us_void_param)[5])) = 111))

predicate dynamic_invariant2(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range1(temp___expr_46))

predicate dynamic_invariant3(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range2(temp___expr_74))

predicate dynamic_invariant4(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

axiom temp___result_196qtdef :
  (forall temp___195:us_rep. length__function_guard(length1(temp___195),
  temp___195))

predicate default_initial_assumption2(temp___expr_193: us_rep,
  temp___skip_top_level_194: bool) =
  (((temp___expr_193).attr__tag = us_tag) and
  ((not (temp___skip_top_level_194 = true)) ->
  (length1(temp___expr_193) = 0)))

 (* File "main.adb", line 7, characters 0-0 *)
goal defqtvc :
  (forall tag_v__split_fields:us_rep. forall n__split_fields:us_split_fields.
  (default_initial_assumption({ us_split_fields3 = {
  rec__vk__tag__t__my_name = tag_v__split_fields } }, false) ->
  (default_initial_assumption1({ us_split_fields1 = n__split_fields;
  attr__tag = n__attr__tag }, false) ->
  (forall tag_v__split_fields1:us_rep. (let o = { us_split_fields3 = {
  rec__vk__tag__t__my_name = tag_v__split_fields1 } } : us_rep1 in (let q_ =
  name(o) : us_rep in ((name__function_guard(q_, o) and
  (q_ = tag_v__split_fields1)) -> (let o1 = { us_split_fields3 = {
  rec__vk__tag__t__my_name = tag_v__split_fields1 } } : us_rep1 in (let o2 =
  name(o1) : us_rep in ((name__function_guard(o2, o1) and
  (o2 = tag_v__split_fields1)) -> (let o3 = length1(o2) : int in
  ((length__function_guard(o3, o2) and dynamic_invariant(o3, true, false,
  true, true)) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (o3 <  500000) then true else false)) ->
  ((spark__branch = true) -> (let o4 = { us_split_fields3 = {
  rec__vk__tag__t__my_name = tag_v__split_fields1 } } : us_rep1 in (let o5 =
  name(o4) : us_rep in ((name__function_guard(o5, o4) and
  (o5 = tag_v__split_fields1)) ->
  ((forall o6:us_rep. length__function_guard(length1(o6), o6)) ->
  (length1(o5) <  500000))))))))))))))))))))
