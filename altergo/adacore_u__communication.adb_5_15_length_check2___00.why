(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_39))

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type character

predicate in_range1(x: int) = ((0 <= x) and (x <= 255))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : character, character -> bool

logic dummy1 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep1 : character -> int

logic of_rep1 : int -> character

axiom inversion_axiom1 :
  (forall x:character [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:character [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep1((a[temp___idx_91])) = to_rep1((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep1((a[temp___idx_91])) = to_rep1((b[((b__first - a__first) + temp___idx_91)]))))))))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : positive, positive -> bool

logic dummy3 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

function to_rep2(x: integer) : int = integerqtint(x)

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep2(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep2(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq2((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

predicate dynamic_invariant1(temp___expr_96: us_t, temp___is_init_92: bool,
  temp___skip_constant_93: bool, temp___do_toplevel_94: bool,
  temp___do_typ_inv_95: bool) = ((not (temp___skip_constant_93 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_96),
  last1(temp___expr_96)))

logic address : us_t

logic attr__ATTRIBUTE_ADDRESS : int

logic port : int

logic attr__ATTRIBUTE_ADDRESS1 : int

function to_rep3(x: positive) : int = positiveqtint(x)

logic of_rep3 : int -> positive

axiom inversion_axiom3 :
  (forall x:positive [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:positive [to_rep3(x)]. in_range3(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range3(x) ->
  (to_rep3(of_rep3(x)) = x)))

type data

logic dataqtint : data -> int

axiom dataqtaxiom : (forall i:data. ((- 2147483648) <= dataqtint(i)))

axiom dataqtaxiom1 : (forall i:data. (dataqtint(i) <= 2147483647))

predicate in_range4(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : data, data -> bool

logic dummy5 : data

type data__ref = { data__content : data
}

function data__ref_data__content__projection(a: data__ref) : data =
  (a).data__content

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy6 : integer

type tdata_arrayD1__ref = { tdata_arrayD1__content : integer
}

function tdata_arrayD1__ref_tdata_arrayD1__content__projection(a: tdata_arrayD1__ref) : integer =
  (a).tdata_arrayD1__content

function to_rep4(x: data) : int = dataqtint(x)

logic of_rep4 : int -> data

axiom inversion_axiom4 :
  (forall x:data [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:data [to_rep4(x)]. in_range4(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range4(x) ->
  (to_rep4(of_rep4(x)) = x)))

type map__ref1 = { map__content1 : (int,data) farray
}

logic slide1 : (int,data) farray, int, int -> (int,data) farray

axiom slide_eq1 :
  (forall a:(int,data) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,data) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq8(a: (int,data) farray, a__first: int, a__last: int,
  b: (int,data) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep4((a[temp___idx_155])) = to_rep4((b[((b__first - a__first) + temp___idx_155)])))))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,data) farray. forall b:(int,data) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,data) farray. forall b:(int,data) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,data) farray. forall b:(int,data) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,data) farray. forall b:(int,data) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep4((a[temp___idx_155])) = to_rep4((b[((b__first - a__first) + temp___idx_155)]))))))))

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def2 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep2(first2(mk1(f, l))) = f))))

axiom mk_def3 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep2(last2(mk1(f, l))) = l))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,data) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,data) farray = (a).elts1

function of_array1(a: (int,data) farray, f: int, l: int) : us_t1 = { elts1 =
  a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep2(first2((a).rt1))

function last3(a: us_t1) : int = to_rep2(last2((a).rt1))

function length1(a: us_t1) : int =
  (if (first3(a) <= last3(a)) then ((last3(a) - first3(a)) + 1) else 0)

logic value__size1 : int

logic object__size1 : int

logic component__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom1 : (0 <= alignment1)

function bool_eq9(x: us_t1, y: us_t1) : bool = bool_eq8((x).elts1,
  to_rep2(first2((x).rt1)), to_rep2(last2((x).rt1)), (y).elts1,
  to_rep2(first2((y).rt1)), to_rep2(last2((y).rt1)))

logic user_eq7 : us_t1, us_t1 -> bool

logic dummy7 : us_t1

type tdata_arrayB__ref = { tdata_arrayB__content : us_t1
}

function tdata_arrayB__ref_tdata_arrayB__content__projection(a: tdata_arrayB__ref) : us_t1 =
  (a).tdata_arrayB__content

type data_array__ref = { data_array__content : us_t1
}

function data_array__ref_data_array__content__projection(a: data_array__ref) : us_t1 =
  (a).data_array__content

type us_split_fields = { rec__communication__ring_buffer__buffer__content :
us_t1; rec__communication__ring_buffer__buffer__first : positive;
rec__communication__ring_buffer__buffer__length : natural
}

function us_split_fields_rec__communication__ring_buffer__buffer__content__projection(a: us_split_fields) : us_t1 =
  (a).rec__communication__ring_buffer__buffer__content

function us_split_fields_rec__communication__ring_buffer__buffer__first__projection(a: us_split_fields) : positive =
  (a).rec__communication__ring_buffer__buffer__first

function us_split_fields_rec__communication__ring_buffer__buffer__length__projection(a: us_split_fields) : natural =
  (a).rec__communication__ring_buffer__buffer__length

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq10(a: us_rep, b: us_rep) : bool =
  (if (((bool_eq9(((a).us_split_fields1).rec__communication__ring_buffer__buffer__content,
  ((b).us_split_fields1).rec__communication__ring_buffer__buffer__content) = true) and
  (to_rep3(((a).us_split_fields1).rec__communication__ring_buffer__buffer__first) = to_rep3(((b).us_split_fields1).rec__communication__ring_buffer__buffer__first))) and
  (to_rep(((a).us_split_fields1).rec__communication__ring_buffer__buffer__length) = to_rep(((b).us_split_fields1).rec__communication__ring_buffer__buffer__length))) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic communication__ring_buffer__buffer__content__first__bit : int

logic communication__ring_buffer__buffer__content__last__bit : int

logic communication__ring_buffer__buffer__content__position : int

axiom communication__ring_buffer__buffer__content__first__bit_axiom :
  (0 <= communication__ring_buffer__buffer__content__first__bit)

axiom communication__ring_buffer__buffer__content__last__bit_axiom :
  (communication__ring_buffer__buffer__content__first__bit <  communication__ring_buffer__buffer__content__last__bit)

axiom communication__ring_buffer__buffer__content__position_axiom :
  (0 <= communication__ring_buffer__buffer__content__position)

logic communication__ring_buffer__buffer__first__first__bit : int

logic communication__ring_buffer__buffer__first__last__bit : int

logic communication__ring_buffer__buffer__first__position : int

axiom communication__ring_buffer__buffer__first__first__bit_axiom :
  (0 <= communication__ring_buffer__buffer__first__first__bit)

axiom communication__ring_buffer__buffer__first__last__bit_axiom :
  (communication__ring_buffer__buffer__first__first__bit <  communication__ring_buffer__buffer__first__last__bit)

axiom communication__ring_buffer__buffer__first__position_axiom :
  (0 <= communication__ring_buffer__buffer__first__position)

logic communication__ring_buffer__buffer__length__first__bit : int

logic communication__ring_buffer__buffer__length__last__bit : int

logic communication__ring_buffer__buffer__length__position : int

axiom communication__ring_buffer__buffer__length__first__bit_axiom :
  (0 <= communication__ring_buffer__buffer__length__first__bit)

axiom communication__ring_buffer__buffer__length__last__bit_axiom :
  (communication__ring_buffer__buffer__length__first__bit <  communication__ring_buffer__buffer__length__last__bit)

axiom communication__ring_buffer__buffer__length__position_axiom :
  (0 <= communication__ring_buffer__buffer__length__position)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy8 : us_rep

type buffer__ref = { buffer__content : us_rep
}

function buffer__ref_buffer__content__projection(a: buffer__ref) : us_rep =
  (a).buffer__content

logic dummy9 : (int,character) farray

logic value__size3 : int

logic object__size3 : int

logic component__size2 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom component__size_axiom2 : (0 <= component__size2)

axiom alignment_axiom3 : (0 <= alignment3)

logic user_eq9 : (int,character) farray, (int,character) farray -> bool

type us_split_fields2 = { rec__communication__mailbox__address :
(int,character) farray; rec__communication__mailbox__port : natural;
rec__communication__mailbox__in_buffer : us_rep;
rec__communication__mailbox__out_buffer : us_rep
}

function us_split_fields_rec__communication__mailbox__address__projection(a: us_split_fields2) : (int,character) farray =
  (a).rec__communication__mailbox__address

function us_split_fields_rec__communication__mailbox__port__projection(a: us_split_fields2) : natural =
  (a).rec__communication__mailbox__port

function us_split_fields_rec__communication__mailbox__in_buffer__projection(a: us_split_fields2) : us_rep =
  (a).rec__communication__mailbox__in_buffer

function us_split_fields_rec__communication__mailbox__out_buffer__projection(a: us_split_fields2) : us_rep =
  (a).rec__communication__mailbox__out_buffer

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq11(a: us_rep1, b: us_rep1) : bool =
  (if (((bool_eq2(((a).us_split_fields3).rec__communication__mailbox__address,
  1, 15, ((b).us_split_fields3).rec__communication__mailbox__address, 1,
  15) = true) and
  (to_rep(((a).us_split_fields3).rec__communication__mailbox__port) = to_rep(((b).us_split_fields3).rec__communication__mailbox__port))) and
  ((bool_eq10(((a).us_split_fields3).rec__communication__mailbox__in_buffer,
  ((b).us_split_fields3).rec__communication__mailbox__in_buffer) = true) and
  (bool_eq10(((a).us_split_fields3).rec__communication__mailbox__out_buffer,
  ((b).us_split_fields3).rec__communication__mailbox__out_buffer) = true))) then true else false)

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic communication__mailbox__address__first__bit : int

logic communication__mailbox__address__last__bit : int

logic communication__mailbox__address__position : int

axiom communication__mailbox__address__first__bit_axiom :
  (0 <= communication__mailbox__address__first__bit)

axiom communication__mailbox__address__last__bit_axiom :
  (communication__mailbox__address__first__bit <  communication__mailbox__address__last__bit)

axiom communication__mailbox__address__position_axiom :
  (0 <= communication__mailbox__address__position)

logic communication__mailbox__port__first__bit : int

logic communication__mailbox__port__last__bit : int

logic communication__mailbox__port__position : int

axiom communication__mailbox__port__first__bit_axiom :
  (0 <= communication__mailbox__port__first__bit)

axiom communication__mailbox__port__last__bit_axiom :
  (communication__mailbox__port__first__bit <  communication__mailbox__port__last__bit)

axiom communication__mailbox__port__position_axiom :
  (0 <= communication__mailbox__port__position)

logic communication__mailbox__in_buffer__first__bit : int

logic communication__mailbox__in_buffer__last__bit : int

logic communication__mailbox__in_buffer__position : int

axiom communication__mailbox__in_buffer__first__bit_axiom :
  (0 <= communication__mailbox__in_buffer__first__bit)

axiom communication__mailbox__in_buffer__last__bit_axiom :
  (communication__mailbox__in_buffer__first__bit <  communication__mailbox__in_buffer__last__bit)

axiom communication__mailbox__in_buffer__position_axiom :
  (0 <= communication__mailbox__in_buffer__position)

logic communication__mailbox__out_buffer__first__bit : int

logic communication__mailbox__out_buffer__last__bit : int

logic communication__mailbox__out_buffer__position : int

axiom communication__mailbox__out_buffer__first__bit_axiom :
  (0 <= communication__mailbox__out_buffer__first__bit)

axiom communication__mailbox__out_buffer__last__bit_axiom :
  (communication__mailbox__out_buffer__first__bit <  communication__mailbox__out_buffer__last__bit)

axiom communication__mailbox__out_buffer__position_axiom :
  (0 <= communication__mailbox__out_buffer__position)

logic user_eq10 : us_rep1, us_rep1 -> bool

logic dummy10 : us_rep1

type mailbox__ref = { mailbox__content : us_rep1
}

function mailbox__ref_mailbox__content__projection(a: mailbox__ref) : us_rep1 =
  (a).mailbox__content

type t3s

logic t3sqtint : t3s -> int

axiom t3sqtaxiom : (forall i:t3s. (1 <= t3sqtint(i)))

axiom t3sqtaxiom1 : (forall i:t3s. (t3sqtint(i) <= 15))

predicate in_range5(x: int) = ((1 <= x) and (x <= 15))

function bool_eq12(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq11 : t3s, t3s -> bool

logic dummy11 : t3s

type t3s__ref = { t3s__content : t3s
}

function t3s__ref_t3s__content__projection(a: t3s__ref) : t3s =
  (a).t3s__content

predicate dynamic_invariant2(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_46))

predicate dynamic_invariant3(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range1(temp___expr_74))

predicate dynamic_invariant4(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range2(temp___expr_18))

logic max : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_invariant5(temp___expr_168: us_t1,
  temp___is_init_164: bool, temp___skip_constant_165: bool,
  temp___do_toplevel_166: bool, temp___do_typ_inv_167: bool) =
  ((not (temp___skip_constant_165 = true)) -> (dynamic_property2(1, max,
  first3(temp___expr_168), last3(temp___expr_168)) and
  ((first3(temp___expr_168) = 1) and (last3(temp___expr_168) = max))))

predicate default_initial_assumption(temp___expr_170: us_t1,
  temp___skip_top_level_171: bool) = ((first3(temp___expr_170) = 1) and
  (last3(temp___expr_170) = max))

predicate dynamic_invariant6(temp___expr_178: us_rep,
  temp___is_init_174: bool, temp___skip_constant_175: bool,
  temp___do_toplevel_176: bool, temp___do_typ_inv_177: bool) =
  (dynamic_property2(1, max,
  first3(((temp___expr_178).us_split_fields1).rec__communication__ring_buffer__buffer__content),
  last3(((temp___expr_178).us_split_fields1).rec__communication__ring_buffer__buffer__content)) and
  ((first3(((temp___expr_178).us_split_fields1).rec__communication__ring_buffer__buffer__content) = 1) and
  (last3(((temp___expr_178).us_split_fields1).rec__communication__ring_buffer__buffer__content) = max)))

predicate default_initial_assumption1(temp___expr_180: us_rep,
  temp___skip_top_level_181: bool) =
  ((((first3(((temp___expr_180).us_split_fields1).rec__communication__ring_buffer__buffer__content) = 1) and
  (last3(((temp___expr_180).us_split_fields1).rec__communication__ring_buffer__buffer__content) = max)) and
  (to_rep3(((temp___expr_180).us_split_fields1).rec__communication__ring_buffer__buffer__first) = 1)) and
  (to_rep(((temp___expr_180).us_split_fields1).rec__communication__ring_buffer__buffer__length) = 0))

logic temp___String_Literal_195 : unit -> (int,character) farray

axiom temp___String_Literal_195__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_195(us_void_param)].
  (to_rep1((temp___String_Literal_195(us_void_param)[1])) = 48))

axiom temp___String_Literal_195__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_195(us_void_param)].
  (to_rep1((temp___String_Literal_195(us_void_param)[2])) = 48))

axiom temp___String_Literal_195__def_axiom2 :
  (forall us_void_param:unit [temp___String_Literal_195(us_void_param)].
  (to_rep1((temp___String_Literal_195(us_void_param)[3])) = 48))

axiom temp___String_Literal_195__def_axiom3 :
  (forall us_void_param:unit [temp___String_Literal_195(us_void_param)].
  (to_rep1((temp___String_Literal_195(us_void_param)[4])) = 46))

axiom temp___String_Literal_195__def_axiom4 :
  (forall us_void_param:unit [temp___String_Literal_195(us_void_param)].
  (to_rep1((temp___String_Literal_195(us_void_param)[5])) = 48))

axiom temp___String_Literal_195__def_axiom5 :
  (forall us_void_param:unit [temp___String_Literal_195(us_void_param)].
  (to_rep1((temp___String_Literal_195(us_void_param)[6])) = 48))

axiom temp___String_Literal_195__def_axiom6 :
  (forall us_void_param:unit [temp___String_Literal_195(us_void_param)].
  (to_rep1((temp___String_Literal_195(us_void_param)[7])) = 48))

axiom temp___String_Literal_195__def_axiom7 :
  (forall us_void_param:unit [temp___String_Literal_195(us_void_param)].
  (to_rep1((temp___String_Literal_195(us_void_param)[8])) = 46))

axiom temp___String_Literal_195__def_axiom8 :
  (forall us_void_param:unit [temp___String_Literal_195(us_void_param)].
  (to_rep1((temp___String_Literal_195(us_void_param)[9])) = 48))

axiom temp___String_Literal_195__def_axiom9 :
  (forall us_void_param:unit [temp___String_Literal_195(us_void_param)].
  (to_rep1((temp___String_Literal_195(us_void_param)[10])) = 48))

axiom temp___String_Literal_195__def_axiom10 :
  (forall us_void_param:unit [temp___String_Literal_195(us_void_param)].
  (to_rep1((temp___String_Literal_195(us_void_param)[11])) = 48))

axiom temp___String_Literal_195__def_axiom11 :
  (forall us_void_param:unit [temp___String_Literal_195(us_void_param)].
  (to_rep1((temp___String_Literal_195(us_void_param)[12])) = 46))

axiom temp___String_Literal_195__def_axiom12 :
  (forall us_void_param:unit [temp___String_Literal_195(us_void_param)].
  (to_rep1((temp___String_Literal_195(us_void_param)[13])) = 48))

axiom temp___String_Literal_195__def_axiom13 :
  (forall us_void_param:unit [temp___String_Literal_195(us_void_param)].
  (to_rep1((temp___String_Literal_195(us_void_param)[14])) = 48))

axiom temp___String_Literal_195__def_axiom14 :
  (forall us_void_param:unit [temp___String_Literal_195(us_void_param)].
  (to_rep1((temp___String_Literal_195(us_void_param)[15])) = 48))

predicate dynamic_invariant7(temp___expr_189: us_rep1,
  temp___is_init_185: bool, temp___skip_constant_186: bool,
  temp___do_toplevel_187: bool, temp___do_typ_inv_188: bool) =
  ((dynamic_property2(1, max,
  first3(((((temp___expr_189).us_split_fields3).rec__communication__mailbox__in_buffer).us_split_fields1).rec__communication__ring_buffer__buffer__content),
  last3(((((temp___expr_189).us_split_fields3).rec__communication__mailbox__in_buffer).us_split_fields1).rec__communication__ring_buffer__buffer__content)) and
  ((first3(((((temp___expr_189).us_split_fields3).rec__communication__mailbox__in_buffer).us_split_fields1).rec__communication__ring_buffer__buffer__content) = 1) and
  (last3(((((temp___expr_189).us_split_fields3).rec__communication__mailbox__in_buffer).us_split_fields1).rec__communication__ring_buffer__buffer__content) = max))) and
  (dynamic_property2(1, max,
  first3(((((temp___expr_189).us_split_fields3).rec__communication__mailbox__out_buffer).us_split_fields1).rec__communication__ring_buffer__buffer__content),
  last3(((((temp___expr_189).us_split_fields3).rec__communication__mailbox__out_buffer).us_split_fields1).rec__communication__ring_buffer__buffer__content)) and
  ((first3(((((temp___expr_189).us_split_fields3).rec__communication__mailbox__out_buffer).us_split_fields1).rec__communication__ring_buffer__buffer__content) = 1) and
  (last3(((((temp___expr_189).us_split_fields3).rec__communication__mailbox__out_buffer).us_split_fields1).rec__communication__ring_buffer__buffer__content) = max))))

predicate default_initial_assumption2(temp___expr_193: us_rep1,
  temp___skip_top_level_194: bool) =
  (((((temp___expr_193).us_split_fields3).rec__communication__mailbox__address = temp___String_Literal_195(void)) and
  (to_rep(((temp___expr_193).us_split_fields3).rec__communication__mailbox__port) = 0)) and
  (((((first3(((((temp___expr_193).us_split_fields3).rec__communication__mailbox__in_buffer).us_split_fields1).rec__communication__ring_buffer__buffer__content) = 1) and
  (last3(((((temp___expr_193).us_split_fields3).rec__communication__mailbox__in_buffer).us_split_fields1).rec__communication__ring_buffer__buffer__content) = max)) and
  (to_rep3(((((temp___expr_193).us_split_fields3).rec__communication__mailbox__in_buffer).us_split_fields1).rec__communication__ring_buffer__buffer__first) = 1)) and
  (to_rep(((((temp___expr_193).us_split_fields3).rec__communication__mailbox__in_buffer).us_split_fields1).rec__communication__ring_buffer__buffer__length) = 0)) and
  ((((first3(((((temp___expr_193).us_split_fields3).rec__communication__mailbox__out_buffer).us_split_fields1).rec__communication__ring_buffer__buffer__content) = 1) and
  (last3(((((temp___expr_193).us_split_fields3).rec__communication__mailbox__out_buffer).us_split_fields1).rec__communication__ring_buffer__buffer__content) = max)) and
  (to_rep3(((((temp___expr_193).us_split_fields3).rec__communication__mailbox__out_buffer).us_split_fields1).rec__communication__ring_buffer__buffer__first) = 1)) and
  (to_rep(((((temp___expr_193).us_split_fields3).rec__communication__mailbox__out_buffer).us_split_fields1).rec__communication__ring_buffer__buffer__length) = 0))))

 (* File "communication.ads", line 9, characters 0-0 *)
goal defqtvc : (dynamic_invariant1(address, true, false, true, true) ->
  (dynamic_invariant(port, true, false, true, true) ->
  (forall o:natural. ((to_rep(o) = port) ->
  ((first1(address) <= last1(address)) -> (1 <= 15))))))
