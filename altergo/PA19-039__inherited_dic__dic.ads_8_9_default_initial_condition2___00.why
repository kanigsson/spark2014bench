(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type us_split_fields = { rec__dic__parent__b : bool; rec__ext__ : us_private
}

function us_split_fields_rec__dic__parent__b__projection(a: us_split_fields) : bool =
  (a).rec__dic__parent__b

function us_split_fields_rec__ext____projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__projection(a: us_rep) : int = (a).attr__tag

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if (to_int(((a).us_split_fields1).rec__dic__parent__b) = to_int(((b).us_split_fields1).rec__dic__parent__b)) then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic dic__parent__b__first__bit : int

logic dic__parent__b__last__bit : int

logic dic__parent__b__position : int

axiom dic__parent__b__first__bit_axiom : (0 <= dic__parent__b__first__bit)

axiom dic__parent__b__last__bit_axiom :
  (dic__parent__b__first__bit <  dic__parent__b__last__bit)

axiom dic__parent__b__position_axiom : (0 <= dic__parent__b__position)

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type child__ref = { child__content : us_rep
}

function child__ref_child__content__projection(a: child__ref) : us_rep =
  (a).child__content

logic is_ok : us_rep -> bool

logic is_ok__function_guard : bool, us_rep -> prop

logic is_ok1 : int, us_rep -> bool

logic is_ok__function_guard1 : bool, int, us_rep -> prop

axiom temp___result_175qtdef :
  (forall temp___174:us_rep. is_ok__function_guard(is_ok(temp___174),
  temp___174))

predicate default_initial_assumption(temp___expr_172: us_rep,
  temp___skip_top_level_173: bool) =
  ((((temp___expr_172).attr__tag = us_tag) and
  (((temp___expr_172).us_split_fields1).rec__dic__parent__b = of_int(1))) and
  ((not (temp___skip_top_level_173 = true)) ->
  (is_ok(temp___expr_172) = true)))

axiom dic__child__compat_axiom :
  (forall obj:us_rep [is_ok1(us_tag, obj)].
  (is_ok__function_guard1(is_ok1(us_tag, obj), us_tag, obj) ->
  (forall obj1:us_rep. is_ok__function_guard(is_ok(obj1), obj1))))

axiom dic__child__compat_axiom1 :
  (forall obj:us_rep [is_ok1(us_tag, obj)].
  (is_ok__function_guard1(is_ok1(us_tag, obj), us_tag, obj) ->
  (to_int(is_ok(obj)) = to_int(is_ok1(us_tag, obj)))))

axiom is_ok__def_axiom :
  (forall obj:us_rep [is_ok(obj)]. ((is_ok(obj) = true) ->
  (not (((obj).us_split_fields1).rec__dic__parent__b = true))))

axiom is_ok__def_axiom1 :
  (forall obj:us_rep [is_ok(obj)].
  ((not (((obj).us_split_fields1).rec__dic__parent__b = true)) ->
  (is_ok(obj) = true)))

 (* File "/home/kanig/dev/spark2014/benchmark_script/data/tmp-test-PA19-039__inherited_dic-9521/src/gnatprove/dic__child.mlw", line 296, characters 5-8 *)
goal defqtvc :
  (forall usf:us_rep.
  ((forall usf1:us_rep. is_ok__function_guard(is_ok(usf1), usf1)) ->
  ((((usf).attr__tag = us_tag) and
  (((usf).us_split_fields1).rec__dic__parent__b = of_int(1))) ->
  ((forall usf1:us_rep. is_ok__function_guard(is_ok(usf1), usf1)) ->
  (is_ok(usf) = true)))))
