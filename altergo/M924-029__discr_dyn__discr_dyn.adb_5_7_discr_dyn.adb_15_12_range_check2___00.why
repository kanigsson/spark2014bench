(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type stb

logic stbqtint : stb -> int

axiom stbqtaxiom : (forall i:stb. (1 <= stbqtint(i)))

axiom stbqtaxiom1 : (forall i:stb. (stbqtint(i) <= 10))

predicate in_range1(x: int) = ((1 <= x) and (x <= 10))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : stb, stb -> bool

logic dummy : stb

type stb__ref = { stb__content : stb
}

function stb__ref_stb__content__projection(a: stb__ref) : stb =
  (a).stb__content

function to_rep(x: stb) : int = stbqtint(x)

logic of_rep : int -> stb

axiom inversion_axiom : (forall x:stb [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:stb [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)]))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq4(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq2 : us_t, us_t -> bool

logic dummy2 : us_t

type tb__ref = { tb__content : us_t
}

function tb__ref_tb__content__projection(a: tb__ref) : us_t = (a).tb__content

type t6b__ref = { t6b__content : us_t
}

function t6b__ref_t6b__content__projection(a: t6b__ref) : us_t =
  (a).t6b__content

type us_split_discrs = { rec__discr_dyn__r2__a : stb
}

function us_split_discrs_rec__discr_dyn__r2__a__projection(a: us_split_discrs) : stb =
  (a).rec__discr_dyn__r2__a

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__discr_dyn__r2__b : us_t; rec__discr_dyn__r2__c
: bool
}

function us_split_fields_rec__discr_dyn__r2__b__projection(a: us_split_fields) : us_t =
  (a).rec__discr_dyn__r2__b

function us_split_fields_rec__discr_dyn__r2__c__projection(a: us_split_fields) : bool =
  (a).rec__discr_dyn__r2__c

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq5(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__discr_dyn__r2__a) = to_rep(((b).us_split_discrs1).rec__discr_dyn__r2__a)) and
  ((bool_eq4(((a).us_split_fields1).rec__discr_dyn__r2__b,
  ((b).us_split_fields1).rec__discr_dyn__r2__b) = true) and
  (to_int(((a).us_split_fields1).rec__discr_dyn__r2__c) = to_int(((b).us_split_fields1).rec__discr_dyn__r2__c)))) then true else false)

predicate in_range3(rec__discr_dyn__r2__a1: int, a: us_split_discrs) =
  (rec__discr_dyn__r2__a1 = to_rep((a).rec__discr_dyn__r2__a))

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic discr_dyn__r2__a__first__bit : int

logic discr_dyn__r2__a__last__bit : int

logic discr_dyn__r2__a__position : int

axiom discr_dyn__r2__a__first__bit_axiom :
  (0 <= discr_dyn__r2__a__first__bit)

axiom discr_dyn__r2__a__last__bit_axiom :
  (discr_dyn__r2__a__first__bit <  discr_dyn__r2__a__last__bit)

axiom discr_dyn__r2__a__position_axiom : (0 <= discr_dyn__r2__a__position)

logic discr_dyn__r2__b__first__bit : int

logic discr_dyn__r2__b__last__bit : int

logic discr_dyn__r2__b__position : int

axiom discr_dyn__r2__b__first__bit_axiom :
  (0 <= discr_dyn__r2__b__first__bit)

axiom discr_dyn__r2__b__last__bit_axiom :
  (discr_dyn__r2__b__first__bit <  discr_dyn__r2__b__last__bit)

axiom discr_dyn__r2__b__position_axiom : (0 <= discr_dyn__r2__b__position)

logic discr_dyn__r2__c__first__bit : int

logic discr_dyn__r2__c__last__bit : int

logic discr_dyn__r2__c__position : int

axiom discr_dyn__r2__c__first__bit_axiom :
  (0 <= discr_dyn__r2__c__first__bit)

axiom discr_dyn__r2__c__last__bit_axiom :
  (discr_dyn__r2__c__first__bit <  discr_dyn__r2__c__last__bit)

axiom discr_dyn__r2__c__position_axiom : (0 <= discr_dyn__r2__c__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type r2__ref = { r2__content : us_rep
}

function r2__ref_r2__content__projection(a: r2__ref) : us_rep =
  (a).r2__content

type tT10bP1

logic tT10bP1qtint : tT10bP1 -> int

axiom tT10bP1qtaxiom : (forall i:tT10bP1. (1 <= tT10bP1qtint(i)))

axiom tT10bP1qtaxiom1 : (forall i:tT10bP1. (tT10bP1qtint(i) <= 3))

predicate in_range4(x: int) = ((1 <= x) and (x <= 3))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : tT10bP1, tT10bP1 -> bool

logic dummy4 : tT10bP1

type tT10bP1__ref = { tT10bP1__content : tT10bP1
}

function tT10bP1__ref_tT10bP1__content__projection(a: tT10bP1__ref) : tT10bP1 =
  (a).tT10bP1__content

logic dummy5 : (int,integer) farray

logic value__size2 : int

logic object__size2 : int

logic component__size1 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom2 : (0 <= alignment2)

logic user_eq5 : (int,integer) farray, (int,integer) farray -> bool

type us_split_fields2 = { rec__discr_dyn__r2__b1 : (int,integer) farray;
rec__discr_dyn__r2__c1 : bool
}

function us_split_fields_rec__discr_dyn__r2__b__2__projection(a: us_split_fields2) : (int,integer) farray =
  (a).rec__discr_dyn__r2__b1

function us_split_fields_rec__discr_dyn__r2__c__2__projection(a: us_split_fields2) : bool =
  (a).rec__discr_dyn__r2__c1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__2__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = { rec__discr_dyn__r2__b =
  of_array(((a).us_split_fields3).rec__discr_dyn__r2__b1, 1, 3);
  rec__discr_dyn__r2__c = ((a).us_split_fields3).rec__discr_dyn__r2__c1 } }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = { rec__discr_dyn__r2__b1 =
  to_array(((r).us_split_fields1).rec__discr_dyn__r2__b);
  rec__discr_dyn__r2__c1 = ((r).us_split_fields1).rec__discr_dyn__r2__c } }

function bool_eq7(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep(((a).us_split_discrs2).rec__discr_dyn__r2__a) = to_rep(((b).us_split_discrs2).rec__discr_dyn__r2__a)) and
  ((bool_eq3(((a).us_split_fields3).rec__discr_dyn__r2__b1, 1, 3,
  ((b).us_split_fields3).rec__discr_dyn__r2__b1, 1, 3) = true) and
  (to_int(((a).us_split_fields3).rec__discr_dyn__r2__c1) = to_int(((b).us_split_fields3).rec__discr_dyn__r2__c1)))) then true else false)

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic discr_dyn__r2__a__first__bit1 : int

logic discr_dyn__r2__a__last__bit1 : int

logic discr_dyn__r2__a__position1 : int

axiom discr_dyn__r2__a__first__bit_axiom1 :
  (0 <= discr_dyn__r2__a__first__bit1)

axiom discr_dyn__r2__a__last__bit_axiom1 :
  (discr_dyn__r2__a__first__bit1 <  discr_dyn__r2__a__last__bit1)

axiom discr_dyn__r2__a__position_axiom1 : (0 <= discr_dyn__r2__a__position1)

logic discr_dyn__r2__b__first__bit1 : int

logic discr_dyn__r2__b__last__bit1 : int

logic discr_dyn__r2__b__position1 : int

axiom discr_dyn__r2__b__first__bit_axiom1 :
  (0 <= discr_dyn__r2__b__first__bit1)

axiom discr_dyn__r2__b__last__bit_axiom1 :
  (discr_dyn__r2__b__first__bit1 <  discr_dyn__r2__b__last__bit1)

axiom discr_dyn__r2__b__position_axiom1 : (0 <= discr_dyn__r2__b__position1)

logic discr_dyn__r2__c__first__bit1 : int

logic discr_dyn__r2__c__last__bit1 : int

logic discr_dyn__r2__c__position1 : int

axiom discr_dyn__r2__c__first__bit_axiom1 :
  (0 <= discr_dyn__r2__c__first__bit1)

axiom discr_dyn__r2__c__last__bit_axiom1 :
  (discr_dyn__r2__c__first__bit1 <  discr_dyn__r2__c__last__bit1)

axiom discr_dyn__r2__c__position_axiom1 : (0 <= discr_dyn__r2__c__position1)

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy6 : us_rep1

type tb1S__ref = { tb1S__content : us_rep1
}

function tb1S__ref_tb1S__content__projection(a: tb1S__ref) : us_rep1 =
  (a).tb1S__content

logic b1__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS : int

predicate dynamic_invariant(temp___expr_202: us_rep1,
  temp___is_init_198: bool, temp___skip_constant_199: bool,
  temp___do_toplevel_200: bool, temp___do_typ_inv_201: bool) =
  ((not (temp___skip_constant_199 = true)) -> in_range3(3,
  (to_base(temp___expr_202)).us_split_discrs1))

predicate default_initial_assumption(temp___expr_205: us_rep1,
  temp___skip_top_level_206: bool) =
  (to_rep(((temp___expr_205).us_split_discrs2).rec__discr_dyn__r2__a) = 3)

predicate dynamic_invariant1(temp___expr_182: int, temp___is_init_178: bool,
  temp___skip_constant_179: bool, temp___do_toplevel_180: bool,
  temp___do_typ_inv_181: bool) = (((temp___is_init_178 = true) or
  (1 <= 10)) -> in_range1(temp___expr_182))

type tT15bP1

logic tT15bP1qtint : tT15bP1 -> int

axiom tT15bP1qtaxiom : (forall i:tT15bP1. (1 <= tT15bP1qtint(i)))

axiom tT15bP1qtaxiom1 : (forall i:tT15bP1. (tT15bP1qtint(i) <= 2))

predicate in_range5(x: int) = ((1 <= x) and (x <= 2))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq7 : tT15bP1, tT15bP1 -> bool

logic dummy7 : tT15bP1

type tT15bP1__ref = { tT15bP1__content : tT15bP1
}

function tT15bP1__ref_tT15bP1__content__projection(a: tT15bP1__ref) : tT15bP1 =
  (a).tT15bP1__content

logic dummy8 : (int,integer) farray

logic value__size4 : int

logic object__size4 : int

logic component__size2 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom component__size_axiom2 : (0 <= component__size2)

axiom alignment_axiom4 : (0 <= alignment4)

logic user_eq8 : (int,integer) farray, (int,integer) farray -> bool

type us_split_fields4 = { rec__discr_dyn__r2__b2 : (int,integer) farray;
rec__discr_dyn__r2__c2 : bool
}

function us_split_fields_rec__discr_dyn__r2__b__3__projection(a: us_split_fields4) : (int,integer) farray =
  (a).rec__discr_dyn__r2__b2

function us_split_fields_rec__discr_dyn__r2__c__3__projection(a: us_split_fields4) : bool =
  (a).rec__discr_dyn__r2__c2

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs3 : us_split_discrs; us_split_fields5 :
us_split_fields4
}

function us_rep___split_discrs__3__projection(a: us_rep2) : us_split_discrs =
  (a).us_split_discrs3

function us_rep___split_fields__3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function to_base1(a: us_rep2) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs3; us_split_fields1 = { rec__discr_dyn__r2__b =
  of_array(((a).us_split_fields5).rec__discr_dyn__r2__b2, 1, 2);
  rec__discr_dyn__r2__c = ((a).us_split_fields5).rec__discr_dyn__r2__c2 } }

function of_base1(r: us_rep) : us_rep2 = { us_split_discrs3 =
  (r).us_split_discrs1; us_split_fields5 = { rec__discr_dyn__r2__b2 =
  to_array(((r).us_split_fields1).rec__discr_dyn__r2__b);
  rec__discr_dyn__r2__c2 = ((r).us_split_fields1).rec__discr_dyn__r2__c } }

function bool_eq9(a: us_rep2, b: us_rep2) : bool =
  (if ((to_rep(((a).us_split_discrs3).rec__discr_dyn__r2__a) = to_rep(((b).us_split_discrs3).rec__discr_dyn__r2__a)) and
  ((bool_eq3(((a).us_split_fields5).rec__discr_dyn__r2__b2, 1, 2,
  ((b).us_split_fields5).rec__discr_dyn__r2__b2, 1, 2) = true) and
  (to_int(((a).us_split_fields5).rec__discr_dyn__r2__c2) = to_int(((b).us_split_fields5).rec__discr_dyn__r2__c2)))) then true else false)

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic discr_dyn__r2__a__first__bit2 : int

logic discr_dyn__r2__a__last__bit2 : int

logic discr_dyn__r2__a__position2 : int

axiom discr_dyn__r2__a__first__bit_axiom2 :
  (0 <= discr_dyn__r2__a__first__bit2)

axiom discr_dyn__r2__a__last__bit_axiom2 :
  (discr_dyn__r2__a__first__bit2 <  discr_dyn__r2__a__last__bit2)

axiom discr_dyn__r2__a__position_axiom2 : (0 <= discr_dyn__r2__a__position2)

logic discr_dyn__r2__b__first__bit2 : int

logic discr_dyn__r2__b__last__bit2 : int

logic discr_dyn__r2__b__position2 : int

axiom discr_dyn__r2__b__first__bit_axiom2 :
  (0 <= discr_dyn__r2__b__first__bit2)

axiom discr_dyn__r2__b__last__bit_axiom2 :
  (discr_dyn__r2__b__first__bit2 <  discr_dyn__r2__b__last__bit2)

axiom discr_dyn__r2__b__position_axiom2 : (0 <= discr_dyn__r2__b__position2)

logic discr_dyn__r2__c__first__bit2 : int

logic discr_dyn__r2__c__last__bit2 : int

logic discr_dyn__r2__c__position2 : int

axiom discr_dyn__r2__c__first__bit_axiom2 :
  (0 <= discr_dyn__r2__c__first__bit2)

axiom discr_dyn__r2__c__last__bit_axiom2 :
  (discr_dyn__r2__c__first__bit2 <  discr_dyn__r2__c__last__bit2)

axiom discr_dyn__r2__c__position_axiom2 : (0 <= discr_dyn__r2__c__position2)

logic user_eq9 : us_rep2, us_rep2 -> bool

logic dummy9 : us_rep2

type t14b__ref = { t14b__content : us_rep2
}

function t14b__ref_t14b__content__projection(a: t14b__ref) : us_rep2 =
  (a).t14b__content

logic temp_____aggregate_def_215 : int, int -> (int,integer) farray

predicate dynamic_invariant2(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range2(temp___expr_18))

predicate dynamic_invariant3(temp___expr_195: us_rep,
  temp___is_init_191: bool, temp___skip_constant_192: bool,
  temp___do_toplevel_193: bool, temp___do_typ_inv_194: bool) =
  (let temp___196 =
  ((temp___expr_195).us_split_discrs1).rec__discr_dyn__r2__a : stb in
  (dynamic_property(1, to_rep(temp___196),
  first1(((temp___expr_195).us_split_fields1).rec__discr_dyn__r2__b),
  last1(((temp___expr_195).us_split_fields1).rec__discr_dyn__r2__b)) and
  ((first1(((temp___expr_195).us_split_fields1).rec__discr_dyn__r2__b) = 1) and
  (last1(((temp___expr_195).us_split_fields1).rec__discr_dyn__r2__b) = to_rep(temp___196)))))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = (- 1))

logic rliteral1 : integer

axiom rliteral_axiom1 : (integerqtint(rliteral1) = (- 2))

axiom def_axiom :
  (forall temp___217:int. forall temp___218:int.
  ((dynamic_invariant2(temp___217, true, true, true, true) and
  dynamic_invariant2(temp___218, true, true, true, true)) ->
  ((temp_____aggregate_def_215(temp___217, temp___218)[1]) = rliteral)))

axiom def_axiom1 :
  (forall temp___217:int. forall temp___218:int.
  ((dynamic_invariant2(temp___217, true, true, true, true) and
  dynamic_invariant2(temp___218, true, true, true, true)) ->
  ((temp_____aggregate_def_215(temp___217, temp___218)[2]) = rliteral1)))

 (* File "discr_dyn.adb", line 1, characters 0-0 *)
goal defqtvc :
  ((exists usf:int. (dynamic_invariant1(usf, true, true, true, true) and
   (exists usf1:us_rep.
   (to_rep(((usf1).us_split_discrs1).rec__discr_dyn__r2__a) = usf)))) ->
  in_range1(3))
