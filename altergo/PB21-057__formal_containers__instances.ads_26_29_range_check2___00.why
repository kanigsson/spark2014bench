(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type capacity_range

logic capacity_rangeqtint : capacity_range -> int

axiom capacity_rangeqtaxiom :
  (forall i:capacity_range. (0 <= capacity_rangeqtint(i)))

axiom capacity_rangeqtaxiom1 :
  (forall i:capacity_range. (capacity_rangeqtint(i) <= 1000))

predicate in_range(x: int) = ((0 <= x) and (x <= 1000))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : capacity_range, capacity_range -> bool

logic dummy : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref_capacity_range__content__projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

function to_rep(x: capacity_range) : int = capacity_rangeqtint(x)

logic of_rep : int -> capacity_range

axiom inversion_axiom :
  (forall x:capacity_range [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:capacity_range [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__instances__vectors__vector__capacity :
capacity_range
}

function us_split_discrs_rec__instances__vectors__vector__capacity__projection(a: us_split_discrs) : capacity_range =
  (a).rec__instances__vectors__vector__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__instances__vectors__vector : us_main_type
}

function us_split_fields_rec__instances__vectors__vector__projection(a: us_split_fields) : us_main_type =
  (a).rec__instances__vectors__vector

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__2__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__3__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__instances__vectors__vector__capacity) = to_rep(((b).us_split_discrs1).rec__instances__vectors__vector__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__instances__vectors__vector,
  ((b).us_split_fields1).rec__instances__vectors__vector) = true)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic instances__vectors__vector__capacity__first__bit : int

logic instances__vectors__vector__capacity__last__bit : int

logic instances__vectors__vector__capacity__position : int

axiom instances__vectors__vector__capacity__first__bit_axiom :
  (0 <= instances__vectors__vector__capacity__first__bit)

axiom instances__vectors__vector__capacity__last__bit_axiom :
  (instances__vectors__vector__capacity__first__bit <  instances__vectors__vector__capacity__last__bit)

axiom instances__vectors__vector__capacity__position_axiom :
  (0 <= instances__vectors__vector__capacity__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type t389s__ref = { t389s__content : us_rep
}

function t389s__ref_t389s__content__projection(a: t389s__ref) : us_rep =
  (a).t389s__content

type us_split_fields2 = { rec__instances__dataT__vect : us_rep
}

function us_split_fields_rec__instances__dataT__vect__projection(a: us_split_fields2) : us_rep =
  (a).rec__instances__dataT__vect

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__4__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__4__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic instances__dataT__vect__first__bit : int

logic instances__dataT__vect__last__bit : int

logic instances__dataT__vect__position : int

axiom instances__dataT__vect__first__bit_axiom :
  (0 <= instances__dataT__vect__first__bit)

axiom instances__dataT__vect__last__bit_axiom :
  (instances__dataT__vect__first__bit <  instances__dataT__vect__last__bit)

axiom instances__dataT__vect__position_axiom :
  (0 <= instances__dataT__vect__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

type dataT__ref = { dataT__content : us_rep1
}

function dataT__ref_dataT__content__projection(a: dataT__ref) : us_rep1 =
  (a).dataT__content

logic attr__ATTRIBUTE_ADDRESS : int

predicate in_range1(rec__instances__vectors__vector__capacity1: int,
  a: us_split_discrs) =
  (rec__instances__vectors__vector__capacity1 = to_rep((a).rec__instances__vectors__vector__capacity))

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic instances__vectors__vector__capacity__first__bit1 : int

logic instances__vectors__vector__capacity__last__bit1 : int

logic instances__vectors__vector__capacity__position1 : int

axiom instances__vectors__vector__capacity__first__bit_axiom1 :
  (0 <= instances__vectors__vector__capacity__first__bit1)

axiom instances__vectors__vector__capacity__last__bit_axiom1 :
  (instances__vectors__vector__capacity__first__bit1 <  instances__vectors__vector__capacity__last__bit1)

axiom instances__vectors__vector__capacity__position_axiom1 :
  (0 <= instances__vectors__vector__capacity__position1)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type vector__ref = { vector__content : us_rep
}

function vector__ref_vector__content__projection(a: vector__ref) : us_rep =
  (a).vector__content

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

predicate dynamic_invariant(temp___expr_819: us_rep1,
  temp___is_init_815: bool, temp___skip_constant_816: bool,
  temp___do_toplevel_817: bool, temp___do_typ_inv_818: bool) = in_range1(10,
  (((temp___expr_819).us_split_fields3).rec__instances__dataT__vect).us_split_discrs1)

predicate default_initial_assumption(temp___expr_821: us_rep1,
  temp___skip_top_level_822: bool) =
  ((to_rep(((((temp___expr_821).us_split_fields3).rec__instances__dataT__vect).us_split_discrs1).rec__instances__vectors__vector__capacity) = 10) and
  (is_empty(((temp___expr_821).us_split_fields3).rec__instances__dataT__vect) = true))

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_split_fields4 = { rec__instances__t : us_main_type1
}

function us_split_fields_rec__instances__t__projection(a: us_split_fields4) : us_main_type1 =
  (a).rec__instances__t

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__5__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___split_fields__5__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic user_eq4 : us_rep2, us_rep2 -> bool

type t__ref = { t__content : us_rep2
}

function t__ref_t__content__projection(a: t__ref) : us_rep2 = (a).t__content

type map__ref = { map__content : (int,us_rep2) farray
}

logic slide : (int,us_rep2) farray, int, int -> (int,us_rep2) farray

axiom slide_eq :
  (forall a:(int,us_rep2) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep2) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq2 : (int,us_rep2) farray, int, int, (int,us_rep2) farray, int,
  int -> bool

logic attr__ATTRIBUTE_ADDRESS1 : int

type tarrD1

logic tarrD1qtint : tarrD1 -> int

axiom tarrD1qtaxiom : (forall i:tarrD1. (1 <= tarrD1qtint(i)))

axiom tarrD1qtaxiom1 : (forall i:tarrD1. (tarrD1qtint(i) <= 3))

predicate in_range2(x: int) = ((1 <= x) and (x <= 3))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq5 : tarrD1, tarrD1 -> bool

logic dummy3 : tarrD1

type tarrD1__ref = { tarrD1__content : tarrD1
}

function tarrD1__ref_tarrD1__content__projection(a: tarrD1__ref) : tarrD1 =
  (a).tarrD1__content

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq6 : count_type, count_type -> bool

logic dummy4 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

predicate dynamic_invariant1(temp___expr_277: int, temp___is_init_273: bool,
  temp___skip_constant_274: bool, temp___do_toplevel_275: bool,
  temp___do_typ_inv_276: bool) = (((temp___is_init_273 = true) or
  (0 <= 2147483647)) -> in_range3(temp___expr_277))

predicate dynamic_invariant2(temp___expr_659: int, temp___is_init_655: bool,
  temp___skip_constant_656: bool, temp___do_toplevel_657: bool,
  temp___do_typ_inv_658: bool) = (((temp___is_init_655 = true) or
  (0 <= 1000)) -> in_range(temp___expr_659))

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq3(a, b)]. (user_eq3(a,
  b) = oeq(a, b)))

function capacity(container: us_rep) : int =
  to_rep(((container).us_split_discrs1).rec__instances__vectors__vector__capacity)

logic capacity__function_guard : int, us_rep -> prop

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

axiom length__post_axiom :
  (forall container:us_rep [length(container)].
  (length(container) <= capacity(container)))

axiom length__post_axiom1 :
  (forall container:us_rep [length(container)].
  dynamic_invariant2(length(container), true, false, true, true))

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep3

logic bool_eq5 : us_rep3, us_rep3 -> bool

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic user_eq7 : us_rep3, us_rep3 -> bool

logic dummy5 : us_rep3

type sequence__ref = { sequence__content : us_rep3
}

function sequence__ref_sequence__content__2__projection(a: sequence__ref) : us_rep3 =
  (a).sequence__content

logic length1 : us_rep3 -> int

logic length__function_guard1 : int, us_rep3 -> prop

logic model : us_rep -> us_rep3

logic model__function_guard : us_rep3, us_rep -> prop

logic bool_eq6 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq6(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq6(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length2(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq7(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range4(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE3 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> bool

function last(container: us_rep3) : int = (0 + length1(container))

logic last__function_guard : int, us_rep3 -> prop

logic get : us_rep3, int -> int

logic get__function_guard : int, us_rep3, int -> prop

function oeq1(left: us_rep3, right: us_rep3) : bool =
  andb(bool_eq6(length1(left), length1(right)),
  (if (forall n:int. (((1 <= n) and (n <= last(left))) -> (get(left,
      n) = get(right, n)))) then true else false))

logic oeq__function_guard1 : bool, us_rep3, us_rep3 -> prop

axiom user_eq__def_axiom1 :
  (forall a:us_rep3. forall b:us_rep3 [user_eq7(a, b)]. (user_eq7(a,
  b) = oeq1(a, b)))

predicate default_initial_assumption1(temp___expr_698: us_rep3,
  temp___skip_top_level_699: bool) =
  ((not (temp___skip_top_level_699 = true)) ->
  (length1(temp___expr_698) = 0))

axiom model__post_axiom :
  (forall container:us_rep [model(container)].
  (length1(model(container)) = length(container)))

axiom oeq__post_axiom :
  (forall left:us_rep. forall right:us_rep [oeq(left, right)]. ((oeq(left,
  right) = true) -> (oeq1(model(left), model(right)) = true)))

axiom oeq__post_axiom1 :
  (forall left:us_rep. forall right:us_rep [oeq(left, right)].
  ((oeq1(model(left), model(right)) = true) -> (oeq(left, right) = true)))

axiom is_empty__post_axiom :
  (forall container:us_rep [is_empty(container)].
  ((is_empty(container) = true) -> (length(container) = 0)))

axiom is_empty__post_axiom1 :
  (forall container:us_rep [is_empty(container)]. ((length(container) = 0) ->
  (is_empty(container) = true)))

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. (0 <= extended_indexqtint(i)))

axiom extended_indexqtaxiom1 :
  (forall i:extended_index. (extended_indexqtint(i) <= 1000))

predicate in_range5(x: int) = ((0 <= x) and (x <= 1000))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq8 : extended_index, extended_index -> bool

logic dummy6 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref_extended_index__content__3__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

predicate dynamic_invariant3(temp___expr_690: int, temp___is_init_686: bool,
  temp___skip_constant_687: bool, temp___do_toplevel_688: bool,
  temp___do_typ_inv_689: bool) = (((temp___is_init_686 = true) or
  (0 <= 1000)) -> in_range5(temp___expr_690))

axiom length__post_axiom2 :
  (forall container:us_rep3 [length1(container)].
  ((0 + length1(container)) <= 1000))

axiom length__post_axiom3 :
  (forall container:us_rep3 [length1(container)].
  dynamic_invariant1(length1(container), true, false, true, true))

type element_type

logic element_typeqtint : element_type -> int

axiom element_typeqtaxiom :
  (forall i:element_type. ((- 2147483648) <= element_typeqtint(i)))

axiom element_typeqtaxiom1 :
  (forall i:element_type. (element_typeqtint(i) <= 2147483647))

predicate in_range6(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq9 : element_type, element_type -> bool

logic dummy7 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_element_type__content__5__projection(a: element_type__ref) : element_type =
  (a).element_type__content

predicate dynamic_invariant4(temp___expr_683: int, temp___is_init_679: bool,
  temp___skip_constant_680: bool, temp___do_toplevel_681: bool,
  temp___do_typ_inv_682: bool) = (((temp___is_init_679 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range6(temp___expr_683))

axiom get__post_axiom :
  (forall container:us_rep3.
  (forall position:int [get(container, position)].
  ((dynamic_invariant3(position, true, true, true, true) and
  ((1 <= position) and (position <= last(container)))) ->
  dynamic_invariant4(get(container, position), true, false, true, true))))

axiom user_eq__def_axiom2 :
  (forall a:us_rep. forall b:us_rep [user_eq1(a, b)]. (user_eq1(a,
  b) = oeq(a, b)))

 (* File "instances.ads", line 8, characters 0-0 *)
goal defqtvc : in_range(10)
