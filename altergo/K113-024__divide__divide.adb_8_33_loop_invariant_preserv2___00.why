(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

logic m : int

logic attr__ATTRIBUTE_ADDRESS : int

logic n : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

 (* File "divide.ads", line 2, characters 0-0 *)
goal defqtvc :
  (forall q:int. forall r:int. (dynamic_invariant(m, true, false, true,
  true) -> (dynamic_invariant(n, true, false, true, true) ->
  (dynamic_invariant(q, false, false, true, true) -> (dynamic_invariant(r,
  false, false, true, true) -> (((0 <= m) and (0 <  n)) ->
  (forall q1:int. ((q1 = 0) ->
  (forall r1:int. ((r1 = m) -> ((n <= r1) -> (let o = (m - r1) : int in
  (in_range1(o) -> (((not (q1 <= o)) or (let o1 = (q1 * n) : int in
  (in_range1(o1) and in_range1((o1 + r1))))) ->
  (forall q2:int. forall r2:int. ((((q2 <= (m - r2)) and
  (m = ((q2 * n) + r2))) and (0 <= r2)) -> ((andb((if (dynamic_invariant(q2,
  false, true, true, true) and dynamic_invariant(r2, false, true, true,
  true)) then true else false),
  (if (n <= r2) then true else false)) = true) -> (let o1 = (q2 + 1) : int in
  (in_range1(o1) ->
  (forall q3:int. ((q3 = o1) -> (let o2 = (r2 - n) : int in (in_range1(o2) ->
  (forall r3:int. ((r3 = o2) -> ((n <= r3) -> (let o3 = (m - r3) : int in
  (in_range1(o3) -> (((not (q3 <= o3)) or (let o4 = (q3 * n) : int in
  (in_range1(o4) and in_range1((o4 + r3))))) -> (q3 <= (m - r3)))))))))))))))))))))))))))))))
