(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : positive, positive -> bool

logic dummy : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_invariant(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range(temp___expr_46))

logic c : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

logic last : int

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type dynamic_discrete__ref = { dynamic_discrete__content : integer
}

function dynamic_discrete__ref_dynamic_discrete__content__projection(a: dynamic_discrete__ref) : integer =
  (a).dynamic_discrete__content

predicate dynamic_invariant1(temp___expr_166: int, temp___is_init_162: bool,
  temp___skip_constant_163: bool, temp___do_toplevel_164: bool,
  temp___do_typ_inv_165: bool) = (((temp___is_init_162 = true) or
  (0 <= last)) -> dynamic_property(0, last, temp___expr_166))

axiom last__def_axiom : (last = c)

logic dyn_return : int -> int

logic dyn_return__function_guard : int, int -> prop

logic last1 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy3 : integer

type pos_dynamic_discrete__ref = { pos_dynamic_discrete__content : integer
}

function pos_dynamic_discrete__ref_pos_dynamic_discrete__content__projection(a: pos_dynamic_discrete__ref) : integer =
  (a).pos_dynamic_discrete__content

predicate dynamic_invariant2(temp___expr_159: int, temp___is_init_155: bool,
  temp___skip_constant_156: bool, temp___do_toplevel_157: bool,
  temp___do_typ_inv_158: bool) = (((temp___is_init_155 = true) or
  (1 <= last1)) -> dynamic_property1(1, last1, temp___expr_159))

axiom last__def_axiom1 : (last1 = c)

axiom dyn_return__post_axiom :
  (forall x:int [dyn_return(x)]. (dynamic_invariant(x, true, true, true,
  true) -> (let result = dyn_return(x) : int in
  (dyn_return__function_guard(result, x) -> dynamic_invariant2(result, true,
  false, true, true)))))

predicate dynamic_invariant3(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

 (* File "test_dynamic_property.adb", line 1, characters 0-0 *)
goal defqtvc :
  (forall y:int. (dynamic_invariant(c, true, false, true, true) -> (let o = c
  : int in (dynamic_property1(1, last1, o) ->
  (forall x:int. ((x = o) -> (dynamic_invariant2(x, true, false, true,
  true) -> (dynamic_invariant1(y, true, false, true, true) -> (let o1 =
  dyn_return(30) : int in ((dyn_return__function_guard(o1, 30) and
  dynamic_invariant2(o1, true, false, true, true)) ->
  (forall x1:int. ((x1 = o1) -> ((x1 <= c) ->
  (dyn_return__function_guard(dyn_return(40), 40) ->
  ((dyn_return(40) <= c) ->
  (forall x2:int. (dynamic_invariant2(x2, true, true, true, true) ->
  ((x2 <= c) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (0 <  y) then true else false)) ->
  ((spark__branch = true) -> (dynamic_property1(1, last1, y) ->
  (forall test_dynamic_property__dyn_param__x:int.
  (dynamic_invariant2(test_dynamic_property__dyn_param__x, true, true, true,
  true) -> dynamic_property(0, last, test_dynamic_property__dyn_param__x)))))))))))))))))))))))))
