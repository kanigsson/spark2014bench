(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

logic factorial : int -> int

logic factorial__function_guard : int, int -> prop

axiom factorial__post_axiom :
  (forall n:int [factorial(n)]. ((dynamic_invariant(n, true, true, true,
  true) and (n <= 7)) -> (let result = factorial(n) : int in
  (factorial__function_guard(result, n) -> dynamic_invariant(result, true,
  false, true, true)))))

logic n1 : int

logic attr__ATTRIBUTE_ADDRESS : int

logic n2 : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type t5b__ref = { t5b__content : integer
}

function t5b__ref_t5b__content__projection(a: t5b__ref) : integer =
  (a).t5b__content

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy3 : integer

type t6b__ref = { t6b__content : integer
}

function t6b__ref_t6b__content__projection(a: t6b__ref) : integer =
  (a).t6b__content

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

 (* File "fib.ads", line 23, characters 0-0 *)
goal defqtvc :
  (forall p1:int. forall p2:int. (dynamic_invariant(n1, true, false, true,
  true) -> (dynamic_invariant(n2, true, false, true, true) ->
  (dynamic_invariant(p1, false, false, true, true) -> (dynamic_invariant(p2,
  false, false, true, true) -> (((n1 = n2) and (n1 <= 7)) ->
  (forall p11:int. ((p11 = 1) ->
  (forall p12:int.
  ((forall i:int. factorial__function_guard(factorial((i - 1)), (i - 1))) ->
  ((forall i:int. factorial__function_guard(factorial((i - 1)), (i - 1))) ->
  ((let temp___210 = n1 : int in
  (exists i:int. ((i = 2) and (if (andb((if (2 <= i) then true else false),
  (if (i <= temp___210) then true else false)) = true) then (let o = (i - 1)
  : int in (let o1 = factorial(o) : int in ((factorial__function_guard(o1,
  o) and dynamic_invariant(o1, true, false, true, true)) and
  (exists p13:int. exists i1:int. ((p13 = factorial((i1 - 1))) and
  ((andb((if (dynamic_invariant(p13, false, true, true, true) and
  dynamic_property(2, n1, i1)) then true else false), (if ((2 <= i1) and
  (i1 <= n1)) then true else false)) = true) and (let o2 = (i1 * p13)
  : int in (in_range1(o2) and (in_range2(o2) and ((p12 = o2) and
  (i1 = temp___210))))))))))) else (p12 = p11))))) ->
  (forall p21:int. ((p21 = 1) -> (let temp___216 = n2 : int in
  (forall i:int. ((i = 2) -> ((andb((if (2 <= i) then true else false),
  (if (i <= temp___216) then true else false)) = true) -> (let o = (i - 1)
  : int in (let o1 = factorial(o) : int in ((factorial__function_guard(o1,
  o) and dynamic_invariant(o1, true, false, true, true)) ->
  (forall p22:int. forall i1:int.
  ((forall i2:int. factorial__function_guard(factorial((i2 - 1)), (i2 - 1))) ->
  ((p22 = factorial((i1 - 1))) -> ((andb((if (dynamic_property1(2, n2,
  i1) and dynamic_invariant(p22, false, true, true,
  true)) then true else false), (if ((2 <= i1) and
  (i1 <= n2)) then true else false)) = true) -> (let o2 = (i1 * p22) : int in
  (in_range1(o2) -> (in_range2(o2) ->
  (forall p23:int. ((p23 = o2) -> ((not (i1 = temp___216)) ->
  (forall i2:int. ((i2 = (i1 + 1)) -> (let o3 = (i2 - 1) : int in (let o4 =
  factorial(o3) : int in ((factorial__function_guard(o4, o3) and
  dynamic_invariant(o4, true, false, true, true)) ->
  ((forall i3:int. factorial__function_guard(factorial((i3 - 1)), (i3 - 1))) ->
  (p23 = factorial((i2 - 1))))))))))))))))))))))))))))))))))))))))
