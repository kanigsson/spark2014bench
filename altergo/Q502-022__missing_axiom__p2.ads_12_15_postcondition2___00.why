(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__p2__s__x : integer
}

function us_split_fields_rec__p2__s__x__projection(a: us_split_fields) : integer =
  (a).rec__p2__s__x

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__p2__s__x) = to_rep(((b).us_split_fields1).rec__p2__s__x)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic p2__s__x__first__bit : int

logic p2__s__x__last__bit : int

logic p2__s__x__position : int

axiom p2__s__x__first__bit_axiom : (0 <= p2__s__x__first__bit)

axiom p2__s__x__last__bit_axiom :
  (p2__s__x__first__bit <  p2__s__x__last__bit)

axiom p2__s__x__position_axiom : (0 <= p2__s__x__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type s__ref = { s__content : us_rep
}

function s__ref_s__content__projection(a: s__ref) : us_rep = (a).s__content

type us_split_discrs = { rec__p2__t2__d : bool
}

function us_split_discrs_rec__p2__t2__d__projection(a: us_split_discrs) : bool =
  (a).rec__p2__t2__d

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields2 = { rec__p2__t2__c : us_rep
}

function us_split_fields_rec__p2__t2__c__projection(a: us_split_fields2) : us_rep =
  (a).rec__p2__t2__c

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq3(a: us_rep1, b: us_rep1) : bool =
  (if ((to_int(((a).us_split_discrs1).rec__p2__t2__d) = to_int(((b).us_split_discrs1).rec__p2__t2__d)) and
  (user_eq1(((a).us_split_fields3).rec__p2__t2__c,
  ((b).us_split_fields3).rec__p2__t2__c) = true)) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic p2__t2__d__first__bit : int

logic p2__t2__d__last__bit : int

logic p2__t2__d__position : int

axiom p2__t2__d__first__bit_axiom : (0 <= p2__t2__d__first__bit)

axiom p2__t2__d__last__bit_axiom :
  (p2__t2__d__first__bit <  p2__t2__d__last__bit)

axiom p2__t2__d__position_axiom : (0 <= p2__t2__d__position)

logic p2__t2__c__first__bit : int

logic p2__t2__c__last__bit : int

logic p2__t2__c__position : int

axiom p2__t2__c__first__bit_axiom : (0 <= p2__t2__c__first__bit)

axiom p2__t2__c__last__bit_axiom :
  (p2__t2__c__first__bit <  p2__t2__c__last__bit)

axiom p2__t2__c__position_axiom : (0 <= p2__t2__c__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy2 : us_rep1

type t2__ref = { t2__content : us_rep1
}

function t2__ref_t2__content__projection(a: t2__ref) : us_rep1 =
  (a).t2__content

logic x : us_rep1

logic attr__ATTRIBUTE_ADDRESS : int

logic y : us_rep1

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep. oeq__function_guard(oeq(a, b), a, b))

axiom user_eq__def_axiom1 :
  (forall a:us_rep. forall b:us_rep [user_eq1(a, b)]. (user_eq1(a,
  b) = oeq(a, b)))

axiom oeq__def_axiom :
  (forall x1:us_rep. forall y1:us_rep [oeq(x1, y1)]. (not (oeq(x1,
  y1) = true)))

axiom oeq__def_axiom1 : true

 (* File "p2.ads", line 11, characters 0-0 *)
goal defqtvc :
  (forall p2__always_true__result:bool.
  ((p2__always_true__result = of_int(1)) ->
  (p2__always_true__result = true)))
