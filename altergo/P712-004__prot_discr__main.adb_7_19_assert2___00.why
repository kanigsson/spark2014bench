(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type us_split_discrs = { rec__p__pt__d : bool
}

function us_split_discrs_rec__p__pt__d__projection(a: us_split_discrs) : bool =
  (a).rec__p__pt__d

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_rep = { us_split_discrs1 : us_split_discrs
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic p__pt__d__first__bit : int

logic p__pt__d__last__bit : int

logic p__pt__d__position : int

axiom p__pt__d__first__bit_axiom : (0 <= p__pt__d__first__bit)

axiom p__pt__d__last__bit_axiom :
  (p__pt__d__first__bit <  p__pt__d__last__bit)

axiom p__pt__d__position_axiom : (0 <= p__pt__d__position)

logic user_eq : us_rep, us_rep -> bool

type pt__ref = { pt__content : us_rep
}

function pt__ref_pt__content__projection(a: pt__ref) : us_rep =
  (a).pt__content

logic p1__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS : int

logic d1 : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

logic p2__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS2 : int

logic d2 : bool

logic attr__ATTRIBUTE_ADDRESS3 : int

type us_rep1 = { us_split_discrs2 : us_split_discrs
}

function us_rep___split_discrs__2__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2 }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1 }

predicate in_range1(rec__p__pt__d1: bool, a: us_rep) =
  (rec__p__pt__d1 = ((a).us_split_discrs1).rec__p__pt__d)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic p__pt__d__first__bit1 : int

logic p__pt__d__last__bit1 : int

logic p__pt__d__position1 : int

axiom p__pt__d__first__bit_axiom1 : (0 <= p__pt__d__first__bit1)

axiom p__pt__d__last__bit_axiom1 :
  (p__pt__d__first__bit1 <  p__pt__d__last__bit1)

axiom p__pt__d__position_axiom1 : (0 <= p__pt__d__position1)

logic user_eq1 : us_rep1, us_rep1 -> bool

type tp1S__ref = { tp1S__content : us_rep1
}

function tp1S__ref_tp1S__content__projection(a: tp1S__ref) : us_rep1 =
  (a).tp1S__content

predicate dynamic_invariant(temp___expr_187: us_rep1,
  temp___is_init_183: bool, temp___skip_constant_184: bool,
  temp___do_toplevel_185: bool, temp___do_typ_inv_186: bool) =
  ((not (temp___skip_constant_184 = true)) -> in_range1(of_int(1),
  to_base(temp___expr_187)))

predicate default_initial_assumption(temp___expr_189: us_rep1,
  temp___skip_top_level_190: bool) =
  (((temp___expr_189).us_split_discrs2).rec__p__pt__d = of_int(1))

type us_rep2 = { us_split_discrs3 : us_split_discrs
}

function us_rep___split_discrs__3__projection(a: us_rep2) : us_split_discrs =
  (a).us_split_discrs3

function to_base1(a: us_rep2) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs3 }

function of_base1(r: us_rep) : us_rep2 = { us_split_discrs3 =
  (r).us_split_discrs1 }

predicate in_range2(rec__p__pt__d1: bool, a: us_rep) =
  (rec__p__pt__d1 = ((a).us_split_discrs1).rec__p__pt__d)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic p__pt__d__first__bit2 : int

logic p__pt__d__last__bit2 : int

logic p__pt__d__position2 : int

axiom p__pt__d__first__bit_axiom2 : (0 <= p__pt__d__first__bit2)

axiom p__pt__d__last__bit_axiom2 :
  (p__pt__d__first__bit2 <  p__pt__d__last__bit2)

axiom p__pt__d__position_axiom2 : (0 <= p__pt__d__position2)

logic user_eq2 : us_rep2, us_rep2 -> bool

type tp2S__ref = { tp2S__content : us_rep2
}

function tp2S__ref_tp2S__content__projection(a: tp2S__ref) : us_rep2 =
  (a).tp2S__content

predicate dynamic_invariant1(temp___expr_196: us_rep2,
  temp___is_init_192: bool, temp___skip_constant_193: bool,
  temp___do_toplevel_194: bool, temp___do_typ_inv_195: bool) =
  ((not (temp___skip_constant_193 = true)) -> in_range2(of_int(0),
  to_base1(temp___expr_196)))

predicate default_initial_assumption1(temp___expr_198: us_rep2,
  temp___skip_top_level_199: bool) =
  (((temp___expr_198).us_split_discrs3).rec__p__pt__d = of_int(0))

 (* File "main.adb", line 3, characters 0-0 *)
goal defqtvc : (dynamic_invariant({ us_split_discrs2 = p1__split_discrs },
  true, false, true, true) -> (dynamic_invariant1({ us_split_discrs3 =
  p2__split_discrs }, true, false, true, true) -> (dynamic_invariant({
  us_split_discrs2 = p1__split_discrs }, true, true, true, true) ->
  (((p1__split_discrs).rec__p__pt__d = d1) -> (dynamic_invariant1({
  us_split_discrs3 = p2__split_discrs }, true, true, true, true) ->
  (((p2__split_discrs).rec__p__pt__d = d2) -> (not (d1 = d2))))))))
