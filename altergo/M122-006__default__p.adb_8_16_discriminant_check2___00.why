(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_discrs = { rec__p__t__x : integer
}

function us_split_discrs_rec__p__t__x__projection(a: us_split_discrs) : integer =
  (a).rec__p__t__x

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_rep = { us_split_discrs1 : us_split_discrs
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_discrs1).rec__p__t__x) = to_rep(((b).us_split_discrs1).rec__p__t__x)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic p__t__x__first__bit : int

logic p__t__x__last__bit : int

logic p__t__x__position : int

axiom p__t__x__first__bit_axiom : (0 <= p__t__x__first__bit)

axiom p__t__x__last__bit_axiom : (p__t__x__first__bit <  p__t__x__last__bit)

axiom p__t__x__position_axiom : (0 <= p__t__x__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type t__ref = { t__content : us_rep
}

function t__ref_t__content__projection(a: t__ref) : us_rep = (a).t__content

logic x__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS : int

predicate default_initial_assumption(temp___expr_181: us_rep,
  temp___skip_top_level_182: bool) =
  (to_rep(((temp___expr_181).us_split_discrs1).rec__p__t__x) = 5)

logic y__split_discrs : us_split_discrs

logic y__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate in_range1(rec__p__t__x1: int, a: us_rep) =
  (rec__p__t__x1 = to_rep(((a).us_split_discrs1).rec__p__t__x))

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic p__t__x__first__bit1 : int

logic p__t__x__last__bit1 : int

logic p__t__x__position1 : int

axiom p__t__x__first__bit_axiom1 : (0 <= p__t__x__first__bit1)

axiom p__t__x__last__bit_axiom1 :
  (p__t__x__first__bit1 <  p__t__x__last__bit1)

axiom p__t__x__position_axiom1 : (0 <= p__t__x__position1)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type tyS__ref = { tyS__content : us_rep
}

function tyS__ref_tyS__content__projection(a: tyS__ref) : us_rep =
  (a).tyS__content

predicate dynamic_invariant(temp___expr_188: us_rep,
  temp___is_init_184: bool, temp___skip_constant_185: bool,
  temp___do_toplevel_186: bool, temp___do_typ_inv_187: bool) =
  ((not (temp___skip_constant_185 = true)) -> in_range1(2, temp___expr_188))

predicate default_initial_assumption1(temp___expr_190: us_rep,
  temp___skip_top_level_191: bool) =
  (to_rep(((temp___expr_190).us_split_discrs1).rec__p__t__x) = 2)

predicate in_range2(rec__p__t__x1: int, a: us_rep) =
  (rec__p__t__x1 = to_rep(((a).us_split_discrs1).rec__p__t__x))

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic p__t__x__first__bit2 : int

logic p__t__x__last__bit2 : int

logic p__t__x__position2 : int

axiom p__t__x__first__bit_axiom2 : (0 <= p__t__x__first__bit2)

axiom p__t__x__last__bit_axiom2 :
  (p__t__x__first__bit2 <  p__t__x__last__bit2)

axiom p__t__x__position_axiom2 : (0 <= p__t__x__position2)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type t1b__ref = { t1b__content : us_rep
}

function t1b__ref_t1b__content__projection(a: t1b__ref) : us_rep =
  (a).t1b__content

predicate in_range3(rec__p__t__x1: int, a: us_rep) =
  (rec__p__t__x1 = to_rep(((a).us_split_discrs1).rec__p__t__x))

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic p__t__x__first__bit3 : int

logic p__t__x__last__bit3 : int

logic p__t__x__position3 : int

axiom p__t__x__first__bit_axiom3 : (0 <= p__t__x__first__bit3)

axiom p__t__x__last__bit_axiom3 :
  (p__t__x__first__bit3 <  p__t__x__last__bit3)

axiom p__t__x__position_axiom3 : (0 <= p__t__x__position3)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type t7b__ref = { t7b__content : us_rep
}

function t7b__ref_t7b__content__projection(a: t7b__ref) : us_rep =
  (a).t7b__content

predicate in_range4(rec__p__t__x1: int, a: us_rep) =
  (rec__p__t__x1 = to_rep(((a).us_split_discrs1).rec__p__t__x))

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic p__t__x__first__bit4 : int

logic p__t__x__last__bit4 : int

logic p__t__x__position4 : int

axiom p__t__x__first__bit_axiom4 : (0 <= p__t__x__first__bit4)

axiom p__t__x__last__bit_axiom4 :
  (p__t__x__first__bit4 <  p__t__x__last__bit4)

axiom p__t__x__position_axiom4 : (0 <= p__t__x__position4)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : us_rep

type t11b__ref = { t11b__content : us_rep
}

function t11b__ref_t11b__content__projection(a: t11b__ref) : us_rep =
  (a).t11b__content

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 2)

 (* File "p.adb", line 1, characters 0-0 *)
goal defqtvc :
  (forall x__split_discrs:integer. ((x__attr__constrained = false) ->
  (default_initial_assumption({ us_split_discrs1 = { rec__p__t__x =
  x__split_discrs } }, false) -> (in_range(2) -> in_range1(2, {
  us_split_discrs1 = { rec__p__t__x = rliteral } })))))
