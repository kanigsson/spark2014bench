(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : positive, positive -> bool

logic dummy : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range2(temp___expr_18))

logic id : int -> int

logic id__function_guard : int, int -> prop

axiom id__post_axiom :
  (forall x:int [id(x)]. (dynamic_invariant(x, true, true, true, true) ->
  (let result = id(x) : int in (id__function_guard(result, x) ->
  dynamic_invariant(result, true, false, true, true)))))

axiom id__def_axiom :
  (forall x:int [id(x)]. (dynamic_invariant(x, true, true, true, true) ->
  (id(x) = x)))

function to_rep(x: positive) : int = positiveqtint(x)

logic of_rep : int -> positive

axiom inversion_axiom :
  (forall x:positive [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:positive [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_discrs = { rec__private_types__p2__t__d : bool
}

function us_split_discrs_rec__private_types__p2__t__d__projection(a: us_split_discrs) : bool =
  (a).rec__private_types__p2__t__d

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__private_types__p2__t__f : positive; rec__ext__
: us_private
}

function us_split_fields_rec__private_types__p2__t__f__projection(a: us_split_fields) : positive =
  (a).rec__private_types__p2__t__f

function us_split_fields_rec__ext____projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__tag : int
}

function us_rep___split_discrs__2__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__projection(a: us_rep) : int = (a).attr__tag

predicate private_types__p2__t__f__pred(a: us_rep) =
  (to_int(((a).us_split_discrs1).rec__private_types__p2__t__d) = 1)

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if ((to_int(((a).us_split_discrs1).rec__private_types__p2__t__d) = to_int(((b).us_split_discrs1).rec__private_types__p2__t__d)) and
  (private_types__p2__t__f__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__private_types__p2__t__f) = to_rep(((b).us_split_fields1).rec__private_types__p2__t__f)))) then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic private_types__p2__t__d__first__bit : int

logic private_types__p2__t__d__last__bit : int

logic private_types__p2__t__d__position : int

axiom private_types__p2__t__d__first__bit_axiom :
  (0 <= private_types__p2__t__d__first__bit)

axiom private_types__p2__t__d__last__bit_axiom :
  (private_types__p2__t__d__first__bit <  private_types__p2__t__d__last__bit)

axiom private_types__p2__t__d__position_axiom :
  (0 <= private_types__p2__t__d__position)

logic private_types__p2__t__f__first__bit : int

logic private_types__p2__t__f__last__bit : int

logic private_types__p2__t__f__position : int

axiom private_types__p2__t__f__first__bit_axiom :
  (0 <= private_types__p2__t__f__first__bit)

axiom private_types__p2__t__f__last__bit_axiom :
  (private_types__p2__t__f__first__bit <  private_types__p2__t__f__last__bit)

axiom private_types__p2__t__f__position_axiom :
  (0 <= private_types__p2__t__f__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type t__ref = { t__content : us_rep
}

function t__ref_t__content__2__projection(a: t__ref) : us_rep =
  (a).t__content

logic us_tag1 : int

predicate in_range3(rec__private_types__p2__t__d1: bool, a: us_rep) =
  (rec__private_types__p2__t__d1 = ((a).us_split_discrs1).rec__private_types__p2__t__d)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic private_types__p2__t__d__first__bit1 : int

logic private_types__p2__t__d__last__bit1 : int

logic private_types__p2__t__d__position1 : int

axiom private_types__p2__t__d__first__bit_axiom1 :
  (0 <= private_types__p2__t__d__first__bit1)

axiom private_types__p2__t__d__last__bit_axiom1 :
  (private_types__p2__t__d__first__bit1 <  private_types__p2__t__d__last__bit1)

axiom private_types__p2__t__d__position_axiom1 :
  (0 <= private_types__p2__t__d__position1)

logic private_types__p2__t__f__first__bit1 : int

logic private_types__p2__t__f__last__bit1 : int

logic private_types__p2__t__f__position1 : int

axiom private_types__p2__t__f__first__bit_axiom1 :
  (0 <= private_types__p2__t__f__first__bit1)

axiom private_types__p2__t__f__last__bit_axiom1 :
  (private_types__p2__t__f__first__bit1 <  private_types__p2__t__f__last__bit1)

axiom private_types__p2__t__f__position_axiom1 :
  (0 <= private_types__p2__t__f__position1)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type t2__ref = { t2__content : us_rep
}

function t2__ref_t2__content__projection(a: t2__ref) : us_rep =
  (a).t2__content

predicate dynamic_invariant1(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range1(temp___expr_46))

predicate dynamic_invariant2(temp___expr_175: us_rep,
  temp___is_init_171: bool, temp___skip_constant_172: bool,
  temp___do_toplevel_173: bool, temp___do_typ_inv_174: bool) =
  ((not (temp___skip_constant_172 = true)) -> in_range3(of_int(1),
  temp___expr_175))

axiom temp___result_180qtdef : id__function_guard(id(0), 0)

predicate default_initial_assumption(temp___expr_177: us_rep,
  temp___skip_top_level_178: bool) =
  (((temp___expr_177).attr__tag = us_tag1) and
  ((((temp___expr_177).us_split_discrs1).rec__private_types__p2__t__d = of_int(1)) and
  (private_types__p2__t__f__pred(temp___expr_177) ->
  (to_rep(((temp___expr_177).us_split_fields1).rec__private_types__p2__t__f) = id(0)))))

 (* File "/home/kanig/dev/spark2014/benchmark_script/data/tmp-test-PA12-001__default_checks_on_private-8676/src/gnatprove/private_types__p2__t2.mlw", line 624, characters 5-8 *)
goal defqtvc :
  (forall usf:us_rep.
  ((of_int(1) = ((usf).us_split_discrs1).rec__private_types__p2__t__d) ->
  (private_types__p2__t__f__pred(usf) -> (let o = id(0) : int in
  ((id__function_guard(o, 0) and (dynamic_invariant(o, true, false, true,
  true) and (o = 0))) -> in_range1(o))))))
