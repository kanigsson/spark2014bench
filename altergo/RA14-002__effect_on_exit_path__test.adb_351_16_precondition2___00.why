(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. (0 <= tqtint(i)))

axiom tqtaxiom1 : (forall i:t. (tqtint(i) <= 255))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_and(v1, v2), n) = andb(nth(v1, n), nth(v2, n)))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_or(v1, v2), n) = orb(nth(v1, n), nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  8)) -> (nth(bw_not(v),
  n) = notb(nth(v, n)))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth(asr(b, s), n) = nth(b, (8 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 8))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 8))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

function to_int(x: t) : int =
  (if is_signed_positive(x) then tqtint(x) else (-(256 - tqtint(x))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds : (forall v:t. (0 <= tqtint(v)))

axiom to_uint_bounds1 : (forall v:t. (tqtint(v) <  256))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) -> sge(x, zeros)))

axiom positive_is_ge_zeros1 :
  (forall x:t. (sge(x, zeros) -> is_signed_positive(x)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  256) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  256)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 256)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  256) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 256)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) -> eq_sub_bv(a, b, i, n)))

axiom eq_sub_equiv1 :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub_bv(a, b, i, n) ->
  eq_sub(a, b, tqtint(i), tqtint(n))))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 8)]. (eq_sub(x, y, 0, 8) ->
  (x = y)))

type t__ref = { t__content : t
}

function bool_eq(x: t, y: t) : bool = (if (x = y) then true else false)

function bool_ne(x: t, y: t) : bool = (if (not (x = y)) then true else false)

function bool_lt(x: t, y: t) : bool = (if ult(x, y) then true else false)

function bool_le(x: t, y: t) : bool = (if ule(x, y) then true else false)

function bool_gt(x: t, y: t) : bool = (if ugt(x, y) then true else false)

function bool_ge(x: t, y: t) : bool = (if uge(x, y) then true else false)

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

function bv_min(x: t, y: t) : t = (if ule(x, y) then x else y)

function bv_max(x: t, y: t) : t = (if ule(x, y) then y else x)

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int1(b: bool) : int = (if (b = true) then 1 else 0)

function of_int1(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type os_mbx_index_t

logic rliteral : t

axiom rliteral_axiom : (tqtint(rliteral) = 0)

logic rliteral1 : t

axiom rliteral_axiom1 : (tqtint(rliteral1) = 2)

predicate in_range1(x: t) = (ule(rliteral, x) and ule(x, rliteral1))

predicate in_range_int(x: int) = ((0 <= x) and (x <= 2))

function bool_eq2(x: t, y: t) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> t

logic user_eq : os_mbx_index_t, os_mbx_index_t -> bool

logic dummy : os_mbx_index_t

type os_mbx_index_t__ref = { os_mbx_index_t__content : os_mbx_index_t
}

function os_mbx_index_t__ref_os_mbx_index_t__content__projection(a: os_mbx_index_t__ref) : os_mbx_index_t =
  (a).os_mbx_index_t__content

logic to_rep : os_mbx_index_t -> t

logic of_rep : t -> os_mbx_index_t

axiom inversion_axiom :
  (forall x:os_mbx_index_t [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:os_mbx_index_t [to_rep(x)]. in_range1(to_rep(x)))

logic rliteral2 : t

axiom rliteral_axiom2 : (tqtint(rliteral2) = 3)

axiom coerce_axiom :
  (forall x:t [to_rep(of_rep(x))]. (let y = urem(x, rliteral2) : t in
  (in_range1(y) -> (to_rep(of_rep(x)) = y))))

function to_int2(x: os_mbx_index_t) : int = tqtint(to_rep(x))

axiom range_int_axiom :
  (forall x:os_mbx_index_t [to_int2(x)]. in_range_int(to_int2(x)))

type os_mbx_count_t

logic attr__ATTRIBUTE_MODULUS : t

predicate in_range2(x: t) = (ule(rliteral, x) and ule(x, rliteral2))

predicate in_range_int1(x: int) = ((0 <= x) and (x <= 3))

function bool_eq3(x: t, y: t) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> t

logic user_eq1 : os_mbx_count_t, os_mbx_count_t -> bool

logic dummy1 : os_mbx_count_t

type os_mbx_count_t__ref = { os_mbx_count_t__content : os_mbx_count_t
}

function os_mbx_count_t__ref_os_mbx_count_t__content__projection(a: os_mbx_count_t__ref) : os_mbx_count_t =
  (a).os_mbx_count_t__content

logic to_rep1 : os_mbx_count_t -> t

logic of_rep1 : t -> os_mbx_count_t

axiom inversion_axiom1 :
  (forall x:os_mbx_count_t [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:os_mbx_count_t [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:t [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

function to_int3(x: os_mbx_count_t) : int = tqtint(to_rep1(x))

axiom range_int_axiom1 :
  (forall x:os_mbx_count_t [to_int3(x)]. in_range_int1(to_int3(x)))

type os_task_id_t

logic os_task_id_tqtint : os_task_id_t -> int

axiom os_task_id_tqtaxiom :
  (forall i:os_task_id_t. ((- 1) <= os_task_id_tqtint(i)))

axiom os_task_id_tqtaxiom1 :
  (forall i:os_task_id_t. (os_task_id_tqtint(i) <= 4))

predicate in_range3(x: int) = (((- 1) <= x) and (x <= 4))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : os_task_id_t, os_task_id_t -> bool

logic dummy2 : os_task_id_t

type os_task_id_t__ref = { os_task_id_t__content : os_task_id_t
}

function os_task_id_t__ref_os_task_id_t__content__projection(a: os_task_id_t__ref) : os_task_id_t =
  (a).os_task_id_t__content

function to_rep2(x: os_task_id_t) : int = os_task_id_tqtint(x)

logic of_rep2 : int -> os_task_id_t

axiom inversion_axiom2 :
  (forall x:os_task_id_t [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:os_task_id_t [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type os_mbx_msg_t

logic os_mbx_msg_tqtint : os_mbx_msg_t -> int

axiom os_mbx_msg_tqtaxiom :
  (forall i:os_mbx_msg_t. (0 <= os_mbx_msg_tqtint(i)))

axiom os_mbx_msg_tqtaxiom1 :
  (forall i:os_mbx_msg_t. (os_mbx_msg_tqtint(i) <= 4294967295))

predicate in_range4(x: int) = ((0 <= x) and (x <= 4294967295))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : os_mbx_msg_t, os_mbx_msg_t -> bool

logic dummy3 : os_mbx_msg_t

type os_mbx_msg_t__ref = { os_mbx_msg_t__content : os_mbx_msg_t
}

function os_mbx_msg_t__ref_os_mbx_msg_t__content__projection(a: os_mbx_msg_t__ref) : os_mbx_msg_t =
  (a).os_mbx_msg_t__content

function to_rep3(x: os_mbx_msg_t) : int = os_mbx_msg_tqtint(x)

logic of_rep3 : int -> os_mbx_msg_t

axiom inversion_axiom3 :
  (forall x:os_mbx_msg_t [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:os_mbx_msg_t [to_rep3(x)]. in_range4(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range4(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_fields = { rec__test__os_mbx_entry_t__sender_id : os_task_id_t;
rec__test__os_mbx_entry_t__msg : os_mbx_msg_t
}

function us_split_fields_rec__test__os_mbx_entry_t__sender_id__projection(a: us_split_fields) : os_task_id_t =
  (a).rec__test__os_mbx_entry_t__sender_id

function us_split_fields_rec__test__os_mbx_entry_t__msg__projection(a: us_split_fields) : os_mbx_msg_t =
  (a).rec__test__os_mbx_entry_t__msg

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq6(a: us_rep, b: us_rep) : bool =
  (if ((to_rep2(((a).us_split_fields1).rec__test__os_mbx_entry_t__sender_id) = to_rep2(((b).us_split_fields1).rec__test__os_mbx_entry_t__sender_id)) and
  (to_rep3(((a).us_split_fields1).rec__test__os_mbx_entry_t__msg) = to_rep3(((b).us_split_fields1).rec__test__os_mbx_entry_t__msg))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic test__os_mbx_entry_t__sender_id__first__bit : int

logic test__os_mbx_entry_t__sender_id__last__bit : int

logic test__os_mbx_entry_t__sender_id__position : int

axiom test__os_mbx_entry_t__sender_id__first__bit_axiom :
  (0 <= test__os_mbx_entry_t__sender_id__first__bit)

axiom test__os_mbx_entry_t__sender_id__last__bit_axiom :
  (test__os_mbx_entry_t__sender_id__first__bit <  test__os_mbx_entry_t__sender_id__last__bit)

axiom test__os_mbx_entry_t__sender_id__position_axiom :
  (0 <= test__os_mbx_entry_t__sender_id__position)

logic test__os_mbx_entry_t__msg__first__bit : int

logic test__os_mbx_entry_t__msg__last__bit : int

logic test__os_mbx_entry_t__msg__position : int

axiom test__os_mbx_entry_t__msg__first__bit_axiom :
  (0 <= test__os_mbx_entry_t__msg__first__bit)

axiom test__os_mbx_entry_t__msg__last__bit_axiom :
  (test__os_mbx_entry_t__msg__first__bit <  test__os_mbx_entry_t__msg__last__bit)

axiom test__os_mbx_entry_t__msg__position_axiom :
  (0 <= test__os_mbx_entry_t__msg__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type os_mbx_entry_t__ref = { os_mbx_entry_t__content : us_rep
}

function os_mbx_entry_t__ref_os_mbx_entry_t__content__projection(a: os_mbx_entry_t__ref) : us_rep =
  (a).os_mbx_entry_t__content

type map__ref = { map__content : (t,us_rep) farray
}

logic slide : (t,us_rep) farray, t, t -> (t,us_rep) farray

axiom slide_eq :
  (forall a:(t,us_rep) farray.
  (forall first:t [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(t,us_rep) farray.
  (forall old_first:t.
  (forall new_first:t.
  (forall i:t [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[sub(i, sub(new_first, old_first))]))))))

function bool_eq7(a: (t,us_rep) farray, a__first: t, a__last: t,
  b: (t,us_rep) farray, b__first: t, b__last: t) : bool =
  (if ((if ule(a__first, a__last) then (ule(b__first, b__last) and
  (sub(a__last, a__first) = sub(b__last, b__first))) else ugt(b__first,
  b__last)) and
  (forall temp___idx_154:t. ((ule(a__first, temp___idx_154) and
  ule(temp___idx_154, a__last)) -> (bool_eq6((a[temp___idx_154]),
  (b[add(sub(b__first, a__first), temp___idx_154)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(t,us_rep) farray. forall b:(t,us_rep) farray.
  (forall a__first:t. forall a__last:t. forall b__first:t. forall b__last:t.
  ((bool_eq7(b, b__first, b__last, a, a__first, a__last) = true) ->
  (ule(a__first, a__last) -> ule(b__first, b__last)))))

axiom bool_eq_rev1 :
  (forall a:(t,us_rep) farray. forall b:(t,us_rep) farray.
  (forall a__first:t. forall a__last:t. forall b__first:t. forall b__last:t.
  ((bool_eq7(b, b__first, b__last, a, a__first, a__last) = true) ->
  (ule(a__first, a__last) -> (sub(a__last, a__first) = sub(b__last,
  b__first))))))

axiom bool_eq_rev2 :
  (forall a:(t,us_rep) farray. forall b:(t,us_rep) farray.
  (forall a__first:t. forall a__last:t. forall b__first:t. forall b__last:t.
  ((bool_eq7(b, b__first, b__last, a, a__first, a__last) = true) ->
  ((not ule(a__first, a__last)) -> ugt(b__first, b__last)))))

axiom bool_eq_rev3 :
  (forall a:(t,us_rep) farray. forall b:(t,us_rep) farray.
  (forall a__first:t. forall a__last:t. forall b__first:t. forall b__last:t.
  ((bool_eq7(b, b__first, b__last, a, a__first, a__last) = true) ->
  (forall temp___idx_154:t. ((ule(a__first, temp___idx_154) and
  ule(temp___idx_154, a__last)) -> (bool_eq6((a[temp___idx_154]),
  (b[add(sub(b__first, a__first), temp___idx_154)])) = true))))))

logic dummy5 : (t,us_rep) farray

logic value__size1 : int

logic object__size1 : int

logic component__size : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq5 : (t,us_rep) farray, (t,us_rep) farray -> bool

type us_split_fields2 = { rec__test__os_mbx_t__head : os_mbx_index_t;
rec__test__os_mbx_t__count : os_mbx_count_t; rec__test__os_mbx_t__mbx_array :
(t,us_rep) farray
}

function us_split_fields_rec__test__os_mbx_t__head__projection(a: us_split_fields2) : os_mbx_index_t =
  (a).rec__test__os_mbx_t__head

function us_split_fields_rec__test__os_mbx_t__count__projection(a: us_split_fields2) : os_mbx_count_t =
  (a).rec__test__os_mbx_t__count

function us_split_fields_rec__test__os_mbx_t__mbx_array__projection(a: us_split_fields2) : (t,us_rep) farray =
  (a).rec__test__os_mbx_t__mbx_array

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq8(a: us_rep1, b: us_rep1) : bool =
  (if (((to_rep(((a).us_split_fields3).rec__test__os_mbx_t__head) = to_rep(((b).us_split_fields3).rec__test__os_mbx_t__head)) and
  (to_rep1(((a).us_split_fields3).rec__test__os_mbx_t__count) = to_rep1(((b).us_split_fields3).rec__test__os_mbx_t__count))) and
  (bool_eq7(((a).us_split_fields3).rec__test__os_mbx_t__mbx_array, rliteral,
  rliteral1, ((b).us_split_fields3).rec__test__os_mbx_t__mbx_array, rliteral,
  rliteral1) = true)) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic test__os_mbx_t__head__first__bit : int

logic test__os_mbx_t__head__last__bit : int

logic test__os_mbx_t__head__position : int

axiom test__os_mbx_t__head__first__bit_axiom :
  (0 <= test__os_mbx_t__head__first__bit)

axiom test__os_mbx_t__head__last__bit_axiom :
  (test__os_mbx_t__head__first__bit <  test__os_mbx_t__head__last__bit)

axiom test__os_mbx_t__head__position_axiom :
  (0 <= test__os_mbx_t__head__position)

logic test__os_mbx_t__count__first__bit : int

logic test__os_mbx_t__count__last__bit : int

logic test__os_mbx_t__count__position : int

axiom test__os_mbx_t__count__first__bit_axiom :
  (0 <= test__os_mbx_t__count__first__bit)

axiom test__os_mbx_t__count__last__bit_axiom :
  (test__os_mbx_t__count__first__bit <  test__os_mbx_t__count__last__bit)

axiom test__os_mbx_t__count__position_axiom :
  (0 <= test__os_mbx_t__count__position)

logic test__os_mbx_t__mbx_array__first__bit : int

logic test__os_mbx_t__mbx_array__last__bit : int

logic test__os_mbx_t__mbx_array__position : int

axiom test__os_mbx_t__mbx_array__first__bit_axiom :
  (0 <= test__os_mbx_t__mbx_array__first__bit)

axiom test__os_mbx_t__mbx_array__last__bit_axiom :
  (test__os_mbx_t__mbx_array__first__bit <  test__os_mbx_t__mbx_array__last__bit)

axiom test__os_mbx_t__mbx_array__position_axiom :
  (0 <= test__os_mbx_t__mbx_array__position)

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy6 : us_rep1

type os_mbx_t__ref = { os_mbx_t__content : us_rep1
}

function os_mbx_t__ref_os_mbx_t__content__projection(a: os_mbx_t__ref) : us_rep1 =
  (a).os_mbx_t__content

type map__ref1 = { map__content1 : (int,us_rep1) farray
}

logic slide1 : (int,us_rep1) farray, int, int -> (int,us_rep1) farray

axiom slide_eq1 :
  (forall a:(int,us_rep1) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq9(a: (int,us_rep1) farray, a__first: int, a__last: int,
  b: (int,us_rep1) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq8((a[temp___idx_155]),
  (b[((b__first - a__first) + temp___idx_155)])) = true)))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq8((a[temp___idx_155]),
  (b[((b__first - a__first) + temp___idx_155)])) = true))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic os_mbx_get_mbx_count : int, (int,us_rep1) farray -> t

logic os_mbx_get_mbx_count__function_guard : t, int,
  (int,us_rep1) farray -> prop

type os_task_id_param_t

logic os_task_id_param_tqtint : os_task_id_param_t -> int

axiom os_task_id_param_tqtaxiom :
  (forall i:os_task_id_param_t. (0 <= os_task_id_param_tqtint(i)))

axiom os_task_id_param_tqtaxiom1 :
  (forall i:os_task_id_param_t. (os_task_id_param_tqtint(i) <= 4))

predicate in_range5(x: int) = ((0 <= x) and (x <= 4))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq7 : os_task_id_param_t, os_task_id_param_t -> bool

logic dummy7 : os_task_id_param_t

type os_task_id_param_t__ref = { os_task_id_param_t__content :
os_task_id_param_t
}

function os_task_id_param_t__ref_os_task_id_param_t__content__projection(a: os_task_id_param_t__ref) : os_task_id_param_t =
  (a).os_task_id_param_t__content

predicate dynamic_invariant(temp___expr_233: int, temp___is_init_229: bool,
  temp___skip_constant_230: bool, temp___do_toplevel_231: bool,
  temp___do_typ_inv_232: bool) = (((temp___is_init_229 = true) or
  (0 <= 4)) -> in_range5(temp___expr_233))

predicate dynamic_invariant1(temp___expr_298: t, temp___is_init_294: bool,
  temp___skip_constant_295: bool, temp___do_toplevel_296: bool,
  temp___do_typ_inv_297: bool) = (((temp___is_init_294 = true) or
  ule(rliteral, rliteral2)) -> in_range2(temp___expr_298))

axiom os_mbx_get_mbx_count__post_axiom :
  (forall task_id:int.
  (forall test__os_task_mbx_rw:(int,us_rep1) farray
  [os_mbx_get_mbx_count(task_id, test__os_task_mbx_rw)].
  (dynamic_invariant(task_id, true, true, true, true) -> (let result =
  os_mbx_get_mbx_count(task_id, test__os_task_mbx_rw) : t in
  (os_mbx_get_mbx_count__function_guard(result, task_id,
  test__os_task_mbx_rw) -> dynamic_invariant1(result, true, false, true,
  true))))))

axiom os_mbx_get_mbx_count__def_axiom :
  (forall task_id:int.
  (forall test__os_task_mbx_rw:(int,us_rep1) farray
  [os_mbx_get_mbx_count(task_id, test__os_task_mbx_rw)].
  (dynamic_invariant(task_id, true, true, true, true) ->
  (os_mbx_get_mbx_count(task_id,
  test__os_task_mbx_rw) = to_rep1((((test__os_task_mbx_rw[task_id])).us_split_fields3).rec__test__os_mbx_t__count)))))

logic os_mbx_is_empty : int, (int,us_rep1) farray -> bool

logic os_mbx_is_empty__function_guard : bool, int,
  (int,us_rep1) farray -> prop

axiom os_mbx_is_empty__def_axiom :
  (forall task_id:int.
  (forall test__os_task_mbx_rw:(int,us_rep1) farray [os_mbx_is_empty(task_id,
  test__os_task_mbx_rw)]. ((os_mbx_is_empty(task_id,
  test__os_task_mbx_rw) = true) ->
  (to_rep1((((test__os_task_mbx_rw[task_id])).us_split_fields3).rec__test__os_mbx_t__count) = rliteral))))

axiom os_mbx_is_empty__def_axiom1 :
  (forall task_id:int.
  (forall test__os_task_mbx_rw:(int,us_rep1) farray [os_mbx_is_empty(task_id,
  test__os_task_mbx_rw)].
  ((to_rep1((((test__os_task_mbx_rw[task_id])).us_split_fields3).rec__test__os_mbx_t__count) = rliteral) ->
  (os_mbx_is_empty(task_id, test__os_task_mbx_rw) = true))))

logic os_ghost_mbx_are_well_formed : (int,us_rep1) farray -> bool

logic os_ghost_mbx_are_well_formed__function_guard : bool,
  (int,us_rep1) farray -> prop

logic os_mbx_get_mbx_head : int, (int,us_rep1) farray -> t

logic os_mbx_get_mbx_head__function_guard : t, int,
  (int,us_rep1) farray -> prop

logic oadd : t, t -> t

logic oadd__function_guard : t, t, t -> prop

axiom temp___result_169qtdef :
  (forall task_id:int. forall test__os_task_mbx_rw:(int,us_rep1) farray.
  os_mbx_get_mbx_count__function_guard(os_mbx_get_mbx_count(task_id,
  test__os_task_mbx_rw), task_id, test__os_task_mbx_rw))

axiom temp___result_163qtdef :
  (forall task_id:int. forall test__os_task_mbx_rw:(int,us_rep1) farray.
  os_mbx_get_mbx_head__function_guard(os_mbx_get_mbx_head(task_id,
  test__os_task_mbx_rw), task_id, test__os_task_mbx_rw))

axiom temp___result_163qtdef1 :
  (forall task_id:int. forall test__os_task_mbx_rw:(int,us_rep1) farray.
  os_mbx_get_mbx_head__function_guard(os_mbx_get_mbx_head(task_id,
  test__os_task_mbx_rw), task_id, test__os_task_mbx_rw))

axiom temp___result_164qtdef :
  (forall task_id:int. forall test__os_task_mbx_rw:(int,us_rep1) farray.
  forall index:t. oadd__function_guard(oadd(os_mbx_get_mbx_head(task_id,
  test__os_task_mbx_rw), index), os_mbx_get_mbx_head(task_id,
  test__os_task_mbx_rw), index))

axiom temp___result_166qtdef :
  (forall task_id:int. forall test__os_task_mbx_rw:(int,us_rep1) farray.
  os_mbx_get_mbx_head__function_guard(os_mbx_get_mbx_head(task_id,
  test__os_task_mbx_rw), task_id, test__os_task_mbx_rw))

axiom temp___result_166qtdef1 :
  (forall task_id:int. forall test__os_task_mbx_rw:(int,us_rep1) farray.
  os_mbx_get_mbx_head__function_guard(os_mbx_get_mbx_head(task_id,
  test__os_task_mbx_rw), task_id, test__os_task_mbx_rw))

axiom temp___result_167qtdef :
  (forall task_id:int. forall test__os_task_mbx_rw:(int,us_rep1) farray.
  forall index:t. oadd__function_guard(oadd(os_mbx_get_mbx_head(task_id,
  test__os_task_mbx_rw), index), os_mbx_get_mbx_head(task_id,
  test__os_task_mbx_rw), index))

function os_ghost_task_mbx_are_well_formed(task_id: int,
  test__os_task_mbx_rw: (int,us_rep1) farray) : bool =
  (if (forall index:t. ((ule(rliteral, index) and ule(index, rliteral1)) ->
      (if uge(index, os_mbx_get_mbx_count(task_id,
      test__os_task_mbx_rw)) then (to_rep2(((((((test__os_task_mbx_rw[task_id])).us_split_fields3).rec__test__os_mbx_t__mbx_array[oadd(os_mbx_get_mbx_head(task_id,
      test__os_task_mbx_rw),
      index)])).us_split_fields1).rec__test__os_mbx_entry_t__sender_id) = (- 1)) else in_range5(to_rep2(((((((test__os_task_mbx_rw[task_id])).us_split_fields3).rec__test__os_mbx_t__mbx_array[oadd(os_mbx_get_mbx_head(task_id,
      test__os_task_mbx_rw),
      index)])).us_split_fields1).rec__test__os_mbx_entry_t__sender_id))))) then true else false)

logic os_ghost_task_mbx_are_well_formed__function_guard : bool, int,
  (int,us_rep1) farray -> prop

axiom os_ghost_mbx_are_well_formed__def_axiom :
  (forall test__os_task_mbx_rw:(int,us_rep1) farray
  [os_ghost_mbx_are_well_formed(test__os_task_mbx_rw)].
  ((os_ghost_mbx_are_well_formed(test__os_task_mbx_rw) = true) ->
  (forall task_id:int. (((0 <= task_id) and (task_id <= 4)) ->
  (os_ghost_task_mbx_are_well_formed(task_id, test__os_task_mbx_rw) = true)))))

axiom os_ghost_mbx_are_well_formed__def_axiom1 :
  (forall test__os_task_mbx_rw:(int,us_rep1) farray
  [os_ghost_mbx_are_well_formed(test__os_task_mbx_rw)].
  ((forall task_id:int. (((0 <= task_id) and (task_id <= 4)) ->
   (os_ghost_task_mbx_are_well_formed(task_id,
   test__os_task_mbx_rw) = true))) ->
  (os_ghost_mbx_are_well_formed(test__os_task_mbx_rw) = true)))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type t1

logic tqtint1 : t1 -> int

axiom tqtaxiom2 : (forall i:t1. (0 <= tqtint1(i)))

axiom tqtaxiom3 : (forall i:t1. (tqtint1(i) <= 4294967295))

logic nth1 : t1, int -> bool

axiom nth_out_of_bound1 :
  (forall x:t1. forall n:int. (((n <  0) or (32 <= n)) -> (nth1(x,
  n) = false)))

logic zeros1 : t1

axiom Nth_zeros1 : (forall n:int. (nth1(zeros1, n) = false))

logic one1 : t1

logic ones1 : t1

axiom Nth_ones1 :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth1(ones1, n) = true)))

logic bw_and1 : t1, t1 -> t1

axiom Nth_bw_and1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth1(bw_and1(v1, v2), n) = andb(nth1(v1, n), nth1(v2, n)))))

logic bw_or1 : t1, t1 -> t1

axiom Nth_bw_or1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth1(bw_or1(v1, v2), n) = orb(nth1(v1, n), nth1(v2, n)))))

logic bw_xor1 : t1, t1 -> t1

axiom Nth_bw_xor1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth1(bw_xor1(v1, v2), n) = xorb(nth1(v1, n), nth1(v2, n)))))

logic bw_not1 : t1 -> t1

axiom Nth_bw_not1 :
  (forall v:t1. forall n:int. (((0 <= n) and (n <  32)) -> (nth1(bw_not1(v),
  n) = notb(nth1(v, n)))))

logic lsr1 : t1, int -> t1

axiom Lsr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  32) -> (nth1(lsr1(b, s), n) = nth1(b, (n + s)))))))

axiom Lsr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((32 <= (n + s)) -> (nth1(lsr1(b, s), n) = false)))))

axiom lsr_zeros1 : (forall x:t1. (lsr1(x, 0) = x))

logic asr1 : t1, int -> t1

axiom Asr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> (((n + s) <  32) -> (nth1(asr1(b, s), n) = nth1(b,
  (n + s)))))))

axiom Asr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> ((32 <= (n + s)) -> (nth1(asr1(b, s), n) = nth1(b,
  (32 - 1)))))))

axiom asr_zeros1 : (forall x:t1. (asr1(x, 0) = x))

logic lsl1 : t1, int -> t1

axiom Lsl_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  32))) -> (nth1(lsl1(b, s), n) = nth1(b, (n - s)))))

axiom Lsl_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth1(lsl1(b, s), n) = false)))

axiom lsl_zeros1 : (forall x:t1. (lsl1(x, 0) = x))

logic rotate_right1 : t1, int -> t1

axiom Nth_rotate_right1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth1(rotate_right1(v, n), i) = nth1(v, ((i + n) % 32))))))

logic rotate_left1 : t1, int -> t1

axiom Nth_rotate_left1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth1(rotate_left1(v, n), i) = nth1(v, ((i - n) % 32))))))

logic is_signed_positive1 : t1 -> prop

logic of_int2 : int -> t1

function to_int4(x: t1) : int =
  (if is_signed_positive1(x) then tqtint1(x) else (-(4294967296 - tqtint1(x))))

axiom to_uint_extensionality1 :
  (forall v:t1. forall vqt:t1. ((tqtint1(v) = tqtint1(vqt)) -> (v = vqt)))

axiom to_int_extensionality1 :
  (forall v:t1. forall vqt:t1. ((to_int4(v) = to_int4(vqt)) -> (v = vqt)))

predicate uint_in_range1(i: int) = ((0 <= i) and (i <= 4294967295))

axiom to_uint_bounds2 : (forall v:t1. (0 <= tqtint1(v)))

axiom to_uint_bounds3 : (forall v:t1. (tqtint1(v) <  4294967296))

axiom to_uint_of_int1 :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint1(of_int2(i)) = i)))

logic size_bv1 : t1

axiom to_uint_size_bv1 : (tqtint1(size_bv1) = 32)

axiom to_uint_zeros1 : (tqtint1(zeros1) = 0)

axiom to_uint_one1 : (tqtint1(one1) = 1)

axiom to_uint_ones1 : (tqtint1(ones1) = 4294967295)

predicate ult1(x: t1, y: t1) = (tqtint1(x) <  tqtint1(y))

predicate ule1(x: t1, y: t1) = (tqtint1(x) <= tqtint1(y))

predicate ugt1(x: t1, y: t1) = (tqtint1(y) <  tqtint1(x))

predicate uge1(x: t1, y: t1) = (tqtint1(y) <= tqtint1(x))

predicate slt1(v1: t1, v2: t1) = (to_int4(v1) <  to_int4(v2))

predicate sle1(v1: t1, v2: t1) = (to_int4(v1) <= to_int4(v2))

predicate sgt1(v1: t1, v2: t1) = (to_int4(v2) <  to_int4(v1))

predicate sge1(v1: t1, v2: t1) = (to_int4(v2) <= to_int4(v1))

axiom positive_is_ge_zeros2 :
  (forall x:t1. (is_signed_positive1(x) -> sge1(x, zeros1)))

axiom positive_is_ge_zeros3 :
  (forall x:t1. (sge1(x, zeros1) -> is_signed_positive1(x)))

logic add1 : t1, t1 -> t1

axiom to_uint_add_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) + tqtint1(v2)) <  4294967296) -> (tqtint1(add1(v1,
  v2)) = (tqtint1(v1) + tqtint1(v2)))))

logic sub1 : t1, t1 -> t1

axiom to_uint_sub_bounded1 :
  (forall v1:t1. forall v2:t1. (((0 <= (tqtint1(v1) - tqtint1(v2))) and
  ((tqtint1(v1) - tqtint1(v2)) <  4294967296)) -> (tqtint1(sub1(v1,
  v2)) = (tqtint1(v1) - tqtint1(v2)))))

logic neg1 : t1 -> t1

axiom to_uint_neg1 :
  (forall v:t1. (tqtint1(neg1(v)) = ((-tqtint1(v)) % 4294967296)))

logic mul1 : t1, t1 -> t1

axiom to_uint_mul_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) * tqtint1(v2)) <  4294967296) -> (tqtint1(mul1(v1,
  v2)) = (tqtint1(v1) * tqtint1(v2)))))

logic udiv1 : t1, t1 -> t1

axiom to_uint_udiv1 :
  (forall v1:t1. forall v2:t1. (tqtint1(udiv1(v1,
  v2)) = (tqtint1(v1) / tqtint1(v2))))

logic urem1 : t1, t1 -> t1

axiom to_uint_urem1 :
  (forall v1:t1. forall v2:t1. (tqtint1(urem1(v1,
  v2)) = (tqtint1(v1) % tqtint1(v2))))

logic lsr_bv1 : t1, t1 -> t1

axiom lsr_bv_is_lsr1 :
  (forall x:t1. forall n:t1. (lsr_bv1(x, n) = lsr1(x, tqtint1(n))))

axiom to_uint_lsr1 :
  (forall v:t1. forall n:t1. (tqtint1(lsr_bv1(v,
  n)) = (tqtint1(v) / pow2(tqtint1(n)))))

logic asr_bv1 : t1, t1 -> t1

axiom asr_bv_is_asr1 :
  (forall x:t1. forall n:t1. (asr_bv1(x, n) = asr1(x, tqtint1(n))))

logic lsl_bv1 : t1, t1 -> t1

axiom lsl_bv_is_lsl1 :
  (forall x:t1. forall n:t1. (lsl_bv1(x, n) = lsl1(x, tqtint1(n))))

axiom to_uint_lsl1 :
  (forall v:t1. forall n:t1. (tqtint1(lsl_bv1(v,
  n)) = ((tqtint1(v) * pow2(tqtint1(n))) % 4294967296)))

logic rotate_right_bv1 : t1, t1 -> t1

logic rotate_left_bv1 : t1, t1 -> t1

axiom rotate_left_bv_is_rotate_left1 :
  (forall v:t1. forall n:t1. (rotate_left_bv1(v, n) = rotate_left1(v,
  tqtint1(n))))

axiom rotate_right_bv_is_rotate_right1 :
  (forall v:t1. forall n:t1. (rotate_right_bv1(v, n) = rotate_right1(v,
  tqtint1(n))))

logic nth_bv1 : t1, t1 -> bool

axiom Nth_bv_is_nth1 :
  (forall x:t1. forall i:t1. (nth1(x, tqtint1(i)) = nth_bv1(x, i)))

axiom Nth_bv_is_nth21 :
  (forall x:t1. forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (nth_bv1(x, of_int2(i)) = nth1(x, i))))

logic eq_sub_bv1 : t1, t1, t1, t1 -> prop

predicate eq_sub1(a: t1, b: t1, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth1(a, j) = nth1(b,
  j))))

axiom eq_sub_equiv2 :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub1(a, b,
  tqtint1(i), tqtint1(n)) -> eq_sub_bv1(a, b, i, n)))

axiom eq_sub_equiv3 :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub_bv1(a, b, i,
  n) -> eq_sub1(a, b, tqtint1(i), tqtint1(n))))

axiom Extensionality1 :
  (forall x:t1. forall y:t1 [eq_sub1(x, y, 0, 32)]. (eq_sub1(x, y, 0, 32) ->
  (x = y)))

type t__ref1 = { t__content1 : t1
}

function bool_eq11(x: t1, y: t1) : bool = (if (x = y) then true else false)

function bool_ne1(x: t1, y: t1) : bool =
  (if (not (x = y)) then true else false)

function bool_lt1(x: t1, y: t1) : bool = (if ult1(x, y) then true else false)

function bool_le1(x: t1, y: t1) : bool = (if ule1(x, y) then true else false)

function bool_gt1(x: t1, y: t1) : bool = (if ugt1(x, y) then true else false)

function bool_ge1(x: t1, y: t1) : bool = (if uge1(x, y) then true else false)

logic power1 : t1, int -> t1

axiom Power_02 : (forall x:t1. (power1(x, 0) = one1))

axiom Power_12 : (forall x:t1. (power1(x, 1) = x))

axiom Power_s2 :
  (forall x:t1. forall n:int. ((0 <= n) -> (power1(x, (n + 1)) = mul1(x,
  power1(x, n)))))

axiom Power_s_alt1 :
  (forall x:t1. forall n:int. ((0 <  n) -> (power1(x, n) = mul1(x, power1(x,
  (n - 1))))))

axiom Power_sum2 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = mul1(power1(x, n), power1(x, m))))))

axiom Power_mult1 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult21 :
  (forall x:t1. forall y:t1. forall n:int. ((0 <= n) -> (power1(mul1(x, y),
  n) = mul1(power1(x, n), power1(y, n)))))

function bv_min1(x: t1, y: t1) : t1 = (if ule1(x, y) then x else y)

function bv_max1(x: t1, y: t1) : t1 = (if ule1(x, y) then y else x)

axiom bv_min_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_min1(x, y)) = min(tqtint1(x),
  tqtint1(y))))

axiom bv_max_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_max1(x, y)) = max(tqtint1(x),
  tqtint1(y))))

type os_mbx_mask_t

logic attr__ATTRIBUTE_MODULUS1 : t1

function bool_eq12(x: t1, y: t1) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> t1

logic user_eq8 : os_mbx_mask_t, os_mbx_mask_t -> bool

logic dummy8 : os_mbx_mask_t

type os_mbx_mask_t__ref = { os_mbx_mask_t__content : os_mbx_mask_t
}

function os_mbx_mask_t__ref_os_mbx_mask_t__content__projection(a: os_mbx_mask_t__ref) : os_mbx_mask_t =
  (a).os_mbx_mask_t__content

logic to_rep4 : os_mbx_mask_t -> t1

logic of_rep4 : t1 -> os_mbx_mask_t

axiom inversion_axiom4 :
  (forall x:os_mbx_mask_t [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom coerce_axiom4 :
  (forall x:t1 [to_rep4(of_rep4(x))]. (to_rep4(of_rep4(x)) = x))

function to_int5(x: os_mbx_mask_t) : int = tqtint1(to_rep4(x))

axiom range_int_axiom2 :
  (forall x:os_mbx_mask_t [to_int5(x)]. uint_in_range1(to_int5(x)))

type us_split_fields4 = { rec__test__os_task_rw_t__next : os_task_id_t;
rec__test__os_task_rw_t__prev : os_task_id_t;
rec__test__os_task_rw_t__mbx_waiting_mask : os_mbx_mask_t
}

function us_split_fields_rec__test__os_task_rw_t__next__projection(a: us_split_fields4) : os_task_id_t =
  (a).rec__test__os_task_rw_t__next

function us_split_fields_rec__test__os_task_rw_t__prev__projection(a: us_split_fields4) : os_task_id_t =
  (a).rec__test__os_task_rw_t__prev

function us_split_fields_rec__test__os_task_rw_t__mbx_waiting_mask__projection(a: us_split_fields4) : os_mbx_mask_t =
  (a).rec__test__os_task_rw_t__mbx_waiting_mask

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___split_fields__3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function bool_eq13(a: us_rep2, b: us_rep2) : bool =
  (if (((to_rep2(((a).us_split_fields5).rec__test__os_task_rw_t__next) = to_rep2(((b).us_split_fields5).rec__test__os_task_rw_t__next)) and
  (to_rep2(((a).us_split_fields5).rec__test__os_task_rw_t__prev) = to_rep2(((b).us_split_fields5).rec__test__os_task_rw_t__prev))) and
  (to_rep4(((a).us_split_fields5).rec__test__os_task_rw_t__mbx_waiting_mask) = to_rep4(((b).us_split_fields5).rec__test__os_task_rw_t__mbx_waiting_mask))) then true else false)

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic test__os_task_rw_t__next__first__bit : int

logic test__os_task_rw_t__next__last__bit : int

logic test__os_task_rw_t__next__position : int

axiom test__os_task_rw_t__next__first__bit_axiom :
  (0 <= test__os_task_rw_t__next__first__bit)

axiom test__os_task_rw_t__next__last__bit_axiom :
  (test__os_task_rw_t__next__first__bit <  test__os_task_rw_t__next__last__bit)

axiom test__os_task_rw_t__next__position_axiom :
  (0 <= test__os_task_rw_t__next__position)

logic test__os_task_rw_t__prev__first__bit : int

logic test__os_task_rw_t__prev__last__bit : int

logic test__os_task_rw_t__prev__position : int

axiom test__os_task_rw_t__prev__first__bit_axiom :
  (0 <= test__os_task_rw_t__prev__first__bit)

axiom test__os_task_rw_t__prev__last__bit_axiom :
  (test__os_task_rw_t__prev__first__bit <  test__os_task_rw_t__prev__last__bit)

axiom test__os_task_rw_t__prev__position_axiom :
  (0 <= test__os_task_rw_t__prev__position)

logic test__os_task_rw_t__mbx_waiting_mask__first__bit : int

logic test__os_task_rw_t__mbx_waiting_mask__last__bit : int

logic test__os_task_rw_t__mbx_waiting_mask__position : int

axiom test__os_task_rw_t__mbx_waiting_mask__first__bit_axiom :
  (0 <= test__os_task_rw_t__mbx_waiting_mask__first__bit)

axiom test__os_task_rw_t__mbx_waiting_mask__last__bit_axiom :
  (test__os_task_rw_t__mbx_waiting_mask__first__bit <  test__os_task_rw_t__mbx_waiting_mask__last__bit)

axiom test__os_task_rw_t__mbx_waiting_mask__position_axiom :
  (0 <= test__os_task_rw_t__mbx_waiting_mask__position)

logic user_eq9 : us_rep2, us_rep2 -> bool

logic dummy9 : us_rep2

type os_task_rw_t__ref = { os_task_rw_t__content : us_rep2
}

function os_task_rw_t__ref_os_task_rw_t__content__projection(a: os_task_rw_t__ref) : us_rep2 =
  (a).os_task_rw_t__content

type map__ref2 = { map__content2 : (int,us_rep2) farray
}

logic slide2 : (int,us_rep2) farray, int, int -> (int,us_rep2) farray

axiom slide_eq2 :
  (forall a:(int,us_rep2) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,us_rep2) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq14(a: (int,us_rep2) farray, a__first: int, a__last: int,
  b: (int,us_rep2) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_171:int. (((a__first <= temp___idx_171) and
  (temp___idx_171 <= a__last)) -> (bool_eq13((a[temp___idx_171]),
  (b[((b__first - a__first) + temp___idx_171)])) = true)))) then true else false)

axiom bool_eq_rev8 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq14(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev9 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq14(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev10 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq14(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev11 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq14(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_171:int. (((a__first <= temp___idx_171) and
  (temp___idx_171 <= a__last)) -> (bool_eq13((a[temp___idx_171]),
  (b[((b__first - a__first) + temp___idx_171)])) = true))))))

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic os_mbx_get_mbx_entry : int, t, (int,us_rep1) farray -> us_rep

logic os_mbx_get_mbx_entry__function_guard : us_rep, int, t,
  (int,us_rep1) farray -> prop

axiom os_mbx_get_mbx_entry__def_axiom :
  (forall task_id:int.
  (forall index:t. ((dynamic_invariant(task_id, true, true, true, true) and
  dynamic_invariant1(index, true, true, true, true)) ->
  (forall task_id1:int. forall test__os_task_mbx_rw:(int,us_rep1) farray.
  os_mbx_get_mbx_head__function_guard(os_mbx_get_mbx_head(task_id1,
  test__os_task_mbx_rw), task_id1, test__os_task_mbx_rw)))))

axiom os_mbx_get_mbx_entry__def_axiom1 :
  (forall task_id:int.
  (forall index:t. ((dynamic_invariant(task_id, true, true, true, true) and
  dynamic_invariant1(index, true, true, true, true)) ->
  (forall task_id1:int. forall test__os_task_mbx_rw:(int,us_rep1) farray.
  os_mbx_get_mbx_head__function_guard(os_mbx_get_mbx_head(task_id1,
  test__os_task_mbx_rw), task_id1, test__os_task_mbx_rw)))))

axiom os_mbx_get_mbx_entry__def_axiom2 :
  (forall task_id:int.
  (forall index:t. ((dynamic_invariant(task_id, true, true, true, true) and
  dynamic_invariant1(index, true, true, true, true)) ->
  (forall task_id1:int. forall index1:t.
  forall test__os_task_mbx_rw:(int,us_rep1) farray.
  oadd__function_guard(oadd(os_mbx_get_mbx_head(task_id1,
  test__os_task_mbx_rw), index1), os_mbx_get_mbx_head(task_id1,
  test__os_task_mbx_rw), index1)))))

axiom os_mbx_get_mbx_entry__def_axiom3 :
  (forall task_id:int.
  (forall index:t.
  (forall test__os_task_mbx_rw:(int,us_rep1) farray
  [os_mbx_get_mbx_entry(task_id, index, test__os_task_mbx_rw)].
  ((dynamic_invariant(task_id, true, true, true, true) and
  dynamic_invariant1(index, true, true, true, true)) ->
  (os_mbx_get_mbx_entry(task_id, index,
  test__os_task_mbx_rw) = ((((test__os_task_mbx_rw[task_id])).us_split_fields3).rec__test__os_mbx_t__mbx_array[oadd(os_mbx_get_mbx_head(task_id,
  test__os_task_mbx_rw), index)]))))))

logic os_mbx_get_waiting_mask : int, (int,us_rep2) farray -> t1

logic os_mbx_get_waiting_mask__function_guard : t1, int,
  (int,us_rep2) farray -> prop

logic os_mbx_get_mbx_entry_sender : int, t, (int,us_rep1) farray -> int

logic os_mbx_get_mbx_entry_sender__function_guard : int, int, t,
  (int,us_rep1) farray -> prop

logic os_mbx_is_waiting_mbx_entry : int, t, (int,us_rep1) farray,
  (int,us_rep2) farray -> bool

logic os_mbx_is_waiting_mbx_entry__function_guard : bool, int, t,
  (int,us_rep1) farray, (int,us_rep2) farray -> prop

axiom os_mbx_is_waiting_mbx_entry__post_axiom :
  (forall task_id:int. forall test__os_task_mbx_rw:(int,us_rep1) farray.
  os_mbx_is_empty__function_guard(os_mbx_is_empty(task_id,
  test__os_task_mbx_rw), task_id, test__os_task_mbx_rw))

axiom os_mbx_is_waiting_mbx_entry__post_axiom1 :
  (forall test__os_task_mbx_rw:(int,us_rep1) farray.
  os_ghost_mbx_are_well_formed__function_guard(os_ghost_mbx_are_well_formed(test__os_task_mbx_rw),
  test__os_task_mbx_rw))

axiom os_mbx_is_waiting_mbx_entry__post_axiom2 :
  (forall task_id:int. forall test__os_task_mbx_rw:(int,us_rep1) farray.
  os_mbx_get_mbx_count__function_guard(os_mbx_get_mbx_count(task_id,
  test__os_task_mbx_rw), task_id, test__os_task_mbx_rw))

axiom os_mbx_is_waiting_mbx_entry__post_axiom3 :
  (forall task_id:int. forall index:t.
  forall test__os_task_mbx_rw:(int,us_rep1) farray.
  os_mbx_get_mbx_entry_sender__function_guard(os_mbx_get_mbx_entry_sender(task_id,
  index, test__os_task_mbx_rw), task_id, index, test__os_task_mbx_rw))

logic rliteral3 : t1

axiom rliteral_axiom3 : (tqtint1(rliteral3) = 1)

logic rliteral4 : t1

axiom rliteral_axiom4 : (tqtint1(rliteral4) = 0)

axiom os_mbx_is_waiting_mbx_entry__def_axiom :
  (forall task_id:int. forall test__os_task_list_rw:(int,us_rep2) farray.
  os_mbx_get_waiting_mask__function_guard(os_mbx_get_waiting_mask(task_id,
  test__os_task_list_rw), task_id, test__os_task_list_rw))

axiom os_mbx_is_waiting_mbx_entry__def_axiom1 :
  (forall task_id:int. forall index:t.
  forall test__os_task_mbx_rw:(int,us_rep1) farray.
  os_mbx_get_mbx_entry_sender__function_guard(os_mbx_get_mbx_entry_sender(task_id,
  index, test__os_task_mbx_rw), task_id, index, test__os_task_mbx_rw))

axiom os_mbx_is_waiting_mbx_entry__def_axiom2 :
  (forall task_id:int.
  (forall index:t.
  (forall test__os_task_mbx_rw:(int,us_rep1) farray.
  (forall test__os_task_list_rw:(int,us_rep2) farray
  [os_mbx_is_waiting_mbx_entry(task_id, index, test__os_task_mbx_rw,
  test__os_task_list_rw)]. ((os_mbx_is_waiting_mbx_entry(task_id, index,
  test__os_task_mbx_rw, test__os_task_list_rw) = true) ->
  (not (bw_and1(os_mbx_get_waiting_mask(task_id, test__os_task_list_rw),
  lsl_bv1(rliteral3, of_int2(os_mbx_get_mbx_entry_sender(task_id, index,
  test__os_task_mbx_rw)))) = rliteral4)))))))

axiom os_mbx_is_waiting_mbx_entry__def_axiom3 :
  (forall task_id:int.
  (forall index:t.
  (forall test__os_task_mbx_rw:(int,us_rep1) farray.
  (forall test__os_task_list_rw:(int,us_rep2) farray
  [os_mbx_is_waiting_mbx_entry(task_id, index, test__os_task_mbx_rw,
  test__os_task_list_rw)]. ((not (bw_and1(os_mbx_get_waiting_mask(task_id,
  test__os_task_list_rw), lsl_bv1(rliteral3,
  of_int2(os_mbx_get_mbx_entry_sender(task_id, index,
  test__os_task_mbx_rw)))) = rliteral4)) ->
  (os_mbx_is_waiting_mbx_entry(task_id, index, test__os_task_mbx_rw,
  test__os_task_list_rw) = true))))))

logic os_sched_get_current_task_id : int -> int

logic os_sched_get_current_task_id__function_guard : int, int -> prop

axiom os_sched_get_current_task_id__post_axiom :
  (forall test__os_task_current:int
  [os_sched_get_current_task_id(test__os_task_current)].
  (dynamic_invariant(test__os_task_current, true, true, true, true) ->
  (let result = os_sched_get_current_task_id(test__os_task_current) : int in
  (os_sched_get_current_task_id__function_guard(result,
  test__os_task_current) -> dynamic_invariant(result, true, false, true,
  true)))))

axiom os_sched_get_current_task_id__def_axiom :
  (forall test__os_task_current:int
  [os_sched_get_current_task_id(test__os_task_current)].
  (dynamic_invariant(test__os_task_current, true, true, true, true) ->
  (os_sched_get_current_task_id(test__os_task_current) = test__os_task_current)))

logic temp_____aggregate_def_501 : (t,us_rep) farray, t,
  us_rep -> (t,us_rep) farray

logic current : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic r25b : t

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

type os_status_t

logic os_status_tqtint : os_status_t -> int

axiom os_status_tqtaxiom :
  (forall i:os_status_t. ((- 5) <= os_status_tqtint(i)))

axiom os_status_tqtaxiom1 :
  (forall i:os_status_t. (os_status_tqtint(i) <= 0))

predicate in_range6(x: int) = (((- 5) <= x) and (x <= 0))

function bool_eq15(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq10 : os_status_t, os_status_t -> bool

logic dummy10 : os_status_t

type os_status_t__ref = { os_status_t__content : os_status_t
}

function os_status_t__ref_os_status_t__content__projection(a: os_status_t__ref) : os_status_t =
  (a).os_status_t__content

predicate dynamic_invariant2(temp___expr_254: int, temp___is_init_250: bool,
  temp___skip_constant_251: bool, temp___do_toplevel_252: bool,
  temp___do_typ_inv_253: bool) = (((temp___is_init_250 = true) or
  ((- 5) <= 0)) -> in_range6(temp___expr_254))

type unsigned_char

logic attr__ATTRIBUTE_MODULUS2 : t

function bool_eq16(x: t, y: t) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> t

logic user_eq11 : unsigned_char, unsigned_char -> bool

logic dummy11 : unsigned_char

type unsigned_char__ref = { unsigned_char__content : unsigned_char
}

function unsigned_char__ref_unsigned_char__content__projection(a: unsigned_char__ref) : unsigned_char =
  (a).unsigned_char__content

logic rliteral5 : t

axiom rliteral_axiom5 : (tqtint(rliteral5) = 255)

predicate dynamic_invariant3(temp___expr_284: t, temp___is_init_280: bool,
  temp___skip_constant_281: bool, temp___do_toplevel_282: bool,
  temp___do_typ_inv_283: bool) = true

logic to_rep5 : unsigned_char -> t

logic of_rep5 : t -> unsigned_char

axiom inversion_axiom5 :
  (forall x:unsigned_char [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom coerce_axiom5 :
  (forall x:t [to_rep5(of_rep5(x))]. (to_rep5(of_rep5(x)) = x))

function to_int6(x: unsigned_char) : int = tqtint(to_rep5(x))

axiom range_int_axiom3 :
  (forall x:unsigned_char [to_int6(x)]. uint_in_range(to_int6(x)))

logic attr__ATTRIBUTE_MODULUS3 : t

predicate dynamic_property(first_int: t, last_int: t, x: t) = (ule(first_int,
  x) and ule(x, last_int))

predicate dynamic_property_int(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq17(x: t, y: t) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE9 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> t

logic user_eq12 : unsigned_char, unsigned_char -> bool

logic dummy12 : unsigned_char

type t26b__ref = { t26b__content : unsigned_char
}

function t26b__ref_t26b__content__projection(a: t26b__ref) : unsigned_char =
  (a).t26b__content

predicate dynamic_invariant4(temp___expr_277: t, temp___is_init_273: bool,
  temp___skip_constant_274: bool, temp___do_toplevel_275: bool,
  temp___do_typ_inv_276: bool) = (((temp___is_init_273 = true) or
  ule(rliteral, rliteral1)) -> in_range1(temp___expr_277))

axiom oadd__post_axiom :
  (forall left:t. forall right:t [oadd(left, right)].
  ((dynamic_invariant4(left, true, true, true, true) and
  dynamic_invariant1(right, true, true, true, true)) -> (let result =
  oadd(left, right) : t in (oadd__function_guard(result, left, right) ->
  dynamic_invariant4(result, true, false, true, true)))))

axiom oadd__def_axiom :
  (forall left:t. forall right:t [oadd(left, right)].
  ((dynamic_invariant4(left, true, true, true, true) and
  dynamic_invariant1(right, true, true, true, true)) -> (oadd(left,
  right) = (if ule(sub(rliteral2, left), urem(right,
  of_int(256))) then sub(add(left, urem(right, of_int(256))),
  rliteral2) else add(left, urem(right, of_int(256)))))))

logic rliteral6 : t1

axiom rliteral_axiom6 : (tqtint1(rliteral6) = 4294967295)

predicate dynamic_invariant5(temp___expr_198: t1, temp___is_init_194: bool,
  temp___skip_constant_195: bool, temp___do_toplevel_196: bool,
  temp___do_typ_inv_197: bool) = true

axiom os_mbx_get_waiting_mask__post_axiom :
  (forall task_id:int.
  (forall test__os_task_list_rw:(int,us_rep2) farray
  [os_mbx_get_waiting_mask(task_id, test__os_task_list_rw)].
  (dynamic_invariant(task_id, true, true, true, true) -> (let result =
  os_mbx_get_waiting_mask(task_id, test__os_task_list_rw) : t1 in
  (os_mbx_get_waiting_mask__function_guard(result, task_id,
  test__os_task_list_rw) -> dynamic_invariant5(result, true, false, true,
  true))))))

axiom os_mbx_get_waiting_mask__def_axiom :
  (forall task_id:int.
  (forall test__os_task_list_rw:(int,us_rep2) farray
  [os_mbx_get_waiting_mask(task_id, test__os_task_list_rw)].
  (dynamic_invariant(task_id, true, true, true, true) ->
  (os_mbx_get_waiting_mask(task_id,
  test__os_task_list_rw) = to_rep4((((test__os_task_list_rw[task_id])).us_split_fields5).rec__test__os_task_rw_t__mbx_waiting_mask)))))

axiom os_mbx_get_mbx_head__post_axiom :
  (forall task_id:int.
  (forall test__os_task_mbx_rw:(int,us_rep1) farray
  [os_mbx_get_mbx_head(task_id, test__os_task_mbx_rw)].
  (dynamic_invariant(task_id, true, true, true, true) -> (let result =
  os_mbx_get_mbx_head(task_id, test__os_task_mbx_rw) : t in
  (os_mbx_get_mbx_head__function_guard(result, task_id,
  test__os_task_mbx_rw) -> dynamic_invariant4(result, true, false, true,
  true))))))

axiom os_mbx_get_mbx_head__def_axiom :
  (forall task_id:int.
  (forall test__os_task_mbx_rw:(int,us_rep1) farray
  [os_mbx_get_mbx_head(task_id, test__os_task_mbx_rw)].
  (dynamic_invariant(task_id, true, true, true, true) ->
  (os_mbx_get_mbx_head(task_id,
  test__os_task_mbx_rw) = to_rep((((test__os_task_mbx_rw[task_id])).us_split_fields3).rec__test__os_mbx_t__head)))))

axiom os_mbx_get_mbx_entry_sender__post_axiom :
  (forall task_id:int. forall test__os_task_mbx_rw:(int,us_rep1) farray.
  os_mbx_get_mbx_head__function_guard(os_mbx_get_mbx_head(task_id,
  test__os_task_mbx_rw), task_id, test__os_task_mbx_rw))

axiom os_mbx_get_mbx_entry_sender__post_axiom1 :
  (forall task_id:int. forall test__os_task_mbx_rw:(int,us_rep1) farray.
  os_mbx_get_mbx_head__function_guard(os_mbx_get_mbx_head(task_id,
  test__os_task_mbx_rw), task_id, test__os_task_mbx_rw))

axiom os_mbx_get_mbx_entry_sender__post_axiom2 :
  (forall task_id:int. forall index:t.
  forall test__os_task_mbx_rw:(int,us_rep1) farray.
  oadd__function_guard(oadd(os_mbx_get_mbx_head(task_id,
  test__os_task_mbx_rw), index), os_mbx_get_mbx_head(task_id,
  test__os_task_mbx_rw), index))

axiom os_mbx_get_mbx_entry_sender__post_axiom3 :
  (forall task_id:int.
  (forall index:t.
  (forall test__os_task_mbx_rw:(int,us_rep1) farray
  [os_mbx_get_mbx_entry_sender(task_id, index, test__os_task_mbx_rw)].
  (((dynamic_invariant(task_id, true, true, true, true) and
  dynamic_invariant1(index, true, true, true, true)) and
  in_range5(to_rep2(((((((test__os_task_mbx_rw[task_id])).us_split_fields3).rec__test__os_mbx_t__mbx_array[oadd(os_mbx_get_mbx_head(task_id,
  test__os_task_mbx_rw),
  index)])).us_split_fields1).rec__test__os_mbx_entry_t__sender_id))) ->
  (let result = os_mbx_get_mbx_entry_sender(task_id, index,
  test__os_task_mbx_rw) : int in
  (os_mbx_get_mbx_entry_sender__function_guard(result, task_id, index,
  test__os_task_mbx_rw) -> dynamic_invariant(result, true, false, true,
  true)))))))

axiom os_mbx_get_mbx_entry_sender__def_axiom :
  (forall task_id:int.
  (forall index:t. ((dynamic_invariant(task_id, true, true, true, true) and
  dynamic_invariant1(index, true, true, true, true)) ->
  (forall task_id1:int. forall test__os_task_mbx_rw:(int,us_rep1) farray.
  os_mbx_get_mbx_head__function_guard(os_mbx_get_mbx_head(task_id1,
  test__os_task_mbx_rw), task_id1, test__os_task_mbx_rw)))))

axiom os_mbx_get_mbx_entry_sender__def_axiom1 :
  (forall task_id:int.
  (forall index:t. ((dynamic_invariant(task_id, true, true, true, true) and
  dynamic_invariant1(index, true, true, true, true)) ->
  (forall task_id1:int. forall test__os_task_mbx_rw:(int,us_rep1) farray.
  os_mbx_get_mbx_head__function_guard(os_mbx_get_mbx_head(task_id1,
  test__os_task_mbx_rw), task_id1, test__os_task_mbx_rw)))))

axiom os_mbx_get_mbx_entry_sender__def_axiom2 :
  (forall task_id:int.
  (forall index:t. ((dynamic_invariant(task_id, true, true, true, true) and
  dynamic_invariant1(index, true, true, true, true)) ->
  (forall task_id1:int. forall index1:t.
  forall test__os_task_mbx_rw:(int,us_rep1) farray.
  oadd__function_guard(oadd(os_mbx_get_mbx_head(task_id1,
  test__os_task_mbx_rw), index1), os_mbx_get_mbx_head(task_id1,
  test__os_task_mbx_rw), index1)))))

axiom os_mbx_get_mbx_entry_sender__def_axiom3 :
  (forall task_id:int.
  (forall index:t.
  (forall test__os_task_mbx_rw:(int,us_rep1) farray
  [os_mbx_get_mbx_entry_sender(task_id, index, test__os_task_mbx_rw)].
  ((dynamic_invariant(task_id, true, true, true, true) and
  dynamic_invariant1(index, true, true, true, true)) ->
  (os_mbx_get_mbx_entry_sender(task_id, index,
  test__os_task_mbx_rw) = to_rep2(((((((test__os_task_mbx_rw[task_id])).us_split_fields3).rec__test__os_mbx_t__mbx_array[oadd(os_mbx_get_mbx_head(task_id,
  test__os_task_mbx_rw),
  index)])).us_split_fields1).rec__test__os_mbx_entry_t__sender_id))))))

logic os_mbx_get_mbx_tail : int, (int,us_rep1) farray -> t

logic os_mbx_get_mbx_tail__function_guard : t, int,
  (int,us_rep1) farray -> prop

axiom def_axiom :
  (forall temp___503:(t,us_rep) farray.
  (forall temp___504:t.
  (forall temp___505:us_rep. (dynamic_invariant4(temp___504, true, true,
  true, true) ->
  (forall temp___506:t. ((temp___506 = temp___504) ->
  ((temp_____aggregate_def_501(temp___503, temp___504,
  temp___505)[temp___506]) = temp___505)))))))

axiom def_axiom1 :
  (forall temp___503:(t,us_rep) farray.
  (forall temp___504:t.
  (forall temp___505:us_rep. (dynamic_invariant4(temp___504, true, true,
  true, true) ->
  (forall temp___506:t. ((not (temp___506 = temp___504)) ->
  ((temp_____aggregate_def_501(temp___503, temp___504,
  temp___505)[temp___506]) = (temp___503[temp___506]))))))))

predicate dynamic_invariant6(temp___expr_226: int, temp___is_init_222: bool,
  temp___skip_constant_223: bool, temp___do_toplevel_224: bool,
  temp___do_typ_inv_225: bool) = (((temp___is_init_222 = true) or
  ((- 1) <= 4)) -> in_range3(temp___expr_226))

predicate dynamic_invariant7(temp___expr_261: int, temp___is_init_257: bool,
  temp___skip_constant_258: bool, temp___do_toplevel_259: bool,
  temp___do_typ_inv_260: bool) = (((temp___is_init_257 = true) or
  (0 <= 4294967295)) -> in_range4(temp___expr_261))

logic rliteral7 : os_task_id_t

axiom rliteral_axiom7 : (os_task_id_tqtint(rliteral7) = (- 1))

logic rliteral8 : os_mbx_msg_t

axiom rliteral_axiom8 : (os_mbx_msg_tqtint(rliteral8) = 0)

logic rliteral9 : t

axiom rliteral_axiom9 : (tqtint(rliteral9) = 1)

 (* File "test.ads", line 80, characters 0-0 *)
goal defqtvc :
  (forall os_task_mbx_rw:(int,us_rep1) farray. forall status:int.
  forall mbx_entry__split_fields:us_split_fields. forall os_task_current:int.
  (dynamic_invariant(os_task_current, true, false, true, true) ->
  (dynamic_invariant2(status, false, false, true, true) ->
  ((forall os_task_mbx_rw1:(int,us_rep1) farray.
   os_ghost_mbx_are_well_formed__function_guard(os_ghost_mbx_are_well_formed(os_task_mbx_rw1),
   os_task_mbx_rw1)) ->
  ((os_ghost_mbx_are_well_formed(os_task_mbx_rw) = true) ->
  (let test__os_mbx_receive__current__assume =
  os_sched_get_current_task_id(os_task_current) : int in
  ((os_sched_get_current_task_id__function_guard(test__os_mbx_receive__current__assume,
  os_task_current) and
  (dynamic_invariant(test__os_mbx_receive__current__assume, true, false,
  true, true) and
  (test__os_mbx_receive__current__assume = os_task_current))) ->
  ((test__os_mbx_receive__current__assume = current) ->
  (dynamic_invariant(current, true, false, true, true) ->
  (forall mbx_entry__split_fields1:us_split_fields.
  ((mbx_entry__split_fields1 = { rec__test__os_mbx_entry_t__sender_id =
  rliteral7; rec__test__os_mbx_entry_t__msg =
  (mbx_entry__split_fields).rec__test__os_mbx_entry_t__msg }) ->
  (forall mbx_entry__split_fields2:us_split_fields.
  ((mbx_entry__split_fields2 = { rec__test__os_mbx_entry_t__sender_id =
  (mbx_entry__split_fields1).rec__test__os_mbx_entry_t__sender_id;
  rec__test__os_mbx_entry_t__msg = rliteral8 }) -> (let o = current : int in
  (let o1 = os_mbx_is_empty(o, os_task_mbx_rw) : bool in
  ((os_mbx_is_empty__function_guard(o1, o, os_task_mbx_rw) and
  ((o1 = true) <->
  (to_rep1((((os_task_mbx_rw[o])).us_split_fields3).rec__test__os_mbx_t__count) = rliteral))) ->
  (forall spark__branch:bool. ((spark__branch = o1) ->
  ((not (spark__branch = true)) ->
  (forall status1:int. ((status1 = (- 4)) -> (let o2 = current : int in
  (let o3 = os_mbx_get_mbx_count(o2, os_task_mbx_rw) : t in
  ((os_mbx_get_mbx_count__function_guard(o3, o2, os_task_mbx_rw) and
  (dynamic_invariant1(o3, true, false, true, true) and
  (o3 = to_rep1((((os_task_mbx_rw[o2])).us_split_fields3).rec__test__os_mbx_t__count)))) ->
  ((sub(o3, rliteral9) = r25b) -> (dynamic_invariant3(r25b, true, false,
  true, true) ->
  (forall iterator:t. ((iterator = rliteral) -> ((andb((if ule(rliteral,
  iterator) then true else false), (if ule(iterator,
  r25b) then true else false)) = true) -> (let o4 = current : int in
  (let o5 = os_mbx_is_empty(o4, os_task_mbx_rw) : bool in
  ((os_mbx_is_empty__function_guard(o5, o4, os_task_mbx_rw) and
  ((o5 = true) <->
  (to_rep1((((os_task_mbx_rw[o4])).us_split_fields3).rec__test__os_mbx_t__count) = rliteral))) ->
  (let o6 = os_ghost_mbx_are_well_formed(os_task_mbx_rw) : bool in
  ((os_ghost_mbx_are_well_formed__function_guard(o6, os_task_mbx_rw) and
  ((o6 = true) <->
  (forall task_id:int. (((0 <= task_id) and (task_id <= 4)) ->
  (os_ghost_task_mbx_are_well_formed(task_id, os_task_mbx_rw) = true))))) ->
  (forall iterator1:t.
  ((forall os_task_mbx_rw1:(int,us_rep1) farray.
   os_ghost_mbx_are_well_formed__function_guard(os_ghost_mbx_are_well_formed(os_task_mbx_rw1),
   os_task_mbx_rw1)) ->
  ((forall os_task_mbx_rw1:(int,us_rep1) farray.
   os_mbx_is_empty__function_guard(os_mbx_is_empty(current, os_task_mbx_rw1),
   current, os_task_mbx_rw1)) ->
  (((os_ghost_mbx_are_well_formed(os_task_mbx_rw) = true) and
  (not (os_mbx_is_empty(current, os_task_mbx_rw) = true))) ->
  ((andb((if (dynamic_property(rliteral, r25b, iterator1) and
  dynamic_invariant2(status1, false, true, true,
  true)) then true else false), (if (ule(rliteral, iterator1) and
  ule(iterator1, r25b)) then true else false)) = true) ->
  (in_range2(iterator1) ->
  ((forall os_task_mbx_rw1:(int,us_rep1) farray. forall o7:int.
   os_mbx_is_empty__function_guard(os_mbx_is_empty(o7, os_task_mbx_rw1), o7,
   os_task_mbx_rw1)) ->
  (not (os_mbx_is_empty(current, os_task_mbx_rw) = true)))))))))))))))))))))))))))))))))))))))))))
