(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type character

predicate in_range(x: int) = ((0 <= x) and (x <= 255))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : character, character -> bool

logic dummy : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq1(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref1 = { map__content1 : (int,integer) farray
}

logic slide1 : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq1 :
  (forall a:(int,integer) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)]))))))))

logic my_a : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS2 : int

logic my_b : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS3 : int

type tTglobSP1

logic tTglobSP1qtint : tTglobSP1 -> int

axiom tTglobSP1qtaxiom : (forall i:tTglobSP1. (1 <= tTglobSP1qtint(i)))

axiom tTglobSP1qtaxiom1 : (forall i:tTglobSP1. (tTglobSP1qtint(i) <= 26))

predicate in_range2(x: int) = ((1 <= x) and (x <= 26))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : tTglobSP1, tTglobSP1 -> bool

logic dummy2 : tTglobSP1

type tTglobSP1__ref = { tTglobSP1__content : tTglobSP1
}

function tTglobSP1__ref_tTglobSP1__content__projection(a: tTglobSP1__ref) : tTglobSP1 =
  (a).tTglobSP1__content

type tTmy_s2SP1

logic tTmy_s2SP1qtint : tTmy_s2SP1 -> int

axiom tTmy_s2SP1qtaxiom : (forall i:tTmy_s2SP1. (1 <= tTmy_s2SP1qtint(i)))

axiom tTmy_s2SP1qtaxiom1 : (forall i:tTmy_s2SP1. (tTmy_s2SP1qtint(i) <= 4))

predicate in_range3(x: int) = ((1 <= x) and (x <= 4))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : tTmy_s2SP1, tTmy_s2SP1 -> bool

logic dummy3 : tTmy_s2SP1

type tTmy_s2SP1__ref = { tTmy_s2SP1__content : tTmy_s2SP1
}

function tTmy_s2SP1__ref_tTmy_s2SP1__content__projection(a: tTmy_s2SP1__ref) : tTmy_s2SP1 =
  (a).tTmy_s2SP1__content

type tTmy_aSP1

logic tTmy_aSP1qtint : tTmy_aSP1 -> int

axiom tTmy_aSP1qtaxiom : (forall i:tTmy_aSP1. (1 <= tTmy_aSP1qtint(i)))

axiom tTmy_aSP1qtaxiom1 : (forall i:tTmy_aSP1. (tTmy_aSP1qtint(i) <= 4))

predicate in_range4(x: int) = ((1 <= x) and (x <= 4))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : tTmy_aSP1, tTmy_aSP1 -> bool

logic dummy4 : tTmy_aSP1

type tTmy_aSP1__ref = { tTmy_aSP1__content : tTmy_aSP1
}

function tTmy_aSP1__ref_tTmy_aSP1__content__2__projection(a: tTmy_aSP1__ref) : tTmy_aSP1 =
  (a).tTmy_aSP1__content

logic pack__a2__my_a__aggregate_def : int -> (int,integer) farray

type tTmy_bSP1

logic tTmy_bSP1qtint : tTmy_bSP1 -> int

axiom tTmy_bSP1qtaxiom : (forall i:tTmy_bSP1. (1 <= tTmy_bSP1qtint(i)))

axiom tTmy_bSP1qtaxiom1 : (forall i:tTmy_bSP1. (tTmy_bSP1qtint(i) <= 4))

predicate in_range5(x: int) = ((1 <= x) and (x <= 4))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : tTmy_bSP1, tTmy_bSP1 -> bool

logic dummy5 : tTmy_bSP1

type tTmy_bSP1__ref = { tTmy_bSP1__content : tTmy_bSP1
}

function tTmy_bSP1__ref_tTmy_bSP1__content__2__projection(a: tTmy_bSP1__ref) : tTmy_bSP1 =
  (a).tTmy_bSP1__content

type t27b

logic t27bqtint : t27b -> int

axiom t27bqtaxiom : (forall i:t27b. (1 <= t27bqtint(i)))

axiom t27bqtaxiom1 : (forall i:t27b. (t27bqtint(i) <= 3))

predicate in_range6(x: int) = ((1 <= x) and (x <= 3))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : t27b, t27b -> bool

logic dummy6 : t27b

type t27b__ref = { t27b__content : t27b
}

function t27b__ref_t27b__content__projection(a: t27b__ref) : t27b =
  (a).t27b__content

type t29b

logic t29bqtint : t29b -> int

axiom t29bqtaxiom : (forall i:t29b. (1 <= t29bqtint(i)))

axiom t29bqtaxiom1 : (forall i:t29b. (t29bqtint(i) <= 3))

predicate in_range7(x: int) = ((1 <= x) and (x <= 3))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : t29b, t29b -> bool

logic dummy7 : t29b

type t29b__ref = { t29b__content : t29b
}

function t29b__ref_t29b__content__projection(a: t29b__ref) : t29b =
  (a).t29b__content

type t31b

logic t31bqtint : t31b -> int

axiom t31bqtaxiom : (forall i:t31b. (1 <= t31bqtint(i)))

axiom t31bqtaxiom1 : (forall i:t31b. (t31bqtint(i) <= 4))

predicate in_range8(x: int) = ((1 <= x) and (x <= 4))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : t31b, t31b -> bool

logic dummy8 : t31b

type t31b__ref = { t31b__content : t31b
}

function t31b__ref_t31b__content__projection(a: t31b__ref) : t31b =
  (a).t31b__content

type t33b

logic t33bqtint : t33b -> int

axiom t33bqtaxiom : (forall i:t33b. (1 <= t33bqtint(i)))

axiom t33bqtaxiom1 : (forall i:t33b. (t33bqtint(i) <= 3))

predicate in_range9(x: int) = ((1 <= x) and (x <= 3))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq9 : t33b, t33b -> bool

logic dummy9 : t33b

type t33b__ref = { t33b__content : t33b
}

function t33b__ref_t33b__content__projection(a: t33b__ref) : t33b =
  (a).t33b__content

type t35b

logic t35bqtint : t35b -> int

axiom t35bqtaxiom : (forall i:t35b. (1 <= t35bqtint(i)))

axiom t35bqtaxiom1 : (forall i:t35b. (t35bqtint(i) <= 3))

predicate in_range10(x: int) = ((1 <= x) and (x <= 3))

function bool_eq12(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq10 : t35b, t35b -> bool

logic dummy10 : t35b

type t35b__ref = { t35b__content : t35b
}

function t35b__ref_t35b__content__projection(a: t35b__ref) : t35b =
  (a).t35b__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate dynamic_invariant1(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range(temp___expr_74))

axiom my_a__def_axiom : (my_a = pack__a2__my_a__aggregate_def(42))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 42)

axiom def_axiom :
  (forall temp___163:int. (dynamic_invariant(temp___163, true, true, true,
  true) ->
  (forall temp___164:int.
  ((pack__a2__my_a__aggregate_def(temp___163)[temp___164]) = rliteral))))

axiom my_b__def_axiom : (my_b = my_a)

 (* File "pack.ads", line 5, characters 0-0 *)
goal defqtvc :
  (forall glob:(int,character) farray. (((1 <= 4) -> (((1 <= 1) and
  (1 <= 26)) and ((1 <= 4) and (4 <= 26)))) ->
  (forall my_s2:(int,character) farray. ((my_s2 = glob) ->
  ((pack__a2__my_a__aggregate_def(42) = my_a) -> (((1 <= 4) -> (((1 <= 1) and
  (1 <= 4)) and ((1 <= 4) and (4 <= 4)))) -> ((my_a = my_b) ->
  ((bool_eq1(my_s2, 1, 3, glob, 1, 3) = true) -> ((1 <= 4) -> (1 <= 1))))))))))
