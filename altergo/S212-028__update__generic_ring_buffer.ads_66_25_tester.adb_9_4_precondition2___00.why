(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type small_natural

logic small_naturalqtint : small_natural -> int

axiom small_naturalqtaxiom :
  (forall i:small_natural. (0 <= small_naturalqtint(i)))

axiom small_naturalqtaxiom1 :
  (forall i:small_natural. (small_naturalqtint(i) <= 1073741823))

predicate in_range1(x: int) = ((0 <= x) and (x <= 1073741823))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : small_natural, small_natural -> bool

logic dummy : small_natural

type small_natural__ref = { small_natural__content : small_natural
}

function small_natural__ref_small_natural__content__projection(a: small_natural__ref) : small_natural =
  (a).small_natural__content

function to_rep(x: small_natural) : int = small_naturalqtint(x)

logic of_rep : int -> small_natural

axiom inversion_axiom :
  (forall x:small_natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:small_natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type small_positive

logic small_positiveqtint : small_positive -> int

axiom small_positiveqtaxiom :
  (forall i:small_positive. (1 <= small_positiveqtint(i)))

axiom small_positiveqtaxiom1 :
  (forall i:small_positive. (small_positiveqtint(i) <= 1073741823))

predicate in_range2(x: int) = ((1 <= x) and (x <= 1073741823))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : small_positive, small_positive -> bool

logic dummy1 : small_positive

type small_positive__ref = { small_positive__content : small_positive
}

function small_positive__ref_small_positive__content__projection(a: small_positive__ref) : small_positive =
  (a).small_positive__content

function to_rep1(x: small_positive) : int = small_positiveqtint(x)

logic of_rep1 : int -> small_positive

axiom inversion_axiom1 :
  (forall x:small_positive [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:small_positive [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep2(x: integer) : int = integerqtint(x)

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type element_type

logic element_typeqtint : element_type -> int

axiom element_typeqtaxiom :
  (forall i:element_type. ((- 2147483648) <= element_typeqtint(i)))

axiom element_typeqtaxiom1 :
  (forall i:element_type. (element_typeqtint(i) <= 2147483647))

predicate in_range4(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : element_type, element_type -> bool

logic dummy3 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_element_type__content__projection(a: element_type__ref) : element_type =
  (a).element_type__content

function to_rep3(x: element_type) : int = element_typeqtint(x)

logic of_rep3 : int -> element_type

axiom inversion_axiom3 :
  (forall x:element_type [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:element_type [to_rep3(x)]. in_range4(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range4(x) ->
  (to_rep3(of_rep3(x)) = x)))

type map__ref = { map__content : (int,element_type) farray
}

logic slide : (int,element_type) farray, int,
  int -> (int,element_type) farray

axiom slide_eq :
  (forall a:(int,element_type) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,element_type) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq5(a: (int,element_type) farray, a__first: int, a__last: int,
  b: (int,element_type) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep3((a[temp___idx_154])) = to_rep3((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,element_type) farray. forall b:(int,element_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,element_type) farray. forall b:(int,element_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,element_type) farray. forall b:(int,element_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,element_type) farray. forall b:(int,element_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep3((a[temp___idx_154])) = to_rep3((b[((b__first - a__first) + temp___idx_154)]))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  (to_rep2(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  (to_rep2(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,element_type) farray; rt : t
}

function to_array(a: us_t) : (int,element_type) farray = (a).elts

function of_array(a: (int,element_type) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : us_t

type element_array_type__ref = { element_array_type__content : us_t
}

function element_array_type__ref_element_array_type__content__projection(a: element_array_type__ref) : us_t =
  (a).element_array_type__content

type t11b__ref = { t11b__content : us_t
}

function t11b__ref_t11b__content__projection(a: t11b__ref) : us_t =
  (a).t11b__content

type us_split_discrs = { rec__tester__ring_buffer__ring_buffer_type__max_size
: small_positive
}

function us_split_discrs_rec__tester__ring_buffer__ring_buffer_type__max_size__projection(a: us_split_discrs) : small_positive =
  (a).rec__tester__ring_buffer__ring_buffer_type__max_size

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__tester__ring_buffer__ring_buffer_type__count :
small_natural; rec__tester__ring_buffer__ring_buffer_type__head :
small_positive; rec__tester__ring_buffer__ring_buffer_type__tail :
small_positive; rec__tester__ring_buffer__ring_buffer_type__items : us_t
}

function us_split_fields_rec__tester__ring_buffer__ring_buffer_type__count__projection(a: us_split_fields) : small_natural =
  (a).rec__tester__ring_buffer__ring_buffer_type__count

function us_split_fields_rec__tester__ring_buffer__ring_buffer_type__head__projection(a: us_split_fields) : small_positive =
  (a).rec__tester__ring_buffer__ring_buffer_type__head

function us_split_fields_rec__tester__ring_buffer__ring_buffer_type__tail__projection(a: us_split_fields) : small_positive =
  (a).rec__tester__ring_buffer__ring_buffer_type__tail

function us_split_fields_rec__tester__ring_buffer__ring_buffer_type__items__projection(a: us_split_fields) : us_t =
  (a).rec__tester__ring_buffer__ring_buffer_type__items

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq7(a: us_rep, b: us_rep) : bool =
  (if ((to_rep1(((a).us_split_discrs1).rec__tester__ring_buffer__ring_buffer_type__max_size) = to_rep1(((b).us_split_discrs1).rec__tester__ring_buffer__ring_buffer_type__max_size)) and
  (((to_rep(((a).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__count) = to_rep(((b).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__count)) and
  (to_rep1(((a).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__head) = to_rep1(((b).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__head))) and
  ((to_rep1(((a).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__tail) = to_rep1(((b).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__tail)) and
  (bool_eq6(((a).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__items,
  ((b).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__items) = true)))) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic tester__ring_buffer__ring_buffer_type__max_size__first__bit : int

logic tester__ring_buffer__ring_buffer_type__max_size__last__bit : int

logic tester__ring_buffer__ring_buffer_type__max_size__position : int

axiom tester__ring_buffer__ring_buffer_type__max_size__first__bit_axiom :
  (0 <= tester__ring_buffer__ring_buffer_type__max_size__first__bit)

axiom tester__ring_buffer__ring_buffer_type__max_size__last__bit_axiom :
  (tester__ring_buffer__ring_buffer_type__max_size__first__bit <  tester__ring_buffer__ring_buffer_type__max_size__last__bit)

axiom tester__ring_buffer__ring_buffer_type__max_size__position_axiom :
  (0 <= tester__ring_buffer__ring_buffer_type__max_size__position)

logic tester__ring_buffer__ring_buffer_type__count__first__bit : int

logic tester__ring_buffer__ring_buffer_type__count__last__bit : int

logic tester__ring_buffer__ring_buffer_type__count__position : int

axiom tester__ring_buffer__ring_buffer_type__count__first__bit_axiom :
  (0 <= tester__ring_buffer__ring_buffer_type__count__first__bit)

axiom tester__ring_buffer__ring_buffer_type__count__last__bit_axiom :
  (tester__ring_buffer__ring_buffer_type__count__first__bit <  tester__ring_buffer__ring_buffer_type__count__last__bit)

axiom tester__ring_buffer__ring_buffer_type__count__position_axiom :
  (0 <= tester__ring_buffer__ring_buffer_type__count__position)

logic tester__ring_buffer__ring_buffer_type__head__first__bit : int

logic tester__ring_buffer__ring_buffer_type__head__last__bit : int

logic tester__ring_buffer__ring_buffer_type__head__position : int

axiom tester__ring_buffer__ring_buffer_type__head__first__bit_axiom :
  (0 <= tester__ring_buffer__ring_buffer_type__head__first__bit)

axiom tester__ring_buffer__ring_buffer_type__head__last__bit_axiom :
  (tester__ring_buffer__ring_buffer_type__head__first__bit <  tester__ring_buffer__ring_buffer_type__head__last__bit)

axiom tester__ring_buffer__ring_buffer_type__head__position_axiom :
  (0 <= tester__ring_buffer__ring_buffer_type__head__position)

logic tester__ring_buffer__ring_buffer_type__tail__first__bit : int

logic tester__ring_buffer__ring_buffer_type__tail__last__bit : int

logic tester__ring_buffer__ring_buffer_type__tail__position : int

axiom tester__ring_buffer__ring_buffer_type__tail__first__bit_axiom :
  (0 <= tester__ring_buffer__ring_buffer_type__tail__first__bit)

axiom tester__ring_buffer__ring_buffer_type__tail__last__bit_axiom :
  (tester__ring_buffer__ring_buffer_type__tail__first__bit <  tester__ring_buffer__ring_buffer_type__tail__last__bit)

axiom tester__ring_buffer__ring_buffer_type__tail__position_axiom :
  (0 <= tester__ring_buffer__ring_buffer_type__tail__position)

logic tester__ring_buffer__ring_buffer_type__items__first__bit : int

logic tester__ring_buffer__ring_buffer_type__items__last__bit : int

logic tester__ring_buffer__ring_buffer_type__items__position : int

axiom tester__ring_buffer__ring_buffer_type__items__first__bit_axiom :
  (0 <= tester__ring_buffer__ring_buffer_type__items__first__bit)

axiom tester__ring_buffer__ring_buffer_type__items__last__bit_axiom :
  (tester__ring_buffer__ring_buffer_type__items__first__bit <  tester__ring_buffer__ring_buffer_type__items__last__bit)

axiom tester__ring_buffer__ring_buffer_type__items__position_axiom :
  (0 <= tester__ring_buffer__ring_buffer_type__items__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : us_rep

type ring_buffer_type__ref = { ring_buffer_type__content : us_rep
}

function ring_buffer_type__ref_ring_buffer_type__content__projection(a: ring_buffer_type__ref) : us_rep =
  (a).ring_buffer_type__content

logic size : us_rep -> int

logic size__function_guard : int, us_rep -> prop

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range5(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : natural, natural -> bool

logic dummy6 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range5(temp___expr_39))

predicate dynamic_invariant1(temp___expr_215: us_rep,
  temp___is_init_211: bool, temp___skip_constant_212: bool,
  temp___do_toplevel_213: bool, temp___do_typ_inv_214: bool) =
  (((temp___do_toplevel_213 = true) ->
  (((((to_rep1(((temp___expr_215).us_split_discrs1).rec__tester__ring_buffer__ring_buffer_type__max_size) <= 1073741823) and
  (to_rep(((temp___expr_215).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__count) <= to_rep1(((temp___expr_215).us_split_discrs1).rec__tester__ring_buffer__ring_buffer_type__max_size))) and
  (to_rep1(((temp___expr_215).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__head) <= to_rep1(((temp___expr_215).us_split_discrs1).rec__tester__ring_buffer__ring_buffer_type__max_size))) and
  (to_rep1(((temp___expr_215).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__tail) <= to_rep1(((temp___expr_215).us_split_discrs1).rec__tester__ring_buffer__ring_buffer_type__max_size))) and
  (((((to_rep(((temp___expr_215).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__count) = 0) and
  (to_rep1(((temp___expr_215).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__tail) = to_rep1(((temp___expr_215).us_split_discrs1).rec__tester__ring_buffer__ring_buffer_type__max_size))) and
  (to_rep1(((temp___expr_215).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__head) = 1)) or
  (to_rep(((temp___expr_215).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__count) = (((to_rep1(((temp___expr_215).us_split_discrs1).rec__tester__ring_buffer__ring_buffer_type__max_size) + to_rep1(((temp___expr_215).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__tail)) - to_rep1(((temp___expr_215).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__head)) + 1))) or
  (to_rep(((temp___expr_215).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__count) = ((to_rep1(((temp___expr_215).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__tail) - to_rep1(((temp___expr_215).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__head)) + 1))))) and
  (let temp___217 =
  ((temp___expr_215).us_split_discrs1).rec__tester__ring_buffer__ring_buffer_type__max_size
  : small_positive in (dynamic_property(1, to_rep1(temp___217),
  first1(((temp___expr_215).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__items),
  last1(((temp___expr_215).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__items)) and
  ((first1(((temp___expr_215).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__items) = 1) and
  (last1(((temp___expr_215).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__items) = to_rep1(temp___217))))))

predicate dynamic_predicate(temp___219: us_rep) =
  (((((to_rep1(((temp___219).us_split_discrs1).rec__tester__ring_buffer__ring_buffer_type__max_size) <= 1073741823) and
  (to_rep(((temp___219).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__count) <= to_rep1(((temp___219).us_split_discrs1).rec__tester__ring_buffer__ring_buffer_type__max_size))) and
  (to_rep1(((temp___219).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__head) <= to_rep1(((temp___219).us_split_discrs1).rec__tester__ring_buffer__ring_buffer_type__max_size))) and
  (to_rep1(((temp___219).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__tail) <= to_rep1(((temp___219).us_split_discrs1).rec__tester__ring_buffer__ring_buffer_type__max_size))) and
  (((((to_rep(((temp___219).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__count) = 0) and
  (to_rep1(((temp___219).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__tail) = to_rep1(((temp___219).us_split_discrs1).rec__tester__ring_buffer__ring_buffer_type__max_size))) and
  (to_rep1(((temp___219).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__head) = 1)) or
  (to_rep(((temp___219).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__count) = (((to_rep1(((temp___219).us_split_discrs1).rec__tester__ring_buffer__ring_buffer_type__max_size) + to_rep1(((temp___219).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__tail)) - to_rep1(((temp___219).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__head)) + 1))) or
  (to_rep(((temp___219).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__count) = ((to_rep1(((temp___219).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__tail) - to_rep1(((temp___219).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__head)) + 1))))

axiom size__post_axiom :
  (forall buffer:us_rep [size(buffer)]. (dynamic_invariant1(buffer, true,
  true, true, true) -> (let result = size(buffer) : int in
  (size__function_guard(result, buffer) -> dynamic_invariant(result, true,
  false, true, true)))))

axiom size__def_axiom :
  (forall buffer:us_rep [size(buffer)]. (dynamic_invariant1(buffer, true,
  true, true, true) ->
  (size(buffer) = to_rep(((buffer).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__count))))

logic empty : us_rep -> bool

logic empty__function_guard : bool, us_rep -> prop

axiom empty__def_axiom :
  (forall buffer:us_rep. size__function_guard(size(buffer), buffer))

axiom empty__def_axiom1 :
  (forall buffer:us_rep [empty(buffer)]. ((empty(buffer) = true) ->
  (size(buffer) = 0)))

axiom empty__def_axiom2 :
  (forall buffer:us_rep [empty(buffer)]. ((size(buffer) = 0) ->
  (empty(buffer) = true)))

logic full : us_rep -> bool

logic full__function_guard : bool, us_rep -> prop

axiom full__def_axiom :
  (forall buffer:us_rep. size__function_guard(size(buffer), buffer))

axiom full__def_axiom1 :
  (forall buffer:us_rep [full(buffer)]. ((full(buffer) = true) ->
  (size(buffer) = to_rep1(((buffer).us_split_discrs1).rec__tester__ring_buffer__ring_buffer_type__max_size))))

axiom full__def_axiom2 :
  (forall buffer:us_rep [full(buffer)].
  ((size(buffer) = to_rep1(((buffer).us_split_discrs1).rec__tester__ring_buffer__ring_buffer_type__max_size)) ->
  (full(buffer) = true)))

logic first2 : us_rep -> int

logic first__function_guard : int, us_rep -> prop

predicate dynamic_invariant2(temp___expr_188: int, temp___is_init_184: bool,
  temp___skip_constant_185: bool, temp___do_toplevel_186: bool,
  temp___do_typ_inv_187: bool) = (((temp___is_init_184 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range4(temp___expr_188))

axiom first__post_axiom :
  (forall buffer:us_rep. empty__function_guard(empty(buffer), buffer))

axiom first__post_axiom1 :
  (forall buffer:us_rep [first2(buffer)]. ((dynamic_invariant1(buffer, true,
  true, true, true) and (not (empty(buffer) = true))) -> (let result =
  first2(buffer) : int in (first__function_guard(result, buffer) ->
  dynamic_invariant2(result, true, false, true, true)))))

axiom first__def_axiom :
  (forall buffer:us_rep [first2(buffer)]. (dynamic_invariant1(buffer, true,
  true, true, true) ->
  (first2(buffer) = to_rep3((to_array(((buffer).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__items)[to_rep1(((buffer).us_split_fields1).rec__tester__ring_buffer__ring_buffer_type__head)])))))

logic buffer__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic i12b : us_rep

logic attr__ATTRIBUTE_ADDRESS2 : int

logic r22b : int

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_invariant3(temp___expr_202: int, temp___is_init_198: bool,
  temp___skip_constant_199: bool, temp___do_toplevel_200: bool,
  temp___do_typ_inv_201: bool) = (((temp___is_init_198 = true) or
  (1 <= 1073741823)) -> in_range2(temp___expr_202))

predicate dynamic_invariant4(temp___expr_195: int, temp___is_init_191: bool,
  temp___skip_constant_192: bool, temp___do_toplevel_193: bool,
  temp___do_typ_inv_194: bool) = (((temp___is_init_191 = true) or
  (0 <= 1073741823)) -> in_range1(temp___expr_195))

logic rliteral : small_positive

axiom rliteral_axiom : (small_positiveqtint(rliteral) = 1)

 (* File "generic_ring_buffer.ads", line 59, characters 0-0 *)
goal defqtvc :
  (forall buffer__split_fields:us_split_fields. forall element:int.
  (forall buffer__split_fields1:us_split_fields.
  ((buffer__split_fields1 = buffer__split_fields) ->
  (dynamic_invariant1(i12b, true, false, true, true) ->
  (dynamic_invariant1(i12b, true, false, true, true) -> (dynamic_invariant1({
  us_split_discrs1 = buffer__split_discrs; us_split_fields1 =
  buffer__split_fields }, true, false, true, true) ->
  (dynamic_invariant2(element, false, false, true, true) ->
  ((forall buffer__split_fields2:us_split_fields.
   empty__function_guard(empty({ us_split_discrs1 = buffer__split_discrs;
   us_split_fields1 = buffer__split_fields2 }), { us_split_discrs1 =
   buffer__split_discrs; us_split_fields1 = buffer__split_fields2 })) ->
  ((forall buffer__split_fields2:us_split_fields. size__function_guard(size({
   us_split_discrs1 = buffer__split_discrs; us_split_fields1 =
   buffer__split_fields2 }), { us_split_discrs1 = buffer__split_discrs;
   us_split_fields1 = buffer__split_fields2 })) ->
  (((not (empty({ us_split_discrs1 = buffer__split_discrs; us_split_fields1 =
  buffer__split_fields }) = true)) and (1 <= size({ us_split_discrs1 =
  buffer__split_discrs; us_split_fields1 = buffer__split_fields }))) ->
  (let temp___288 =
  (buffer__split_fields).rec__tester__ring_buffer__ring_buffer_type__items
  : us_t in
  (forall temp___289:int.
  ((to_rep1((buffer__split_fields).rec__tester__ring_buffer__ring_buffer_type__head) = temp___289) ->
  (((first1(temp___288) <= temp___289) and
  (temp___289 <= last1(temp___288))) ->
  (forall o:int. ((to_rep3((to_array(temp___288)[temp___289])) = o) ->
  (forall element1:int. ((element1 = o) ->
  (forall tester__ring_buffer__get__R22b__assume:int.
  ((to_rep1((buffer__split_discrs).rec__tester__ring_buffer__ring_buffer_type__max_size) = tester__ring_buffer__get__R22b__assume) ->
  ((tester__ring_buffer__get__R22b__assume = r22b) ->
  (dynamic_invariant3(r22b, true, false, true, true) ->
  (forall o1:small_positive.
  ((exists o2:int.
   ((to_rep1((buffer__split_discrs).rec__tester__ring_buffer__ring_buffer_type__max_size) = o2) and
   (exists o3:int.
   ((to_rep1((buffer__split_fields).rec__tester__ring_buffer__ring_buffer_type__head) = o3) and
   (if (o3 = o2) then (o1 = rliteral) else (exists o4:int.
                                           ((to_rep1((buffer__split_fields).rec__tester__ring_buffer__ring_buffer_type__head) = o4) and
                                           (let o5 = (o4 + 1) : int in
                                           (in_range2(o5) and
                                           (to_rep1(o1) = o5)))))))))) ->
  (forall o2:int.
  ((to_rep((buffer__split_fields).rec__tester__ring_buffer__ring_buffer_type__count) = o2) ->
  (let o3 = (o2 - 1) : int in (in_range1(o3) ->
  (forall o4:small_natural. ((to_rep(o4) = o3) -> (dynamic_predicate({
  us_split_discrs1 = buffer__split_discrs; us_split_fields1 = {
  rec__tester__ring_buffer__ring_buffer_type__count = o4;
  rec__tester__ring_buffer__ring_buffer_type__head = o1;
  rec__tester__ring_buffer__ring_buffer_type__tail =
  (buffer__split_fields).rec__tester__ring_buffer__ring_buffer_type__tail;
  rec__tester__ring_buffer__ring_buffer_type__items =
  (buffer__split_fields).rec__tester__ring_buffer__ring_buffer_type__items }
  }) ->
  (forall buffer__split_fields2:us_split_fields. ((buffer__split_fields2 = {
  rec__tester__ring_buffer__ring_buffer_type__count = o4;
  rec__tester__ring_buffer__ring_buffer_type__head = o1;
  rec__tester__ring_buffer__ring_buffer_type__tail =
  (buffer__split_fields).rec__tester__ring_buffer__ring_buffer_type__tail;
  rec__tester__ring_buffer__ring_buffer_type__items =
  (buffer__split_fields).rec__tester__ring_buffer__ring_buffer_type__items
  }) -> (let o5 = { us_split_discrs1 = buffer__split_discrs;
  us_split_fields1 = buffer__split_fields2 } : us_rep in (let o6 = full(o5)
  : bool in ((forall o7:us_rep. size__function_guard(size(o7), o7)) ->
  ((full__function_guard(o6, o5) and ((o6 = true) <->
  (size(o5) = to_rep1((buffer__split_discrs).rec__tester__ring_buffer__ring_buffer_type__max_size)))) ->
  ((not (o6 = true)) ->
  ((forall usf:us_rep. empty__function_guard(empty(usf), usf)) ->
  (not (empty({ us_split_discrs1 = buffer__split_discrs; us_split_fields1 =
  buffer__split_fields }) = true)))))))))))))))))))))))))))))))))))))))))
