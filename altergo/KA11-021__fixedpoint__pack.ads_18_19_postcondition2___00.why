(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic s : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type tmoneyB

predicate in_range(x: int) = (((- 9223372036854775808) <= x) and
  (x <= 9223372036854775807))

logic dummy : tmoneyB

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : tmoneyB, tmoneyB -> bool

type tmoneyB__ref = { tmoneyB__content : tmoneyB
}

function tmoneyB__ref_tmoneyB__content__projection(a: tmoneyB__ref) : tmoneyB =
  (a).tmoneyB__content

type money

predicate in_range1(x: int) = (((- 999999999999999) <= x) and
  (x <= 999999999999999))

logic dummy1 : money

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : money, money -> bool

type money__ref = { money__content : money
}

function money__ref_money__content__projection(a: money__ref) : money =
  (a).money__content

predicate dynamic_invariant(temp___expr_165: int, temp___is_init_161: bool,
  temp___skip_constant_162: bool, temp___do_toplevel_163: bool,
  temp___do_typ_inv_164: bool) = (((temp___is_init_161 = true) or
  ((- 999999999999999) <= 999999999999999)) -> in_range1(temp___expr_165))

type salary

predicate in_range2(x: int) = (((- 9999999999) <= x) and (x <= 9999999999))

logic dummy2 : salary

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : salary, salary -> bool

type salary__ref = { salary__content : salary
}

function salary__ref_salary__content__projection(a: salary__ref) : salary =
  (a).salary__content

predicate dynamic_invariant1(temp___expr_172: int, temp___is_init_168: bool,
  temp___skip_constant_169: bool, temp___do_toplevel_170: bool,
  temp___do_typ_inv_171: bool) = (((temp___is_init_168 = true) or
  ((- 9999999999) <= 9999999999)) -> in_range2(temp___expr_172))

 (* File "pack.ads", line 16, characters 0-0 *)
goal defqtvc :
  (forall stash:int. forall pocket:int.
  (forall pocket1:int. ((pocket1 = pocket) ->
  (forall stash1:int. ((stash1 = stash) -> (dynamic_invariant(stash, true,
  false, true, true) -> (dynamic_invariant(pocket, true, false, true,
  true) -> (dynamic_invariant1(s, true, false, true, true) -> ((0 <  s) ->
  (forall stash2:int. forall pocket2:int.
  ((exists spark__branch:bool.
   ((spark__branch = (if (s <  stash) then true else false)) and
   (if (spark__branch = true) then ((stash2 = (stash - s)) and
   (pocket2 = (pocket + s))) else ((stash2 = stash) and
   (pocket2 = pocket))))) ->
  ((stash2 + pocket2) = (stash1 + pocket1)))))))))))))
