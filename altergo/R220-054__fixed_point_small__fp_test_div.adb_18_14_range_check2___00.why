(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic x : int

logic attr__ATTRIBUTE_ADDRESS : int

logic y : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type tfp1B

predicate in_range1(x1: int) = (((- 128) <= x1) and (x1 <= 127))

logic dummy : tfp1B

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : tfp1B, tfp1B -> bool

type tfp1B__ref = { tfp1B__content : tfp1B
}

function tfp1B__ref_tfp1B__content__projection(a: tfp1B__ref) : tfp1B =
  (a).tfp1B__content

type fp1

predicate in_range2(x1: int) = (((- 30) <= x1) and (x1 <= 30))

logic dummy1 : fp1

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : fp1, fp1 -> bool

type fp1__ref = { fp1__content : fp1
}

function fp1__ref_fp1__content__projection(a: fp1__ref) : fp1 =
  (a).fp1__content

predicate dynamic_invariant(temp___expr_158: int, temp___is_init_154: bool,
  temp___skip_constant_155: bool, temp___do_toplevel_156: bool,
  temp___do_typ_inv_157: bool) = (((temp___is_init_154 = true) or
  ((- 30) <= 30)) -> in_range2(temp___expr_158))

type tfp2B

predicate in_range3(x1: int) = (((- 128) <= x1) and (x1 <= 127))

logic dummy2 : tfp2B

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : tfp2B, tfp2B -> bool

type tfp2B__ref = { tfp2B__content : tfp2B
}

function tfp2B__ref_tfp2B__content__projection(a: tfp2B__ref) : tfp2B =
  (a).tfp2B__content

type fp2

predicate in_range4(x1: int) = ((5 <= x1) and (x1 <= 50))

logic dummy3 : fp2

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : fp2, fp2 -> bool

type fp2__ref = { fp2__content : fp2
}

function fp2__ref_fp2__content__projection(a: fp2__ref) : fp2 =
  (a).fp2__content

predicate dynamic_invariant1(temp___expr_165: int, temp___is_init_161: bool,
  temp___skip_constant_162: bool, temp___do_toplevel_163: bool,
  temp___do_typ_inv_164: bool) = (((temp___is_init_161 = true) or
  (5 <= 50)) -> in_range4(temp___expr_165))

type tfp3B

predicate in_range5(x1: int) = (((- 32768) <= x1) and (x1 <= 32767))

logic dummy4 : tfp3B

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : tfp3B, tfp3B -> bool

type tfp3B__ref = { tfp3B__content : tfp3B
}

function tfp3B__ref_tfp3B__content__projection(a: tfp3B__ref) : tfp3B =
  (a).tfp3B__content

type fp3

predicate in_range6(x1: int) = (((- 150) <= x1) and (x1 <= 150))

logic dummy5 : fp3

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq5 : fp3, fp3 -> bool

type fp3__ref = { fp3__content : fp3
}

function fp3__ref_fp3__content__projection(a: fp3__ref) : fp3 =
  (a).fp3__content

predicate dynamic_invariant2(temp___expr_172: int, temp___is_init_168: bool,
  temp___skip_constant_169: bool, temp___do_toplevel_170: bool,
  temp___do_typ_inv_171: bool) = (((temp___is_init_168 = true) or
  ((- 150) <= 150)) -> in_range6(temp___expr_172))

type tfp4B

predicate in_range7(x1: int) = (((- 32768) <= x1) and (x1 <= 32767))

logic dummy6 : tfp4B

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq6 : tfp4B, tfp4B -> bool

type tfp4B__ref = { tfp4B__content : tfp4B
}

function tfp4B__ref_tfp4B__content__projection(a: tfp4B__ref) : tfp4B =
  (a).tfp4B__content

type fp4

predicate in_range8(x1: int) = (((- 300) <= x1) and (x1 <= 300))

logic dummy7 : fp4

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq7 : fp4, fp4 -> bool

type fp4__ref = { fp4__content : fp4
}

function fp4__ref_fp4__content__projection(a: fp4__ref) : fp4 =
  (a).fp4__content

predicate dynamic_invariant3(temp___expr_179: int, temp___is_init_175: bool,
  temp___skip_constant_176: bool, temp___do_toplevel_177: bool,
  temp___do_typ_inv_178: bool) = (((temp___is_init_175 = true) or
  ((- 300) <= 300)) -> in_range8(temp___expr_179))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x1:int. forall y1:int. ((not (y1 = 0)) -> (x1 = ((y1 * div(x1,
  y1)) + mod(x1, y1)))))

axiom Div_bound :
  (forall x1:int. forall y1:int. (((0 <= x1) and (0 <  y1)) -> (0 <= div(x1,
  y1))))

axiom Div_bound1 :
  (forall x1:int. forall y1:int. (((0 <= x1) and (0 <  y1)) -> (div(x1,
  y1) <= x1)))

axiom Mod_bound :
  (forall x1:int. forall y1:int. ((not (y1 = 0)) ->
  ((-abs_int(y1)) <  mod(x1, y1))))

axiom Mod_bound1 :
  (forall x1:int. forall y1:int. ((not (y1 = 0)) -> (mod(x1,
  y1) <  abs_int(y1))))

axiom Div_sign_pos :
  (forall x1:int. forall y1:int. (((0 <= x1) and (0 <  y1)) -> (0 <= div(x1,
  y1))))

axiom Div_sign_neg :
  (forall x1:int. forall y1:int. (((x1 <= 0) and (0 <  y1)) -> (div(x1,
  y1) <= 0)))

axiom Mod_sign_pos :
  (forall x1:int. forall y1:int. (((0 <= x1) and (not (y1 = 0))) ->
  (0 <= mod(x1, y1))))

axiom Mod_sign_neg :
  (forall x1:int. forall y1:int. (((x1 <= 0) and (not (y1 = 0))) -> (mod(x1,
  y1) <= 0)))

axiom Rounds_toward_zero :
  (forall x1:int. forall y1:int. ((not (y1 = 0)) -> (abs_int((div(x1,
  y1) * y1)) <= abs_int(x1))))

axiom Div_1 : (forall x1:int. (div(x1, 1) = x1))

axiom Mod_1 : (forall x1:int. (mod(x1, 1) = 0))

axiom Div_inf :
  (forall x1:int. forall y1:int. (((0 <= x1) and (x1 <  y1)) -> (div(x1,
  y1) = 0)))

axiom Mod_inf :
  (forall x1:int. forall y1:int. (((0 <= x1) and (x1 <  y1)) -> (mod(x1,
  y1) = x1)))

axiom Div_mult :
  (forall x1:int. forall y1:int. forall z:int [div(((x1 * y1) + z), x1)].
  (((0 <  x1) and ((0 <= y1) and (0 <= z))) -> (div(((x1 * y1) + z),
  x1) = (y1 + div(z, x1)))))

axiom Mod_mult :
  (forall x1:int. forall y1:int. forall z:int [mod(((x1 * y1) + z), x1)].
  (((0 <  x1) and ((0 <= y1) and (0 <= z))) -> (mod(((x1 * y1) + z),
  x1) = mod(z, x1))))

axiom Div_mod1 :
  (forall x1:int. forall y1:int. ((not (y1 = 0)) ->
  (x1 = ((y1 * (x1 / y1)) + (x1 % y1)))))

axiom Mod_bound2 :
  (forall x1:int. forall y1:int. ((not (y1 = 0)) -> (0 <= (x1 % y1))))

axiom Mod_bound3 :
  (forall x1:int. forall y1:int. ((not (y1 = 0)) ->
  ((x1 % y1) <  abs_int(y1))))

axiom Div_unique :
  (forall x1:int. forall y1:int. forall q:int. ((0 <  y1) ->
  ((((q * y1) <= x1) and (x1 <  ((q * y1) + y1))) -> ((x1 / y1) = q))))

axiom Div_bound2 :
  (forall x1:int. forall y1:int. (((0 <= x1) and (0 <  y1)) ->
  (0 <= (x1 / y1))))

axiom Div_bound3 :
  (forall x1:int. forall y1:int. (((0 <= x1) and (0 <  y1)) ->
  ((x1 / y1) <= x1)))

axiom Mod_11 : (forall x1:int. ((x1 % 1) = 0))

axiom Div_11 : (forall x1:int. ((x1 / 1) = x1))

axiom Div_inf1 :
  (forall x1:int. forall y1:int. (((0 <= x1) and (x1 <  y1)) ->
  ((x1 / y1) = 0)))

axiom Div_inf_neg :
  (forall x1:int. forall y1:int. (((0 <  x1) and (x1 <= y1)) ->
  (((-x1) / y1) = (- 1))))

axiom Mod_0 : (forall y1:int. ((not (y1 = 0)) -> ((0 % y1) = 0)))

axiom Div_1_left : (forall y1:int. ((1 <  y1) -> ((1 / y1) = 0)))

axiom Div_minus1_left :
  (forall y1:int. ((1 <  y1) -> (((- 1) / y1) = (- 1))))

axiom Mod_1_left : (forall y1:int. ((1 <  y1) -> ((1 % y1) = 1)))

axiom Mod_minus1_left :
  (forall y1:int [((- 1) % y1)]. ((1 <  y1) -> (((- 1) % y1) = (y1 - 1))))

axiom Div_mult1 :
  (forall x1:int. forall y1:int. forall z:int [(((x1 * y1) + z) / x1)].
  ((0 <  x1) -> ((((x1 * y1) + z) / x1) = (y1 + (z / x1)))))

axiom Mod_mult1 :
  (forall x1:int. forall y1:int. forall z:int [(((x1 * y1) + z) % x1)].
  ((0 <  x1) -> ((((x1 * y1) + z) % x1) = (z % x1))))

function mod1(x1: int, y1: int) : int =
  (if (0 <  y1) then (x1 % y1) else ((x1 % y1) + y1))

predicate pos_div_relation(res: int, num: int, den: int) = (let exact =
  div(num, den) : int in
  (if (num = 0) then (res = 0) else (if (num = (exact * den)) then (res = exact) else ((exact <= res) and
  (res <= (exact + 1))))))

logic fxp_mult : int, int -> int

axiom fxp_mult_def :
  (forall x1:int.
  (forall y1:int [fxp_mult(x1, y1)]. (((x1 = 0) or (y1 = 0)) -> (fxp_mult(x1,
  y1) = 0))))

axiom fxp_mult_def1 :
  (forall x1:int.
  (forall y1:int [fxp_mult(x1, y1)]. ((not ((x1 = 0) or (y1 = 0))) ->
  ((((0 <  x1) and (0 <  y1)) or ((x1 <  0) and (y1 <  0))) ->
  pos_div_relation(fxp_mult(x1, y1), ((((x1 * y1) * 1) * 1) * 15),
  ((3 * 5) * 1))))))

axiom fxp_mult_def2 :
  (forall x1:int.
  (forall y1:int [fxp_mult(x1, y1)]. ((not ((x1 = 0) or (y1 = 0))) ->
  ((not (((0 <  x1) and (0 <  y1)) or ((x1 <  0) and (y1 <  0)))) ->
  pos_div_relation((-fxp_mult(x1, y1)), (-((((x1 * y1) * 1) * 1) * 15)),
  ((3 * 5) * 1))))))

logic fxp_div : int, int -> int

axiom fxp_div_def :
  (forall x1:int.
  (forall y1:int [fxp_div(x1, y1)]. ((x1 = 0) -> (fxp_div(x1, y1) = 0))))

axiom fxp_div_def1 :
  (forall x1:int.
  (forall y1:int [fxp_div(x1, y1)]. ((not (x1 = 0)) -> (((0 <  x1) and
  (0 <  y1)) -> pos_div_relation(fxp_div(x1, y1), (((x1 * 1) * 5) * 15),
  (((y1 * 3) * 1) * 1))))))

axiom fxp_div_def2 :
  (forall x1:int.
  (forall y1:int [fxp_div(x1, y1)]. ((not (x1 = 0)) -> ((not ((0 <  x1) and
  (0 <  y1))) -> (((x1 <  0) and (y1 <  0)) -> pos_div_relation(fxp_div(x1,
  y1), ((((-x1) * 1) * 5) * 15), ((((-y1) * 3) * 1) * 1)))))))

axiom fxp_div_def3 :
  (forall x1:int.
  (forall y1:int [fxp_div(x1, y1)]. ((not (x1 = 0)) -> ((not ((0 <  x1) and
  (0 <  y1))) -> ((not ((x1 <  0) and (y1 <  0))) -> (((x1 <  0) and
  (0 <  y1)) -> pos_div_relation((-fxp_div(x1, y1)),
  ((((-x1) * 1) * 5) * 15), (((y1 * 3) * 1) * 1))))))))

axiom fxp_div_def4 :
  (forall x1:int.
  (forall y1:int [fxp_div(x1, y1)]. ((not (x1 = 0)) -> ((not ((0 <  x1) and
  (0 <  y1))) -> ((not ((x1 <  0) and (y1 <  0))) -> ((not ((x1 <  0) and
  (0 <  y1))) -> (((0 <  x1) and (y1 <  0)) -> pos_div_relation((-fxp_div(x1,
  y1)), (((x1 * 1) * 5) * 15), ((((-y1) * 3) * 1) * 1)))))))))

logic fxp_mult1 : int, int -> int

axiom fxp_mult_def3 :
  (forall x1:int.
  (forall y1:int [fxp_mult1(x1, y1)]. (((x1 = 0) or (y1 = 0)) ->
  (fxp_mult1(x1, y1) = 0))))

axiom fxp_mult_def4 :
  (forall x1:int.
  (forall y1:int [fxp_mult1(x1, y1)]. ((not ((x1 = 0) or (y1 = 0))) ->
  ((((0 <  x1) and (0 <  y1)) or ((x1 <  0) and (y1 <  0))) ->
  pos_div_relation(fxp_mult1(x1, y1), ((((x1 * y1) * 1) * 1) * 30),
  ((3 * 5) * 1))))))

axiom fxp_mult_def5 :
  (forall x1:int.
  (forall y1:int [fxp_mult1(x1, y1)]. ((not ((x1 = 0) or (y1 = 0))) ->
  ((not (((0 <  x1) and (0 <  y1)) or ((x1 <  0) and (y1 <  0)))) ->
  pos_div_relation((-fxp_mult1(x1, y1)), (-((((x1 * y1) * 1) * 1) * 30)),
  ((3 * 5) * 1))))))

logic fxp_div1 : int, int -> int

axiom fxp_div_def5 :
  (forall x1:int.
  (forall y1:int [fxp_div1(x1, y1)]. ((x1 = 0) -> (fxp_div1(x1, y1) = 0))))

axiom fxp_div_def6 :
  (forall x1:int.
  (forall y1:int [fxp_div1(x1, y1)]. ((not (x1 = 0)) -> (((0 <  x1) and
  (0 <  y1)) -> pos_div_relation(fxp_div1(x1, y1), (((x1 * 1) * 5) * 30),
  (((y1 * 3) * 1) * 1))))))

axiom fxp_div_def7 :
  (forall x1:int.
  (forall y1:int [fxp_div1(x1, y1)]. ((not (x1 = 0)) -> ((not ((0 <  x1) and
  (0 <  y1))) -> (((x1 <  0) and (y1 <  0)) -> pos_div_relation(fxp_div1(x1,
  y1), ((((-x1) * 1) * 5) * 30), ((((-y1) * 3) * 1) * 1)))))))

axiom fxp_div_def8 :
  (forall x1:int.
  (forall y1:int [fxp_div1(x1, y1)]. ((not (x1 = 0)) -> ((not ((0 <  x1) and
  (0 <  y1))) -> ((not ((x1 <  0) and (y1 <  0))) -> (((x1 <  0) and
  (0 <  y1)) -> pos_div_relation((-fxp_div1(x1, y1)),
  ((((-x1) * 1) * 5) * 30), (((y1 * 3) * 1) * 1))))))))

axiom fxp_div_def9 :
  (forall x1:int.
  (forall y1:int [fxp_div1(x1, y1)]. ((not (x1 = 0)) -> ((not ((0 <  x1) and
  (0 <  y1))) -> ((not ((x1 <  0) and (y1 <  0))) -> ((not ((x1 <  0) and
  (0 <  y1))) -> (((0 <  x1) and (y1 <  0)) ->
  pos_div_relation((-fxp_div1(x1, y1)), (((x1 * 1) * 5) * 30),
  ((((-y1) * 3) * 1) * 1)))))))))

axiom cdiv_cases :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((0 <  d) -> (div(n,
  d) = (n / d)))))

axiom cdiv_cases1 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((0 <  d) -> (div(n,
  d) = (-((-n) / d))))))

axiom cdiv_cases2 :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((d <  0) -> (div(n,
  d) = (-(n / (-d)))))))

axiom cdiv_cases3 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((d <  0) -> (div(n,
  d) = ((-n) / (-d))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))))

axiom cmod_cases1 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))))

axiom cmod_cases2 :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))))

axiom cmod_cases3 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d)))))))

 (* File "fp_test_div.ads", line 15, characters 0-0 *)
goal defqtvc :
  (forall u:int. forall v:int. (dynamic_invariant(x, true, false, true,
  true) -> (dynamic_invariant1(y, true, false, true, true) ->
  (dynamic_invariant2(u, false, false, true, true) -> (dynamic_invariant3(v,
  false, false, true, true) -> (((abs_int(x) <= 24) and
  (abs_int(y) <= 10)) -> in_range6(fxp_div(x, y))))))))
