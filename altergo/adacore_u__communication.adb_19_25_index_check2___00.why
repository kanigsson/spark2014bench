(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

function to_rep1(x: positive) : int = positiveqtint(x)

logic of_rep1 : int -> positive

axiom inversion_axiom1 :
  (forall x:positive [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:positive [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic max : int

logic attr__ATTRIBUTE_ADDRESS : int

logic e : int

logic attr__ATTRIBUTE_ADDRESS1 : int

function to_rep2(x: integer) : int = integerqtint(x)

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range(x) ->
  (to_rep2(of_rep2(x)) = x)))

type data

logic dataqtint : data -> int

axiom dataqtaxiom : (forall i:data. ((- 2147483648) <= dataqtint(i)))

axiom dataqtaxiom1 : (forall i:data. (dataqtint(i) <= 2147483647))

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : data, data -> bool

logic dummy3 : data

type data__ref = { data__content : data
}

function data__ref_data__content__projection(a: data__ref) : data =
  (a).data__content

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy4 : integer

type tdata_arrayD1__ref = { tdata_arrayD1__content : integer
}

function tdata_arrayD1__ref_tdata_arrayD1__content__projection(a: tdata_arrayD1__ref) : integer =
  (a).tdata_arrayD1__content

function to_rep3(x: data) : int = dataqtint(x)

logic of_rep3 : int -> data

axiom inversion_axiom3 :
  (forall x:data [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:data [to_rep3(x)]. in_range3(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range3(x) ->
  (to_rep3(of_rep3(x)) = x)))

type map__ref = { map__content : (int,data) farray
}

logic slide : (int,data) farray, int, int -> (int,data) farray

axiom slide_eq :
  (forall a:(int,data) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,data) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq5(a: (int,data) farray, a__first: int, a__last: int,
  b: (int,data) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep3((a[temp___idx_155])) = to_rep3((b[((b__first - a__first) + temp___idx_155)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,data) farray. forall b:(int,data) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,data) farray. forall b:(int,data) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,data) farray. forall b:(int,data) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,data) farray. forall b:(int,data) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep3((a[temp___idx_155])) = to_rep3((b[((b__first - a__first) + temp___idx_155)]))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep2(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep2(last(mk(f, l))) = l))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (dynamic_property(range_first, range_last, low) and
  dynamic_property(range_first, range_last, high)))))

type us_t = { elts : (int,data) farray; rt : t
}

function to_array(a: us_t) : (int,data) farray = (a).elts

function of_array(a: (int,data) farray, f: int, l: int) : us_t = { elts = a;
  rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq5 : us_t, us_t -> bool

logic dummy5 : us_t

type tdata_arrayB__ref = { tdata_arrayB__content : us_t
}

function tdata_arrayB__ref_tdata_arrayB__content__projection(a: tdata_arrayB__ref) : us_t =
  (a).tdata_arrayB__content

type data_array__ref = { data_array__content : us_t
}

function data_array__ref_data_array__content__projection(a: data_array__ref) : us_t =
  (a).data_array__content

type us_split_fields = { rec__communication__ring_buffer__buffer__content :
us_t; rec__communication__ring_buffer__buffer__first : positive;
rec__communication__ring_buffer__buffer__length : natural
}

function us_split_fields_rec__communication__ring_buffer__buffer__content__projection(a: us_split_fields) : us_t =
  (a).rec__communication__ring_buffer__buffer__content

function us_split_fields_rec__communication__ring_buffer__buffer__first__projection(a: us_split_fields) : positive =
  (a).rec__communication__ring_buffer__buffer__first

function us_split_fields_rec__communication__ring_buffer__buffer__length__projection(a: us_split_fields) : natural =
  (a).rec__communication__ring_buffer__buffer__length

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq7(a: us_rep, b: us_rep) : bool =
  (if (((bool_eq6(((a).us_split_fields1).rec__communication__ring_buffer__buffer__content,
  ((b).us_split_fields1).rec__communication__ring_buffer__buffer__content) = true) and
  (to_rep1(((a).us_split_fields1).rec__communication__ring_buffer__buffer__first) = to_rep1(((b).us_split_fields1).rec__communication__ring_buffer__buffer__first))) and
  (to_rep(((a).us_split_fields1).rec__communication__ring_buffer__buffer__length) = to_rep(((b).us_split_fields1).rec__communication__ring_buffer__buffer__length))) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic communication__ring_buffer__buffer__content__first__bit : int

logic communication__ring_buffer__buffer__content__last__bit : int

logic communication__ring_buffer__buffer__content__position : int

axiom communication__ring_buffer__buffer__content__first__bit_axiom :
  (0 <= communication__ring_buffer__buffer__content__first__bit)

axiom communication__ring_buffer__buffer__content__last__bit_axiom :
  (communication__ring_buffer__buffer__content__first__bit <  communication__ring_buffer__buffer__content__last__bit)

axiom communication__ring_buffer__buffer__content__position_axiom :
  (0 <= communication__ring_buffer__buffer__content__position)

logic communication__ring_buffer__buffer__first__first__bit : int

logic communication__ring_buffer__buffer__first__last__bit : int

logic communication__ring_buffer__buffer__first__position : int

axiom communication__ring_buffer__buffer__first__first__bit_axiom :
  (0 <= communication__ring_buffer__buffer__first__first__bit)

axiom communication__ring_buffer__buffer__first__last__bit_axiom :
  (communication__ring_buffer__buffer__first__first__bit <  communication__ring_buffer__buffer__first__last__bit)

axiom communication__ring_buffer__buffer__first__position_axiom :
  (0 <= communication__ring_buffer__buffer__first__position)

logic communication__ring_buffer__buffer__length__first__bit : int

logic communication__ring_buffer__buffer__length__last__bit : int

logic communication__ring_buffer__buffer__length__position : int

axiom communication__ring_buffer__buffer__length__first__bit_axiom :
  (0 <= communication__ring_buffer__buffer__length__first__bit)

axiom communication__ring_buffer__buffer__length__last__bit_axiom :
  (communication__ring_buffer__buffer__length__first__bit <  communication__ring_buffer__buffer__length__last__bit)

axiom communication__ring_buffer__buffer__length__position_axiom :
  (0 <= communication__ring_buffer__buffer__length__position)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy6 : us_rep

type buffer__ref = { buffer__content : us_rep
}

function buffer__ref_buffer__content__projection(a: buffer__ref) : us_rep =
  (a).buffer__content

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_invariant1(temp___expr_178: us_rep,
  temp___is_init_174: bool, temp___skip_constant_175: bool,
  temp___do_toplevel_176: bool, temp___do_typ_inv_177: bool) =
  (dynamic_property1(1, max,
  first1(((temp___expr_178).us_split_fields1).rec__communication__ring_buffer__buffer__content),
  last1(((temp___expr_178).us_split_fields1).rec__communication__ring_buffer__buffer__content)) and
  ((first1(((temp___expr_178).us_split_fields1).rec__communication__ring_buffer__buffer__content) = 1) and
  (last1(((temp___expr_178).us_split_fields1).rec__communication__ring_buffer__buffer__content) = max)))

predicate default_initial_assumption(temp___expr_180: us_rep,
  temp___skip_top_level_181: bool) =
  ((((first1(((temp___expr_180).us_split_fields1).rec__communication__ring_buffer__buffer__content) = 1) and
  (last1(((temp___expr_180).us_split_fields1).rec__communication__ring_buffer__buffer__content) = max)) and
  (to_rep1(((temp___expr_180).us_split_fields1).rec__communication__ring_buffer__buffer__first) = 1)) and
  (to_rep(((temp___expr_180).us_split_fields1).rec__communication__ring_buffer__buffer__length) = 0))

predicate dynamic_invariant2(temp___expr_161: int, temp___is_init_157: bool,
  temp___skip_constant_158: bool, temp___do_toplevel_159: bool,
  temp___do_typ_inv_160: bool) = (((temp___is_init_157 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range3(temp___expr_161))

predicate dynamic_invariant3(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range2(temp___expr_46))

predicate dynamic_invariant4(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

predicate dynamic_invariant5(temp___expr_168: us_t, temp___is_init_164: bool,
  temp___skip_constant_165: bool, temp___do_toplevel_166: bool,
  temp___do_typ_inv_167: bool) = ((not (temp___skip_constant_165 = true)) ->
  (dynamic_property1(1, max, first1(temp___expr_168),
  last1(temp___expr_168)) and ((first1(temp___expr_168) = 1) and
  (last1(temp___expr_168) = max))))

predicate default_initial_assumption1(temp___expr_170: us_t,
  temp___skip_top_level_171: bool) = ((first1(temp___expr_170) = 1) and
  (last1(temp___expr_170) = max))

 (* File "communication.ads", line 17, characters 0-0 *)
goal defqtvc :
  (forall b__split_fields:us_split_fields. (dynamic_invariant2(e, true,
  false, true, true) -> (dynamic_invariant1({ us_split_fields1 =
  b__split_fields }, true, false, true, true) -> (dynamic_invariant(max,
  true, false, true, true) ->
  (forall o:int.
  ((to_rep((b__split_fields).rec__communication__ring_buffer__buffer__length) = o) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (max <= o) then true else false)) ->
  ((spark__branch = true) ->
  (forall o1:data. ((to_rep3(o1) = e) ->
  (forall temp___264:int.
  ((to_rep1((b__split_fields).rec__communication__ring_buffer__buffer__first) = temp___264) ->
  (first1((b__split_fields).rec__communication__ring_buffer__buffer__content) <= temp___264))))))))))))))
