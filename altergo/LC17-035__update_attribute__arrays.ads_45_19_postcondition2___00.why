(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq1(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic arr_in : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic j : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type index

logic indexqtint : index -> int

axiom indexqtaxiom : (forall i1:index. (1 <= indexqtint(i1)))

axiom indexqtaxiom1 : (forall i1:index. (indexqtint(i1) <= 8))

predicate in_range1(x: int) = ((1 <= x) and (x <= 8))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : index, index -> bool

logic dummy1 : index

type index__ref = { index__content : index
}

function index__ref_index__content__projection(a: index__ref) : index =
  (a).index__content

predicate dynamic_invariant(temp___expr_166: int, temp___is_init_162: bool,
  temp___skip_constant_163: bool, temp___do_toplevel_164: bool,
  temp___do_typ_inv_165: bool) = (((temp___is_init_162 = true) or
  (1 <= 8)) -> in_range1(temp___expr_166))

logic temp_____aggregate_def_241 : (int,integer) farray, int, int, int, int,
  int, int -> (int,integer) farray

logic temp_____aggregate_def_421 : (int,integer) farray, int, int, int, int,
  int, int -> (int,integer) farray

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 20)

logic rliteral1 : integer

axiom rliteral_axiom1 : (integerqtint(rliteral1) = 10)

axiom def_axiom :
  (forall temp___423:(int,integer) farray.
  (forall temp___424:int. forall temp___425:int. forall temp___426:int.
  forall temp___427:int. forall temp___428:int. forall temp___429:int.
  ((dynamic_invariant(temp___424, true, true, true, true) and
  (((dynamic_invariant(temp___425, true, true, true, true) and
  dynamic_invariant1(temp___426, true, true, true, true)) and
  dynamic_invariant(temp___427, true, true, true, true)) and
  (dynamic_invariant(temp___428, true, true, true, true) and
  dynamic_invariant1(temp___429, true, true, true, true)))) ->
  (forall temp___430:int. (((temp___427 <= temp___430) and
  (temp___430 <= temp___428)) -> ((temp_____aggregate_def_421(temp___423,
  temp___424, temp___425, temp___426, temp___427, temp___428,
  temp___429)[temp___430]) = rliteral))))))

axiom def_axiom1 :
  (forall temp___423:(int,integer) farray.
  (forall temp___424:int. forall temp___425:int. forall temp___426:int.
  forall temp___427:int. forall temp___428:int. forall temp___429:int.
  ((dynamic_invariant(temp___424, true, true, true, true) and
  (((dynamic_invariant(temp___425, true, true, true, true) and
  dynamic_invariant1(temp___426, true, true, true, true)) and
  dynamic_invariant(temp___427, true, true, true, true)) and
  (dynamic_invariant(temp___428, true, true, true, true) and
  dynamic_invariant1(temp___429, true, true, true, true)))) ->
  (forall temp___430:int. ((not ((temp___427 <= temp___430) and
  (temp___430 <= temp___428))) -> (((temp___424 <= temp___430) and
  (temp___430 <= temp___425)) -> ((temp_____aggregate_def_421(temp___423,
  temp___424, temp___425, temp___426, temp___427, temp___428,
  temp___429)[temp___430]) = rliteral1)))))))

axiom def_axiom2 :
  (forall temp___423:(int,integer) farray.
  (forall temp___424:int. forall temp___425:int. forall temp___426:int.
  forall temp___427:int. forall temp___428:int. forall temp___429:int.
  ((dynamic_invariant(temp___424, true, true, true, true) and
  (((dynamic_invariant(temp___425, true, true, true, true) and
  dynamic_invariant1(temp___426, true, true, true, true)) and
  dynamic_invariant(temp___427, true, true, true, true)) and
  (dynamic_invariant(temp___428, true, true, true, true) and
  dynamic_invariant1(temp___429, true, true, true, true)))) ->
  (forall temp___430:int. ((not ((temp___427 <= temp___430) and
  (temp___430 <= temp___428))) -> ((not ((temp___424 <= temp___430) and
  (temp___430 <= temp___425))) -> ((temp_____aggregate_def_421(temp___423,
  temp___424, temp___425, temp___426, temp___427, temp___428,
  temp___429)[temp___430]) = (temp___423[temp___430]))))))))

axiom def_axiom3 :
  (forall temp___243:(int,integer) farray.
  (forall temp___244:int. forall temp___245:int. forall temp___246:int.
  forall temp___247:int. forall temp___248:int. forall temp___249:int.
  ((dynamic_invariant(temp___244, true, true, true, true) and
  (((dynamic_invariant(temp___245, true, true, true, true) and
  dynamic_invariant1(temp___246, true, true, true, true)) and
  dynamic_invariant(temp___247, true, true, true, true)) and
  (dynamic_invariant(temp___248, true, true, true, true) and
  dynamic_invariant1(temp___249, true, true, true, true)))) ->
  (forall temp___250:int. (((temp___247 <= temp___250) and
  (temp___250 <= temp___248)) -> ((temp_____aggregate_def_241(temp___243,
  temp___244, temp___245, temp___246, temp___247, temp___248,
  temp___249)[temp___250]) = rliteral))))))

axiom def_axiom4 :
  (forall temp___243:(int,integer) farray.
  (forall temp___244:int. forall temp___245:int. forall temp___246:int.
  forall temp___247:int. forall temp___248:int. forall temp___249:int.
  ((dynamic_invariant(temp___244, true, true, true, true) and
  (((dynamic_invariant(temp___245, true, true, true, true) and
  dynamic_invariant1(temp___246, true, true, true, true)) and
  dynamic_invariant(temp___247, true, true, true, true)) and
  (dynamic_invariant(temp___248, true, true, true, true) and
  dynamic_invariant1(temp___249, true, true, true, true)))) ->
  (forall temp___250:int. ((not ((temp___247 <= temp___250) and
  (temp___250 <= temp___248))) -> (((temp___244 <= temp___250) and
  (temp___250 <= temp___245)) -> ((temp_____aggregate_def_241(temp___243,
  temp___244, temp___245, temp___246, temp___247, temp___248,
  temp___249)[temp___250]) = rliteral1)))))))

axiom def_axiom5 :
  (forall temp___243:(int,integer) farray.
  (forall temp___244:int. forall temp___245:int. forall temp___246:int.
  forall temp___247:int. forall temp___248:int. forall temp___249:int.
  ((dynamic_invariant(temp___244, true, true, true, true) and
  (((dynamic_invariant(temp___245, true, true, true, true) and
  dynamic_invariant1(temp___246, true, true, true, true)) and
  dynamic_invariant(temp___247, true, true, true, true)) and
  (dynamic_invariant(temp___248, true, true, true, true) and
  dynamic_invariant1(temp___249, true, true, true, true)))) ->
  (forall temp___250:int. ((not ((temp___247 <= temp___250) and
  (temp___250 <= temp___248))) -> ((not ((temp___244 <= temp___250) and
  (temp___250 <= temp___245))) -> ((temp_____aggregate_def_241(temp___243,
  temp___244, temp___245, temp___246, temp___247, temp___248,
  temp___249)[temp___250]) = (temp___243[temp___250]))))))))

 (* File "arrays.ads", line 44, characters 0-0 *)
goal defqtvc : (dynamic_invariant(i, true, false, true, true) ->
  (dynamic_invariant(j, true, false, true, true) ->
  (forall arrays__f4__result:(int,integer) farray.
  ((arrays__f4__result = temp_____aggregate_def_421(arr_in, 1, i, 10, i, j,
  20)) -> (bool_eq1(arrays__f4__result, 1, 8,
  temp_____aggregate_def_241(arr_in, 1, i, 10, i, j, 20), 1, 8) = true)))))
