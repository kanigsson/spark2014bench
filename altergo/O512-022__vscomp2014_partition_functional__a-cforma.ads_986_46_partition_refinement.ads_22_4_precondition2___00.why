(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : count_type, count_type -> bool

logic dummy : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

function to_rep(x: count_type) : int = count_typeqtint(x)

logic of_rep : int -> count_type

axiom inversion_axiom :
  (forall x:count_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:count_type [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = {
rec__partition_refinement__inverse_sets__cursor__node : count_type
}

function us_split_fields_rec__partition_refinement__inverse_sets__cursor__node__projection(a: us_split_fields) : count_type =
  (a).rec__partition_refinement__inverse_sets__cursor__node

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__4__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__4__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__partition_refinement__inverse_sets__cursor__node) = to_rep(((b).us_split_fields1).rec__partition_refinement__inverse_sets__cursor__node)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic partition_refinement__inverse_sets__cursor__node__first__bit : int

logic partition_refinement__inverse_sets__cursor__node__last__bit : int

logic partition_refinement__inverse_sets__cursor__node__position : int

axiom partition_refinement__inverse_sets__cursor__node__first__bit_axiom :
  (0 <= partition_refinement__inverse_sets__cursor__node__first__bit)

axiom partition_refinement__inverse_sets__cursor__node__last__bit_axiom :
  (partition_refinement__inverse_sets__cursor__node__first__bit <  partition_refinement__inverse_sets__cursor__node__last__bit)

axiom partition_refinement__inverse_sets__cursor__node__position_axiom :
  (0 <= partition_refinement__inverse_sets__cursor__node__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type cursor__ref = { cursor__content : us_rep
}

function cursor__ref_cursor__content__2__projection(a: cursor__ref) : us_rep =
  (a).cursor__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = {
rec__partition_refinement__inverse_sets__map__capacity : count_type
}

function us_split_discrs_rec__partition_refinement__inverse_sets__map__capacity__projection(a: us_split_discrs) : count_type =
  (a).rec__partition_refinement__inverse_sets__map__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields2 = { rec__partition_refinement__inverse_sets__map :
us_main_type
}

function us_split_fields_rec__partition_refinement__inverse_sets__map__projection(a: us_split_fields2) : us_main_type =
  (a).rec__partition_refinement__inverse_sets__map

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__2__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq4(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__partition_refinement__inverse_sets__map__capacity) = to_rep(((b).us_split_discrs1).rec__partition_refinement__inverse_sets__map__capacity)) and
  (us_main_eq(((a).us_split_fields3).rec__partition_refinement__inverse_sets__map,
  ((b).us_split_fields3).rec__partition_refinement__inverse_sets__map) = true)) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic partition_refinement__inverse_sets__map__capacity__first__bit : int

logic partition_refinement__inverse_sets__map__capacity__last__bit : int

logic partition_refinement__inverse_sets__map__capacity__position : int

axiom partition_refinement__inverse_sets__map__capacity__first__bit_axiom :
  (0 <= partition_refinement__inverse_sets__map__capacity__first__bit)

axiom partition_refinement__inverse_sets__map__capacity__last__bit_axiom :
  (partition_refinement__inverse_sets__map__capacity__first__bit <  partition_refinement__inverse_sets__map__capacity__last__bit)

axiom partition_refinement__inverse_sets__map__capacity__position_axiom :
  (0 <= partition_refinement__inverse_sets__map__capacity__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy2 : us_rep1

type map__ref = { map__content : us_rep1
}

function map__ref_map__content__2__projection(a: map__ref) : us_rep1 =
  (a).map__content

logic length1 : us_rep1 -> int

logic length__function_guard : int, us_rep1 -> prop

logic oeq : us_rep1, us_rep1 -> bool

logic oeq__function_guard : bool, us_rep1, us_rep1 -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep1. forall b:us_rep1 [user_eq2(a, b)]. (user_eq2(a,
  b) = oeq(a, b)))

predicate dynamic_invariant(temp___expr_447: int, temp___is_init_443: bool,
  temp___skip_constant_444: bool, temp___do_toplevel_445: bool,
  temp___do_typ_inv_446: bool) = (((temp___is_init_443 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_447))

axiom length__post_axiom :
  (forall container:us_rep1 [length1(container)].
  (length1(container) <= to_rep(((container).us_split_discrs1).rec__partition_refinement__inverse_sets__map__capacity)))

axiom length__post_axiom1 :
  (forall container:us_rep1 [length1(container)].
  dynamic_invariant(length1(container), true, false, true, true))

logic first_key : us_rep1 -> int

logic first_key__function_guard : int, us_rep1 -> prop

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep2

logic bool_eq5 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic user_eq3 : us_rep2, us_rep2 -> bool

logic dummy3 : us_rep2

type sequence__ref = { sequence__content : us_rep2
}

function sequence__ref_sequence__content__2__projection(a: sequence__ref) : us_rep2 =
  (a).sequence__content

logic get : us_rep2, int -> int

logic get__function_guard : int, us_rep2, int -> prop

function k_smaller_than_range(container: us_rep2, fst: int, lst: int,
  key: int) : bool =
  (if (forall i:int. (((fst <= i) and (i <= lst)) -> (key <  get(container,
      i)))) then true else false)

logic k_smaller_than_range__function_guard : bool, us_rep2, int, int,
  int -> prop

logic keys : us_rep1 -> us_rep2

logic keys__function_guard : us_rep2, us_rep1 -> prop

logic is_empty : us_rep1 -> bool

logic is_empty__function_guard : bool, us_rep1 -> prop

type key_type

logic key_typeqtint : key_type -> int

axiom key_typeqtaxiom : (forall i:key_type. (1 <= key_typeqtint(i)))

axiom key_typeqtaxiom1 :
  (forall i:key_type. (key_typeqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq4 : key_type, key_type -> bool

logic dummy4 : key_type

type key_type__ref = { key_type__content : key_type
}

function key_type__ref_key_type__content__2__projection(a: key_type__ref) : key_type =
  (a).key_type__content

predicate dynamic_invariant1(temp___expr_793: int, temp___is_init_789: bool,
  temp___skip_constant_790: bool, temp___do_toplevel_791: bool,
  temp___do_typ_inv_792: bool) = (((temp___is_init_789 = true) or
  (1 <= 2147483647)) -> in_range2(temp___expr_793))

axiom first_key__post_axiom :
  (forall container:us_rep1 [first_key(container)].
  ((not (is_empty(container) = true)) ->
  (first_key(container) = get(keys(container), 1))))

axiom first_key__post_axiom1 :
  (forall container:us_rep1 [first_key(container)].
  ((not (is_empty(container) = true)) ->
  (k_smaller_than_range(keys(container), 2, length1(container),
  first_key(container)) = true)))

axiom first_key__post_axiom2 :
  (forall container:us_rep1 [first_key(container)].
  ((not (is_empty(container) = true)) ->
  dynamic_invariant1(first_key(container), true, false, true, true)))

logic container : us_rep1

logic attr__ATTRIBUTE_ADDRESS : int

logic key : int

logic attr__ATTRIBUTE_ADDRESS1 : int

function equivalent_keys(left: int, right: int) : bool =
  andb(notb(bool_lt(left, right)), notb(bool_lt(right, left)))

logic equivalent_keys__function_guard : bool, int, int -> prop

logic length2 : us_rep2 -> int

logic length__function_guard1 : int, us_rep2 -> prop

function k_bigger_than_range(container1: us_rep2, fst: int, lst: int,
  key1: int) : bool =
  (if (forall i:int. (((fst <= i) and (i <= lst)) -> (get(container1,
      i) <  key1))) then true else false)

logic k_bigger_than_range__function_guard : bool, us_rep2, int, int,
  int -> prop

function k_is_find(container1: us_rep2, key1: int, position: int) : bool =
  andb((if (0 <  position) then k_bigger_than_range(container1, 1,
  (position - 1), key1) else of_int(1)),
  (if (position <  length2(container1)) then k_smaller_than_range(container1,
  (position + 1), length2(container1), key1) else of_int(1)))

logic k_is_find__function_guard : bool, us_rep2, int, int -> prop

logic find : us_rep2, int -> int

logic find__function_guard : int, us_rep2, int -> prop

function last(container1: us_rep2) : int = (0 + length2(container1))

logic last__function_guard : int, us_rep2 -> prop

function oeq1(left: us_rep2, right: us_rep2) : bool =
  andb(bool_eq(length2(left), length2(right)),
  (if (forall n:int. (((1 <= n) and (n <= last(left))) -> (get(left,
      n) = get(right, n)))) then true else false))

logic oeq__function_guard1 : bool, us_rep2, us_rep2 -> prop

axiom user_eq__def_axiom1 :
  (forall a:us_rep2. forall b:us_rep2 [user_eq3(a, b)]. (user_eq3(a,
  b) = oeq1(a, b)))

predicate default_initial_assumption(temp___expr_881: us_rep2,
  temp___skip_top_level_882: bool) =
  ((not (temp___skip_top_level_882 = true)) ->
  (length2(temp___expr_881) = 0))

axiom find__post_axiom :
  (forall container1:us_rep2.
  (forall key1:int [find(container1, key1)]. (dynamic_invariant1(key1, true,
  true, true, true) -> (let result = find(container1, key1) : int in
  ((0 <  result) -> (result <= length2(container1)))))))

axiom find__post_axiom1 :
  (forall container1:us_rep2.
  (forall key1:int [find(container1, key1)]. (dynamic_invariant1(key1, true,
  true, true, true) -> (let result = find(container1, key1) : int in
  ((0 <  result) -> (equivalent_keys(key1, get(container1,
  result)) = true))))))

axiom find__post_axiom2 :
  (forall container1:us_rep2.
  (forall key1:int [find(container1, key1)]. (dynamic_invariant1(key1, true,
  true, true, true) -> dynamic_invariant(find(container1, key1), true, false,
  true, true))))

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep3

logic bool_eq7 : us_rep3, us_rep3 -> bool

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic user_eq5 : us_rep3, us_rep3 -> bool

logic dummy5 : us_rep3

type map__ref1 = { map__content1 : us_rep3
}

function map__ref_map__content__3__projection(a: map__ref1) : us_rep3 =
  (a).map__content1

logic model : us_rep1 -> us_rep3

logic model__function_guard : us_rep3, us_rep1 -> prop

logic length3 : us_rep3 -> int

logic length__function_guard2 : int, us_rep3 -> prop

logic oeq2 : us_rep3, us_rep3 -> bool

logic oeq__function_guard2 : bool, us_rep3, us_rep3 -> prop

logic is_empty1 : us_rep3 -> bool

logic is_empty__function_guard1 : bool, us_rep3 -> prop

axiom user_eq__def_axiom2 :
  (forall a:us_rep3. forall b:us_rep3 [user_eq5(a, b)]. (user_eq5(a,
  b) = oeq2(a, b)))

predicate default_initial_assumption1(temp___expr_845: us_rep3,
  temp___skip_top_level_846: bool) =
  ((not (temp___skip_top_level_846 = true)) ->
  ((is_empty1(temp___expr_845) = true) and (length3(temp___expr_845) = 0)))

logic has_key : us_rep3, int -> bool

logic has_key__function_guard : bool, us_rep3, int -> prop

function iter_has_element(container1: us_rep2, position: int) : bool =
  andb((if (1 <= position) then true else false),
  (if (position <= last(container1)) then true else false))

logic iter_has_element__function_guard : bool, us_rep2, int -> prop

type key_type1

logic key_typeqtint1 : key_type1 -> int

axiom key_typeqtaxiom2 : (forall i:key_type1. (1 <= key_typeqtint1(i)))

axiom key_typeqtaxiom3 :
  (forall i:key_type1. (key_typeqtint1(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq6 : key_type1, key_type1 -> bool

logic dummy6 : key_type1

type key_type__ref1 = { key_type__content1 : key_type1
}

function key_type__ref_key_type__content__3__projection(a: key_type__ref1) : key_type1 =
  (a).key_type__content1

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. (0 <= extended_indexqtint(i)))

axiom extended_indexqtaxiom1 :
  (forall i:extended_index. (extended_indexqtint(i) <= 2147483647))

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq7 : extended_index, extended_index -> bool

logic dummy7 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref_extended_index__content__2__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

axiom keys__post_axiom :
  (forall container1:us_rep1 [keys(container1)].
  (length2(keys(container1)) = length1(container1)))

axiom keys__post_axiom1 :
  (forall container1:us_rep1 [keys(container1)]. (let result =
  keys(container1) : us_rep2 in
  (forall temp___951:int. ((in_range4(temp___951) and
  (iter_has_element(result, temp___951) = true)) ->
  (has_key(model(container1), get(result, temp___951)) = true)))))

axiom keys__post_axiom2 :
  (forall container1:us_rep1 [keys(container1)].
  (forall key1:int. ((in_range3(key1) and (has_key(model(container1),
  key1) = true)) -> (0 <  find(keys(container1), key1)))))

axiom keys__post_axiom3 :
  (forall container1:us_rep1 [keys(container1)]. (let result =
  keys(container1) : us_rep2 in
  (forall key1:int. ((in_range3(key1) and (has_key(model(container1),
  key1) = true)) -> (equivalent_keys(get(result, find(result, key1)),
  key1) = true)))))

axiom keys__post_axiom4 :
  (forall container1:us_rep1 [keys(container1)]. (let result =
  keys(container1) : us_rep2 in
  (forall i:int. (((1 <= i) and (i <= length1(container1))) -> (find(result,
  get(result, i)) = i)))))

axiom keys__post_axiom5 :
  (forall container1:us_rep1 [keys(container1)]. (let result =
  keys(container1) : us_rep2 in
  (forall i:int. (((1 <= i) and (i <= length1(container1))) ->
  (k_is_find(result, get(result, i), i) = true)))))

axiom oeq__post_axiom :
  (forall left:us_rep1. forall right:us_rep1 [oeq(left, right)]. ((oeq(left,
  right) = true) -> (oeq2(model(left), model(right)) = true)))

axiom oeq__post_axiom1 :
  (forall left:us_rep1. forall right:us_rep1 [oeq(left, right)].
  ((oeq2(model(left), model(right)) = true) -> (oeq(left, right) = true)))

axiom is_empty__post_axiom :
  (forall container1:us_rep1 [is_empty(container1)].
  ((is_empty(container1) = true) -> (length1(container1) = 0)))

axiom is_empty__post_axiom1 :
  (forall container1:us_rep1 [is_empty(container1)].
  ((length1(container1) = 0) -> (is_empty(container1) = true)))

predicate dynamic_invariant2(temp___expr_830: int, temp___is_init_826: bool,
  temp___skip_constant_827: bool, temp___do_toplevel_828: bool,
  temp___do_typ_inv_829: bool) = (((temp___is_init_826 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_830))

axiom has_key__post_axiom :
  (forall container1:us_rep3.
  (forall key1:int [has_key(container1, key1)]. (dynamic_invariant2(key1,
  true, true, true, true) -> ((of_int(1) = true) ->
  ((exists k:int. ((in_range3(k) and (has_key(container1, k) = true)) and
   (equivalent_keys(k, key1) = true))) ->
  (has_key(container1, key1) = true))))))

logic witness : us_rep3, int -> int

logic witness__function_guard : int, us_rep3, int -> prop

logic w_get : us_rep3, int -> int

logic w_get__function_guard : int, us_rep3, int -> prop

logic get1 : us_rep3, int -> int

logic get__function_guard1 : int, us_rep3, int -> prop

type element_type

logic element_typeqtint : element_type -> int

axiom element_typeqtaxiom :
  (forall i:element_type. (0 <= element_typeqtint(i)))

axiom element_typeqtaxiom1 :
  (forall i:element_type. (element_typeqtint(i) <= 5))

predicate in_range5(x: int) = ((0 <= x) and (x <= 5))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq8 : element_type, element_type -> bool

logic dummy8 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_element_type__content__5__projection(a: element_type__ref) : element_type =
  (a).element_type__content

predicate dynamic_invariant3(temp___expr_837: int, temp___is_init_833: bool,
  temp___skip_constant_834: bool, temp___do_toplevel_835: bool,
  temp___do_typ_inv_836: bool) = (((temp___is_init_833 = true) or
  (0 <= 5)) -> in_range5(temp___expr_837))

axiom get__post_axiom :
  (forall container1:us_rep3.
  (forall key1:int [get1(container1, key1)]. ((dynamic_invariant2(key1, true,
  true, true, true) and (has_key(container1, key1) = true)) ->
  ((of_int(1) = true) -> (get1(container1, key1) = w_get(container1,
  witness(container1, key1)))))))

axiom get__post_axiom1 :
  (forall container1:us_rep3.
  (forall key1:int [get1(container1, key1)]. ((dynamic_invariant2(key1, true,
  true, true, true) and (has_key(container1, key1) = true)) ->
  ((of_int(1) = true) ->
  (forall k:int. ((in_range3(k) and (has_key(container1, k) = true)) ->
  ((equivalent_keys(k, key1) = true) -> (witness(container1,
  key1) = witness(container1, k)))))))))

axiom get__post_axiom2 :
  (forall container1:us_rep3.
  (forall key1:int [get1(container1, key1)]. ((dynamic_invariant2(key1, true,
  true, true, true) and (has_key(container1, key1) = true)) ->
  ((of_int(1) = true) ->
  (forall k:int. ((in_range3(k) and (has_key(container1, k) = true)) ->
  ((witness(container1, key1) = witness(container1, k)) ->
  (equivalent_keys(k, key1) = true))))))))

axiom get__post_axiom3 :
  (forall container1:us_rep3.
  (forall key1:int [get1(container1, key1)]. ((dynamic_invariant2(key1, true,
  true, true, true) and (has_key(container1, key1) = true)) ->
  dynamic_invariant3(get1(container1, key1), true, false, true, true))))

axiom length__post_axiom2 :
  (forall container1:us_rep3 [length3(container1)].
  dynamic_invariant(length3(container1), true, false, true, true))

axiom oeq__post_axiom2 :
  (forall left:us_rep3. forall right:us_rep3 [oeq2(left, right)].
  ((oeq2(left, right) = true) ->
  (forall key1:int. ((in_range3(key1) and (has_key(left, key1) = true)) ->
  (has_key(right, key1) = true)))))

axiom oeq__post_axiom3 :
  (forall left:us_rep3. forall right:us_rep3 [oeq2(left, right)].
  ((oeq2(left, right) = true) ->
  (forall key1:int. ((in_range3(key1) and (has_key(left, key1) = true)) ->
  (get1(right, key1) = get1(left, key1))))))

axiom oeq__post_axiom4 :
  (forall left:us_rep3. forall right:us_rep3 [oeq2(left, right)].
  ((oeq2(left, right) = true) ->
  (forall key1:int. ((in_range3(key1) and (has_key(right, key1) = true)) ->
  (has_key(left, key1) = true)))))

axiom oeq__post_axiom5 :
  (forall left:us_rep3. forall right:us_rep3 [oeq2(left, right)].
  (((forall key1:int. ((in_range3(key1) and (has_key(left, key1) = true)) ->
    ((has_key(right, key1) = true) and (get1(right, key1) = get1(left,
    key1))))) and
  (forall key1:int. ((in_range3(key1) and (has_key(right, key1) = true)) ->
  (has_key(left, key1) = true)))) -> (oeq2(left, right) = true)))

axiom is_empty__post_axiom2 :
  (forall container1:us_rep3 [is_empty1(container1)].
  ((is_empty1(container1) = true) ->
  (forall key1:int. (not (in_range3(key1) and (has_key(container1,
  key1) = true))))))

axiom is_empty__post_axiom3 :
  (forall container1:us_rep3 [is_empty1(container1)].
  ((forall key1:int. (not (in_range3(key1) and (has_key(container1,
   key1) = true)))) ->
  (is_empty1(container1) = true)))

logic has_witness : us_rep3, int -> bool

logic has_witness__function_guard : bool, us_rep3, int -> prop

axiom witness__post_axiom :
  (forall container1:us_rep3.
  (forall key1:int [witness(container1, key1)]. ((dynamic_invariant2(key1,
  true, true, true, true) and (has_key(container1, key1) = true)) ->
  (has_witness(container1, witness(container1, key1)) = true))))

axiom witness__post_axiom1 :
  (forall container1:us_rep3.
  (forall key1:int [witness(container1, key1)]. ((dynamic_invariant2(key1,
  true, true, true, true) and (has_key(container1, key1) = true)) ->
  dynamic_invariant(witness(container1, key1), true, false, true, true))))

axiom w_get__post_axiom :
  (forall container1:us_rep3.
  (forall witness1:int [w_get(container1, witness1)].
  ((dynamic_invariant(witness1, true, true, true, true) and
  (has_witness(container1, witness1) = true)) ->
  dynamic_invariant3(w_get(container1, witness1), true, false, true, true))))

predicate dynamic_invariant4(temp___expr_873: int, temp___is_init_869: bool,
  temp___skip_constant_870: bool, temp___do_toplevel_871: bool,
  temp___do_typ_inv_872: bool) = (((temp___is_init_869 = true) or
  (0 <= 2147483647)) -> in_range4(temp___expr_873))

axiom length__post_axiom3 :
  (forall container1:us_rep2 [length2(container1)].
  ((0 + length2(container1)) <= 2147483647))

axiom length__post_axiom4 :
  (forall container1:us_rep2 [length2(container1)].
  dynamic_invariant(length2(container1), true, false, true, true))

type element_type1

logic element_typeqtint1 : element_type1 -> int

axiom element_typeqtaxiom2 :
  (forall i:element_type1. (1 <= element_typeqtint1(i)))

axiom element_typeqtaxiom3 :
  (forall i:element_type1. (element_typeqtint1(i) <= 2147483647))

predicate in_range6(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq9 : element_type1, element_type1 -> bool

logic dummy9 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref_element_type__content__6__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

predicate dynamic_invariant5(temp___expr_866: int, temp___is_init_862: bool,
  temp___skip_constant_863: bool, temp___do_toplevel_864: bool,
  temp___do_typ_inv_865: bool) = (((temp___is_init_862 = true) or
  (1 <= 2147483647)) -> in_range6(temp___expr_866))

axiom get__post_axiom4 :
  (forall container1:us_rep2.
  (forall position:int [get(container1, position)].
  ((dynamic_invariant4(position, true, true, true, true) and
  ((1 <= position) and (position <= last(container1)))) ->
  dynamic_invariant5(get(container1, position), true, false, true, true))))

 (* File "a-cforma.ads", line 983, characters 0-0 *)
goal defqtvc : (dynamic_invariant1(key, true, false, true, true) -> (let o =
  container : us_rep1 in (let o1 = length1(o) : int in
  ((dynamic_invariant(o1, true, false, true, true) and
  (o1 <= to_rep(((o).us_split_discrs1).rec__partition_refinement__inverse_sets__map__capacity))) ->
  ((not (o1 = 0)) -> (not (is_empty(container) = true)))))))
