(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

logic x : int

logic attr__ATTRIBUTE_ADDRESS : int

logic e1 : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic e2 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type very_small_positive

logic very_small_positiveqtint : very_small_positive -> int

axiom very_small_positiveqtaxiom :
  (forall i:very_small_positive. (1 <= very_small_positiveqtint(i)))

axiom very_small_positiveqtaxiom1 :
  (forall i:very_small_positive. (very_small_positiveqtint(i) <= 50))

predicate in_range1(x1: int) = ((1 <= x1) and (x1 <= 50))

function bool_eq1(x1: int, y: int) : bool =
  (if (x1 = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : very_small_positive, very_small_positive -> bool

logic dummy1 : very_small_positive

type very_small_positive__ref = { very_small_positive__content :
very_small_positive
}

function very_small_positive__ref_very_small_positive__content__projection(a: very_small_positive__ref) : very_small_positive =
  (a).very_small_positive__content

predicate dynamic_invariant1(temp___expr_239: int, temp___is_init_235: bool,
  temp___skip_constant_236: bool, temp___do_toplevel_237: bool,
  temp___do_typ_inv_238: bool) = (((temp___is_init_235 = true) or
  (1 <= 50)) -> in_range1(temp___expr_239))

type very_very_small_natural

logic very_very_small_naturalqtint : very_very_small_natural -> int

axiom very_very_small_naturalqtaxiom :
  (forall i:very_very_small_natural. (0 <= very_very_small_naturalqtint(i)))

axiom very_very_small_naturalqtaxiom1 :
  (forall i:very_very_small_natural. (very_very_small_naturalqtint(i) <= 5))

predicate in_range2(x1: int) = ((0 <= x1) and (x1 <= 5))

function bool_eq2(x1: int, y: int) : bool =
  (if (x1 = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : very_very_small_natural, very_very_small_natural -> bool

logic dummy2 : very_very_small_natural

type very_very_small_natural__ref = { very_very_small_natural__content :
very_very_small_natural
}

function very_very_small_natural__ref_very_very_small_natural__content__projection(a: very_very_small_natural__ref) : very_very_small_natural =
  (a).very_very_small_natural__content

predicate dynamic_invariant2(temp___expr_246: int, temp___is_init_242: bool,
  temp___skip_constant_243: bool, temp___do_toplevel_244: bool,
  temp___do_typ_inv_245: bool) = (((temp___is_init_242 = true) or
  (0 <= 5)) -> in_range2(temp___expr_246))

 (* File "test_arith.adb", line 190, characters 0-0 *)
goal defqtvc :
  (forall r1:int. forall r2:int. (dynamic_invariant1(x, true, false, true,
  true) -> (dynamic_invariant2(e1, true, false, true, true) ->
  (dynamic_invariant2(e2, true, false, true, true) -> (dynamic_invariant(r1,
  false, false, true, true) -> (dynamic_invariant(r2, false, false, true,
  true) -> ((e1 <  e2) -> (let o = (x ** e1) : int in (in_range(o) ->
  (forall r11:int. ((r11 = o) -> (let o1 = (x ** e2) : int in
  (in_range(o1) -> (forall r21:int. ((r21 = o1) -> (e1 <= e2))))))))))))))))
