(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))))

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq4(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

type us_split_fields = { rec__unit1__t1__c1 : integer; rec__ext__ :
us_private
}

function us_split_fields_rec__unit1__t1__c1__projection(a: us_split_fields) : integer =
  (a).rec__unit1__t1__c1

function us_split_fields_rec__ext____projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__projection(a: us_rep) : int = (a).attr__tag

function bool_eq5(a: us_rep, b: us_rep) : bool =
  (if (to_rep1(((a).us_split_fields1).rec__unit1__t1__c1) = to_rep1(((b).us_split_fields1).rec__unit1__t1__c1)) then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic unit1__t1__c1__first__bit : int

logic unit1__t1__c1__last__bit : int

logic unit1__t1__c1__position : int

axiom unit1__t1__c1__first__bit_axiom : (0 <= unit1__t1__c1__first__bit)

axiom unit1__t1__c1__last__bit_axiom :
  (unit1__t1__c1__first__bit <  unit1__t1__c1__last__bit)

axiom unit1__t1__c1__position_axiom : (0 <= unit1__t1__c1__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type t1__ref = { t1__content : us_rep
}

function t1__ref_t1__content__projection(a: t1__ref) : us_rep =
  (a).t1__content

logic x1__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

predicate default_initial_assumption(temp___expr_195: us_rep,
  temp___skip_top_level_196: bool) = ((temp___expr_195).attr__tag = us_tag)

type us_split_fields2 = { rec__unit2__t2__c2 : integer; rec__unit1__t1__c11 :
integer; rec__ext__1 : us_private
}

function us_split_fields_rec__unit2__t2__c2__projection(a: us_split_fields2) : integer =
  (a).rec__unit2__t2__c2

function us_split_fields_rec__unit1__t1__c1__2__projection(a: us_split_fields2) : integer =
  (a).rec__unit1__t1__c11

function us_split_fields_rec__ext____2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_attr__tag__2__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : integer, us_private -> us_private

logic extract__unit2__t2__c2 : us_private -> integer

axiom extract__unit2__t2__c2__conv :
  (forall unit2__t2__c2:integer.
  (forall rec__ext__2:us_private.
  (extract__unit2__t2__c2(hide_ext__(unit2__t2__c2,
  rec__ext__2)) = unit2__t2__c2)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__unit1__t1__c1 = ((a).us_split_fields3).rec__unit1__t1__c11;
  rec__ext__ = hide_ext__(((a).us_split_fields3).rec__unit2__t2__c2,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__unit2__t2__c2 =
  extract__unit2__t2__c2(((r).us_split_fields1).rec__ext__);
  rec__unit1__t1__c11 = ((r).us_split_fields1).rec__unit1__t1__c1;
  rec__ext__1 = extract__ext__(((r).us_split_fields1).rec__ext__) };
  attr__tag1 = (r).attr__tag }

function bool_eq6(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep1(((a).us_split_fields3).rec__unit2__t2__c2) = to_rep1(((b).us_split_fields3).rec__unit2__t2__c2)) and
  (to_rep1(((a).us_split_fields3).rec__unit1__t1__c11) = to_rep1(((b).us_split_fields3).rec__unit1__t1__c11))) then true else false)

logic us_tag1 : int

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic unit2__t2__c2__first__bit : int

logic unit2__t2__c2__last__bit : int

logic unit2__t2__c2__position : int

axiom unit2__t2__c2__first__bit_axiom : (0 <= unit2__t2__c2__first__bit)

axiom unit2__t2__c2__last__bit_axiom :
  (unit2__t2__c2__first__bit <  unit2__t2__c2__last__bit)

axiom unit2__t2__c2__position_axiom : (0 <= unit2__t2__c2__position)

logic unit1__t1__c1__first__bit1 : int

logic unit1__t1__c1__last__bit1 : int

logic unit1__t1__c1__position1 : int

axiom unit1__t1__c1__first__bit_axiom1 : (0 <= unit1__t1__c1__first__bit1)

axiom unit1__t1__c1__last__bit_axiom1 :
  (unit1__t1__c1__first__bit1 <  unit1__t1__c1__last__bit1)

axiom unit1__t1__c1__position_axiom1 : (0 <= unit1__t1__c1__position1)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy5 : us_rep1

type t2__ref = { t2__content : us_rep1
}

function t2__ref_t2__content__projection(a: t2__ref) : us_rep1 =
  (a).t2__content

logic x2__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate default_initial_assumption1(temp___expr_203: us_rep1,
  temp___skip_top_level_204: bool) = ((temp___expr_203).attr__tag1 = us_tag1)

logic is_zero : us_rep -> bool

logic is_zero__function_guard : bool, us_rep -> prop

logic is_zero1 : int, us_rep -> bool

logic is_zero__function_guard1 : bool, int, us_rep -> prop

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq7(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range3(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE3 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> bool

logic is_zero2 : us_rep1 -> bool

logic is_zero__function_guard2 : bool, us_rep1 -> prop

logic is_zero3 : int, us_rep1 -> bool

logic is_zero__function_guard3 : bool, int, us_rep1 -> prop

axiom unit1__t1__compat_axiom :
  (forall x:us_rep [is_zero1(us_tag, x)].
  (is_zero__function_guard1(is_zero1(us_tag, x), us_tag, x) ->
  (forall x1:us_rep. is_zero__function_guard(is_zero(x1), x1))))

axiom unit1__t1__compat_axiom1 :
  (forall x:us_rep [is_zero1(us_tag, x)].
  (is_zero__function_guard1(is_zero1(us_tag, x), us_tag, x) ->
  (to_int(is_zero(x)) = to_int(is_zero1(us_tag, x)))))

axiom unit2__t2__compat_axiom :
  (forall x:us_rep [is_zero1(us_tag1, x)].
  (is_zero__function_guard1(is_zero1(us_tag1, x), us_tag1, x) ->
  (forall x1:us_rep. is_zero__function_guard2(is_zero2(of_base(x1)),
  of_base(x1)))))

axiom unit2__t2__compat_axiom1 :
  (forall x:us_rep [is_zero1(us_tag1, x)].
  (is_zero__function_guard1(is_zero1(us_tag1, x), us_tag1, x) ->
  (to_int(is_zero2(of_base(x))) = to_int(is_zero1(us_tag1, x)))))

axiom is_zero__def_axiom :
  (forall x:us_rep [is_zero(x)]. ((is_zero(x) = true) ->
  (to_rep1(((x).us_split_fields1).rec__unit1__t1__c1) = 0)))

axiom is_zero__def_axiom1 :
  (forall x:us_rep [is_zero(x)].
  ((to_rep1(((x).us_split_fields1).rec__unit1__t1__c1) = 0) ->
  (is_zero(x) = true)))

logic create__specific_post : int, us_split_fields, int,
  us_split_fields -> prop

axiom unit1__t1__compat_axiom2 :
  (forall unit1__create__x__fields:us_split_fields.
  forall unit1__create__x__old__fields:us_split_fields.
  (forall x__attr__tag:int [create__specific_post(us_tag,
  unit1__create__x__fields, x__attr__tag, unit1__create__x__old__fields)].
  (create__specific_post(us_tag, unit1__create__x__fields, x__attr__tag,
  unit1__create__x__old__fields) -> (to_rep1((({ us_split_fields1 =
  unit1__create__x__fields; attr__tag = x__attr__tag
  }).us_split_fields1).rec__unit1__t1__c1) = 0))))

axiom unit2__t2__compat_axiom2 :
  (forall unit1__create__x__fields:us_split_fields.
  forall unit1__create__x__old__fields:us_split_fields.
  (forall x__attr__tag:int [create__specific_post(us_tag1,
  unit1__create__x__fields, x__attr__tag, unit1__create__x__old__fields)].
  (create__specific_post(us_tag1, unit1__create__x__fields, x__attr__tag,
  unit1__create__x__old__fields) -> (to_rep1(((of_base({ us_split_fields1 =
  unit1__create__x__fields; attr__tag = x__attr__tag
  })).us_split_fields3).rec__unit1__t1__c11) = 0))))

axiom unit2__t2__compat_axiom3 :
  (forall unit1__create__x__fields:us_split_fields.
  forall unit1__create__x__old__fields:us_split_fields.
  (forall x__attr__tag:int [create__specific_post(us_tag1,
  unit1__create__x__fields, x__attr__tag, unit1__create__x__old__fields)].
  (create__specific_post(us_tag1, unit1__create__x__fields, x__attr__tag,
  unit1__create__x__old__fields) -> (to_rep1(((of_base({ us_split_fields1 =
  unit1__create__x__fields; attr__tag = x__attr__tag
  })).us_split_fields3).rec__unit2__t2__c2) = 0))))

logic is_max : us_rep -> bool

logic is_max__function_guard : bool, us_rep -> prop

logic is_max1 : int, us_rep -> bool

logic is_max__function_guard1 : bool, int, us_rep -> prop

logic is_max2 : us_rep1 -> bool

logic is_max__function_guard2 : bool, us_rep1 -> prop

logic is_max3 : int, us_rep1 -> bool

logic is_max__function_guard3 : bool, int, us_rep1 -> prop

axiom unit1__t1__compat_axiom3 :
  (forall x:us_rep [is_max1(us_tag, x)].
  (is_max__function_guard1(is_max1(us_tag, x), us_tag, x) ->
  (forall x1:us_rep. is_max__function_guard(is_max(x1), x1))))

axiom unit1__t1__compat_axiom4 :
  (forall x:us_rep [is_max1(us_tag, x)].
  (is_max__function_guard1(is_max1(us_tag, x), us_tag, x) ->
  (to_int(is_max(x)) = to_int(is_max1(us_tag, x)))))

axiom unit2__t2__compat_axiom4 :
  (forall x:us_rep [is_max1(us_tag1, x)].
  (is_max__function_guard1(is_max1(us_tag1, x), us_tag1, x) ->
  (forall x1:us_rep. is_max__function_guard2(is_max2(of_base(x1)),
  of_base(x1)))))

axiom unit2__t2__compat_axiom5 :
  (forall x:us_rep [is_max1(us_tag1, x)].
  (is_max__function_guard1(is_max1(us_tag1, x), us_tag1, x) ->
  (to_int(is_max2(of_base(x))) = to_int(is_max1(us_tag1, x)))))

axiom is_max__def_axiom :
  (forall x:us_rep [is_max(x)]. ((is_max(x) = true) ->
  (to_rep1(((x).us_split_fields1).rec__unit1__t1__c1) = 2147483647)))

axiom is_max__def_axiom1 :
  (forall x:us_rep [is_max(x)].
  ((to_rep1(((x).us_split_fields1).rec__unit1__t1__c1) = 2147483647) ->
  (is_max(x) = true)))

logic next : us_rep -> us_rep

logic next__function_guard : us_rep, us_rep -> prop

logic next1 : int, us_rep -> us_rep

logic next__function_guard1 : us_rep, int, us_rep -> prop

logic bump__specific_post : int, us_split_fields, int,
  us_split_fields -> prop

axiom unit1__t1__compat_axiom5 :
  (forall unit1__bump__x__fields:us_split_fields.
  forall unit1__bump__x__old__fields:us_split_fields.
  (forall x__attr__tag:int [bump__specific_post(us_tag,
  unit1__bump__x__fields, x__attr__tag, unit1__bump__x__old__fields)].
  (bump__specific_post(us_tag, unit1__bump__x__fields, x__attr__tag,
  unit1__bump__x__old__fields) -> (to_rep1((({ us_split_fields1 =
  unit1__bump__x__fields; attr__tag = x__attr__tag
  }).us_split_fields1).rec__unit1__t1__c1) = (to_rep1((({ us_split_fields1 =
  unit1__bump__x__old__fields; attr__tag = x__attr__tag
  }).us_split_fields1).rec__unit1__t1__c1) + 1)))))

axiom unit2__t2__compat_axiom6 :
  (forall unit1__bump__x__fields:us_split_fields.
  forall unit1__bump__x__old__fields:us_split_fields.
  (forall x__attr__tag:int [bump__specific_post(us_tag1,
  unit1__bump__x__fields, x__attr__tag, unit1__bump__x__old__fields)].
  (bump__specific_post(us_tag1, unit1__bump__x__fields, x__attr__tag,
  unit1__bump__x__old__fields) -> (to_rep1(((of_base({ us_split_fields1 =
  unit1__bump__x__fields; attr__tag = x__attr__tag
  })).us_split_fields3).rec__unit1__t1__c11) = (to_rep1(((of_base({
  us_split_fields1 = unit1__bump__x__old__fields; attr__tag = x__attr__tag
  })).us_split_fields3).rec__unit1__t1__c11) + 1)))))

axiom unit2__t2__compat_axiom7 :
  (forall unit1__bump__x__fields:us_split_fields.
  forall unit1__bump__x__old__fields:us_split_fields.
  (forall x__attr__tag:int [bump__specific_post(us_tag1,
  unit1__bump__x__fields, x__attr__tag, unit1__bump__x__old__fields)].
  (bump__specific_post(us_tag1, unit1__bump__x__fields, x__attr__tag,
  unit1__bump__x__old__fields) -> (to_rep1(((of_base({ us_split_fields1 =
  unit1__bump__x__fields; attr__tag = x__attr__tag
  })).us_split_fields3).rec__unit2__t2__c2) = (to_rep1(((of_base({
  us_split_fields1 = unit1__bump__x__old__fields; attr__tag = x__attr__tag
  })).us_split_fields3).rec__unit2__t2__c2) + 1)))))

axiom unit2__t2__compat_axiom8 :
  (forall x:us_rep1 [is_zero3(us_tag1, x)].
  (is_zero__function_guard3(is_zero3(us_tag1, x), us_tag1, x) ->
  (forall x1:us_rep1. is_zero__function_guard2(is_zero2(x1), x1))))

axiom unit2__t2__compat_axiom9 :
  (forall x:us_rep1 [is_zero3(us_tag1, x)].
  (is_zero__function_guard3(is_zero3(us_tag1, x), us_tag1, x) ->
  (to_int(is_zero2(x)) = to_int(is_zero3(us_tag1, x)))))

axiom is_zero__def_axiom2 :
  (forall x:us_rep1. is_zero__function_guard(is_zero(to_base(x)),
  to_base(x)))

axiom is_zero__def_axiom3 :
  (forall x:us_rep1 [is_zero2(x)]. ((is_zero2(x) = true) ->
  (is_zero(to_base(x)) = true)))

axiom is_zero__def_axiom4 :
  (forall x:us_rep1 [is_zero2(x)]. ((is_zero2(x) = true) ->
  (to_rep1(((x).us_split_fields3).rec__unit2__t2__c2) = 0)))

axiom is_zero__def_axiom5 :
  (forall x:us_rep1 [is_zero2(x)]. (((is_zero(to_base(x)) = true) and
  (to_rep1(((x).us_split_fields3).rec__unit2__t2__c2) = 0)) ->
  (is_zero2(x) = true)))

logic create__specific_post1 : int, us_split_fields2, int,
  us_split_fields2 -> prop

axiom unit2__t2__compat_axiom10 :
  (forall unit2__create__x__fields:us_split_fields2.
  forall unit2__create__x__old__fields:us_split_fields2.
  (forall x__attr__tag:int [create__specific_post1(us_tag1,
  unit2__create__x__fields, x__attr__tag, unit2__create__x__old__fields)].
  (create__specific_post1(us_tag1, unit2__create__x__fields, x__attr__tag,
  unit2__create__x__old__fields) -> (to_rep1((({ us_split_fields3 =
  unit2__create__x__fields; attr__tag1 = x__attr__tag
  }).us_split_fields3).rec__unit1__t1__c11) = 0))))

axiom unit2__t2__compat_axiom11 :
  (forall unit2__create__x__fields:us_split_fields2.
  forall unit2__create__x__old__fields:us_split_fields2.
  (forall x__attr__tag:int [create__specific_post1(us_tag1,
  unit2__create__x__fields, x__attr__tag, unit2__create__x__old__fields)].
  (create__specific_post1(us_tag1, unit2__create__x__fields, x__attr__tag,
  unit2__create__x__old__fields) -> (to_rep1((({ us_split_fields3 =
  unit2__create__x__fields; attr__tag1 = x__attr__tag
  }).us_split_fields3).rec__unit2__t2__c2) = 0))))

axiom unit2__t2__compat_axiom12 :
  (forall x:us_rep1 [is_max3(us_tag1, x)].
  (is_max__function_guard3(is_max3(us_tag1, x), us_tag1, x) ->
  (forall x1:us_rep1. is_max__function_guard2(is_max2(x1), x1))))

axiom unit2__t2__compat_axiom13 :
  (forall x:us_rep1 [is_max3(us_tag1, x)].
  (is_max__function_guard3(is_max3(us_tag1, x), us_tag1, x) ->
  (to_int(is_max2(x)) = to_int(is_max3(us_tag1, x)))))

axiom is_max__def_axiom2 :
  (forall x:us_rep1. is_max__function_guard(is_max(to_base(x)), to_base(x)))

axiom is_max__def_axiom3 :
  (forall x:us_rep1 [is_max2(x)]. ((is_max2(x) = true) ->
  ((is_max(to_base(x)) = true) or
  (to_rep1(((x).us_split_fields3).rec__unit2__t2__c2) = 2147483647))))

axiom is_max__def_axiom4 :
  (forall x:us_rep1 [is_max2(x)]. (((is_max(to_base(x)) = true) or
  (to_rep1(((x).us_split_fields3).rec__unit2__t2__c2) = 2147483647)) ->
  (is_max2(x) = true)))

logic next2 : us_rep1 -> us_rep1

logic next__function_guard2 : us_rep1, us_rep1 -> prop

logic next3 : int, us_rep1 -> us_rep1

logic next__function_guard3 : us_rep1, int, us_rep1 -> prop

logic bump__specific_post1 : int, us_split_fields2, int,
  us_split_fields2 -> prop

axiom unit2__t2__compat_axiom14 :
  (forall unit2__bump__x__fields:us_split_fields2.
  forall unit2__bump__x__old__fields:us_split_fields2.
  (forall x__attr__tag:int [bump__specific_post1(us_tag1,
  unit2__bump__x__fields, x__attr__tag, unit2__bump__x__old__fields)].
  (bump__specific_post1(us_tag1, unit2__bump__x__fields, x__attr__tag,
  unit2__bump__x__old__fields) -> (to_rep1((({ us_split_fields3 =
  unit2__bump__x__fields; attr__tag1 = x__attr__tag
  }).us_split_fields3).rec__unit1__t1__c11) = (to_rep1((({ us_split_fields3 =
  unit2__bump__x__old__fields; attr__tag1 = x__attr__tag
  }).us_split_fields3).rec__unit1__t1__c11) + 1)))))

axiom unit2__t2__compat_axiom15 :
  (forall unit2__bump__x__fields:us_split_fields2.
  forall unit2__bump__x__old__fields:us_split_fields2.
  (forall x__attr__tag:int [bump__specific_post1(us_tag1,
  unit2__bump__x__fields, x__attr__tag, unit2__bump__x__old__fields)].
  (bump__specific_post1(us_tag1, unit2__bump__x__fields, x__attr__tag,
  unit2__bump__x__old__fields) -> (to_rep1((({ us_split_fields3 =
  unit2__bump__x__fields; attr__tag1 = x__attr__tag
  }).us_split_fields3).rec__unit2__t2__c2) = (to_rep1((({ us_split_fields3 =
  unit2__bump__x__old__fields; attr__tag1 = x__attr__tag
  }).us_split_fields3).rec__unit2__t2__c2) + 1)))))

logic line_length : us_private, us_private, us_private, us_private,
  us_private, us_private, us_private -> int

logic line_length__function_guard : int, us_private, us_private, us_private,
  us_private, us_private, us_private, us_private -> prop

logic page_length : us_private, us_private, us_private, us_private,
  us_private, us_private, us_private -> int

logic page_length__function_guard : int, us_private, us_private, us_private,
  us_private, us_private, us_private, us_private -> prop

logic temp___String_Literal_270 : unit -> (int,character) farray

axiom temp___String_Literal_270__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_270(us_void_param)].
  (to_rep((temp___String_Literal_270(us_void_param)[1])) = 83))

axiom temp___String_Literal_270__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_270(us_void_param)].
  (to_rep((temp___String_Literal_270(us_void_param)[2])) = 117))

axiom temp___String_Literal_270__def_axiom2 :
  (forall us_void_param:unit [temp___String_Literal_270(us_void_param)].
  (to_rep((temp___String_Literal_270(us_void_param)[3])) = 99))

axiom temp___String_Literal_270__def_axiom3 :
  (forall us_void_param:unit [temp___String_Literal_270(us_void_param)].
  (to_rep((temp___String_Literal_270(us_void_param)[4])) = 99))

axiom temp___String_Literal_270__def_axiom4 :
  (forall us_void_param:unit [temp___String_Literal_270(us_void_param)].
  (to_rep((temp___String_Literal_270(us_void_param)[5])) = 101))

axiom temp___String_Literal_270__def_axiom5 :
  (forall us_void_param:unit [temp___String_Literal_270(us_void_param)].
  (to_rep((temp___String_Literal_270(us_void_param)[6])) = 115))

axiom temp___String_Literal_270__def_axiom6 :
  (forall us_void_param:unit [temp___String_Literal_270(us_void_param)].
  (to_rep((temp___String_Literal_270(us_void_param)[7])) = 115))

axiom temp___String_Literal_270__def_axiom7 :
  (forall us_void_param:unit [temp___String_Literal_270(us_void_param)].
  (to_rep((temp___String_Literal_270(us_void_param)[8])) = 33))

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

predicate dynamic_invariant1(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range1(temp___expr_46))

predicate dynamic_invariant2(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range2(temp___expr_74))

predicate dynamic_invariant3(temp___expr_96: us_t, temp___is_init_92: bool,
  temp___skip_constant_93: bool, temp___do_toplevel_94: bool,
  temp___do_typ_inv_95: bool) = ((not (temp___skip_constant_93 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_96),
  last1(temp___expr_96)))

axiom unit1__t1__compat_axiom6 :
  (forall x:us_rep [next1(us_tag, x)]. (next__function_guard1(next1(us_tag,
  x), us_tag, x) -> (forall x1:us_rep. next__function_guard(next(x1), x1))))

axiom unit1__t1__compat_axiom7 :
  (forall x:us_rep [next1(us_tag, x)]. (next__function_guard1(next1(us_tag,
  x), us_tag, x) -> (next(x) = next1(us_tag, x))))

axiom unit2__t2__compat_axiom16 :
  (forall x:us_rep [next1(us_tag1, x)]. (next__function_guard1(next1(us_tag1,
  x), us_tag1, x) ->
  (forall x1:us_rep. next__function_guard2(next2(of_base(x1)), of_base(x1)))))

axiom unit2__t2__compat_axiom17 :
  (forall x:us_rep [next1(us_tag1, x)]. (next__function_guard1(next1(us_tag1,
  x), us_tag1, x) -> (to_base(next2(of_base(x))) = next1(us_tag1, x))))

axiom unit2__t2__compat_axiom18 :
  (forall x:us_rep1 [next3(us_tag1, x)].
  (next__function_guard3(next3(us_tag1, x), us_tag1, x) ->
  (forall x1:us_rep1. next__function_guard2(next2(x1), x1))))

axiom unit2__t2__compat_axiom19 :
  (forall x:us_rep1 [next3(us_tag1, x)].
  (next__function_guard3(next3(us_tag1, x), us_tag1, x) ->
  (next2(x) = next3(us_tag1, x))))

type count

logic countqtint : count -> int

axiom countqtaxiom : (forall i:count. (0 <= countqtint(i)))

axiom countqtaxiom1 : (forall i:count. (countqtint(i) <= 2147483647))

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq6 : count, count -> bool

logic dummy6 : count

type count__ref = { count__content : count
}

function count__ref_count__content__projection(a: count__ref) : count =
  (a).count__content

predicate dynamic_invariant4(temp___expr_166: int, temp___is_init_162: bool,
  temp___skip_constant_163: bool, temp___do_toplevel_164: bool,
  temp___do_typ_inv_165: bool) = (((temp___is_init_162 = true) or
  (0 <= 2147483647)) -> in_range4(temp___expr_166))

axiom line_length__post_axiom :
  (forall ada___ada__text_io__standard_in:us_private.
  forall ada___ada__text_io__file_system:us_private.
  forall ada___ada__text_io__standard_out:us_private.
  forall ada___ada__text_io__standard_err:us_private.
  forall ada___ada__text_io__current_in:us_private.
  forall ada___ada__text_io__current_out:us_private.
  forall ada___ada__text_io__current_err:us_private
  [line_length(ada___ada__text_io__standard_in,
  ada___ada__text_io__file_system, ada___ada__text_io__standard_out,
  ada___ada__text_io__standard_err, ada___ada__text_io__current_in,
  ada___ada__text_io__current_out, ada___ada__text_io__current_err)].
  dynamic_invariant4(line_length(ada___ada__text_io__standard_in,
  ada___ada__text_io__file_system, ada___ada__text_io__standard_out,
  ada___ada__text_io__standard_err, ada___ada__text_io__current_in,
  ada___ada__text_io__current_out, ada___ada__text_io__current_err), true,
  false, true, true))

axiom page_length__post_axiom :
  (forall ada___ada__text_io__standard_in:us_private.
  forall ada___ada__text_io__file_system:us_private.
  forall ada___ada__text_io__standard_out:us_private.
  forall ada___ada__text_io__standard_err:us_private.
  forall ada___ada__text_io__current_in:us_private.
  forall ada___ada__text_io__current_out:us_private.
  forall ada___ada__text_io__current_err:us_private
  [page_length(ada___ada__text_io__standard_in,
  ada___ada__text_io__file_system, ada___ada__text_io__standard_out,
  ada___ada__text_io__standard_err, ada___ada__text_io__current_in,
  ada___ada__text_io__current_out, ada___ada__text_io__current_err)].
  dynamic_invariant4(page_length(ada___ada__text_io__standard_in,
  ada___ada__text_io__file_system, ada___ada__text_io__standard_out,
  ada___ada__text_io__standard_err, ada___ada__text_io__current_in,
  ada___ada__text_io__current_out, ada___ada__text_io__current_err), true,
  false, true, true))

 (* File "main.adb", line 5, characters 0-0 *)
goal defqtvc :
  (forall x1__split_fields:us_split_fields.
  forall x2__split_fields:us_split_fields2. (default_initial_assumption({
  us_split_fields1 = x1__split_fields; attr__tag = x1__attr__tag }, false) ->
  (default_initial_assumption1({ us_split_fields3 = x2__split_fields;
  attr__tag1 = x2__attr__tag }, false) ->
  (forall x1__split_fields1:us_split_fields.
  ((to_rep1((x1__split_fields1).rec__unit1__t1__c1) = 0) ->
  ((forall x1__split_fields2:us_split_fields.
   is_zero__function_guard(is_zero({ us_split_fields1 = x1__split_fields2;
   attr__tag = x1__attr__tag }), { us_split_fields1 = x1__split_fields2;
   attr__tag = x1__attr__tag })) ->
  ((is_zero({ us_split_fields1 = x1__split_fields1; attr__tag = x1__attr__tag
  }) = true) ->
  ((forall x1__split_fields2:us_split_fields. forall o:int.
   is_max__function_guard(is_max({ us_split_fields1 = x1__split_fields2;
   attr__tag = o }), { us_split_fields1 = x1__split_fields2; attr__tag = o
   })) ->
  (not (is_max({ us_split_fields1 = x1__split_fields1; attr__tag =
  x1__attr__tag }) = true))))))))))
