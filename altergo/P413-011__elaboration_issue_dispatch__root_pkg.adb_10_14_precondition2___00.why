(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type us_split_fields = { rec__ext__ : us_private
}

function us_split_fields_rec__ext____projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__projection(a: us_rep) : int = (a).attr__tag

function bool_eq(a: us_rep, b: us_rep) : bool =
  (if true then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type root__ref = { root__content : us_rep
}

function root__ref_root__content__projection(a: root__ref) : us_rep =
  (a).root__content

logic get : us_rep, bool -> bool

logic get__function_guard : bool, us_rep, bool -> prop

logic get1 : int, us_rep, bool -> bool

logic get__function_guard1 : bool, int, us_rep, bool -> prop

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic attr__ATTRIBUTE_ADDRESS : int

predicate default_initial_assumption(temp___expr_162: us_rep,
  temp___skip_top_level_163: bool) = ((temp___expr_162).attr__tag = us_tag)

axiom root_pkg__root__compat_axiom :
  (forall x:us_rep.
  (forall extension_pkg__body_elaborated:bool [get1(us_tag, x,
  extension_pkg__body_elaborated)]. (get__function_guard1(get1(us_tag, x,
  extension_pkg__body_elaborated), us_tag, x,
  extension_pkg__body_elaborated) ->
  (forall x1:us_rep. forall extension_pkg__body_elaborated1:bool.
  get__function_guard(get(x1, extension_pkg__body_elaborated1), x1,
  extension_pkg__body_elaborated1)))))

axiom root_pkg__root__compat_axiom1 :
  (forall x:us_rep.
  (forall extension_pkg__body_elaborated:bool [get1(us_tag, x,
  extension_pkg__body_elaborated)]. (get__function_guard1(get1(us_tag, x,
  extension_pkg__body_elaborated), us_tag, x,
  extension_pkg__body_elaborated) -> (to_int(get(x,
  extension_pkg__body_elaborated)) = to_int(get1(us_tag, x,
  extension_pkg__body_elaborated))))))

axiom get__def_axiom :
  (forall x:us_rep.
  (forall extension_pkg__body_elaborated:bool [get(x,
  extension_pkg__body_elaborated)]. (get(x,
  extension_pkg__body_elaborated) = true)))

logic op : us_rep, bool -> bool

logic op__function_guard : bool, us_rep, bool -> prop

logic op1 : int, us_rep, bool -> bool

logic op__function_guard1 : bool, int, us_rep, bool -> prop

axiom op__post_axiom :
  (forall x:us_rep. forall extension_pkg__body_elaborated:bool.
  get__function_guard(get(x, extension_pkg__body_elaborated), x,
  extension_pkg__body_elaborated))

axiom op__post__dispatch_axiom :
  (forall x:us_rep. forall extension_pkg__body_elaborated:bool.
  get__function_guard1(get1((x).attr__tag, x,
  extension_pkg__body_elaborated), (x).attr__tag, x,
  extension_pkg__body_elaborated))

axiom root_pkg__root__compat_axiom2 :
  (forall x:us_rep.
  (forall extension_pkg__body_elaborated:bool [op1(us_tag, x,
  extension_pkg__body_elaborated)]. (op__function_guard1(op1(us_tag, x,
  extension_pkg__body_elaborated), us_tag, x,
  extension_pkg__body_elaborated) ->
  (forall x1:us_rep. forall extension_pkg__body_elaborated1:bool.
  op__function_guard(op(x1, extension_pkg__body_elaborated1), x1,
  extension_pkg__body_elaborated1)))))

axiom root_pkg__root__compat_axiom3 :
  (forall x:us_rep.
  (forall extension_pkg__body_elaborated:bool [op1(us_tag, x,
  extension_pkg__body_elaborated)]. (op__function_guard1(op1(us_tag, x,
  extension_pkg__body_elaborated), us_tag, x,
  extension_pkg__body_elaborated) -> (to_int(op(x,
  extension_pkg__body_elaborated)) = to_int(op1(us_tag, x,
  extension_pkg__body_elaborated))))))

logic y : us_rep

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "root_pkg.ads", line 9, characters 0-0 *)
goal defqtvc :
  (forall body_elaborated:bool.
  ((forall body_elaborated1:bool. get__function_guard1(get1((y).attr__tag, y,
   body_elaborated1), (y).attr__tag, y, body_elaborated1)) ->
  ((get1((y).attr__tag, y, body_elaborated) = true) -> (let o = y : us_rep in
  ((forall body_elaborated1:bool. forall o1:us_rep.
   get__function_guard1(get1((o1).attr__tag, o1, body_elaborated1),
   (o1).attr__tag, o1, body_elaborated1)) ->
  (get1((o).attr__tag, o, body_elaborated) = true))))))
