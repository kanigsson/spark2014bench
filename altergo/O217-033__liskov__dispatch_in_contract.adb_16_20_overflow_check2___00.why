(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__dispatch_in_contract__root__f1 : integer;
rec__ext__ : us_private
}

function us_split_fields_rec__dispatch_in_contract__root__f1__projection(a: us_split_fields) : integer =
  (a).rec__dispatch_in_contract__root__f1

function us_split_fields_rec__ext____projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__projection(a: us_rep) : int = (a).attr__tag

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__dispatch_in_contract__root__f1) = to_rep(((b).us_split_fields1).rec__dispatch_in_contract__root__f1)) then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic dispatch_in_contract__root__f1__first__bit : int

logic dispatch_in_contract__root__f1__last__bit : int

logic dispatch_in_contract__root__f1__position : int

axiom dispatch_in_contract__root__f1__first__bit_axiom :
  (0 <= dispatch_in_contract__root__f1__first__bit)

axiom dispatch_in_contract__root__f1__last__bit_axiom :
  (dispatch_in_contract__root__f1__first__bit <  dispatch_in_contract__root__f1__last__bit)

axiom dispatch_in_contract__root__f1__position_axiom :
  (0 <= dispatch_in_contract__root__f1__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type root__ref = { root__content : us_rep
}

function root__ref_root__content__projection(a: root__ref) : us_rep =
  (a).root__content

type us_split_fields2 = { rec__dispatch_in_contract__child__f2 : integer;
rec__dispatch_in_contract__root__f11 : integer; rec__ext__1 : us_private
}

function us_split_fields_rec__dispatch_in_contract__child__f2__projection(a: us_split_fields2) : integer =
  (a).rec__dispatch_in_contract__child__f2

function us_split_fields_rec__dispatch_in_contract__root__f1__2__projection(a: us_split_fields2) : integer =
  (a).rec__dispatch_in_contract__root__f11

function us_split_fields_rec__ext____2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_attr__tag__2__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : integer, us_private -> us_private

logic extract__dispatch_in_contract__child__f2 : us_private -> integer

axiom extract__dispatch_in_contract__child__f2__conv :
  (forall dispatch_in_contract__child__f2:integer.
  (forall rec__ext__2:us_private.
  (extract__dispatch_in_contract__child__f2(hide_ext__(dispatch_in_contract__child__f2,
  rec__ext__2)) = dispatch_in_contract__child__f2)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__dispatch_in_contract__root__f1 =
  ((a).us_split_fields3).rec__dispatch_in_contract__root__f11; rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__dispatch_in_contract__child__f2,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__dispatch_in_contract__child__f2 =
  extract__dispatch_in_contract__child__f2(((r).us_split_fields1).rec__ext__);
  rec__dispatch_in_contract__root__f11 =
  ((r).us_split_fields1).rec__dispatch_in_contract__root__f1; rec__ext__1 =
  extract__ext__(((r).us_split_fields1).rec__ext__) }; attr__tag1 =
  (r).attr__tag }

function bool_eq2(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep(((a).us_split_fields3).rec__dispatch_in_contract__child__f2) = to_rep(((b).us_split_fields3).rec__dispatch_in_contract__child__f2)) and
  (to_rep(((a).us_split_fields3).rec__dispatch_in_contract__root__f11) = to_rep(((b).us_split_fields3).rec__dispatch_in_contract__root__f11))) then true else false)

logic us_tag1 : int

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic dispatch_in_contract__root__f1__first__bit1 : int

logic dispatch_in_contract__root__f1__last__bit1 : int

logic dispatch_in_contract__root__f1__position1 : int

axiom dispatch_in_contract__root__f1__first__bit_axiom1 :
  (0 <= dispatch_in_contract__root__f1__first__bit1)

axiom dispatch_in_contract__root__f1__last__bit_axiom1 :
  (dispatch_in_contract__root__f1__first__bit1 <  dispatch_in_contract__root__f1__last__bit1)

axiom dispatch_in_contract__root__f1__position_axiom1 :
  (0 <= dispatch_in_contract__root__f1__position1)

logic dispatch_in_contract__child__f2__first__bit : int

logic dispatch_in_contract__child__f2__last__bit : int

logic dispatch_in_contract__child__f2__position : int

axiom dispatch_in_contract__child__f2__first__bit_axiom :
  (0 <= dispatch_in_contract__child__f2__first__bit)

axiom dispatch_in_contract__child__f2__last__bit_axiom :
  (dispatch_in_contract__child__f2__first__bit <  dispatch_in_contract__child__f2__last__bit)

axiom dispatch_in_contract__child__f2__position_axiom :
  (0 <= dispatch_in_contract__child__f2__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy2 : us_rep1

type grand_child__ref = { grand_child__content : us_rep1
}

function grand_child__ref_grand_child__content__projection(a: grand_child__ref) : us_rep1 =
  (a).grand_child__content

logic less_than_max : us_rep1 -> bool

logic less_than_max__function_guard : bool, us_rep1 -> prop

logic less_than_max1 : int, us_rep1 -> bool

logic less_than_max__function_guard1 : bool, int, us_rep1 -> prop

logic o__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

predicate default_initial_assumption(temp___expr_203: us_rep1,
  temp___skip_top_level_204: bool) = ((temp___expr_203).attr__tag1 = us_tag1)

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq3(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range1(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE1 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> bool

axiom dispatch_in_contract__grand_child__compat_axiom :
  (forall o:us_rep1 [less_than_max1(us_tag1, o)].
  (less_than_max__function_guard1(less_than_max1(us_tag1, o), us_tag1, o) ->
  (forall o1:us_rep1. less_than_max__function_guard(less_than_max(o1), o1))))

axiom dispatch_in_contract__grand_child__compat_axiom1 :
  (forall o:us_rep1 [less_than_max1(us_tag1, o)].
  (less_than_max__function_guard1(less_than_max1(us_tag1, o), us_tag1, o) ->
  (to_int(less_than_max(o)) = to_int(less_than_max1(us_tag1, o)))))

axiom less_than_max__def_axiom :
  (forall o:us_rep1 [less_than_max(o)]. ((less_than_max(o) = true) ->
  (to_rep(((o).us_split_fields3).rec__dispatch_in_contract__root__f11) <  2147483647)))

axiom less_than_max__def_axiom1 :
  (forall o:us_rep1 [less_than_max(o)].
  ((to_rep(((o).us_split_fields3).rec__dispatch_in_contract__root__f11) <  2147483647) ->
  (less_than_max(o) = true)))

 (* File "dispatch_in_contract.ads", line 27, characters 0-0 *)
goal defqtvc :
  (forall o__split_fields:us_split_fields2.
  ((forall o__split_fields1:us_split_fields2.
   less_than_max__function_guard(less_than_max({ us_split_fields3 =
   o__split_fields1; attr__tag1 = o__attr__tag }), { us_split_fields3 =
   o__split_fields1; attr__tag1 = o__attr__tag })) ->
  (((less_than_max({ us_split_fields3 = o__split_fields; attr__tag1 =
  o__attr__tag }) = true) and
  (to_rep((o__split_fields).rec__dispatch_in_contract__child__f2) <  2147483647)) ->
  (forall o:int.
  ((to_rep((o__split_fields).rec__dispatch_in_contract__root__f11) = o) ->
  in_range((o + 1)))))))
