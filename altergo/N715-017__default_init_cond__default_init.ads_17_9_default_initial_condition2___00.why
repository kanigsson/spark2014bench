(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range1(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE1 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> bool

type us_split_discrs = { rec__default_init__discr__b : bool
}

function us_split_discrs_rec__default_init__discr__b__projection(a: us_split_discrs) : bool =
  (a).rec__default_init__discr__b

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__default_init__discr__f : natural
}

function us_split_fields_rec__default_init__discr__f__projection(a: us_split_fields) : natural =
  (a).rec__default_init__discr__f

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__4__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__4__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

predicate default_init__discr__f__pred(a: us_rep) =
  (to_int(((a).us_split_discrs1).rec__default_init__discr__b) = 1)

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if ((to_int(((a).us_split_discrs1).rec__default_init__discr__b) = to_int(((b).us_split_discrs1).rec__default_init__discr__b)) and
  (default_init__discr__f__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__default_init__discr__f) = to_rep(((b).us_split_fields1).rec__default_init__discr__f)))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic default_init__discr__b__first__bit : int

logic default_init__discr__b__last__bit : int

logic default_init__discr__b__position : int

axiom default_init__discr__b__first__bit_axiom :
  (0 <= default_init__discr__b__first__bit)

axiom default_init__discr__b__last__bit_axiom :
  (default_init__discr__b__first__bit <  default_init__discr__b__last__bit)

axiom default_init__discr__b__position_axiom :
  (0 <= default_init__discr__b__position)

logic default_init__discr__f__first__bit : int

logic default_init__discr__f__last__bit : int

logic default_init__discr__f__position : int

axiom default_init__discr__f__first__bit_axiom :
  (0 <= default_init__discr__f__first__bit)

axiom default_init__discr__f__last__bit_axiom :
  (default_init__discr__f__first__bit <  default_init__discr__f__last__bit)

axiom default_init__discr__f__position_axiom :
  (0 <= default_init__discr__f__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type discr__ref = { discr__content : us_rep
}

function discr__ref_discr__content__projection(a: discr__ref) : us_rep =
  (a).discr__content

logic discr_ok : us_rep -> bool

logic discr_ok__function_guard : bool, us_rep -> prop

axiom discr_ok__def_axiom :
  (forall x:us_rep [discr_ok(x)]. ((discr_ok(x) = true) ->
  ((((x).us_split_discrs1).rec__default_init__discr__b = true) ->
  (to_rep(((x).us_split_fields1).rec__default_init__discr__f) = 0))))

axiom discr_ok__def_axiom1 :
  (forall x:us_rep [discr_ok(x)].
  (((((x).us_split_discrs1).rec__default_init__discr__b = true) ->
  (to_rep(((x).us_split_fields1).rec__default_init__discr__f) = 0)) ->
  (discr_ok(x) = true)))

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_39))

 (* File "/home/kanig/dev/spark2014/benchmark_script/data/tmp-test-N715-017__default_init_cond-15375/src/gnatprove/default_init__discr.mlw", line 389, characters 5-8 *)
goal defqtvc :
  (forall usf:us_rep.
  ((forall usf1:us_rep. discr_ok__function_guard(discr_ok(usf1), usf1)) ->
  ((default_init__discr__f__pred(usf) ->
  (to_rep(((usf).us_split_fields1).rec__default_init__discr__f) = 0)) ->
  ((forall usf1:us_rep. discr_ok__function_guard(discr_ok(usf1), usf1)) ->
  (discr_ok(usf) = true)))))
