(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic a : int

logic attr__ATTRIBUTE_ADDRESS : int

logic b : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type small

logic smallqtint : small -> int

axiom smallqtaxiom : (forall i:small. (1 <= smallqtint(i)))

axiom smallqtaxiom1 : (forall i:small. (smallqtint(i) <= 10))

predicate in_range(x: int) = ((1 <= x) and (x <= 10))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : small, small -> bool

logic dummy : small

type small__ref = { small__content : small
}

function small__ref_small__content__projection(a1: small__ref) : small =
  (a1).small__content

predicate dynamic_invariant(temp___expr_158: int, temp___is_init_154: bool,
  temp___skip_constant_155: bool, temp___do_toplevel_156: bool,
  temp___do_typ_inv_157: bool) = (((temp___is_init_154 = true) or
  (1 <= 10)) -> in_range(temp___expr_158))

type big

logic bigqtint : big -> int

axiom bigqtaxiom : (forall i:big. (1 <= bigqtint(i)))

axiom bigqtaxiom1 : (forall i:big. (bigqtint(i) <= 21))

predicate in_range1(x: int) = ((1 <= x) and (x <= 21))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : big, big -> bool

logic dummy1 : big

type big__ref = { big__content : big
}

function big__ref_big__content__projection(a1: big__ref) : big =
  (a1).big__content

predicate dynamic_invariant1(temp___expr_165: int, temp___is_init_161: bool,
  temp___skip_constant_162: bool, temp___do_toplevel_163: bool,
  temp___do_typ_inv_164: bool) = (((temp___is_init_161 = true) or
  (1 <= 21)) -> in_range1(temp___expr_165))

 (* File "check_14.ads", line 7, characters 0-0 *)
goal defqtvc :
  (forall c:int. (dynamic_invariant(a, true, false, true, true) ->
  (dynamic_invariant(b, true, false, true, true) -> (dynamic_invariant1(c,
  true, false, true, true) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (c <= (a + b)) then true else false)) ->
  ((spark__branch = true) ->
  (forall c1:int. ((c1 = a) -> (let o = (c1 + b) : int in (in_range1(o) ->
  (forall c2:int. ((c2 = o) -> in_range1((c2 + 1)))))))))))))))
