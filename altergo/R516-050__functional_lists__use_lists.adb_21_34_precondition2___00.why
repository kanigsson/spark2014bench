(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq3 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type cursor__ref = { cursor__content : us_rep
}

function cursor__ref_cursor__content__projection(a: cursor__ref) : us_rep =
  (a).cursor__content

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_split_fields = { rec__use_lists__my_lists__list : us_main_type1;
rec__ext__ : us_private
}

function us_split_fields_rec__use_lists__my_lists__list__projection(a: us_split_fields) : us_main_type1 =
  (a).rec__use_lists__my_lists__list

function us_split_fields_rec__ext____4__projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__5__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___split_fields__5__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__4__projection(a: us_rep1) : int = (a).attr__tag

logic us_dispatch_eq : us_rep1, us_rep1 -> bool

logic us_tag : int

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type list__ref = { list__content : us_rep1
}

function list__ref_list__content__3__projection(a: list__ref) : us_rep1 =
  (a).list__content

logic length : us_rep1 -> int

logic length__function_guard : int, us_rep1 -> prop

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

logic capacity : us_rep1 -> int

logic capacity__function_guard : int, us_rep1 -> prop

axiom length__post_axiom :
  (forall l:us_rep1 [length(l)]. in_range2(length(l)))

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep2

logic bool_eq4 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic user_eq4 : us_rep2, us_rep2 -> bool

logic dummy4 : us_rep2

type sequence__ref = { sequence__content : us_rep2
}

function sequence__ref_sequence__content__projection(a: sequence__ref) : us_rep2 =
  (a).sequence__content

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : us_rep

type cursor__ref1 = { cursor__content1 : us_rep
}

function cursor__ref_cursor__content__2__projection(a: cursor__ref1) : us_rep =
  (a).cursor__content1

type element_type__ref = { element_type__content : us_rep
}

function element_type__ref_element_type__content__13__projection(a: element_type__ref) : us_rep =
  (a).element_type__content

logic find : us_rep2, us_rep, us_type_of_heap -> int

logic find__function_guard : int, us_rep2, us_rep, us_type_of_heap -> prop

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

logic get : us_rep2, int -> us_rep

logic get__function_guard : us_rep, us_rep2, int -> prop

logic length1 : us_rep2 -> int

logic length__function_guard1 : int, us_rep2 -> prop

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom find__post_axiom :
  (forall s:us_rep2.
  (forall e:us_rep.
  (forall us_HEAP:us_type_of_heap [find(s, e, us_HEAP)]. in_range1(find(s, e,
  us_HEAP)))))

type us_main_type3

logic us_main_eq3 : us_main_type3, us_main_type3 -> bool

type us_rep3

logic bool_eq5 : us_rep3, us_rep3 -> bool

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic user_eq6 : us_rep3, us_rep3 -> bool

logic dummy6 : us_rep3

type sequence__ref1 = { sequence__content1 : us_rep3
}

function sequence__ref_sequence__content__2__projection(a: sequence__ref1) : us_rep3 =
  (a).sequence__content1

logic get1 : us_rep3, int -> int

logic get__function_guard1 : int, us_rep3, int -> prop

type element_type

logic element_typeqtint : element_type -> int

axiom element_typeqtaxiom :
  (forall i:element_type. ((- 2147483648) <= element_typeqtint(i)))

axiom element_typeqtaxiom1 :
  (forall i:element_type. (element_typeqtint(i) <= 2147483647))

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq7 : element_type, element_type -> bool

logic dummy7 : element_type

type element_type__ref1 = { element_type__content1 : element_type
}

function element_type__ref_element_type__content__14__projection(a: element_type__ref1) : element_type =
  (a).element_type__content1

predicate dynamic_invariant2(temp___expr_678: int, temp___is_init_674: bool,
  temp___skip_constant_675: bool, temp___do_toplevel_676: bool,
  temp___do_typ_inv_677: bool) = (((temp___is_init_674 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range3(temp___expr_678))

axiom get__post_axiom :
  (forall s:us_rep3. (forall n:int [get1(s, n)]. in_range3(get1(s, n))))

logic get_cursor_model : us_rep1, us_type_of_heap -> us_rep2

logic get_cursor_model__function_guard : us_rep2, us_rep1,
  us_type_of_heap -> prop

logic oeq1 : us_rep2, us_rep2 -> bool

logic oeq__function_guard1 : bool, us_rep2, us_rep2 -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep2. forall b:us_rep2. oeq__function_guard1(oeq1(a, b), a,
  b))

axiom user_eq__def_axiom1 :
  (forall a:us_rep2. forall b:us_rep2 [user_eq4(a, b)]. (user_eq4(a,
  b) = oeq1(a, b)))

logic get_element_model : us_rep1, us_type_of_heap -> us_rep3

logic get_element_model__function_guard : us_rep3, us_rep1,
  us_type_of_heap -> prop

logic length2 : us_rep3 -> int

logic length__function_guard2 : int, us_rep3 -> prop

logic oeq2 : us_rep3, us_rep3 -> bool

logic oeq__function_guard2 : bool, us_rep3, us_rep3 -> prop

axiom user_eq__def_axiom2 :
  (forall a:us_rep3. forall b:us_rep3. oeq__function_guard2(oeq2(a, b), a,
  b))

axiom user_eq__def_axiom3 :
  (forall a:us_rep3. forall b:us_rep3 [user_eq6(a, b)]. (user_eq6(a,
  b) = oeq2(a, b)))

logic element : us_rep1, us_rep, us_type_of_heap -> int

logic element__function_guard : int, us_rep1, us_rep, us_type_of_heap -> prop

type element_type1

logic element_typeqtint1 : element_type1 -> int

axiom element_typeqtaxiom2 :
  (forall i:element_type1. ((- 2147483648) <= element_typeqtint1(i)))

axiom element_typeqtaxiom3 :
  (forall i:element_type1. (element_typeqtint1(i) <= 2147483647))

predicate in_range4(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq8 : element_type1, element_type1 -> bool

logic dummy8 : element_type1

type element_type__ref2 = { element_type__content2 : element_type1
}

function element_type__ref_element_type__content__projection(a: element_type__ref2) : element_type1 =
  (a).element_type__content2

predicate dynamic_invariant3(temp___expr_214: int, temp___is_init_210: bool,
  temp___skip_constant_211: bool, temp___do_toplevel_212: bool,
  temp___do_typ_inv_213: bool) = (((temp___is_init_210 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range4(temp___expr_214))

axiom element__post_axiom :
  (forall l:us_rep1.
  (forall c:us_rep.
  (forall us_HEAP:us_type_of_heap [element(l, c, us_HEAP)].
  in_range4(element(l, c, us_HEAP)))))

logic first : us_rep1, us_type_of_heap -> us_rep

logic first__function_guard : us_rep, us_rep1, us_type_of_heap -> prop

logic has_element : us_rep1, us_rep, us_type_of_heap -> bool

logic has_element__function_guard : bool, us_rep1, us_rep,
  us_type_of_heap -> prop

axiom temp___result_608qtdef :
  (forall temp___607:us_rep1. length__function_guard(length(temp___607),
  temp___607))

predicate default_initial_assumption(temp___expr_605: us_rep1,
  temp___skip_top_level_606: bool) =
  (((temp___expr_605).attr__tag = us_tag) and
  ((not (temp___skip_top_level_606 = true)) ->
  (length(temp___expr_605) = 0)))

logic snoc : us_rep2, us_rep, us_type_of_heap -> us_rep2

logic snoc__function_guard : us_rep2, us_rep2, us_rep,
  us_type_of_heap -> prop

logic snoc1 : us_rep3, int, us_type_of_heap -> us_rep3

logic snoc__function_guard1 : us_rep3, us_rep3, int, us_type_of_heap -> prop

logic is_incr : int, int -> bool

logic is_incr__function_guard : bool, int, int -> prop

axiom is_incr__def_axiom :
  (forall i1:int. forall i2:int [is_incr(i1, i2)]. ((is_incr(i1,
  i2) = true) -> ((i1 = 2147483647) -> (i2 = 2147483647))))

axiom is_incr__def_axiom1 :
  (forall i1:int. forall i2:int [is_incr(i1, i2)]. ((is_incr(i1,
  i2) = true) -> ((not (i1 = 2147483647)) -> (i2 = (i1 + 1)))))

axiom is_incr__def_axiom2 :
  (forall i1:int. forall i2:int [is_incr(i1, i2)].
  ((if (i1 = 2147483647) then (i2 = 2147483647) else (i2 = (i1 + 1))) ->
  (is_incr(i1, i2) = true)))

logic l1 : us_rep1

logic attr__ATTRIBUTE_ADDRESS : int

logic l2__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

axiom capacity__post_axiom :
  (forall l:us_rep1 [capacity(l)]. in_range2(capacity(l)))

axiom length__post_axiom1 :
  (forall s:us_rep2 [length1(s)]. in_range2(length1(s)))

axiom oeq__def_axiom :
  (forall s1:us_rep2. length__function_guard1(length1(s1), s1))

axiom oeq__def_axiom1 :
  (forall s2:us_rep2. length__function_guard1(length1(s2), s2))

axiom oeq__def_axiom2 :
  (forall s1:us_rep2. length__function_guard1(length1(s1), s1))

axiom oeq__def_axiom3 :
  (forall s1:us_rep2. forall n:int. get__function_guard(get(s1, n), s1, n))

axiom oeq__def_axiom4 :
  (forall s2:us_rep2. forall n:int. get__function_guard(get(s2, n), s2, n))

axiom oeq__def_axiom5 :
  (forall s1:us_rep2. forall s2:us_rep2 [oeq1(s1, s2)]. ((oeq1(s1,
  s2) = true) -> (length1(s1) = length1(s2))))

axiom oeq__def_axiom6 :
  (forall s1:us_rep2. forall s2:us_rep2 [oeq1(s1, s2)]. ((oeq1(s1,
  s2) = true) ->
  (forall n:int. (((0 <= n) and (n <= (length1(s1) - 1))) ->
  (bool_eq3(get(s1, n), get(s2, n)) = true)))))

axiom oeq__def_axiom7 :
  (forall s1:us_rep2. forall s2:us_rep2 [oeq1(s1, s2)].
  (((length1(s1) = length1(s2)) and
  (forall n:int. (((0 <= n) and (n <= (length1(s1) - 1))) ->
  (bool_eq3(get(s1, n), get(s2, n)) = true)))) -> (oeq1(s1, s2) = true)))

axiom length__post_axiom2 :
  (forall s:us_rep3 [length2(s)]. in_range2(length2(s)))

axiom oeq__def_axiom8 :
  (forall s1:us_rep3. length__function_guard2(length2(s1), s1))

axiom oeq__def_axiom9 :
  (forall s2:us_rep3. length__function_guard2(length2(s2), s2))

axiom oeq__def_axiom10 :
  (forall s1:us_rep3. length__function_guard2(length2(s1), s1))

axiom oeq__def_axiom11 :
  (forall s1:us_rep3. forall n:int. get__function_guard1(get1(s1, n), s1, n))

axiom oeq__def_axiom12 :
  (forall s2:us_rep3. forall n:int. get__function_guard1(get1(s2, n), s2, n))

axiom oeq__def_axiom13 :
  (forall s1:us_rep3. forall s2:us_rep3 [oeq2(s1, s2)]. ((oeq2(s1,
  s2) = true) -> (length2(s1) = length2(s2))))

axiom oeq__def_axiom14 :
  (forall s1:us_rep3. forall s2:us_rep3 [oeq2(s1, s2)]. ((oeq2(s1,
  s2) = true) ->
  (forall n:int. (((0 <= n) and (n <= (length2(s1) - 1))) -> (get1(s1,
  n) = get1(s2, n))))))

axiom oeq__def_axiom15 :
  (forall s1:us_rep3. forall s2:us_rep3 [oeq2(s1, s2)].
  (((length2(s1) = length2(s2)) and
  (forall n:int. (((0 <= n) and (n <= (length2(s1) - 1))) -> (get1(s1,
  n) = get1(s2, n))))) -> (oeq2(s1, s2) = true)))

 (* File "use_lists.ads", line 16, characters 0-0 *)
goal defqtvc :
  (forall l2__split_fields:us_split_fields. (let o = l1 : us_rep1 in
  (forall us_HEAP:us_type_of_heap. (let o1 = first(o, us_HEAP) : us_rep in
  ((forall o2:us_rep1. length__function_guard(length(o2), o2)) ->
  ((forall o2:us_rep1. forall us_HEAP1:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model(o2, us_HEAP1), o2,
   us_HEAP1)) ->
  ((forall o2:us_rep1. forall us_HEAP1:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model(o2, us_HEAP1), o2,
   us_HEAP1)) ->
  ((forall o2:us_rep1. forall us_HEAP1:us_type_of_heap. forall o3:us_rep.
   find__function_guard(find(get_cursor_model(o2, us_HEAP1), o3, us_HEAP1),
   get_cursor_model(o2, us_HEAP1), o3, us_HEAP1)) ->
  ((forall o2:us_rep1. forall us_HEAP1:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model(o2, us_HEAP1), o2,
   us_HEAP1)) ->
  ((forall o2:us_rep1. forall us_HEAP1:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model(o2, us_HEAP1), o2,
   us_HEAP1)) ->
  ((forall o2:us_rep1. forall us_HEAP1:us_type_of_heap.
   get__function_guard(get(get_cursor_model(o2, us_HEAP1), 0),
   get_cursor_model(o2, us_HEAP1), 0)) ->
  ((first__function_guard(o1, o, us_HEAP) and
  (if (length(o) = 0) then (find(get_cursor_model(o, us_HEAP), o1,
  us_HEAP) = (- 1)) else (bool_eq3(o1, get(get_cursor_model(o, us_HEAP),
  0)) = true))) ->
  (forall cu:us_rep. ((cu = o1) -> (let o2 = l2__attr__tag : int in
  (forall l2__split_fields1:us_split_fields.
  ((forall o3:int. forall l2__split_fields2:us_split_fields.
   capacity__function_guard(capacity({ us_split_fields1 = l2__split_fields2;
   attr__tag = o3 }), { us_split_fields1 = l2__split_fields2; attr__tag = o3
   })) ->
  ((forall l2__split_fields2:us_split_fields. forall o3:int.
   capacity__function_guard(capacity({ us_split_fields1 = l2__split_fields2;
   attr__tag = o3 }), { us_split_fields1 = l2__split_fields2; attr__tag = o3
   })) ->
  ((forall o3:int. forall l2__split_fields2:us_split_fields.
   length__function_guard(length({ us_split_fields1 = l2__split_fields2;
   attr__tag = o3 }), { us_split_fields1 = l2__split_fields2; attr__tag = o3
   })) ->
  (((capacity({ us_split_fields1 = l2__split_fields1; attr__tag = o2
  }) = capacity({ us_split_fields1 = l2__split_fields; attr__tag = o2 })) and
  (length({ us_split_fields1 = l2__split_fields1; attr__tag = o2 }) = 0)) ->
  (let o3 = l1 : us_rep1 in
  (forall us_HEAP1:us_type_of_heap. (let o4 = has_element(o3, cu, us_HEAP1)
  : bool in
  ((forall o5:us_rep1. forall us_HEAP2:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model(o5, us_HEAP2), o5,
   us_HEAP2)) ->
  ((forall o5:us_rep1. forall us_HEAP2:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model(o5, us_HEAP2), o5,
   us_HEAP2)) ->
  ((forall cu1:us_rep. forall o5:us_rep1. forall us_HEAP2:us_type_of_heap.
   find__function_guard(find(get_cursor_model(o5, us_HEAP2), cu1, us_HEAP2),
   get_cursor_model(o5, us_HEAP2), cu1, us_HEAP2)) ->
  ((has_element__function_guard(o4, o3, cu, us_HEAP1) and ((o4 = true) <->
  (0 <= find(get_cursor_model(o3, us_HEAP1), cu, us_HEAP1)))) ->
  ((o4 = true) -> (let o5 = { us_split_fields1 = l2__split_fields1;
  attr__tag = l2__attr__tag } : us_rep1 in (let o6 = length(o5) : int in
  ((forall o7:us_rep1. capacity__function_guard(capacity(o7), o7)) ->
  ((length__function_guard(o6, o5) and (dynamic_invariant(o6, true, false,
  true, true) and (o6 <  capacity(o5)))) -> (let o7 = l1 : us_rep1 in
  (forall us_HEAP2:us_type_of_heap. (let o8 = get_cursor_model(o7, us_HEAP2)
  : us_rep2 in
  ((forall o9:us_rep2. length__function_guard1(length1(o9), o9)) ->
  ((forall o9:us_rep1. length__function_guard(length(o9), o9)) ->
  ((forall o9:us_rep1. length__function_guard(length(o9), o9)) ->
  ((forall o9:us_rep2. forall n:int. get__function_guard(get(o9, n), o9, n)) ->
  ((forall o9:us_rep2. forall n:int. get__function_guard(get(o9, n), o9, n)) ->
  ((forall us_HEAP3:us_type_of_heap. forall o9:us_rep2. forall n:int.
   find__function_guard(find(o9, get(o9, n), us_HEAP3), o9, get(o9, n),
   us_HEAP3)) ->
  ((get_cursor_model__function_guard(o8, o7, us_HEAP2) and
  ((length1(o8) = length(o7)) and
  (forall n:int. (((0 <= n) and (n <= (length(o7) - 1))) -> (find(o8, get(o8,
  n), us_HEAP2) = n))))) -> (let o9 = find(o8, cu, us_HEAP2) : int in
  ((forall o10:us_rep2. forall o11:int. get__function_guard(get(o10, o11),
   o10, o11)) ->
  ((forall o10:us_rep2. forall o11:int. get__function_guard(get(o10, o11),
   o10, o11)) ->
  ((forall o10:us_rep. forall o11:us_rep2. forall o12:int.
   oeq__function_guard(oeq(get(o11, o12), o10), get(o11, o12), o10)) ->
  ((forall o10:us_rep2. length__function_guard1(length1(o10), o10)) ->
  ((forall o10:us_rep2. forall m:int. get__function_guard(get(o10, m), o10,
   m)) ->
  ((forall o10:us_rep2. forall m:int. get__function_guard(get(o10, m), o10,
   m)) ->
  ((forall o10:us_rep. forall o11:us_rep2. forall m:int.
   oeq__function_guard(oeq(get(o11, m), o10), get(o11, m), o10)) ->
  ((find__function_guard(o9, o8, cu, us_HEAP2) and (dynamic_invariant1(o9,
  true, false, true, true) and (if (0 <= o9) then (oeq(get(o8, o9),
  cu) = true) else (forall m:int. (((0 <= m) and (m <= (length1(o8) - 1))) ->
                   (not (oeq(get(o8, m), cu) = true))))))) ->
  (forall us_HEAP3:us_type_of_heap. forall l2__split_fields2:us_split_fields.
  forall cu1:us_rep.
  ((forall us_HEAP4:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model(l1, us_HEAP4), l1,
   us_HEAP4)) ->
  ((forall us_HEAP4:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model(l1, us_HEAP4), l1,
   us_HEAP4)) ->
  ((forall us_HEAP4:us_type_of_heap. forall cu2:us_rep.
   find__function_guard(find(get_cursor_model(l1, us_HEAP4), cu2, us_HEAP4),
   get_cursor_model(l1, us_HEAP4), cu2, us_HEAP4)) ->
  ((forall l2__split_fields3:us_split_fields. length__function_guard(length({
   us_split_fields1 = l2__split_fields3; attr__tag = l2__attr__tag }), {
   us_split_fields1 = l2__split_fields3; attr__tag = l2__attr__tag })) ->
  ((forall l2__split_fields3:us_split_fields. length__function_guard(length({
   us_split_fields1 = l2__split_fields3; attr__tag = l2__attr__tag }), {
   us_split_fields1 = l2__split_fields3; attr__tag = l2__attr__tag })) ->
  ((forall us_HEAP4:us_type_of_heap.
   get_element_model__function_guard(get_element_model(l1, us_HEAP4), l1,
   us_HEAP4)) ->
  ((forall us_HEAP4:us_type_of_heap.
   get_element_model__function_guard(get_element_model(l1, us_HEAP4), l1,
   us_HEAP4)) ->
  ((forall us_HEAP4:us_type_of_heap. forall n:int.
   get__function_guard1(get1(get_element_model(l1, us_HEAP4), n),
   get_element_model(l1, us_HEAP4), n)) ->
  ((forall us_HEAP4:us_type_of_heap.
   forall l2__split_fields3:us_split_fields.
   get_element_model__function_guard(get_element_model({ us_split_fields1 =
   l2__split_fields3; attr__tag = l2__attr__tag }, us_HEAP4), {
   us_split_fields1 = l2__split_fields3; attr__tag = l2__attr__tag },
   us_HEAP4)) ->
  ((forall us_HEAP4:us_type_of_heap.
   forall l2__split_fields3:us_split_fields.
   get_element_model__function_guard(get_element_model({ us_split_fields1 =
   l2__split_fields3; attr__tag = l2__attr__tag }, us_HEAP4), {
   us_split_fields1 = l2__split_fields3; attr__tag = l2__attr__tag },
   us_HEAP4)) ->
  ((forall us_HEAP4:us_type_of_heap.
   forall l2__split_fields3:us_split_fields. forall n:int.
   get__function_guard1(get1(get_element_model({ us_split_fields1 =
   l2__split_fields3; attr__tag = l2__attr__tag }, us_HEAP4), n),
   get_element_model({ us_split_fields1 = l2__split_fields3; attr__tag =
   l2__attr__tag }, us_HEAP4), n)) ->
  ((forall us_HEAP4:us_type_of_heap.
   get_element_model__function_guard(get_element_model(l1, us_HEAP4), l1,
   us_HEAP4)) ->
  ((forall us_HEAP4:us_type_of_heap.
   get_element_model__function_guard(get_element_model(l1, us_HEAP4), l1,
   us_HEAP4)) ->
  ((forall us_HEAP4:us_type_of_heap. forall n:int.
   get__function_guard1(get1(get_element_model(l1, us_HEAP4), n),
   get_element_model(l1, us_HEAP4), n)) ->
  ((forall us_HEAP4:us_type_of_heap.
   forall l2__split_fields3:us_split_fields.
   get_element_model__function_guard(get_element_model({ us_split_fields1 =
   l2__split_fields3; attr__tag = l2__attr__tag }, us_HEAP4), {
   us_split_fields1 = l2__split_fields3; attr__tag = l2__attr__tag },
   us_HEAP4)) ->
  ((forall us_HEAP4:us_type_of_heap.
   forall l2__split_fields3:us_split_fields.
   get_element_model__function_guard(get_element_model({ us_split_fields1 =
   l2__split_fields3; attr__tag = l2__attr__tag }, us_HEAP4), {
   us_split_fields1 = l2__split_fields3; attr__tag = l2__attr__tag },
   us_HEAP4)) ->
  ((forall us_HEAP4:us_type_of_heap.
   forall l2__split_fields3:us_split_fields. forall n:int.
   get__function_guard1(get1(get_element_model({ us_split_fields1 =
   l2__split_fields3; attr__tag = l2__attr__tag }, us_HEAP4), n),
   get_element_model({ us_split_fields1 = l2__split_fields3; attr__tag =
   l2__attr__tag }, us_HEAP4), n)) ->
  ((forall us_HEAP4:us_type_of_heap.
   forall l2__split_fields3:us_split_fields. forall n:int.
   is_incr__function_guard(is_incr(get1(get_element_model(l1, us_HEAP4), n),
   get1(get_element_model({ us_split_fields1 = l2__split_fields3; attr__tag =
   l2__attr__tag }, us_HEAP4), n)), get1(get_element_model(l1, us_HEAP4), n),
   get1(get_element_model({ us_split_fields1 = l2__split_fields3; attr__tag =
   l2__attr__tag }, us_HEAP4), n))) ->
  (((find(get_cursor_model(l1, us_HEAP3), cu1, us_HEAP3) = length({
  us_split_fields1 = l2__split_fields2; attr__tag = l2__attr__tag })) and
  (forall n:int. (((0 <= n) and (n <= (length({ us_split_fields1 =
  l2__split_fields2; attr__tag = l2__attr__tag }) - 1))) ->
  (is_incr(get1(get_element_model(l1, us_HEAP3), n), get1(get_element_model({
  us_split_fields1 = l2__split_fields2; attr__tag = l2__attr__tag },
  us_HEAP3), n)) = true)))) ->
  ((forall us_HEAP4:us_type_of_heap. forall cu2:us_rep.
   has_element__function_guard(has_element(l1, cu2, us_HEAP4), l1, cu2,
   us_HEAP4)) ->
  ((andb((if true then true else false), (if (has_element(l1, cu1,
  us_HEAP3) = true) then true else false)) = true) ->
  (forall us_HEAP4:us_type_of_heap. forall l2__split_fields3:us_split_fields.
  ((forall o10:us_rep1. forall us_HEAP5:us_type_of_heap.
   get_element_model__function_guard(get_element_model(o10, us_HEAP5), o10,
   us_HEAP5)) ->
  ((forall o10:us_rep1. forall us_HEAP5:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model(o10, us_HEAP5), o10,
   us_HEAP5)) ->
  ((forall o10:us_rep1. forall us_HEAP5:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model(o10, us_HEAP5), o10,
   us_HEAP5)) ->
  ((forall cu2:us_rep. forall o10:us_rep1. forall us_HEAP5:us_type_of_heap.
   find__function_guard(find(get_cursor_model(o10, us_HEAP5), cu2, us_HEAP5),
   get_cursor_model(o10, us_HEAP5), cu2, us_HEAP5)) ->
  ((forall o10:us_rep1. forall us_HEAP5:us_type_of_heap.
   get_element_model__function_guard(get_element_model(o10, us_HEAP5), o10,
   us_HEAP5)) ->
  ((forall o10:us_rep1. forall us_HEAP5:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model(o10, us_HEAP5), o10,
   us_HEAP5)) ->
  ((forall o10:us_rep1. forall us_HEAP5:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model(o10, us_HEAP5), o10,
   us_HEAP5)) ->
  ((forall cu2:us_rep. forall o10:us_rep1. forall us_HEAP5:us_type_of_heap.
   find__function_guard(find(get_cursor_model(o10, us_HEAP5), cu2, us_HEAP5),
   get_cursor_model(o10, us_HEAP5), cu2, us_HEAP5)) ->
  ((forall cu2:us_rep. forall o10:us_rep1. forall us_HEAP5:us_type_of_heap.
   get__function_guard1(get1(get_element_model(o10, us_HEAP5),
   find(get_cursor_model(o10, us_HEAP5), cu2, us_HEAP5)),
   get_element_model(o10, us_HEAP5), find(get_cursor_model(o10, us_HEAP5),
   cu2, us_HEAP5))) ->
  ((forall o10:us_rep1. forall us_HEAP5:us_type_of_heap.
   get_element_model__function_guard(get_element_model(o10, us_HEAP5), o10,
   us_HEAP5)) ->
  ((forall o10:us_rep1. forall us_HEAP5:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model(o10, us_HEAP5), o10,
   us_HEAP5)) ->
  ((forall o10:us_rep1. forall us_HEAP5:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model(o10, us_HEAP5), o10,
   us_HEAP5)) ->
  ((forall cu2:us_rep. forall o10:us_rep1. forall us_HEAP5:us_type_of_heap.
   find__function_guard(find(get_cursor_model(o10, us_HEAP5), cu2, us_HEAP5),
   get_cursor_model(o10, us_HEAP5), cu2, us_HEAP5)) ->
  ((forall o10:us_rep1. forall us_HEAP5:us_type_of_heap.
   get_element_model__function_guard(get_element_model(o10, us_HEAP5), o10,
   us_HEAP5)) ->
  ((forall o10:us_rep1. forall us_HEAP5:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model(o10, us_HEAP5), o10,
   us_HEAP5)) ->
  ((forall o10:us_rep1. forall us_HEAP5:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model(o10, us_HEAP5), o10,
   us_HEAP5)) ->
  ((forall cu2:us_rep. forall o10:us_rep1. forall us_HEAP5:us_type_of_heap.
   find__function_guard(find(get_cursor_model(o10, us_HEAP5), cu2, us_HEAP5),
   get_cursor_model(o10, us_HEAP5), cu2, us_HEAP5)) ->
  ((forall cu2:us_rep. forall o10:us_rep1. forall us_HEAP5:us_type_of_heap.
   get__function_guard1(get1(get_element_model(o10, us_HEAP5),
   find(get_cursor_model(o10, us_HEAP5), cu2, us_HEAP5)),
   get_element_model(o10, us_HEAP5), find(get_cursor_model(o10, us_HEAP5),
   cu2, us_HEAP5))) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   capacity__function_guard(capacity({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }), { us_split_fields1 = l2__split_fields4; attr__tag =
   o10 })) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   capacity__function_guard(capacity({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }), { us_split_fields1 = l2__split_fields4; attr__tag =
   o10 })) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   length__function_guard(length({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }), { us_split_fields1 = l2__split_fields4; attr__tag =
   o10 })) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   length__function_guard(length({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }), { us_split_fields1 = l2__split_fields4; attr__tag =
   o10 })) ->
  ((forall us_HEAP5:us_type_of_heap.
   forall l2__split_fields4:us_split_fields. forall o10:int.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields.
   forall us_HEAP5:us_type_of_heap. forall o10:int.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall us_HEAP5:us_type_of_heap.
   forall l2__split_fields4:us_split_fields. forall o10:int.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   length__function_guard(length({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }), { us_split_fields1 = l2__split_fields4; attr__tag =
   o10 })) ->
  ((forall us_HEAP5:us_type_of_heap.
   forall l2__split_fields4:us_split_fields. forall o10:int.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   length__function_guard(length({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }), { us_split_fields1 = l2__split_fields4; attr__tag =
   o10 })) ->
  ((forall us_HEAP5:us_type_of_heap.
   forall l2__split_fields4:us_split_fields. forall o10:int.
   get__function_guard(get(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), length({
   us_split_fields1 = l2__split_fields4; attr__tag = o10 })),
   get_cursor_model({ us_split_fields1 = l2__split_fields4; attr__tag = o10
   }, us_HEAP5), length({ us_split_fields1 = l2__split_fields4; attr__tag =
   o10 }))) ->
  ((forall l2__split_fields4:us_split_fields.
   forall us_HEAP5:us_type_of_heap. forall o10:int.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall us_HEAP5:us_type_of_heap.
   forall l2__split_fields4:us_split_fields. forall o10:int.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   length__function_guard(length({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }), { us_split_fields1 = l2__split_fields4; attr__tag =
   o10 })) ->
  ((forall us_HEAP5:us_type_of_heap.
   forall l2__split_fields4:us_split_fields. forall o10:int.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   length__function_guard(length({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }), { us_split_fields1 = l2__split_fields4; attr__tag =
   o10 })) ->
  ((forall us_HEAP5:us_type_of_heap.
   forall l2__split_fields4:us_split_fields. forall o10:int.
   get__function_guard(get(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), length({
   us_split_fields1 = l2__split_fields4; attr__tag = o10 })),
   get_cursor_model({ us_split_fields1 = l2__split_fields4; attr__tag = o10
   }, us_HEAP5), length({ us_split_fields1 = l2__split_fields4; attr__tag =
   o10 }))) ->
  ((forall l2__split_fields4:us_split_fields.
   forall us_HEAP5:us_type_of_heap. forall l2__split_fields5:us_split_fields.
   forall us_HEAP6:us_type_of_heap. forall o10:int.
   snoc__function_guard(snoc(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP6), get(get_cursor_model({
   us_split_fields1 = l2__split_fields5; attr__tag = o10 }, us_HEAP5),
   length({ us_split_fields1 = l2__split_fields5; attr__tag = o10 })),
   us_HEAP5), get_cursor_model({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }, us_HEAP6), get(get_cursor_model({ us_split_fields1 =
   l2__split_fields5; attr__tag = o10 }, us_HEAP5), length({
   us_split_fields1 = l2__split_fields5; attr__tag = o10 })), us_HEAP5)) ->
  ((forall us_HEAP5:us_type_of_heap.
   forall l2__split_fields4:us_split_fields. forall o10:int.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields.
   forall us_HEAP5:us_type_of_heap. forall o10:int.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall us_HEAP5:us_type_of_heap.
   forall l2__split_fields4:us_split_fields. forall o10:int.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   length__function_guard(length({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }), { us_split_fields1 = l2__split_fields4; attr__tag =
   o10 })) ->
  ((forall us_HEAP5:us_type_of_heap.
   forall l2__split_fields4:us_split_fields. forall o10:int.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   length__function_guard(length({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }), { us_split_fields1 = l2__split_fields4; attr__tag =
   o10 })) ->
  ((forall us_HEAP5:us_type_of_heap.
   forall l2__split_fields4:us_split_fields. forall o10:int.
   get__function_guard(get(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), length({
   us_split_fields1 = l2__split_fields4; attr__tag = o10 })),
   get_cursor_model({ us_split_fields1 = l2__split_fields4; attr__tag = o10
   }, us_HEAP5), length({ us_split_fields1 = l2__split_fields4; attr__tag =
   o10 }))) ->
  ((forall l2__split_fields4:us_split_fields.
   forall us_HEAP5:us_type_of_heap. forall o10:int.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall us_HEAP5:us_type_of_heap.
   forall l2__split_fields4:us_split_fields. forall o10:int.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   length__function_guard(length({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }), { us_split_fields1 = l2__split_fields4; attr__tag =
   o10 })) ->
  ((forall us_HEAP5:us_type_of_heap.
   forall l2__split_fields4:us_split_fields. forall o10:int.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   length__function_guard(length({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }), { us_split_fields1 = l2__split_fields4; attr__tag =
   o10 })) ->
  ((forall us_HEAP5:us_type_of_heap.
   forall l2__split_fields4:us_split_fields. forall o10:int.
   get__function_guard(get(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), length({
   us_split_fields1 = l2__split_fields4; attr__tag = o10 })),
   get_cursor_model({ us_split_fields1 = l2__split_fields4; attr__tag = o10
   }, us_HEAP5), length({ us_split_fields1 = l2__split_fields4; attr__tag =
   o10 }))) ->
  ((forall l2__split_fields4:us_split_fields.
   forall us_HEAP5:us_type_of_heap. forall l2__split_fields5:us_split_fields.
   forall us_HEAP6:us_type_of_heap. forall o10:int.
   snoc__function_guard(snoc(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP6), get(get_cursor_model({
   us_split_fields1 = l2__split_fields5; attr__tag = o10 }, us_HEAP5),
   length({ us_split_fields1 = l2__split_fields5; attr__tag = o10 })),
   us_HEAP5), get_cursor_model({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }, us_HEAP6), get(get_cursor_model({ us_split_fields1 =
   l2__split_fields5; attr__tag = o10 }, us_HEAP5), length({
   us_split_fields1 = l2__split_fields5; attr__tag = o10 })), us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields.
   forall us_HEAP5:us_type_of_heap. forall l2__split_fields5:us_split_fields.
   forall us_HEAP6:us_type_of_heap. forall o10:int.
   oeq__function_guard1(oeq1(get_cursor_model({ us_split_fields1 =
   l2__split_fields5; attr__tag = o10 }, us_HEAP5), snoc(get_cursor_model({
   us_split_fields1 = l2__split_fields4; attr__tag = o10 }, us_HEAP6),
   get(get_cursor_model({ us_split_fields1 = l2__split_fields5; attr__tag =
   o10 }, us_HEAP5), length({ us_split_fields1 = l2__split_fields5;
   attr__tag = o10 })), us_HEAP5)), get_cursor_model({ us_split_fields1 =
   l2__split_fields5; attr__tag = o10 }, us_HEAP5), snoc(get_cursor_model({
   us_split_fields1 = l2__split_fields4; attr__tag = o10 }, us_HEAP6),
   get(get_cursor_model({ us_split_fields1 = l2__split_fields5; attr__tag =
   o10 }, us_HEAP5), length({ us_split_fields1 = l2__split_fields5;
   attr__tag = o10 })), us_HEAP5))) ->
  ((forall us_HEAP5:us_type_of_heap.
   forall l2__split_fields4:us_split_fields. forall o10:int.
   get_element_model__function_guard(get_element_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields.
   forall us_HEAP5:us_type_of_heap. forall o10:int.
   get_element_model__function_guard(get_element_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields.
   forall us_HEAP5:us_type_of_heap. forall o10:int.
   get_element_model__function_guard(get_element_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields.
   forall us_HEAP5:us_type_of_heap. forall us_HEAP6:us_type_of_heap.
   forall o10:int. forall o11:int.
   snoc__function_guard1(snoc1(get_element_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o11 }, us_HEAP6), o10, us_HEAP5),
   get_element_model({ us_split_fields1 = l2__split_fields4; attr__tag = o11
   }, us_HEAP6), o10, us_HEAP5)) ->
  ((forall us_HEAP5:us_type_of_heap.
   forall l2__split_fields4:us_split_fields. forall o10:int.
   get_element_model__function_guard(get_element_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields.
   forall us_HEAP5:us_type_of_heap. forall o10:int.
   get_element_model__function_guard(get_element_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields.
   forall us_HEAP5:us_type_of_heap. forall o10:int.
   get_element_model__function_guard(get_element_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields.
   forall us_HEAP5:us_type_of_heap. forall us_HEAP6:us_type_of_heap.
   forall o10:int. forall o11:int.
   snoc__function_guard1(snoc1(get_element_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o11 }, us_HEAP6), o10, us_HEAP5),
   get_element_model({ us_split_fields1 = l2__split_fields4; attr__tag = o11
   }, us_HEAP6), o10, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields.
   forall us_HEAP5:us_type_of_heap. forall l2__split_fields5:us_split_fields.
   forall us_HEAP6:us_type_of_heap. forall o10:int. forall o11:int.
   oeq__function_guard2(oeq2(get_element_model({ us_split_fields1 =
   l2__split_fields5; attr__tag = o11 }, us_HEAP5), snoc1(get_element_model({
   us_split_fields1 = l2__split_fields4; attr__tag = o11 }, us_HEAP6), o10,
   us_HEAP5)), get_element_model({ us_split_fields1 = l2__split_fields5;
   attr__tag = o11 }, us_HEAP5), snoc1(get_element_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o11 }, us_HEAP6), o10, us_HEAP5))) ->
  ((forall o10:us_rep1. forall us_HEAP5:us_type_of_heap.
   get_element_model__function_guard(get_element_model(o10, us_HEAP5), o10,
   us_HEAP5)) ->
  ((forall o10:us_rep1. forall us_HEAP5:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model(o10, us_HEAP5), o10,
   us_HEAP5)) ->
  ((forall o10:us_rep1. forall us_HEAP5:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model(o10, us_HEAP5), o10,
   us_HEAP5)) ->
  ((forall cu2:us_rep. forall o10:us_rep1. forall us_HEAP5:us_type_of_heap.
   find__function_guard(find(get_cursor_model(o10, us_HEAP5), cu2, us_HEAP5),
   get_cursor_model(o10, us_HEAP5), cu2, us_HEAP5)) ->
  ((forall o10:us_rep1. forall us_HEAP5:us_type_of_heap.
   get_element_model__function_guard(get_element_model(o10, us_HEAP5), o10,
   us_HEAP5)) ->
  ((forall o10:us_rep1. forall us_HEAP5:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model(o10, us_HEAP5), o10,
   us_HEAP5)) ->
  ((forall o10:us_rep1. forall us_HEAP5:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model(o10, us_HEAP5), o10,
   us_HEAP5)) ->
  ((forall cu2:us_rep. forall o10:us_rep1. forall us_HEAP5:us_type_of_heap.
   find__function_guard(find(get_cursor_model(o10, us_HEAP5), cu2, us_HEAP5),
   get_cursor_model(o10, us_HEAP5), cu2, us_HEAP5)) ->
  ((forall cu2:us_rep. forall o10:us_rep1. forall us_HEAP5:us_type_of_heap.
   get__function_guard1(get1(get_element_model(o10, us_HEAP5),
   find(get_cursor_model(o10, us_HEAP5), cu2, us_HEAP5)),
   get_element_model(o10, us_HEAP5), find(get_cursor_model(o10, us_HEAP5),
   cu2, us_HEAP5))) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   capacity__function_guard(capacity({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }), { us_split_fields1 = l2__split_fields4; attr__tag =
   o10 })) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   capacity__function_guard(capacity({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }), { us_split_fields1 = l2__split_fields4; attr__tag =
   o10 })) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   length__function_guard(length({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }), { us_split_fields1 = l2__split_fields4; attr__tag =
   o10 })) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   length__function_guard(length({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }), { us_split_fields1 = l2__split_fields4; attr__tag =
   o10 })) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   forall us_HEAP5:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields.
   forall us_HEAP5:us_type_of_heap. forall o10:int.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   forall us_HEAP5:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   length__function_guard(length({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }), { us_split_fields1 = l2__split_fields4; attr__tag =
   o10 })) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   forall us_HEAP5:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   length__function_guard(length({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }), { us_split_fields1 = l2__split_fields4; attr__tag =
   o10 })) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   forall us_HEAP5:us_type_of_heap.
   get__function_guard(get(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), length({
   us_split_fields1 = l2__split_fields4; attr__tag = o10 })),
   get_cursor_model({ us_split_fields1 = l2__split_fields4; attr__tag = o10
   }, us_HEAP5), length({ us_split_fields1 = l2__split_fields4; attr__tag =
   o10 }))) ->
  ((forall l2__split_fields4:us_split_fields.
   forall us_HEAP5:us_type_of_heap. forall o10:int.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   forall us_HEAP5:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   length__function_guard(length({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }), { us_split_fields1 = l2__split_fields4; attr__tag =
   o10 })) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   forall us_HEAP5:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   length__function_guard(length({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }), { us_split_fields1 = l2__split_fields4; attr__tag =
   o10 })) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   forall us_HEAP5:us_type_of_heap.
   get__function_guard(get(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), length({
   us_split_fields1 = l2__split_fields4; attr__tag = o10 })),
   get_cursor_model({ us_split_fields1 = l2__split_fields4; attr__tag = o10
   }, us_HEAP5), length({ us_split_fields1 = l2__split_fields4; attr__tag =
   o10 }))) ->
  ((forall l2__split_fields4:us_split_fields.
   forall l2__split_fields5:us_split_fields. forall us_HEAP5:us_type_of_heap.
   forall o10:int. forall us_HEAP6:us_type_of_heap.
   snoc__function_guard(snoc(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), get(get_cursor_model({
   us_split_fields1 = l2__split_fields5; attr__tag = o10 }, us_HEAP6),
   length({ us_split_fields1 = l2__split_fields5; attr__tag = o10 })),
   us_HEAP6), get_cursor_model({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }, us_HEAP5), get(get_cursor_model({ us_split_fields1 =
   l2__split_fields5; attr__tag = o10 }, us_HEAP6), length({
   us_split_fields1 = l2__split_fields5; attr__tag = o10 })), us_HEAP6)) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   forall us_HEAP5:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields.
   forall us_HEAP5:us_type_of_heap. forall o10:int.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   forall us_HEAP5:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   length__function_guard(length({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }), { us_split_fields1 = l2__split_fields4; attr__tag =
   o10 })) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   forall us_HEAP5:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   length__function_guard(length({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }), { us_split_fields1 = l2__split_fields4; attr__tag =
   o10 })) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   forall us_HEAP5:us_type_of_heap.
   get__function_guard(get(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), length({
   us_split_fields1 = l2__split_fields4; attr__tag = o10 })),
   get_cursor_model({ us_split_fields1 = l2__split_fields4; attr__tag = o10
   }, us_HEAP5), length({ us_split_fields1 = l2__split_fields4; attr__tag =
   o10 }))) ->
  ((forall l2__split_fields4:us_split_fields.
   forall us_HEAP5:us_type_of_heap. forall o10:int.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   forall us_HEAP5:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   length__function_guard(length({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }), { us_split_fields1 = l2__split_fields4; attr__tag =
   o10 })) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   forall us_HEAP5:us_type_of_heap.
   get_cursor_model__function_guard(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   length__function_guard(length({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }), { us_split_fields1 = l2__split_fields4; attr__tag =
   o10 })) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   forall us_HEAP5:us_type_of_heap.
   get__function_guard(get(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), length({
   us_split_fields1 = l2__split_fields4; attr__tag = o10 })),
   get_cursor_model({ us_split_fields1 = l2__split_fields4; attr__tag = o10
   }, us_HEAP5), length({ us_split_fields1 = l2__split_fields4; attr__tag =
   o10 }))) ->
  ((forall l2__split_fields4:us_split_fields.
   forall l2__split_fields5:us_split_fields. forall us_HEAP5:us_type_of_heap.
   forall o10:int. forall us_HEAP6:us_type_of_heap.
   snoc__function_guard(snoc(get_cursor_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), get(get_cursor_model({
   us_split_fields1 = l2__split_fields5; attr__tag = o10 }, us_HEAP6),
   length({ us_split_fields1 = l2__split_fields5; attr__tag = o10 })),
   us_HEAP6), get_cursor_model({ us_split_fields1 = l2__split_fields4;
   attr__tag = o10 }, us_HEAP5), get(get_cursor_model({ us_split_fields1 =
   l2__split_fields5; attr__tag = o10 }, us_HEAP6), length({
   us_split_fields1 = l2__split_fields5; attr__tag = o10 })), us_HEAP6)) ->
  ((forall l2__split_fields4:us_split_fields.
   forall l2__split_fields5:us_split_fields. forall us_HEAP5:us_type_of_heap.
   forall o10:int. forall us_HEAP6:us_type_of_heap.
   oeq__function_guard1(oeq1(get_cursor_model({ us_split_fields1 =
   l2__split_fields5; attr__tag = o10 }, us_HEAP6), snoc(get_cursor_model({
   us_split_fields1 = l2__split_fields4; attr__tag = o10 }, us_HEAP5),
   get(get_cursor_model({ us_split_fields1 = l2__split_fields5; attr__tag =
   o10 }, us_HEAP6), length({ us_split_fields1 = l2__split_fields5;
   attr__tag = o10 })), us_HEAP6)), get_cursor_model({ us_split_fields1 =
   l2__split_fields5; attr__tag = o10 }, us_HEAP6), snoc(get_cursor_model({
   us_split_fields1 = l2__split_fields4; attr__tag = o10 }, us_HEAP5),
   get(get_cursor_model({ us_split_fields1 = l2__split_fields5; attr__tag =
   o10 }, us_HEAP6), length({ us_split_fields1 = l2__split_fields5;
   attr__tag = o10 })), us_HEAP6))) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   forall us_HEAP5:us_type_of_heap.
   get_element_model__function_guard(get_element_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields.
   forall us_HEAP5:us_type_of_heap. forall o10:int.
   get_element_model__function_guard(get_element_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields.
   forall us_HEAP5:us_type_of_heap. forall o10:int.
   get_element_model__function_guard(get_element_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields.
   forall us_HEAP5:us_type_of_heap. forall o10:int. forall o11:int.
   forall us_HEAP6:us_type_of_heap.
   snoc__function_guard1(snoc1(get_element_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o11 }, us_HEAP5), o10, us_HEAP6),
   get_element_model({ us_split_fields1 = l2__split_fields4; attr__tag = o11
   }, us_HEAP5), o10, us_HEAP6)) ->
  ((forall l2__split_fields4:us_split_fields. forall o10:int.
   forall us_HEAP5:us_type_of_heap.
   get_element_model__function_guard(get_element_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields.
   forall us_HEAP5:us_type_of_heap. forall o10:int.
   get_element_model__function_guard(get_element_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields.
   forall us_HEAP5:us_type_of_heap. forall o10:int.
   get_element_model__function_guard(get_element_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5), { us_split_fields1 =
   l2__split_fields4; attr__tag = o10 }, us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields.
   forall us_HEAP5:us_type_of_heap. forall o10:int. forall o11:int.
   forall us_HEAP6:us_type_of_heap.
   snoc__function_guard1(snoc1(get_element_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o11 }, us_HEAP5), o10, us_HEAP6),
   get_element_model({ us_split_fields1 = l2__split_fields4; attr__tag = o11
   }, us_HEAP5), o10, us_HEAP6)) ->
  ((forall l2__split_fields4:us_split_fields.
   forall l2__split_fields5:us_split_fields. forall us_HEAP5:us_type_of_heap.
   forall o10:int. forall o11:int. forall us_HEAP6:us_type_of_heap.
   oeq__function_guard2(oeq2(get_element_model({ us_split_fields1 =
   l2__split_fields5; attr__tag = o11 }, us_HEAP6), snoc1(get_element_model({
   us_split_fields1 = l2__split_fields4; attr__tag = o11 }, us_HEAP5), o10,
   us_HEAP6)), get_element_model({ us_split_fields1 = l2__split_fields5;
   attr__tag = o11 }, us_HEAP6), snoc1(get_element_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = o11 }, us_HEAP5), o10, us_HEAP6))) ->
  ((forall us_HEAP5:us_type_of_heap.
   forall l2__split_fields4:us_split_fields.
   get_element_model__function_guard(get_element_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = l2__attr__tag }, us_HEAP5), {
   us_split_fields1 = l2__split_fields4; attr__tag = l2__attr__tag },
   us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields. length__function_guard(length({
   us_split_fields1 = l2__split_fields4; attr__tag = l2__attr__tag }), {
   us_split_fields1 = l2__split_fields4; attr__tag = l2__attr__tag })) ->
  ((forall us_HEAP5:us_type_of_heap.
   forall l2__split_fields4:us_split_fields.
   get_element_model__function_guard(get_element_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = l2__attr__tag }, us_HEAP5), {
   us_split_fields1 = l2__split_fields4; attr__tag = l2__attr__tag },
   us_HEAP5)) ->
  ((forall l2__split_fields4:us_split_fields. length__function_guard(length({
   us_split_fields1 = l2__split_fields4; attr__tag = l2__attr__tag }), {
   us_split_fields1 = l2__split_fields4; attr__tag = l2__attr__tag })) ->
  ((forall us_HEAP5:us_type_of_heap.
   forall l2__split_fields4:us_split_fields.
   get__function_guard1(get1(get_element_model({ us_split_fields1 =
   l2__split_fields4; attr__tag = l2__attr__tag }, us_HEAP5), (length({
   us_split_fields1 = l2__split_fields4; attr__tag = l2__attr__tag }) - 1)),
   get_element_model({ us_split_fields1 = l2__split_fields4; attr__tag =
   l2__attr__tag }, us_HEAP5), (length({ us_split_fields1 =
   l2__split_fields4; attr__tag = l2__attr__tag }) - 1))) ->
  ((forall cu2:us_rep. forall us_HEAP5:us_type_of_heap.
   element__function_guard(element(l1, cu2, us_HEAP5), l1, cu2, us_HEAP5)) ->
  ((let o10 = l1 : us_rep1 in
  (exists us_HEAP5:us_type_of_heap. (let o11 = element(o10, cu1, us_HEAP5)
  : int in ((element__function_guard(o11, o10, cu1, us_HEAP5) and
  (dynamic_invariant3(o11, true, false, true, true) and
  (o11 = get1(get_element_model(o10, us_HEAP5), find(get_cursor_model(o10,
  us_HEAP5), cu1, us_HEAP5))))) and
  (exists spark__branch:bool.
  ((spark__branch = (if (o11 <  2147483647) then true else false)) and
  (if (spark__branch = true) then (let o12 = l1 : us_rep1 in
  (exists us_HEAP6:us_type_of_heap. (let o13 = element(o12, cu1, us_HEAP6)
  : int in ((element__function_guard(o13, o12, cu1, us_HEAP6) and
  (dynamic_invariant3(o13, true, false, true, true) and
  (o13 = get1(get_element_model(o12, us_HEAP6), find(get_cursor_model(o12,
  us_HEAP6), cu1, us_HEAP6))))) and (let o14 = (o13 + 1) : int in
  (in_range1(o14) and (let o15 = l2__attr__tag : int in ((((capacity({
  us_split_fields1 = l2__split_fields3; attr__tag = o15 }) = capacity({
  us_split_fields1 = l2__split_fields2; attr__tag = o15 })) and (length({
  us_split_fields1 = l2__split_fields3; attr__tag = o15 }) = (length({
  us_split_fields1 = l2__split_fields2; attr__tag = o15 }) + 1))) and
  (oeq1(get_cursor_model({ us_split_fields1 = l2__split_fields3; attr__tag =
  o15 }, us_HEAP4), snoc(get_cursor_model({ us_split_fields1 =
  l2__split_fields2; attr__tag = o15 }, us_HEAP6), get(get_cursor_model({
  us_split_fields1 = l2__split_fields3; attr__tag = o15 }, us_HEAP4),
  length({ us_split_fields1 = l2__split_fields3; attr__tag = o15 })),
  us_HEAP4)) = true)) and (oeq2(get_element_model({ us_split_fields1 =
  l2__split_fields3; attr__tag = o15 }, us_HEAP4), snoc1(get_element_model({
  us_split_fields1 = l2__split_fields2; attr__tag = o15 }, us_HEAP6), o14,
  us_HEAP4)) = true))))))))) else (let o12 = l1 : us_rep1 in
  (exists us_HEAP6:us_type_of_heap. (let o13 = element(o12, cu1, us_HEAP6)
  : int in ((element__function_guard(o13, o12, cu1, us_HEAP6) and
  (dynamic_invariant3(o13, true, false, true, true) and
  (o13 = get1(get_element_model(o12, us_HEAP6), find(get_cursor_model(o12,
  us_HEAP6), cu1, us_HEAP6))))) and (let o14 = l2__attr__tag : int in
  (exists us_HEAP7:us_type_of_heap. (((((capacity({ us_split_fields1 =
  l2__split_fields3; attr__tag = o14 }) = capacity({ us_split_fields1 =
  l2__split_fields2; attr__tag = o14 })) and (length({ us_split_fields1 =
  l2__split_fields3; attr__tag = o14 }) = (length({ us_split_fields1 =
  l2__split_fields2; attr__tag = o14 }) + 1))) and (oeq1(get_cursor_model({
  us_split_fields1 = l2__split_fields3; attr__tag = o14 }, us_HEAP7),
  snoc(get_cursor_model({ us_split_fields1 = l2__split_fields2; attr__tag =
  o14 }, us_HEAP6), get(get_cursor_model({ us_split_fields1 =
  l2__split_fields3; attr__tag = o14 }, us_HEAP7), length({
  us_split_fields1 = l2__split_fields3; attr__tag = o14 })),
  us_HEAP7)) = true)) and (oeq2(get_element_model({ us_split_fields1 =
  l2__split_fields3; attr__tag = o14 }, us_HEAP7), snoc1(get_element_model({
  us_split_fields1 = l2__split_fields2; attr__tag = o14 }, us_HEAP6), o13,
  us_HEAP7)) = true)) and (get1(get_element_model({ us_split_fields1 =
  l2__split_fields3; attr__tag = l2__attr__tag }, us_HEAP4), (length({
  us_split_fields1 = l2__split_fields3; attr__tag = l2__attr__tag
  }) - 1)) = element(l1, cu1, us_HEAP4)))))))))))))))) -> (let o10 = {
  us_split_fields1 = l2__split_fields3; attr__tag = l2__attr__tag }
  : us_rep1 in (let o11 = length(o10) : int in
  ((forall o12:us_rep1. capacity__function_guard(capacity(o12), o12)) ->
  ((length__function_guard(o11, o10) and (dynamic_invariant(o11, true, false,
  true, true) and (o11 <  capacity(o10)))) -> (let o12 = (o11 - 1) : int in
  (in_range2(o12) -> (let o13 = { us_split_fields1 = l2__split_fields3;
  attr__tag = l2__attr__tag } : us_rep1 in
  (forall us_HEAP5:us_type_of_heap. (let o14 = get_element_model(o13,
  us_HEAP5) : us_rep3 in
  ((forall o15:us_rep3. length__function_guard2(length2(o15), o15)) ->
  ((forall o15:us_rep1. length__function_guard(length(o15), o15)) ->
  ((get_element_model__function_guard(o14, o13, us_HEAP5) and
  (length2(o14) = length(o13))) -> (let o15 = get1(o14, o12) : int in
  ((get__function_guard1(o15, o14, o12) and dynamic_invariant2(o15, true,
  false, true, true)) ->
  ((forall us_HEAP6:us_type_of_heap. forall o16:us_rep1.
   get_cursor_model__function_guard(get_cursor_model(o16, us_HEAP6), o16,
   us_HEAP6)) ->
  ((forall us_HEAP6:us_type_of_heap. forall o16:us_rep1.
   get_cursor_model__function_guard(get_cursor_model(o16, us_HEAP6), o16,
   us_HEAP6)) ->
  ((forall cu2:us_rep. forall us_HEAP6:us_type_of_heap. forall o16:us_rep1.
   find__function_guard(find(get_cursor_model(o16, us_HEAP6), cu2, us_HEAP6),
   get_cursor_model(o16, us_HEAP6), cu2, us_HEAP6)) ->
  (0 <= find(get_cursor_model(l1, us_HEAP5), cu1, us_HEAP5)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
