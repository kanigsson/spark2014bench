(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq2 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type trace__ref = { trace__content : us_rep
}

function trace__ref_trace__content__projection(a: trace__ref) : us_rep =
  (a).trace__content

logic empty : unit -> us_rep

logic empty__function_guard : us_rep, unit -> prop

logic append : us_rep, int -> us_rep

logic append__function_guard : us_rep, us_rep, int -> prop

type element_type

logic element_typeqtint : element_type -> int

axiom element_typeqtaxiom :
  (forall i:element_type. ((- 2147483648) <= element_typeqtint(i)))

axiom element_typeqtaxiom1 :
  (forall i:element_type. (element_typeqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : element_type, element_type -> bool

logic dummy2 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_element_type__content__projection(a: element_type__ref) : element_type =
  (a).element_type__content

predicate dynamic_invariant(temp___expr_166: int, temp___is_init_162: bool,
  temp___skip_constant_163: bool, temp___do_toplevel_164: bool,
  temp___do_typ_inv_165: bool) = (((temp___is_init_162 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range2(temp___expr_166))

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep1

logic bool_eq4 : us_rep1, us_rep1 -> bool

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type cursor__ref = { cursor__content : us_rep1
}

function cursor__ref_cursor__content__projection(a: cursor__ref) : us_rep1 =
  (a).cursor__content

logic element : us_rep, us_rep1 -> int

logic element__function_guard : int, us_rep, us_rep1 -> prop

axiom element__post_axiom :
  (forall t:us_rep.
  (forall c:us_rep1 [element(t, c)]. (let result = element(t, c) : int in
  (element__function_guard(result, t, c) -> dynamic_invariant(result, true,
  false, true, true)))))

logic has_element : us_rep, us_rep1 -> bool

logic has_element__function_guard : bool, us_rep, us_rep1 -> prop

logic previous : us_rep, us_rep1 -> us_rep1

logic previous__function_guard : us_rep1, us_rep, us_rep1 -> prop

logic is_first : us_rep, us_rep1 -> bool

logic is_first__function_guard : bool, us_rep, us_rep1 -> prop

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

 (* File "trace_test.ads", line 10, characters 0-0 *)
goal defqtvc : (let o = empty(void) : us_rep in (empty__function_guard(o,
  void) ->
  (forall trace:us_rep. ((trace = o) ->
  (forall trace1:us_rep.
  ((exists i:int. ((i = 1) and (if (andb((if (1 <= i) then true else false),
   (if (i <= 100) then true else false)) = true) then (exists trace2:us_rep.
                                                      exists i1:int.
                                                      ((andb((if true then true else false),
                                                      (if ((1 <= i1) and
                                                      (i1 <= 100)) then true else false)) = true) and
                                                      (let o1 =
                                                      append(trace2, i1)
                                                      : us_rep in
                                                      (append__function_guard(o1,
                                                      trace2, i1) and
                                                      ((trace1 = o1) and
                                                      (i1 = 100)))))) else (trace1 = trace)))) ->
  (forall c:us_rep1.
  ((forall trace2:us_rep. forall c1:us_rep1.
   has_element__function_guard(has_element(trace2, c1), trace2, c1)) ->
  ((has_element(trace1, c) = true) ->
  ((forall trace2:us_rep. forall c1:us_rep1.
   is_first__function_guard(is_first(trace2, c1), trace2, c1)) ->
  ((not (is_first(trace1, c) = true)) ->
  ((forall trace2:us_rep. forall c1:us_rep1.
   element__function_guard(element(trace2, c1), trace2, c1)) ->
  ((forall trace2:us_rep. forall c1:us_rep1.
   previous__function_guard(previous(trace2, c1), trace2, c1)) ->
  ((forall trace2:us_rep. forall c1:us_rep1.
   previous__function_guard(previous(trace2, c1), trace2, c1)) ->
  ((forall trace2:us_rep. forall c1:us_rep1.
   element__function_guard(element(trace2, previous(trace2, c1)), trace2,
   previous(trace2, c1))) ->
  (element(trace1, c) = (element(trace1, previous(trace1, c)) + 1)))))))))))))))))
