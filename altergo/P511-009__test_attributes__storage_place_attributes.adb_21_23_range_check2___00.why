(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type my_integer

logic my_integerqtint : my_integer -> int

axiom my_integerqtaxiom : (forall i:my_integer. (1 <= my_integerqtint(i)))

axiom my_integerqtaxiom1 : (forall i:my_integer. (my_integerqtint(i) <= 10))

predicate in_range2(x: int) = ((1 <= x) and (x <= 10))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : my_integer, my_integer -> bool

logic dummy1 : my_integer

type my_integer__ref = { my_integer__content : my_integer
}

function my_integer__ref_my_integer__content__projection(a: my_integer__ref) : my_integer =
  (a).my_integer__content

function to_rep1(x: my_integer) : int = my_integerqtint(x)

logic of_rep1 : int -> my_integer

axiom inversion_axiom1 :
  (forall x:my_integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:my_integer [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_discrs = { rec__storage_place_attributes__r2__d1 : my_integer
}

function us_split_discrs_rec__storage_place_attributes__r2__d1__projection(a: us_split_discrs) : my_integer =
  (a).rec__storage_place_attributes__r2__d1

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__storage_place_attributes__r2__d3 : integer;
rec__storage_place_attributes__r2__d2 : bool
}

function us_split_fields_rec__storage_place_attributes__r2__d3__projection(a: us_split_fields) : integer =
  (a).rec__storage_place_attributes__r2__d3

function us_split_fields_rec__storage_place_attributes__r2__d2__projection(a: us_split_fields) : bool =
  (a).rec__storage_place_attributes__r2__d2

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

predicate storage_place_attributes__r2__d2__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__storage_place_attributes__r2__d1) = 5)

function bool_eq4(a: us_rep, b: us_rep) : bool =
  (if ((to_rep1(((a).us_split_discrs1).rec__storage_place_attributes__r2__d1) = to_rep1(((b).us_split_discrs1).rec__storage_place_attributes__r2__d1)) and
  ((to_rep(((a).us_split_fields1).rec__storage_place_attributes__r2__d3) = to_rep(((b).us_split_fields1).rec__storage_place_attributes__r2__d3)) and
  (storage_place_attributes__r2__d2__pred(a) ->
  (to_int(((a).us_split_fields1).rec__storage_place_attributes__r2__d2) = to_int(((b).us_split_fields1).rec__storage_place_attributes__r2__d2))))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic storage_place_attributes__r2__d1__first__bit : int

logic storage_place_attributes__r2__d1__last__bit : int

logic storage_place_attributes__r2__d1__position : int

axiom storage_place_attributes__r2__d1__first__bit_axiom :
  (0 <= storage_place_attributes__r2__d1__first__bit)

axiom storage_place_attributes__r2__d1__last__bit_axiom :
  (storage_place_attributes__r2__d1__first__bit <  storage_place_attributes__r2__d1__last__bit)

axiom storage_place_attributes__r2__d1__position_axiom :
  (0 <= storage_place_attributes__r2__d1__position)

logic storage_place_attributes__r2__d3__first__bit : int

logic storage_place_attributes__r2__d3__last__bit : int

logic storage_place_attributes__r2__d3__position : int

axiom storage_place_attributes__r2__d3__first__bit_axiom :
  (0 <= storage_place_attributes__r2__d3__first__bit)

axiom storage_place_attributes__r2__d3__last__bit_axiom :
  (storage_place_attributes__r2__d3__first__bit <  storage_place_attributes__r2__d3__last__bit)

axiom storage_place_attributes__r2__d3__position_axiom :
  (0 <= storage_place_attributes__r2__d3__position)

logic storage_place_attributes__r2__d2__first__bit : int

logic storage_place_attributes__r2__d2__last__bit : int

logic storage_place_attributes__r2__d2__position : int

axiom storage_place_attributes__r2__d2__first__bit_axiom :
  (0 <= storage_place_attributes__r2__d2__first__bit)

axiom storage_place_attributes__r2__d2__last__bit_axiom :
  (storage_place_attributes__r2__d2__first__bit <  storage_place_attributes__r2__d2__last__bit)

axiom storage_place_attributes__r2__d2__position_axiom :
  (0 <= storage_place_attributes__r2__d2__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type r2a__ref = { r2a__content : us_rep
}

function r2a__ref_r2a__content__projection(a: r2a__ref) : us_rep =
  (a).r2a__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq5(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq4((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq4((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))))

logic attr__ATTRIBUTE_ADDRESS : int

predicate in_range3(rec__storage_place_attributes__r2__d11: int,
  a: us_split_discrs) =
  (rec__storage_place_attributes__r2__d11 = to_rep1((a).rec__storage_place_attributes__r2__d1))

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic storage_place_attributes__r2__d1__first__bit1 : int

logic storage_place_attributes__r2__d1__last__bit1 : int

logic storage_place_attributes__r2__d1__position1 : int

axiom storage_place_attributes__r2__d1__first__bit_axiom1 :
  (0 <= storage_place_attributes__r2__d1__first__bit1)

axiom storage_place_attributes__r2__d1__last__bit_axiom1 :
  (storage_place_attributes__r2__d1__first__bit1 <  storage_place_attributes__r2__d1__last__bit1)

axiom storage_place_attributes__r2__d1__position_axiom1 :
  (0 <= storage_place_attributes__r2__d1__position1)

logic storage_place_attributes__r2__d3__first__bit1 : int

logic storage_place_attributes__r2__d3__last__bit1 : int

logic storage_place_attributes__r2__d3__position1 : int

axiom storage_place_attributes__r2__d3__first__bit_axiom1 :
  (0 <= storage_place_attributes__r2__d3__first__bit1)

axiom storage_place_attributes__r2__d3__last__bit_axiom1 :
  (storage_place_attributes__r2__d3__first__bit1 <  storage_place_attributes__r2__d3__last__bit1)

axiom storage_place_attributes__r2__d3__position_axiom1 :
  (0 <= storage_place_attributes__r2__d3__position1)

logic storage_place_attributes__r2__d2__first__bit1 : int

logic storage_place_attributes__r2__d2__last__bit1 : int

logic storage_place_attributes__r2__d2__position1 : int

axiom storage_place_attributes__r2__d2__first__bit_axiom1 :
  (0 <= storage_place_attributes__r2__d2__first__bit1)

axiom storage_place_attributes__r2__d2__last__bit_axiom1 :
  (storage_place_attributes__r2__d2__first__bit1 <  storage_place_attributes__r2__d2__last__bit1)

axiom storage_place_attributes__r2__d2__position_axiom1 :
  (0 <= storage_place_attributes__r2__d2__position1)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type r2__ref = { r2__content : us_rep
}

function r2__ref_r2__content__projection(a: r2__ref) : us_rep =
  (a).r2__content

logic o2a__split_discrs : us_split_discrs

logic o2a__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant(temp___expr_221: us_rep,
  temp___is_init_217: bool, temp___skip_constant_218: bool,
  temp___do_toplevel_219: bool, temp___do_typ_inv_220: bool) =
  ((not (temp___skip_constant_218 = true)) -> in_range3(5,
  (temp___expr_221).us_split_discrs1))

predicate default_initial_assumption(temp___expr_223: us_rep,
  temp___skip_top_level_224: bool) =
  ((to_rep1(((temp___expr_223).us_split_discrs1).rec__storage_place_attributes__r2__d1) = 5) and
  ((to_rep(((temp___expr_223).us_split_fields1).rec__storage_place_attributes__r2__d3) = 0) and
  (storage_place_attributes__r2__d2__pred(temp___expr_223) ->
  (((temp___expr_223).us_split_fields1).rec__storage_place_attributes__r2__d2 = of_int(0)))))

predicate default_initial_assumption1(temp___expr_197: us_rep,
  temp___skip_top_level_198: bool) =
  ((to_rep1(((temp___expr_197).us_split_discrs1).rec__storage_place_attributes__r2__d1) = 1) and
  ((to_rep(((temp___expr_197).us_split_fields1).rec__storage_place_attributes__r2__d3) = 0) and
  (storage_place_attributes__r2__d2__pred(temp___expr_197) ->
  (((temp___expr_197).us_split_fields1).rec__storage_place_attributes__r2__d2 = of_int(0)))))

logic o2aa__split_discrs : us_split_discrs

logic o2aa__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS2 : int

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic storage_place_attributes__r2__d1__first__bit2 : int

logic storage_place_attributes__r2__d1__last__bit2 : int

logic storage_place_attributes__r2__d1__position2 : int

axiom storage_place_attributes__r2__d1__first__bit_axiom2 :
  (0 <= storage_place_attributes__r2__d1__first__bit2)

axiom storage_place_attributes__r2__d1__last__bit_axiom2 :
  (storage_place_attributes__r2__d1__first__bit2 <  storage_place_attributes__r2__d1__last__bit2)

axiom storage_place_attributes__r2__d1__position_axiom2 :
  (0 <= storage_place_attributes__r2__d1__position2)

logic storage_place_attributes__r2__d2__first__bit2 : int

logic storage_place_attributes__r2__d2__last__bit2 : int

logic storage_place_attributes__r2__d2__position2 : int

axiom storage_place_attributes__r2__d2__first__bit_axiom2 :
  (0 <= storage_place_attributes__r2__d2__first__bit2)

axiom storage_place_attributes__r2__d2__last__bit_axiom2 :
  (storage_place_attributes__r2__d2__first__bit2 <  storage_place_attributes__r2__d2__last__bit2)

axiom storage_place_attributes__r2__d2__position_axiom2 :
  (0 <= storage_place_attributes__r2__d2__position2)

logic storage_place_attributes__r2__d3__first__bit2 : int

logic storage_place_attributes__r2__d3__last__bit2 : int

logic storage_place_attributes__r2__d3__position2 : int

axiom storage_place_attributes__r2__d3__first__bit_axiom2 :
  (0 <= storage_place_attributes__r2__d3__first__bit2)

axiom storage_place_attributes__r2__d3__last__bit_axiom2 :
  (storage_place_attributes__r2__d3__first__bit2 <  storage_place_attributes__r2__d3__last__bit2)

axiom storage_place_attributes__r2__d3__position_axiom2 :
  (0 <= storage_place_attributes__r2__d3__position2)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type r2b__ref = { r2b__content : us_rep
}

function r2b__ref_r2b__content__projection(a: r2b__ref) : us_rep =
  (a).r2b__content

logic o2b__split_discrs : us_split_discrs

logic o2b__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_invariant1(temp___expr_230: us_rep,
  temp___is_init_226: bool, temp___skip_constant_227: bool,
  temp___do_toplevel_228: bool, temp___do_typ_inv_229: bool) =
  ((not (temp___skip_constant_227 = true)) -> in_range3(1,
  (temp___expr_230).us_split_discrs1))

predicate default_initial_assumption2(temp___expr_232: us_rep,
  temp___skip_top_level_233: bool) =
  ((to_rep1(((temp___expr_232).us_split_discrs1).rec__storage_place_attributes__r2__d1) = 1) and
  ((storage_place_attributes__r2__d2__pred(temp___expr_232) ->
  (((temp___expr_232).us_split_fields1).rec__storage_place_attributes__r2__d2 = of_int(0))) and
  (to_rep(((temp___expr_232).us_split_fields1).rec__storage_place_attributes__r2__d3) = 0)))

logic o2__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS4 : int

type tTr2a_arrSP1

logic tTr2a_arrSP1qtint : tTr2a_arrSP1 -> int

axiom tTr2a_arrSP1qtaxiom :
  (forall i:tTr2a_arrSP1. (1 <= tTr2a_arrSP1qtint(i)))

axiom tTr2a_arrSP1qtaxiom1 :
  (forall i:tTr2a_arrSP1. (tTr2a_arrSP1qtint(i) <= 3))

predicate in_range4(x: int) = ((1 <= x) and (x <= 3))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq5 : tTr2a_arrSP1, tTr2a_arrSP1 -> bool

logic dummy5 : tTr2a_arrSP1

type tTr2a_arrSP1__ref = { tTr2a_arrSP1__content : tTr2a_arrSP1
}

function tTr2a_arrSP1__ref_tTr2a_arrSP1__content__projection(a: tTr2a_arrSP1__ref) : tTr2a_arrSP1 =
  (a).tTr2a_arrSP1__content

predicate dynamic_invariant2(temp___expr_246: (int,us_rep) farray,
  temp___is_init_242: bool, temp___skip_constant_243: bool,
  temp___do_toplevel_244: bool, temp___do_typ_inv_245: bool) =
  (forall temp___247:int. (((1 <= temp___247) and (temp___247 <= 3)) ->
  in_range3(5, ((temp___expr_246[temp___247])).us_split_discrs1)))

predicate default_initial_assumption3(temp___expr_249: (int,us_rep) farray,
  temp___skip_top_level_250: bool) =
  (forall temp___251:int. (((1 <= temp___251) and (temp___251 <= 3)) ->
  ((to_rep1((((temp___expr_249[temp___251])).us_split_discrs1).rec__storage_place_attributes__r2__d1) = 5) and
  ((to_rep((((temp___expr_249[temp___251])).us_split_fields1).rec__storage_place_attributes__r2__d3) = 0) and
  (storage_place_attributes__r2__d2__pred((temp___expr_249[temp___251])) ->
  ((((temp___expr_249[temp___251])).us_split_fields1).rec__storage_place_attributes__r2__d2 = of_int(0)))))))

predicate dynamic_invariant3(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate dynamic_invariant4(temp___expr_180: int, temp___is_init_176: bool,
  temp___skip_constant_177: bool, temp___do_toplevel_178: bool,
  temp___do_typ_inv_179: bool) = (((temp___is_init_176 = true) or
  (1 <= 10)) -> in_range2(temp___expr_180))

 (* File "storage_place_attributes.adb", line 1, characters 0-0 *)
goal defqtvc : in_range2(5)
