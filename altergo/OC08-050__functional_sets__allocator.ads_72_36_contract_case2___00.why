(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type status

predicate in_range(x: int) = ((0 <= x) and (x <= 1))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : status, status -> bool

logic dummy : status

type status__ref = { status__content : status
}

function status__ref_status__content__projection(a: status__ref) : status =
  (a).status__content

logic to_rep : status -> int

logic of_rep : int -> status

axiom inversion_axiom :
  (forall x:status [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:status [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,status) farray
}

logic slide : (int,status) farray, int, int -> (int,status) farray

axiom slide_eq :
  (forall a:(int,status) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,status) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq1(a: (int,status) farray, a__first: int, a__last: int,
  b: (int,status) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,status) farray. forall b:(int,status) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,status) farray. forall b:(int,status) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,status) farray. forall b:(int,status) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,status) farray. forall b:(int,status) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic attr__ATTRIBUTE_ADDRESS : int

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq2 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type set__ref = { set__content : us_rep
}

function set__ref_set__content__projection(a: set__ref) : us_rep =
  (a).set__content

logic mem : us_rep, int -> bool

logic mem__function_guard : bool, us_rep, int -> prop

type element_type

logic element_typeqtint : element_type -> int

axiom element_typeqtaxiom :
  (forall i:element_type. (0 <= element_typeqtint(i)))

axiom element_typeqtaxiom1 :
  (forall i:element_type. (element_typeqtint(i) <= 3))

predicate in_range1(x: int) = ((0 <= x) and (x <= 3))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq2 : element_type, element_type -> bool

logic dummy2 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_element_type__content__projection(a: element_type__ref) : element_type =
  (a).element_type__content

predicate dynamic_invariant(temp___expr_215: int, temp___is_init_211: bool,
  temp___skip_constant_212: bool, temp___do_toplevel_213: bool,
  temp___do_typ_inv_214: bool) = (((temp___is_init_211 = true) or
  (0 <= 3)) -> in_range1(temp___expr_215))

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep. oeq__function_guard(oeq(a, b), a, b))

axiom user_eq__def_axiom1 :
  (forall a:us_rep. forall b:us_rep [user_eq1(a, b)]. (user_eq1(a,
  b) = oeq(a, b)))

axiom temp___result_227qtdef :
  (forall temp___226:us_rep. is_empty__function_guard(is_empty(temp___226),
  temp___226))

predicate default_initial_assumption(temp___expr_224: us_rep,
  temp___skip_top_level_225: bool) =
  ((not (temp___skip_top_level_225 = true)) ->
  (is_empty(temp___expr_224) = true))

axiom mem__post_axiom :
  (forall s:us_rep.
  (forall e:int [mem(s, e)]. (dynamic_invariant(e, true, true, true, true) ->
  (let result = mem(s, e) : bool in (mem__function_guard(result, s, e) ->
  ((e = 0) -> (not (result = true))))))))

logic is_add : us_rep, int, us_rep -> bool

logic is_add__function_guard : bool, us_rep, int, us_rep -> prop

axiom is_add__post_axiom :
  (forall s:us_rep. forall result__:us_rep.
  (forall e:int [is_add(s, e, result__)]. (dynamic_invariant(e, true, true,
  true, true) ->
  (forall result__1:us_rep. forall e1:int. mem__function_guard(mem(result__1,
  e1), result__1, e1)))))

axiom is_add__post_axiom1 :
  (forall s:us_rep. forall result__:us_rep.
  (forall e:int [is_add(s, e, result__)]. (dynamic_invariant(e, true, true,
  true, true) ->
  (forall s1:us_rep. forall e1:int. mem__function_guard(mem(s1, e1), s1, e1)))))

axiom is_add__post_axiom2 :
  (forall s:us_rep. forall result__:us_rep.
  (forall e:int [is_add(s, e, result__)]. (dynamic_invariant(e, true, true,
  true, true) ->
  (forall result__1:us_rep. forall f:int. mem__function_guard(mem(result__1,
  f), result__1, f)))))

axiom is_add__post_axiom3 :
  (forall s:us_rep. forall result__:us_rep.
  (forall e:int [is_add(s, e, result__)]. (dynamic_invariant(e, true, true,
  true, true) ->
  (forall s1:us_rep. forall f:int. mem__function_guard(mem(s1, f), s1, f)))))

axiom is_add__post_axiom4 :
  (forall s:us_rep. forall result__:us_rep.
  (forall e:int [is_add(s, e, result__)]. (dynamic_invariant(e, true, true,
  true, true) ->
  (forall s1:us_rep. forall e1:int. mem__function_guard(mem(s1, e1), s1, e1)))))

axiom is_add__post_axiom5 :
  (forall s:us_rep. forall result__:us_rep.
  (forall e:int [is_add(s, e, result__)]. (dynamic_invariant(e, true, true,
  true, true) ->
  (forall result__1:us_rep. forall e1:int. mem__function_guard(mem(result__1,
  e1), result__1, e1)))))

axiom is_add__post_axiom6 :
  (forall s:us_rep. forall result__:us_rep.
  (forall e:int [is_add(s, e, result__)]. (dynamic_invariant(e, true, true,
  true, true) -> (let result = is_add(s, e, result__) : bool in
  (is_add__function_guard(result, s, e, result__) -> ((result = true) ->
  (not (e = 0))))))))

axiom is_add__post_axiom7 :
  (forall s:us_rep. forall result__:us_rep.
  (forall e:int [is_add(s, e, result__)]. (dynamic_invariant(e, true, true,
  true, true) -> (let result = is_add(s, e, result__) : bool in
  (is_add__function_guard(result, s, e, result__) -> ((result = true) ->
  (mem(result__, e) = true)))))))

axiom is_add__post_axiom8 :
  (forall s:us_rep. forall result__:us_rep.
  (forall e:int [is_add(s, e, result__)]. (dynamic_invariant(e, true, true,
  true, true) -> (let result = is_add(s, e, result__) : bool in
  (is_add__function_guard(result, s, e, result__) -> ((result = true) ->
  (not (mem(s, e) = true))))))))

axiom is_add__post_axiom9 :
  (forall s:us_rep. forall result__:us_rep.
  (forall e:int [is_add(s, e, result__)]. (dynamic_invariant(e, true, true,
  true, true) -> (let result = is_add(s, e, result__) : bool in
  (is_add__function_guard(result, s, e, result__) -> ((result = true) ->
  (forall f:int. ((in_range1(f) and (mem(result__, f) = true)) -> ((mem(s,
  f) = true) or (f = e))))))))))

axiom is_add__post_axiom10 :
  (forall s:us_rep. forall result__:us_rep.
  (forall e:int [is_add(s, e, result__)]. (dynamic_invariant(e, true, true,
  true, true) -> (let result = is_add(s, e, result__) : bool in
  (is_add__function_guard(result, s, e, result__) -> ((result = true) ->
  (forall e1:int. ((in_range1(e1) and (mem(s, e1) = true)) -> (mem(result__,
  e1) = true)))))))))

axiom is_add__post_axiom11 :
  (forall s:us_rep. forall result__:us_rep.
  (forall e:int [is_add(s, e, result__)]. (dynamic_invariant(e, true, true,
  true, true) -> (let result = is_add(s, e, result__) : bool in
  (is_add__function_guard(result, s, e, result__) -> ((((((not (e = 0)) and
  (mem(result__, e) = true)) and (not (mem(s, e) = true))) and
  (forall f:int. ((in_range1(f) and (mem(result__, f) = true)) -> ((mem(s,
  f) = true) or (f = e))))) and
  (forall e1:int. ((in_range1(e1) and (mem(s, e1) = true)) -> (mem(result__,
  e1) = true)))) -> (result = true)))))))

type us_split_fields = { rec__allocator__m__t__available : us_rep;
rec__allocator__m__t__allocated : us_rep
}

function us_split_fields_rec__allocator__m__t__available__projection(a: us_split_fields) : us_rep =
  (a).rec__allocator__m__t__available

function us_split_fields_rec__allocator__m__t__allocated__projection(a: us_split_fields) : us_rep =
  (a).rec__allocator__m__t__allocated

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

function bool_eq4(a: us_rep1, b: us_rep1) : bool =
  (if ((user_eq1(((a).us_split_fields1).rec__allocator__m__t__available,
  ((b).us_split_fields1).rec__allocator__m__t__available) = true) and
  (user_eq1(((a).us_split_fields1).rec__allocator__m__t__allocated,
  ((b).us_split_fields1).rec__allocator__m__t__allocated) = true)) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic allocator__m__t__available__first__bit : int

logic allocator__m__t__available__last__bit : int

logic allocator__m__t__available__position : int

axiom allocator__m__t__available__first__bit_axiom :
  (0 <= allocator__m__t__available__first__bit)

axiom allocator__m__t__available__last__bit_axiom :
  (allocator__m__t__available__first__bit <  allocator__m__t__available__last__bit)

axiom allocator__m__t__available__position_axiom :
  (0 <= allocator__m__t__available__position)

logic allocator__m__t__allocated__first__bit : int

logic allocator__m__t__allocated__last__bit : int

logic allocator__m__t__allocated__position : int

axiom allocator__m__t__allocated__first__bit_axiom :
  (0 <= allocator__m__t__allocated__first__bit)

axiom allocator__m__t__allocated__last__bit_axiom :
  (allocator__m__t__allocated__first__bit <  allocator__m__t__allocated__last__bit)

axiom allocator__m__t__allocated__position_axiom :
  (0 <= allocator__m__t__allocated__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type t__ref = { t__content : us_rep1
}

function t__ref_t__content__projection(a: t__ref) : us_rep1 = (a).t__content

logic oeq1 : us_rep1, us_rep1 -> bool

logic oeq__function_guard1 : bool, us_rep1, us_rep1 -> prop

axiom user_eq__def_axiom2 :
  (forall a:us_rep1. forall b:us_rep1. oeq__function_guard1(oeq1(a, b), a,
  b))

axiom user_eq__def_axiom3 :
  (forall a:us_rep1. forall b:us_rep1 [user_eq3(a, b)]. (user_eq3(a,
  b) = oeq1(a, b)))

axiom temp___result_297qtdef :
  (forall temp___296:us_rep. is_empty__function_guard(is_empty(temp___296),
  temp___296))

axiom temp___result_300qtdef :
  (forall temp___299:us_rep. is_empty__function_guard(is_empty(temp___299),
  temp___299))

predicate default_initial_assumption1(temp___expr_293: us_rep1,
  temp___skip_top_level_294: bool) =
  ((is_empty(((temp___expr_293).us_split_fields1).rec__allocator__m__t__available) = true) and
  (is_empty(((temp___expr_293).us_split_fields1).rec__allocator__m__t__allocated) = true))

axiom oeq__def_axiom :
  (forall x:us_rep1. forall y:us_rep1.
  oeq__function_guard(oeq(((x).us_split_fields1).rec__allocator__m__t__available,
  ((y).us_split_fields1).rec__allocator__m__t__available),
  ((x).us_split_fields1).rec__allocator__m__t__available,
  ((y).us_split_fields1).rec__allocator__m__t__available))

axiom oeq__def_axiom1 :
  (forall x:us_rep1. forall y:us_rep1.
  oeq__function_guard(oeq(((x).us_split_fields1).rec__allocator__m__t__allocated,
  ((y).us_split_fields1).rec__allocator__m__t__allocated),
  ((x).us_split_fields1).rec__allocator__m__t__allocated,
  ((y).us_split_fields1).rec__allocator__m__t__allocated))

axiom oeq__def_axiom2 :
  (forall x:us_rep1. forall y:us_rep1 [oeq1(x, y)]. ((oeq1(x, y) = true) ->
  (oeq(((x).us_split_fields1).rec__allocator__m__t__available,
  ((y).us_split_fields1).rec__allocator__m__t__available) = true)))

axiom oeq__def_axiom3 :
  (forall x:us_rep1. forall y:us_rep1 [oeq1(x, y)]. ((oeq1(x, y) = true) ->
  (oeq(((x).us_split_fields1).rec__allocator__m__t__allocated,
  ((y).us_split_fields1).rec__allocator__m__t__allocated) = true)))

axiom oeq__def_axiom4 :
  (forall x:us_rep1. forall y:us_rep1 [oeq1(x, y)].
  (((oeq(((x).us_split_fields1).rec__allocator__m__t__available,
  ((y).us_split_fields1).rec__allocator__m__t__available) = true) and
  (oeq(((x).us_split_fields1).rec__allocator__m__t__allocated,
  ((y).us_split_fields1).rec__allocator__m__t__allocated) = true)) ->
  (oeq1(x, y) = true)))

logic model : (int,status) farray -> us_rep1

logic model__function_guard : us_rep1, (int,status) farray -> prop

logic is_valid : us_rep1, (int,status) farray -> bool

logic is_valid__function_guard : bool, us_rep1, (int,status) farray -> prop

axiom model__post_axiom :
  (forall allocator__data:(int,status) farray. forall result:us_rep1.
  is_valid__function_guard(is_valid(result, allocator__data), result,
  allocator__data))

axiom model__post_axiom1 :
  (forall allocator__data:(int,status) farray [model(allocator__data)].
  (let result = model(allocator__data) : us_rep1 in
  (model__function_guard(result, allocator__data) -> (is_valid(result,
  allocator__data) = true))))

logic res : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type resource

logic resourceqtint : resource -> int

axiom resourceqtaxiom : (forall i:resource. (0 <= resourceqtint(i)))

axiom resourceqtaxiom1 : (forall i:resource. (resourceqtint(i) <= 3))

predicate in_range2(x: int) = ((0 <= x) and (x <= 3))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq4 : resource, resource -> bool

logic dummy4 : resource

type resource__ref = { resource__content : resource
}

function resource__ref_resource__content__projection(a: resource__ref) : resource =
  (a).resource__content

predicate dynamic_invariant1(temp___expr_178: int, temp___is_init_174: bool,
  temp___skip_constant_175: bool, temp___do_toplevel_176: bool,
  temp___do_typ_inv_177: bool) = (((temp___is_init_174 = true) or
  (0 <= 3)) -> in_range2(temp___expr_178))

type valid_resource

logic valid_resourceqtint : valid_resource -> int

axiom valid_resourceqtaxiom :
  (forall i:valid_resource. (1 <= valid_resourceqtint(i)))

axiom valid_resourceqtaxiom1 :
  (forall i:valid_resource. (valid_resourceqtint(i) <= 3))

predicate in_range3(x: int) = ((1 <= x) and (x <= 3))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq5 : valid_resource, valid_resource -> bool

logic dummy5 : valid_resource

type valid_resource__ref = { valid_resource__content : valid_resource
}

function valid_resource__ref_valid_resource__content__projection(a: valid_resource__ref) : valid_resource =
  (a).valid_resource__content

predicate dynamic_invariant2(temp___expr_192: int, temp___is_init_188: bool,
  temp___skip_constant_189: bool, temp___do_toplevel_190: bool,
  temp___do_typ_inv_191: bool) = (((temp___is_init_188 = true) or
  (0 <= 1)) -> in_range(temp___expr_192))

predicate dynamic_invariant3(temp___expr_185: int, temp___is_init_181: bool,
  temp___skip_constant_182: bool, temp___do_toplevel_183: bool,
  temp___do_typ_inv_184: bool) = (((temp___is_init_181 = true) or
  (1 <= 3)) -> in_range3(temp___expr_185))

axiom is_valid__def_axiom :
  (forall temp___315:us_rep. forall e:int.
  mem__function_guard(mem(temp___315, e), temp___315, e))

axiom is_valid__def_axiom1 :
  (forall temp___317:us_rep. forall e:int.
  mem__function_guard(mem(temp___317, e), temp___317, e))

axiom is_valid__def_axiom2 :
  (forall m:us_rep1. forall r:int.
  mem__function_guard(mem(((m).us_split_fields1).rec__allocator__m__t__available,
  r), ((m).us_split_fields1).rec__allocator__m__t__available, r))

axiom is_valid__def_axiom3 :
  (forall m:us_rep1. forall r:int.
  mem__function_guard(mem(((m).us_split_fields1).rec__allocator__m__t__allocated,
  r), ((m).us_split_fields1).rec__allocator__m__t__allocated, r))

axiom is_valid__def_axiom4 :
  (forall m:us_rep1. forall r:int.
  mem__function_guard(mem(((m).us_split_fields1).rec__allocator__m__t__available,
  r), ((m).us_split_fields1).rec__allocator__m__t__available, r))

axiom is_valid__def_axiom5 :
  (forall m:us_rep1. forall r:int.
  mem__function_guard(mem(((m).us_split_fields1).rec__allocator__m__t__allocated,
  r), ((m).us_split_fields1).rec__allocator__m__t__allocated, r))

axiom is_valid__def_axiom6 :
  (forall m:us_rep1.
  (forall allocator__data:(int,status) farray [is_valid(m, allocator__data)].
  ((is_valid(m, allocator__data) = true) ->
  (forall e:int. ((in_range1(e) and
  (mem(((m).us_split_fields1).rec__allocator__m__t__available, e) = true)) ->
  in_range3(e))))))

axiom is_valid__def_axiom7 :
  (forall m:us_rep1.
  (forall allocator__data:(int,status) farray [is_valid(m, allocator__data)].
  ((is_valid(m, allocator__data) = true) ->
  (forall e:int. ((in_range1(e) and
  (mem(((m).us_split_fields1).rec__allocator__m__t__allocated, e) = true)) ->
  in_range3(e))))))

axiom is_valid__def_axiom8 :
  (forall m:us_rep1.
  (forall allocator__data:(int,status) farray [is_valid(m, allocator__data)].
  ((is_valid(m, allocator__data) = true) ->
  (forall r:int. (((1 <= r) and (r <= 3)) ->
  ((to_rep((allocator__data[r])) = 0) ->
  (mem(((m).us_split_fields1).rec__allocator__m__t__available, r) = true)))))))

axiom is_valid__def_axiom9 :
  (forall m:us_rep1.
  (forall allocator__data:(int,status) farray [is_valid(m, allocator__data)].
  ((is_valid(m, allocator__data) = true) ->
  (forall r:int. (((1 <= r) and (r <= 3)) ->
  ((to_rep((allocator__data[r])) = 0) ->
  (not (mem(((m).us_split_fields1).rec__allocator__m__t__allocated,
  r) = true))))))))

axiom is_valid__def_axiom10 :
  (forall m:us_rep1.
  (forall allocator__data:(int,status) farray [is_valid(m, allocator__data)].
  ((is_valid(m, allocator__data) = true) ->
  (forall r:int. (((1 <= r) and (r <= 3)) ->
  ((not (to_rep((allocator__data[r])) = 0)) ->
  (not (mem(((m).us_split_fields1).rec__allocator__m__t__available,
  r) = true))))))))

axiom is_valid__def_axiom11 :
  (forall m:us_rep1.
  (forall allocator__data:(int,status) farray [is_valid(m, allocator__data)].
  ((is_valid(m, allocator__data) = true) ->
  (forall r:int. (((1 <= r) and (r <= 3)) ->
  ((not (to_rep((allocator__data[r])) = 0)) ->
  (mem(((m).us_split_fields1).rec__allocator__m__t__allocated, r) = true)))))))

axiom is_valid__def_axiom12 :
  (forall m:us_rep1.
  (forall allocator__data:(int,status) farray [is_valid(m, allocator__data)].
  ((((forall e:int. ((in_range1(e) and
     (mem(((m).us_split_fields1).rec__allocator__m__t__available,
     e) = true)) -> in_range3(e))) and
  (forall e:int. ((in_range1(e) and
  (mem(((m).us_split_fields1).rec__allocator__m__t__allocated, e) = true)) ->
  in_range3(e)))) and
  (forall r:int. (((1 <= r) and (r <= 3)) ->
  (if (to_rep((allocator__data[r])) = 0) then ((mem(((m).us_split_fields1).rec__allocator__m__t__available,
  r) = true) and
  (not (mem(((m).us_split_fields1).rec__allocator__m__t__allocated,
  r) = true))) else ((not (mem(((m).us_split_fields1).rec__allocator__m__t__available,
  r) = true)) and
  (mem(((m).us_split_fields1).rec__allocator__m__t__allocated, r) = true)))))) ->
  (is_valid(m, allocator__data) = true))))

axiom oeq__post_axiom :
  (forall s1:us_rep. forall e:int. mem__function_guard(mem(s1, e), s1, e))

axiom oeq__post_axiom1 :
  (forall s2:us_rep. forall e:int. mem__function_guard(mem(s2, e), s2, e))

axiom oeq__post_axiom2 :
  (forall s2:us_rep. forall e:int. mem__function_guard(mem(s2, e), s2, e))

axiom oeq__post_axiom3 :
  (forall s1:us_rep. forall e:int. mem__function_guard(mem(s1, e), s1, e))

axiom oeq__post_axiom4 :
  (forall s1:us_rep. forall s2:us_rep [oeq(s1, s2)]. (let result = oeq(s1,
  s2) : bool in (oeq__function_guard(result, s1, s2) -> ((result = true) ->
  (forall e:int. ((in_range1(e) and (mem(s1, e) = true)) -> (mem(s2,
  e) = true)))))))

axiom oeq__post_axiom5 :
  (forall s1:us_rep. forall s2:us_rep [oeq(s1, s2)]. (let result = oeq(s1,
  s2) : bool in (oeq__function_guard(result, s1, s2) -> ((result = true) ->
  (forall e:int. ((in_range1(e) and (mem(s2, e) = true)) -> (mem(s1,
  e) = true)))))))

axiom oeq__post_axiom6 :
  (forall s1:us_rep. forall s2:us_rep [oeq(s1, s2)]. (let result = oeq(s1,
  s2) : bool in (oeq__function_guard(result, s1, s2) ->
  (((forall e:int. ((in_range1(e) and (mem(s1, e) = true)) -> (mem(s2,
    e) = true))) and
  (forall e:int. ((in_range1(e) and (mem(s2, e) = true)) -> (mem(s1,
  e) = true)))) -> (result = true)))))

axiom is_empty__post_axiom :
  (forall s:us_rep. forall e:int. mem__function_guard(mem(s, e), s, e))

axiom is_empty__post_axiom1 :
  (forall s:us_rep [is_empty(s)]. (let result = is_empty(s) : bool in
  (is_empty__function_guard(result, s) -> ((result = true) ->
  (forall e:int. (not (in_range1(e) and (mem(s, e) = true))))))))

axiom is_empty__post_axiom2 :
  (forall s:us_rep [is_empty(s)]. (let result = is_empty(s) : bool in
  (is_empty__function_guard(result, s) ->
  ((forall e:int. (not (in_range1(e) and (mem(s, e) = true)))) ->
  (result = true)))))

 (* File "allocator.ads", line 67, characters 0-0 *)
goal defqtvc :
  (forall data:(int,status) farray. (dynamic_invariant1(res, true, false,
  true, true) ->
  ((forall data1:(int,status) farray. model__function_guard(model(data1),
   data1)) ->
  ((forall data1:(int,status) farray. model__function_guard(model(data1),
   data1)) ->
  ((forall data1:(int,status) farray.
   mem__function_guard(mem(((model(data1)).us_split_fields1).rec__allocator__m__t__allocated,
   res), ((model(data1)).us_split_fields1).rec__allocator__m__t__allocated,
   res)) ->
  ((forall data1:(int,status) farray. model__function_guard(model(data1),
   data1)) ->
  ((forall data1:(int,status) farray. model__function_guard(model(data1),
   data1)) ->
  ((forall data1:(int,status) farray. model__function_guard(model(data1),
   data1)) ->
  (forall data1:(int,status) farray.
  ((exists o:bool. ((if (not (res = 0)) then (((1 <= res) and (res <= 3)) and
   (exists o1:int. ((to_rep((data[res])) = o1) and
   (o = (if (o1 = 1) then true else false))))) else (o = false)) and
   (exists spark__branch:bool. ((spark__branch = o) and
   (if (spark__branch = true) then (exists o1:status. ((to_rep(o1) = 0) and
                                   (((1 <= res) and (res <= 3)) and
                                   (data1 = (data[res <- o1]))))) else (data1 = data)))))) ->
  ((mem(((model(data)).us_split_fields1).rec__allocator__m__t__allocated,
  res) = true) ->
  ((forall data2:(int,status) farray. model__function_guard(model(data2),
   data2)) ->
  ((forall data2:(int,status) farray. model__function_guard(model(data2),
   data2)) ->
  ((forall usf:us_rep. forall data2:(int,status) farray.
   is_add__function_guard(is_add(usf, res,
   ((model(data2)).us_split_fields1).rec__allocator__m__t__available), usf,
   res, ((model(data2)).us_split_fields1).rec__allocator__m__t__available)) ->
  (is_add(((model(data)).us_split_fields1).rec__allocator__m__t__available,
  res,
  ((model(data1)).us_split_fields1).rec__allocator__m__t__available) = true)))))))))))))))
