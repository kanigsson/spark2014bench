(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_discrs = { rec__membership_discr__root__c : natural
}

function us_split_discrs_rec__membership_discr__root__c__projection(a: us_split_discrs) : natural =
  (a).rec__membership_discr__root__c

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__ext__ : us_private
}

function us_split_fields_rec__ext____projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__tag : int
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__projection(a: us_rep) : int = (a).attr__tag

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_discrs1).rec__membership_discr__root__c) = to_rep(((b).us_split_discrs1).rec__membership_discr__root__c)) then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic membership_discr__root__c__first__bit : int

logic membership_discr__root__c__last__bit : int

logic membership_discr__root__c__position : int

axiom membership_discr__root__c__first__bit_axiom :
  (0 <= membership_discr__root__c__first__bit)

axiom membership_discr__root__c__last__bit_axiom :
  (membership_discr__root__c__first__bit <  membership_discr__root__c__last__bit)

axiom membership_discr__root__c__position_axiom :
  (0 <= membership_discr__root__c__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type root__ref = { root__content : us_rep
}

function root__ref_root__content__projection(a: root__ref) : us_rep =
  (a).root__content

logic us_tag1 : int

predicate in_range2(rec__membership_discr__root__c1: int, a: us_rep) =
  (rec__membership_discr__root__c1 = to_rep(((a).us_split_discrs1).rec__membership_discr__root__c))

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic membership_discr__root__c__first__bit1 : int

logic membership_discr__root__c__last__bit1 : int

logic membership_discr__root__c__position1 : int

axiom membership_discr__root__c__first__bit_axiom1 :
  (0 <= membership_discr__root__c__first__bit1)

axiom membership_discr__root__c__last__bit_axiom1 :
  (membership_discr__root__c__first__bit1 <  membership_discr__root__c__last__bit1)

axiom membership_discr__root__c__position_axiom1 :
  (0 <= membership_discr__root__c__position1)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type root_01__ref = { root_01__content : us_rep
}

function root_01__ref_root_01__content__projection(a: root_01__ref) : us_rep =
  (a).root_01__content

logic us_tag2 : int

predicate in_range3(rec__membership_discr__root__c1: int, a: us_rep) =
  (rec__membership_discr__root__c1 = to_rep(((a).us_split_discrs1).rec__membership_discr__root__c))

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic membership_discr__root__c__first__bit2 : int

logic membership_discr__root__c__last__bit2 : int

logic membership_discr__root__c__position2 : int

axiom membership_discr__root__c__first__bit_axiom2 :
  (0 <= membership_discr__root__c__first__bit2)

axiom membership_discr__root__c__last__bit_axiom2 :
  (membership_discr__root__c__first__bit2 <  membership_discr__root__c__last__bit2)

axiom membership_discr__root__c__position_axiom2 :
  (0 <= membership_discr__root__c__position2)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type root_02__ref = { root_02__content : us_rep
}

function root_02__ref_root_02__content__projection(a: root_02__ref) : us_rep =
  (a).root_02__content

logic r02__split_discrs : us_split_discrs

logic r02__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

predicate dynamic_invariant(temp___expr_194: us_rep,
  temp___is_init_190: bool, temp___skip_constant_191: bool,
  temp___do_toplevel_192: bool, temp___do_typ_inv_193: bool) =
  ((not (temp___skip_constant_191 = true)) -> in_range3(0, temp___expr_194))

predicate default_initial_assumption(temp___expr_196: us_rep,
  temp___skip_top_level_197: bool) =
  (((temp___expr_196).attr__tag = us_tag2) and
  (to_rep(((temp___expr_196).us_split_discrs1).rec__membership_discr__root__c) = 0))

predicate dynamic_invariant1(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

predicate dynamic_invariant2(temp___expr_185: us_rep,
  temp___is_init_181: bool, temp___skip_constant_182: bool,
  temp___do_toplevel_183: bool, temp___do_typ_inv_184: bool) =
  ((not (temp___skip_constant_182 = true)) -> in_range2(0, temp___expr_185))

predicate default_initial_assumption1(temp___expr_187: us_rep,
  temp___skip_top_level_188: bool) =
  (((temp___expr_187).attr__tag = us_tag1) and
  (to_rep(((temp___expr_187).us_split_discrs1).rec__membership_discr__root__c) = 0))

 (* File "membership_discr.adb", line 24, characters 0-0 *)
goal defqtvc :
  (forall r02__split_fields:us_private. (default_initial_assumption({
  us_split_discrs1 = r02__split_discrs; us_split_fields1 = { rec__ext__ =
  r02__split_fields }; attr__tag = r02__attr__tag }, false) ->
  (dynamic_invariant({ us_split_discrs1 = r02__split_discrs;
  us_split_fields1 = { rec__ext__ = r02__split_fields }; attr__tag =
  r02__attr__tag }, false, false, true, true) ->
  ((r02__attr__tag = us_tag) -> in_range2(0, { us_split_discrs1 =
  r02__split_discrs; us_split_fields1 = { rec__ext__ = r02__split_fields };
  attr__tag = r02__attr__tag })))))
