(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

logic qf1 : int -> int

logic qf1__function_guard : int, int -> prop

axiom qf1__post_axiom :
  (forall j:int [qf1(j)]. (dynamic_invariant(j, true, true, true, true) ->
  (let result = qf1(j) : int in (qf1__function_guard(result, j) ->
  dynamic_invariant(result, true, false, true, true)))))

logic a : bool

logic attr__ATTRIBUTE_ADDRESS : int

logic b : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic c : int

logic attr__ATTRIBUTE_ADDRESS2 : int

function ite(b1: bool, x: 'a1, y: 'a1) : 'a1 = match_bool(b1, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b1: bool) : int = (if (b1 = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range1(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE1 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> bool

type t2

logic t2qtint : t2 -> int

axiom t2qtaxiom : (forall i:t2. ((- 2147483648) <= t2qtint(i)))

axiom t2qtaxiom1 : (forall i:t2. (t2qtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : t2, t2 -> bool

logic dummy1 : t2

type t2__ref = { t2__content : t2
}

function t2__ref_t2__content__projection(a1: t2__ref) : t2 = (a1).t2__content

function to_rep1(x: t2) : int = t2qtint(x)

logic of_rep1 : int -> t2

axiom inversion_axiom1 :
  (forall x:t2 [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:t2 [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t3

logic t3qtint : t3 -> int

axiom t3qtaxiom : (forall i:t3. (0 <= t3qtint(i)))

axiom t3qtaxiom1 : (forall i:t3. (t3qtint(i) <= 2147483647))

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : t3, t3 -> bool

logic dummy2 : t3

type t3__ref = { t3__content : t3
}

function t3__ref_t3__content__2__projection(a1: t3__ref) : t3 =
  (a1).t3__content

function to_rep2(x: t3) : int = t3qtint(x)

logic of_rep2 : int -> t3

axiom inversion_axiom2 :
  (forall x:t3 [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:t3 [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields = { rec__q__p2__r__a : bool; rec__q__p2__r__b : t2;
rec__q__p2__r__c : t3; rec__q__p2__r__d : integer
}

function us_split_fields_rec__q__p2__r__a__projection(a1: us_split_fields) : bool =
  (a1).rec__q__p2__r__a

function us_split_fields_rec__q__p2__r__b__projection(a1: us_split_fields) : t2 =
  (a1).rec__q__p2__r__b

function us_split_fields_rec__q__p2__r__c__projection(a1: us_split_fields) : t3 =
  (a1).rec__q__p2__r__c

function us_split_fields_rec__q__p2__r__d__projection(a1: us_split_fields) : integer =
  (a1).rec__q__p2__r__d

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__2__projection(a1: us_split_fields__ref) : us_split_fields =
  (a1).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__2__projection(a1: us_rep) : us_split_fields =
  (a1).us_split_fields1

function bool_eq4(a1: us_rep, b1: us_rep) : bool =
  (if (((to_int(((a1).us_split_fields1).rec__q__p2__r__a) = to_int(((b1).us_split_fields1).rec__q__p2__r__a)) and
  (to_rep1(((a1).us_split_fields1).rec__q__p2__r__b) = to_rep1(((b1).us_split_fields1).rec__q__p2__r__b))) and
  ((to_rep2(((a1).us_split_fields1).rec__q__p2__r__c) = to_rep2(((b1).us_split_fields1).rec__q__p2__r__c)) and
  (to_rep(((a1).us_split_fields1).rec__q__p2__r__d) = to_rep(((b1).us_split_fields1).rec__q__p2__r__d)))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic q__p2__r__a__first__bit : int

logic q__p2__r__a__last__bit : int

logic q__p2__r__a__position : int

axiom q__p2__r__a__first__bit_axiom : (0 <= q__p2__r__a__first__bit)

axiom q__p2__r__a__last__bit_axiom :
  (q__p2__r__a__first__bit <  q__p2__r__a__last__bit)

axiom q__p2__r__a__position_axiom : (0 <= q__p2__r__a__position)

logic q__p2__r__b__first__bit : int

logic q__p2__r__b__last__bit : int

logic q__p2__r__b__position : int

axiom q__p2__r__b__first__bit_axiom : (0 <= q__p2__r__b__first__bit)

axiom q__p2__r__b__last__bit_axiom :
  (q__p2__r__b__first__bit <  q__p2__r__b__last__bit)

axiom q__p2__r__b__position_axiom : (0 <= q__p2__r__b__position)

logic q__p2__r__c__first__bit : int

logic q__p2__r__c__last__bit : int

logic q__p2__r__c__position : int

axiom q__p2__r__c__first__bit_axiom : (0 <= q__p2__r__c__first__bit)

axiom q__p2__r__c__last__bit_axiom :
  (q__p2__r__c__first__bit <  q__p2__r__c__last__bit)

axiom q__p2__r__c__position_axiom : (0 <= q__p2__r__c__position)

logic q__p2__r__d__first__bit : int

logic q__p2__r__d__last__bit : int

logic q__p2__r__d__position : int

axiom q__p2__r__d__first__bit_axiom : (0 <= q__p2__r__d__first__bit)

axiom q__p2__r__d__last__bit_axiom :
  (q__p2__r__d__first__bit <  q__p2__r__d__last__bit)

axiom q__p2__r__d__position_axiom : (0 <= q__p2__r__d__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type r__ref = { r__content : us_rep
}

function r__ref_r__content__2__projection(a1: r__ref) : us_rep =
  (a1).r__content

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

predicate dynamic_invariant1(temp___expr_186: int, temp___is_init_182: bool,
  temp___skip_constant_183: bool, temp___do_toplevel_184: bool,
  temp___do_typ_inv_185: bool) = (((temp___is_init_182 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range2(temp___expr_186))

predicate dynamic_invariant2(temp___expr_193: int, temp___is_init_189: bool,
  temp___skip_constant_190: bool, temp___do_toplevel_191: bool,
  temp___do_typ_inv_192: bool) = (((temp___is_init_189 = true) or
  (0 <= 2147483647)) -> in_range3(temp___expr_193))

 (* File "p.ads", line 23, characters 0-0 *)
goal defqtvc :
  (forall tmp:int. (dynamic_invariant1(b, true, false, true, true) ->
  (dynamic_invariant2(c, true, false, true, true) -> (dynamic_invariant(tmp,
  false, false, true, true) ->
  (forall tmp1:int. ((tmp1 = 4) -> (let o = qf1(3) : int in
  ((qf1__function_guard(o, 3) and dynamic_invariant(o, true, false, true,
  true)) -> in_range((tmp1 + o))))))))))
