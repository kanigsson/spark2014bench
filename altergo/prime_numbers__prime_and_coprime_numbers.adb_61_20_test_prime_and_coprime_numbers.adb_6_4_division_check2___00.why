(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (div(x, y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((-abs_int(y)) <  mod(x,
  y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (mod(x, y) <  abs_int(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <  y) then (x % y) else ((x % y) + y))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic are_coprime : int, int -> bool

logic are_coprime__function_guard : bool, int, int -> prop

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

type value_type

logic value_typeqtint : value_type -> int

axiom value_typeqtaxiom : (forall i:value_type. (0 <= value_typeqtint(i)))

axiom value_typeqtaxiom1 :
  (forall i:value_type. (value_typeqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : value_type, value_type -> bool

logic dummy : value_type

type value_type__ref = { value_type__content : value_type
}

function value_type__ref_value_type__content__projection(a: value_type__ref) : value_type =
  (a).value_type__content

predicate dynamic_invariant(temp___expr_200: int, temp___is_init_196: bool,
  temp___skip_constant_197: bool, temp___do_toplevel_198: bool,
  temp___do_typ_inv_199: bool) = (((temp___is_init_196 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_200))

axiom are_coprime__def_axiom :
  (forall v1:int. forall v2:int [are_coprime(v1, v2)]. ((are_coprime(v1,
  v2) = true) -> (0 <  v1)))

axiom are_coprime__def_axiom1 :
  (forall v1:int. forall v2:int [are_coprime(v1, v2)]. ((are_coprime(v1,
  v2) = true) -> (0 <  v2)))

axiom are_coprime__def_axiom2 :
  (forall v1:int. forall v2:int [are_coprime(v1, v2)]. ((are_coprime(v1,
  v2) = true) ->
  (forall v:int. (((2 <= v) and (v <= min(v1, v2))) -> (not ((mod1(v1,
  v) = 0) and (mod1(v2, v) = 0)))))))

axiom are_coprime__def_axiom3 :
  (forall v1:int. forall v2:int [are_coprime(v1, v2)]. ((((0 <  v1) and
  (0 <  v2)) and
  (forall v:int. (((2 <= v) and (v <= min(v1, v2))) -> (not ((mod1(v1,
  v) = 0) and (mod1(v2, v) = 0)))))) -> (are_coprime(v1, v2) = true)))

logic left : int

logic attr__ATTRIBUTE_ADDRESS : int

logic right : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type taS

logic taSqtint : taS -> int

axiom taSqtaxiom : (forall i:taS. (1 <= taSqtint(i)))

axiom taSqtaxiom1 : (forall i:taS. (taSqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : taS, taS -> bool

logic dummy1 : taS

type taS__ref = { taS__content : taS
}

function taS__ref_taS__content__projection(a: taS__ref) : taS =
  (a).taS__content

predicate dynamic_invariant1(temp___expr_239: int, temp___is_init_235: bool,
  temp___skip_constant_236: bool, temp___do_toplevel_237: bool,
  temp___do_typ_inv_238: bool) = (((temp___is_init_235 = true) or
  (1 <= 2147483647)) -> in_range2(temp___expr_239))

type tbS

logic tbSqtint : tbS -> int

axiom tbSqtaxiom : (forall i:tbS. (1 <= tbSqtint(i)))

axiom tbSqtaxiom1 : (forall i:tbS. (tbSqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : tbS, tbS -> bool

logic dummy2 : tbS

type tbS__ref = { tbS__content : tbS
}

function tbS__ref_tbS__content__projection(a: tbS__ref) : tbS =
  (a).tbS__content

predicate dynamic_invariant2(temp___expr_246: int, temp___is_init_242: bool,
  temp___skip_constant_243: bool, temp___do_toplevel_244: bool,
  temp___do_typ_inv_245: bool) = (((temp___is_init_242 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_246))

type trS

logic trSqtint : trS -> int

axiom trSqtaxiom : (forall i:trS. (0 <= trSqtint(i)))

axiom trSqtaxiom1 : (forall i:trS. (trSqtint(i) <= 2147483647))

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : trS, trS -> bool

logic dummy3 : trS

type trS__ref = { trS__content : trS
}

function trS__ref_trS__content__projection(a: trS__ref) : trS =
  (a).trS__content

predicate dynamic_invariant3(temp___expr_253: int, temp___is_init_249: bool,
  temp___skip_constant_250: bool, temp___do_toplevel_251: bool,
  temp___do_typ_inv_252: bool) = (((temp___is_init_249 = true) or
  (0 <= 2147483647)) -> in_range4(temp___expr_253))

axiom cdiv_cases :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((0 <  d) -> (div(n,
  d) = (n / d)))))

axiom cdiv_cases1 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((0 <  d) -> (div(n,
  d) = (-((-n) / d))))))

axiom cdiv_cases2 :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((d <  0) -> (div(n,
  d) = (-(n / (-d)))))))

axiom cdiv_cases3 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((d <  0) -> (div(n,
  d) = ((-n) / (-d))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))))

axiom cmod_cases1 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))))

axiom cmod_cases2 :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))))

axiom cmod_cases3 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d)))))))

 (* File "prime_and_coprime_numbers.adb", line 29, characters 0-0 *)
goal defqtvc :
  (forall a:int. forall b:int. forall r:int. (dynamic_invariant(left, true,
  false, true, true) -> (dynamic_invariant(right, true, false, true, true) ->
  (((2 <= left) and (0 <= right)) ->
  (are_coprime__function_guard(are_coprime(left, right), left, right) ->
  (dynamic_invariant1(a, false, false, true, true) -> (dynamic_invariant2(b,
  false, false, true, true) -> (dynamic_invariant3(r, false, false, true,
  true) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (left = 0) then true else false)) ->
  ((not (spark__branch = true)) ->
  (forall spark__branch1:bool.
  ((spark__branch1 = (if (right = 0) then true else false)) ->
  ((not (spark__branch1 = true)) -> (let o = left : int in (in_range2(o) ->
  (forall a1:int. ((a1 = o) -> (let o1 = right : int in (in_range3(o1) ->
  (forall b1:int. ((b1 = o1) ->
  (forall a2:int. forall b2:int. forall r1:int.
  ((forall a3:int. forall b3:int. are_coprime__function_guard(are_coprime(a3,
   b3), a3, b3)) ->
  (are_coprime__function_guard(are_coprime(left, right), left, right) ->
  ((((0 <  a2) and (0 <  b2)) and ((not ((a2 = 1) and (b2 = 1))) and
  ((are_coprime(a2, b2) = true) <-> (are_coprime(left, right) = true)))) ->
  (((dynamic_invariant2(b2, false, true, true, true) and
  dynamic_invariant3(r1, false, true, true, true)) and dynamic_invariant1(a2,
  false, true, true, true)) -> (not (b2 = 0)))))))))))))))))))))))))))))
