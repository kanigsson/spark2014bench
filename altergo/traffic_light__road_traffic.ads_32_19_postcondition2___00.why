(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type path

predicate in_range1(x: int) = ((0 <= x) and (x <= 3))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : path, path -> bool

logic dummy : path

type path__ref = { path__content : path
}

function path__ref_path__content__projection(a: path__ref) : path =
  (a).path__content

logic to_rep : path -> int

logic of_rep : int -> path

axiom inversion_axiom : (forall x:path [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:path [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__road_traffic__conflict__left : path;
rec__road_traffic__conflict__right : path
}

function us_split_fields_rec__road_traffic__conflict__left__projection(a: us_split_fields) : path =
  (a).rec__road_traffic__conflict__left

function us_split_fields_rec__road_traffic__conflict__right__projection(a: us_split_fields) : path =
  (a).rec__road_traffic__conflict__right

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_fields1).rec__road_traffic__conflict__left) = to_rep(((b).us_split_fields1).rec__road_traffic__conflict__left)) and
  (to_rep(((a).us_split_fields1).rec__road_traffic__conflict__right) = to_rep(((b).us_split_fields1).rec__road_traffic__conflict__right))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic road_traffic__conflict__left__first__bit : int

logic road_traffic__conflict__left__last__bit : int

logic road_traffic__conflict__left__position : int

axiom road_traffic__conflict__left__first__bit_axiom :
  (0 <= road_traffic__conflict__left__first__bit)

axiom road_traffic__conflict__left__last__bit_axiom :
  (road_traffic__conflict__left__first__bit <  road_traffic__conflict__left__last__bit)

axiom road_traffic__conflict__left__position_axiom :
  (0 <= road_traffic__conflict__left__position)

logic road_traffic__conflict__right__first__bit : int

logic road_traffic__conflict__right__last__bit : int

logic road_traffic__conflict__right__position : int

axiom road_traffic__conflict__right__first__bit_axiom :
  (0 <= road_traffic__conflict__right__first__bit)

axiom road_traffic__conflict__right__last__bit_axiom :
  (road_traffic__conflict__right__first__bit <  road_traffic__conflict__right__last__bit)

axiom road_traffic__conflict__right__position_axiom :
  (0 <= road_traffic__conflict__right__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type conflict__ref = { conflict__content : us_rep
}

function conflict__ref_conflict__content__projection(a: conflict__ref) : us_rep =
  (a).conflict__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_159:int. (((a__first <= temp___idx_159) and
  (temp___idx_159 <= a__last)) -> (bool_eq2((a[temp___idx_159]),
  (b[((b__first - a__first) + temp___idx_159)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_159:int. (((a__first <= temp___idx_159) and
  (temp___idx_159 <= a__last)) -> (bool_eq2((a[temp___idx_159]),
  (b[((b__first - a__first) + temp___idx_159)])) = true))))))

logic attr__ATTRIBUTE_ADDRESS : int

type light

predicate in_range2(x: int) = ((0 <= x) and (x <= 2))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : light, light -> bool

logic dummy2 : light

type light__ref = { light__content : light
}

function light__ref_light__content__projection(a: light__ref) : light =
  (a).light__content

logic to_rep1 : light -> int

logic of_rep1 : int -> light

axiom inversion_axiom1 :
  (forall x:light [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:light [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref1 = { map__content1 : (int,light) farray
}

logic slide1 : (int,light) farray, int, int -> (int,light) farray

axiom slide_eq1 :
  (forall a:(int,light) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,light) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq5(a: (int,light) farray, a__first: int, a__last: int,
  b: (int,light) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,light) farray. forall b:(int,light) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,light) farray. forall b:(int,light) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,light) farray. forall b:(int,light) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,light) farray. forall b:(int,light) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)]))))))))

logic safety_property : (int,light) farray, (int,us_rep) farray -> bool

logic safety_property__function_guard : bool, (int,light) farray,
  (int,us_rep) farray -> prop

type tTconflictsSP1

logic tTconflictsSP1qtint : tTconflictsSP1 -> int

axiom tTconflictsSP1qtaxiom :
  (forall i:tTconflictsSP1. (1 <= tTconflictsSP1qtint(i)))

axiom tTconflictsSP1qtaxiom1 :
  (forall i:tTconflictsSP1. (tTconflictsSP1qtint(i) <= 8))

predicate in_range3(x: int) = ((1 <= x) and (x <= 8))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : tTconflictsSP1, tTconflictsSP1 -> bool

logic dummy3 : tTconflictsSP1

type tTconflictsSP1__ref = { tTconflictsSP1__content : tTconflictsSP1
}

function tTconflictsSP1__ref_tTconflictsSP1__content__projection(a: tTconflictsSP1__ref) : tTconflictsSP1 =
  (a).tTconflictsSP1__content

axiom safety_property__def_axiom :
  (forall l:(int,light) farray.
  (forall road_traffic__conflicts:(int,us_rep) farray [safety_property(l,
  road_traffic__conflicts)]. ((safety_property(l,
  road_traffic__conflicts) = true) ->
  (forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 8)) ->
  (let c = (road_traffic__conflicts[temp___217]) : us_rep in
  ((to_rep1((l[to_rep(((c).us_split_fields1).rec__road_traffic__conflict__left)])) = 0) or
  (to_rep1((l[to_rep(((c).us_split_fields1).rec__road_traffic__conflict__right)])) = 0))))))))

axiom safety_property__def_axiom1 :
  (forall l:(int,light) farray.
  (forall road_traffic__conflicts:(int,us_rep) farray [safety_property(l,
  road_traffic__conflicts)].
  ((forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 8)) ->
   (let c = (road_traffic__conflicts[temp___217]) : us_rep in
   ((to_rep1((l[to_rep(((c).us_split_fields1).rec__road_traffic__conflict__left)])) = 0) or
   (to_rep1((l[to_rep(((c).us_split_fields1).rec__road_traffic__conflict__right)])) = 0))))) ->
  (safety_property(l, road_traffic__conflicts) = true))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic p : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_invariant(temp___expr_165: int, temp___is_init_161: bool,
  temp___skip_constant_162: bool, temp___do_toplevel_163: bool,
  temp___do_typ_inv_164: bool) = (((temp___is_init_161 = true) or
  (0 <= 3)) -> in_range1(temp___expr_165))

predicate dynamic_invariant1(temp___expr_172: int, temp___is_init_168: bool,
  temp___skip_constant_169: bool, temp___do_toplevel_170: bool,
  temp___do_typ_inv_171: bool) = (((temp___is_init_168 = true) or
  (0 <= 2)) -> in_range2(temp___expr_172))

 (* File "road_traffic.ads", line 26, characters 0-0 *)
goal defqtvc :
  (forall conflicts:(int,us_rep) farray. forall l:(int,light) farray.
  (dynamic_invariant(p, true, false, true, true) ->
  ((forall conflicts1:(int,us_rep) farray. forall l1:(int,light) farray.
   safety_property__function_guard(safety_property(l1, conflicts1), l1,
   conflicts1)) ->
  ((((safety_property(l, conflicts) = true) and (to_rep1((l[p])) = 0)) and
  (forall temp___248:int. (((1 <= temp___248) and (temp___248 <= 8)) ->
  (let c = (conflicts[temp___248]) : us_rep in
  (((not (to_rep(((c).us_split_fields1).rec__road_traffic__conflict__left) = to_rep(((c).us_split_fields1).rec__road_traffic__conflict__right))) and
  ((to_rep(((c).us_split_fields1).rec__road_traffic__conflict__left) = p) ->
  (to_rep1((l[to_rep(((c).us_split_fields1).rec__road_traffic__conflict__right)])) = 0))) and
  ((to_rep(((c).us_split_fields1).rec__road_traffic__conflict__right) = p) ->
  (to_rep1((l[to_rep(((c).us_split_fields1).rec__road_traffic__conflict__left)])) = 0))))))) ->
  (forall o:light. ((to_rep1(o) = 2) ->
  (forall l1:(int,light) farray. ((l1 = (l[p <- o])) ->
  ((forall conflicts1:(int,us_rep) farray. forall l2:(int,light) farray.
   safety_property__function_guard(safety_property(l2, conflicts1), l2,
   conflicts1)) ->
  (safety_property(l1, conflicts) = true))))))))))
