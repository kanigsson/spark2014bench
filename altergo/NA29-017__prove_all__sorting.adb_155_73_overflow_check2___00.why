(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (div(x, y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((-abs_int(y)) <  mod(x,
  y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (mod(x, y) <  abs_int(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <  y) then (x % y) else ((x % y) + y))

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

function length1(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq2 : us_t, us_t -> bool

logic dummy2 : us_t

type int_array__ref = { int_array__content : us_t
}

function int_array__ref_int_array__content__projection(a: int_array__ref) : us_t =
  (a).int_array__content

logic sorted : us_t, int, int -> bool

logic sorted__function_guard : bool, us_t, int, int -> prop

predicate dynamic_invariant1(temp___expr_163: us_t, temp___is_init_159: bool,
  temp___skip_constant_160: bool, temp___do_toplevel_161: bool,
  temp___do_typ_inv_162: bool) = ((not (temp___skip_constant_160 = true)) ->
  dynamic_property(0, 2147483647, first1(temp___expr_163),
  last1(temp___expr_163)))

logic perm : us_t, us_t, int, int -> bool

logic perm__function_guard : bool, us_t, us_t, int, int -> prop

logic a__first : integer

logic a__last : integer

logic attr__ATTRIBUTE_ADDRESS : int

logic a_first : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic length2 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic b__first : integer

logic b__last : integer

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

predicate dynamic_invariant2(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

axiom cdiv_cases :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((0 <  d) -> (div(n,
  d) = (n / d)))))

axiom cdiv_cases1 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((0 <  d) -> (div(n,
  d) = (-((-n) / d))))))

axiom cdiv_cases2 :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((d <  0) -> (div(n,
  d) = (-(n / (-d)))))))

axiom cdiv_cases3 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((d <  0) -> (div(n,
  d) = ((-n) / (-d))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))))

axiom cmod_cases1 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))))

axiom cmod_cases2 :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))))

axiom cmod_cases3 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d)))))))

 (* File "sorting.ads", line 17, characters 0-0 *)
goal defqtvc :
  (forall a:(int,integer) farray. forall i:int. forall l:int. forall k:int.
  (forall a1:(int,integer) farray. ((a1 = a) -> (dynamic_property(0,
  2147483647, to_rep(a__first), to_rep(a__last)) ->
  (dynamic_invariant(a_first, true, false, true, true) ->
  (dynamic_invariant(length2, true, false, true, true) ->
  (dynamic_property(0, 2147483647, to_rep(b__first), to_rep(b__last)) ->
  ((((to_rep(a__first) <= a_first) and
  ((a_first + length2) <= (to_rep(a__last) + 1))) and
  (length2 <= length(to_rep(b__first), to_rep(b__last)))) ->
  (dynamic_invariant(i, false, false, true, true) -> (dynamic_invariant(l,
  false, false, true, true) -> (dynamic_invariant(k, false, false, true,
  true) ->
  (forall l1:int. ((l1 = 1) ->
  (forall temp___loop_entry_260:(int,integer) farray.
  ((temp___loop_entry_260 = a) ->
  (forall temp___loop_entry_265:(int,integer) farray.
  ((temp___loop_entry_265 = a) ->
  (forall temp___loop_entry_281:(int,integer) farray.
  ((temp___loop_entry_281 = a) -> (let o = length2 : int in (let o1 = a_first
  : int in
  (forall o2:int. ((to_rep(a__last) = o2) ->
  (forall o3:int. ((to_rep(a__first) = o3) -> (let o4 = of_array(a, o3, o2)
  : us_t in
  (forall o5:int. ((to_rep(a__last) = o5) ->
  (forall o6:int. ((to_rep(a__first) = o6) -> (let o7 =
  of_array(temp___loop_entry_281, o6, o5) : us_t in
  (perm__function_guard(perm(o7, o4, o1, o), o7, o4, o1, o) ->
  (forall a2:(int,integer) farray. forall i1:int. forall l2:int.
  forall k1:int.
  ((forall a3:(int,integer) farray. forall l3:int. forall j:int.
   sorted__function_guard(sorted(of_array(a3, to_rep(a__first),
   to_rep(a__last)), (a_first + (j * l3)), min(l3, (length2 - (j * l3)))),
   of_array(a3, to_rep(a__first), to_rep(a__last)), (a_first + (j * l3)),
   min(l3, (length2 - (j * l3))))) ->
  ((forall temp___loop_entry_2811:(int,integer) farray.
   forall a3:(int,integer) farray.
   perm__function_guard(perm(of_array(temp___loop_entry_2811,
   to_rep(a__first), to_rep(a__last)), of_array(a3, to_rep(a__first),
   to_rep(a__last)), a_first, length2), of_array(temp___loop_entry_2811,
   to_rep(a__first), to_rep(a__last)), of_array(a3, to_rep(a__first),
   to_rep(a__last)), a_first, length2)) ->
  ((((forall j:int. (((0 <= j) and (j <= 2147483647)) ->
     (((j * l2) <  length2) -> (sorted(of_array(a2, to_rep(a__first),
     to_rep(a__last)), (a_first + (j * l2)), min(l2,
     (length2 - (j * l2)))) = true)))) and
  (perm(of_array(temp___loop_entry_281, to_rep(a__first), to_rep(a__last)),
  of_array(a2, to_rep(a__first), to_rep(a__last)), a_first,
  length2) = true)) and (1 <= l2)) -> (((dynamic_invariant(k1, false, true,
  true, true) and dynamic_invariant(i1, false, true, true, true)) and
  dynamic_invariant(l2, false, true, true, true)) ->
  (forall i2:int. ((i2 = 0) ->
  (forall a3:(int,integer) farray.
  ((forall l3:int. forall a4:(int,integer) farray. forall j:int.
   sorted__function_guard(sorted(of_array(a4, to_rep(a__first),
   to_rep(a__last)), (a_first + ((j * l3) * 2)), min((l3 * 2),
   (length2 - ((j * l3) * 2)))), of_array(a4, to_rep(a__first),
   to_rep(a__last)), (a_first + ((j * l3) * 2)), min((l3 * 2),
   (length2 - ((j * l3) * 2))))) ->
  ((forall l3:int. forall a4:(int,integer) farray. forall i3:int.
   forall j:int. sorted__function_guard(sorted(of_array(a4, to_rep(a__first),
   to_rep(a__last)), ((a_first + i3) + (j * l3)), min(l3,
   ((length2 - i3) - (j * l3)))), of_array(a4, to_rep(a__first),
   to_rep(a__last)), ((a_first + i3) + (j * l3)), min(l3,
   ((length2 - i3) - (j * l3))))) ->
  ((forall temp___loop_entry_2601:(int,integer) farray.
   forall a4:(int,integer) farray.
   perm__function_guard(perm(of_array(temp___loop_entry_2601,
   to_rep(a__first), to_rep(a__last)), of_array(a4, to_rep(a__first),
   to_rep(a__last)), a_first, length2), of_array(temp___loop_entry_2601,
   to_rep(a__first), to_rep(a__last)), of_array(a4, to_rep(a__first),
   to_rep(a__last)), a_first, length2)) ->
  ((forall l3:int. forall a4:(int,integer) farray. forall j:int.
   sorted__function_guard(sorted(of_array(a4, to_rep(a__first),
   to_rep(a__last)), (a_first + ((j * l3) * 2)), min((l3 * 2),
   (length2 - ((j * l3) * 2)))), of_array(a4, to_rep(a__first),
   to_rep(a__last)), (a_first + ((j * l3) * 2)), min((l3 * 2),
   (length2 - ((j * l3) * 2))))) ->
  ((forall l3:int. forall a4:(int,integer) farray. forall i3:int.
   forall j:int. sorted__function_guard(sorted(of_array(a4, to_rep(a__first),
   to_rep(a__last)), ((a_first + i3) + (j * l3)), min(l3,
   ((length2 - i3) - (j * l3)))), of_array(a4, to_rep(a__first),
   to_rep(a__last)), ((a_first + i3) + (j * l3)), min(l3,
   ((length2 - i3) - (j * l3))))) ->
  ((forall temp___loop_entry_2601:(int,integer) farray.
   forall a4:(int,integer) farray.
   perm__function_guard(perm(of_array(temp___loop_entry_2601,
   to_rep(a__first), to_rep(a__last)), of_array(a4, to_rep(a__first),
   to_rep(a__last)), a_first, length2), of_array(temp___loop_entry_2601,
   to_rep(a__first), to_rep(a__last)), of_array(a4, to_rep(a__first),
   to_rep(a__last)), a_first, length2)) ->
  ((forall l3:int. forall k2:int. forall o8:int. forall o9:integer.
   forall o10:integer. forall o11:(int,integer) farray.
   sorted__function_guard(sorted(of_array(o11, to_rep(o10), to_rep(o9)), o8,
   (l3 + k2)), of_array(o11, to_rep(o10), to_rep(o9)), o8, (l3 + k2))) ->
  ((forall l3:int. forall a4:(int,integer) farray. forall k2:int.
   forall o8:int. forall o9:integer. forall o10:integer.
   forall o11:(int,integer) farray. perm__function_guard(perm(of_array(a4,
   to_rep(o10), to_rep(o9)), of_array(o11, to_rep(o10), to_rep(o9)), o8,
   (l3 + k2)), of_array(a4, to_rep(o10), to_rep(o9)), of_array(o11,
   to_rep(o10), to_rep(o9)), o8, (l3 + k2))) ->
  ((let o8 = length2 : int in (let o9 = a_first : int in
  (exists o10:int. ((to_rep(a__last) = o10) and
  (exists o11:int. ((to_rep(a__first) = o11) and (let o12 = of_array(a2, o11,
  o10) : us_t in
  (exists o13:int. ((to_rep(a__last) = o13) and
  (exists o14:int. ((to_rep(a__first) = o14) and (let o15 =
  of_array(temp___loop_entry_260, o14, o13) : us_t in
  (perm__function_guard(perm(o15, o12, o9, o8), o15, o12, o9, o8) and
  (((not (i2 <  length2)) or in_range1((l2 * 2))) and
  (exists a4:(int,integer) farray. exists i3:int. exists k2:int.
  (((((((i3 <= length2) and ((i3 <  length2) -> (mod1(i3,
  (l2 * 2)) = 0))) and
  (forall j:int. (((0 <= j) and (j <= 2147483647)) ->
  ((((j * l2) * 2) <  i3) -> (sorted(of_array(a4, to_rep(a__first),
  to_rep(a__last)), (a_first + ((j * l2) * 2)), min((l2 * 2),
  (length2 - ((j * l2) * 2)))) = true))))) and
  (forall j:int. (((0 <= j) and (j <= 2147483647)) ->
  (((j * l2) <  (length2 - i3)) -> (sorted(of_array(a4, to_rep(a__first),
  to_rep(a__last)), ((a_first + i3) + (j * l2)), min(l2,
  ((length2 - i3) - (j * l2)))) = true))))) and
  (perm(of_array(temp___loop_entry_260, to_rep(a__first), to_rep(a__last)),
  of_array(a4, to_rep(a__first), to_rep(a__last)), a_first,
  length2) = true)) and (1 <= l2)) and ((dynamic_invariant(k2, false, true,
  true, true) and dynamic_invariant(i3, false, true, true, true)) and
  (let o16 = (length2 - l2) : int in (in_range1(o16) and
  ((not (i3 <  o16)) and (a3 = a4))))))))))))))))))))) -> (let o8 = length2
  : int in (let o9 = a_first : int in
  (forall o10:int. ((to_rep(a__last) = o10) ->
  (forall o11:int. ((to_rep(a__first) = o11) -> (let o12 = of_array(a3, o11,
  o10) : us_t in
  (forall o13:int. ((to_rep(a__last) = o13) ->
  (forall o14:int. ((to_rep(a__first) = o14) -> (let o15 =
  of_array(temp___loop_entry_265, o14, o13) : us_t in
  (perm__function_guard(perm(o15, o12, o9, o8), o15, o12, o9, o8) ->
  (forall usf:int. ((andb((if (0 <= usf) then true else false),
  (if (usf <= 2147483647) then true else false)) = true) -> (let o16 =
  (usf * l2) : int in (in_range1(o16) -> (let o17 = (o16 * 2) : int in
  (in_range1(o17) -> ((o17 <  length2) -> (let o18 = (usf * l2) : int in
  (in_range1(o18) -> (let o19 = (o18 * 2) : int in (in_range1(o19) ->
  in_range1((length2 - o19)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
