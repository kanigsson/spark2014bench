(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep1(x: natural) : int = naturalqtint(x)

logic of_rep1 : int -> natural

axiom inversion_axiom1 :
  (forall x:natural [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:natural [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

type us_main_type

type us_rep = { rec__rec_types__test2__tree__is_null_pointer : bool;
rec__rec_types__test2__tree__pointer_address : int;
rec__rec_types__test2__tree__pointer_value_abstr : us_main_type
}

function us_rep_rec__rec_types__test2__tree__is_null_pointer__projection(a: us_rep) : bool =
  (a).rec__rec_types__test2__tree__is_null_pointer

function us_rep_rec__rec_types__test2__tree__pointer_address__projection(a: us_rep) : int =
  (a).rec__rec_types__test2__tree__pointer_address

function us_rep_rec__rec_types__test2__tree__pointer_value_abstr__projection(a: us_rep) : us_main_type =
  (a).rec__rec_types__test2__tree__pointer_value_abstr

type us_rep__ref = { us_rep__content : us_rep
}

function us_rep__ref___rep__content__3__projection(a: us_rep__ref) : us_rep =
  (a).us_rep__content

function bool_eq4(a: us_rep, b: us_rep) : bool =
  (if (((a).rec__rec_types__test2__tree__is_null_pointer = (b).rec__rec_types__test2__tree__is_null_pointer) and
  ((not ((a).rec__rec_types__test2__tree__is_null_pointer = true)) ->
  (((a).rec__rec_types__test2__tree__pointer_address = (b).rec__rec_types__test2__tree__pointer_address) and
  ((a).rec__rec_types__test2__tree__pointer_value_abstr = (b).rec__rec_types__test2__tree__pointer_value_abstr)))) then true else false)

logic dummy3 : us_rep

type tree__ref = { tree__content : us_rep
}

function tree__ref_tree__content__2__projection(a: tree__ref) : us_rep =
  (a).tree__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq5(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq4((a[temp___idx_155]),
  (b[((b__first - a__first) + temp___idx_155)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq4((a[temp___idx_155]),
  (b[((b__first - a__first) + temp___idx_155)])) = true))))))

logic attr__ATTRIBUTE_ADDRESS : int

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,us_rep) farray; rt : t
}

function to_array(a: us_t) : (int,us_rep) farray = (a).elts

function of_array(a: (int,us_rep) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy4 : us_t

type tree_array__ref = { tree_array__content : us_t
}

function tree_array__ref_tree_array__content__2__projection(a: tree_array__ref) : us_t =
  (a).tree_array__content

type t6s__ref = { t6s__content : us_t
}

function t6s__ref_t6s__content__projection(a: t6s__ref) : us_t =
  (a).t6s__content

type us_split_discrs = { rec__rec_types__test2__tree_node__d : natural
}

function us_split_discrs_rec__rec_types__test2__tree_node__d__projection(a: us_split_discrs) : natural =
  (a).rec__rec_types__test2__tree_node__d

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__rec_types__test2__tree_node__val : integer;
rec__rec_types__test2__tree_node__next : us_t
}

function us_split_fields_rec__rec_types__test2__tree_node__val__projection(a: us_split_fields) : integer =
  (a).rec__rec_types__test2__tree_node__val

function us_split_fields_rec__rec_types__test2__tree_node__next__projection(a: us_split_fields) : us_t =
  (a).rec__rec_types__test2__tree_node__next

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

function bool_eq7(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep1(((a).us_split_discrs1).rec__rec_types__test2__tree_node__d) = to_rep1(((b).us_split_discrs1).rec__rec_types__test2__tree_node__d)) and
  ((to_rep(((a).us_split_fields1).rec__rec_types__test2__tree_node__val) = to_rep(((b).us_split_fields1).rec__rec_types__test2__tree_node__val)) and
  (bool_eq6(((a).us_split_fields1).rec__rec_types__test2__tree_node__next,
  ((b).us_split_fields1).rec__rec_types__test2__tree_node__next) = true))) then true else false)

predicate in_range4(rec__rec_types__test2__tree_node__d1: int,
  a: us_split_discrs) =
  (rec__rec_types__test2__tree_node__d1 = to_rep1((a).rec__rec_types__test2__tree_node__d))

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic rec_types__test2__tree_node__d__first__bit : int

logic rec_types__test2__tree_node__d__last__bit : int

logic rec_types__test2__tree_node__d__position : int

axiom rec_types__test2__tree_node__d__first__bit_axiom :
  (0 <= rec_types__test2__tree_node__d__first__bit)

axiom rec_types__test2__tree_node__d__last__bit_axiom :
  (rec_types__test2__tree_node__d__first__bit <  rec_types__test2__tree_node__d__last__bit)

axiom rec_types__test2__tree_node__d__position_axiom :
  (0 <= rec_types__test2__tree_node__d__position)

logic rec_types__test2__tree_node__val__first__bit : int

logic rec_types__test2__tree_node__val__last__bit : int

logic rec_types__test2__tree_node__val__position : int

axiom rec_types__test2__tree_node__val__first__bit_axiom :
  (0 <= rec_types__test2__tree_node__val__first__bit)

axiom rec_types__test2__tree_node__val__last__bit_axiom :
  (rec_types__test2__tree_node__val__first__bit <  rec_types__test2__tree_node__val__last__bit)

axiom rec_types__test2__tree_node__val__position_axiom :
  (0 <= rec_types__test2__tree_node__val__position)

logic rec_types__test2__tree_node__next__first__bit : int

logic rec_types__test2__tree_node__next__last__bit : int

logic rec_types__test2__tree_node__next__position : int

axiom rec_types__test2__tree_node__next__first__bit_axiom :
  (0 <= rec_types__test2__tree_node__next__first__bit)

axiom rec_types__test2__tree_node__next__last__bit_axiom :
  (rec_types__test2__tree_node__next__first__bit <  rec_types__test2__tree_node__next__last__bit)

axiom rec_types__test2__tree_node__next__position_axiom :
  (0 <= rec_types__test2__tree_node__next__position)

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy5 : us_rep1

type tree_node__ref = { tree_node__content : us_rep1
}

function tree_node__ref_tree_node__content__2__projection(a: tree_node__ref) : us_rep1 =
  (a).tree_node__content

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic next__first : integer

logic next__last : integer

logic attr__ATTRIBUTE_ADDRESS3 : int

logic us_open : us_main_type -> us_rep1

logic us_close : us_rep1 -> us_main_type

axiom close_open :
  (forall x:us_main_type [us_open(x)]. (us_close(us_open(x)) = x))

axiom open_close :
  (forall x:us_rep1 [us_close(x)]. (us_open(us_close(x)) = x))

function rec__rec_types__test2__tree__pointer_value(a: us_rep) : us_rep1 =
  us_open((a).rec__rec_types__test2__tree__pointer_value_abstr)

predicate rec__rec_types__test2__tree__pointer_value__pred(a: us_rep) =
  (not ((a).rec__rec_types__test2__tree__is_null_pointer = true))

logic us_null_pointer : us_rep

axiom us_null_pointer__def_axiom :
  ((us_null_pointer).rec__rec_types__test2__tree__is_null_pointer = true)

logic temp___dynamic_invariant_206 : us_rep, bool, bool, bool, bool -> prop

predicate dynamic_invariant(temp___expr_203: us_rep,
  temp___is_init_199: bool, temp___skip_constant_200: bool,
  temp___do_toplevel_201: bool, temp___do_typ_inv_202: bool) =
  ((not ((temp___expr_203).rec__rec_types__test2__tree__is_null_pointer = true)) ->
  (let temp___204 =
  ((rec__rec_types__test2__tree__pointer_value(temp___expr_203)).us_split_discrs1).rec__rec_types__test2__tree_node__d
  : natural in ((dynamic_property(1, to_rep1(temp___204),
  first1(((rec__rec_types__test2__tree__pointer_value(temp___expr_203)).us_split_fields1).rec__rec_types__test2__tree_node__next),
  last1(((rec__rec_types__test2__tree__pointer_value(temp___expr_203)).us_split_fields1).rec__rec_types__test2__tree_node__next)) and
  ((first1(((rec__rec_types__test2__tree__pointer_value(temp___expr_203)).us_split_fields1).rec__rec_types__test2__tree_node__next) = 1) and
  (last1(((rec__rec_types__test2__tree__pointer_value(temp___expr_203)).us_split_fields1).rec__rec_types__test2__tree_node__next) = to_rep1(temp___204)))) and
  (forall temp___205:int.
  (((first1(((rec__rec_types__test2__tree__pointer_value(temp___expr_203)).us_split_fields1).rec__rec_types__test2__tree_node__next) <= temp___205) and
  (temp___205 <= last1(((rec__rec_types__test2__tree__pointer_value(temp___expr_203)).us_split_fields1).rec__rec_types__test2__tree_node__next))) ->
  temp___dynamic_invariant_206((to_array(((rec__rec_types__test2__tree__pointer_value(temp___expr_203)).us_split_fields1).rec__rec_types__test2__tree_node__next)[temp___205]),
  true, false, true, temp___do_typ_inv_202))))))

axiom def_axiom :
  (forall temp___expr_211:us_rep.
  (forall temp___is_init_207:bool. forall temp___skip_constant_208:bool.
  forall temp___do_toplevel_209:bool. forall temp___do_typ_inv_210:bool
  [temp___dynamic_invariant_206(temp___expr_211, temp___is_init_207,
  temp___skip_constant_208, temp___do_toplevel_209, temp___do_typ_inv_210)].
  (temp___dynamic_invariant_206(temp___expr_211, temp___is_init_207,
  temp___skip_constant_208, temp___do_toplevel_209, temp___do_typ_inv_210) ->
  ((not ((temp___expr_211).rec__rec_types__test2__tree__is_null_pointer = true)) ->
  dynamic_property(1,
  to_rep1(((rec__rec_types__test2__tree__pointer_value(temp___expr_211)).us_split_discrs1).rec__rec_types__test2__tree_node__d),
  first1(((rec__rec_types__test2__tree__pointer_value(temp___expr_211)).us_split_fields1).rec__rec_types__test2__tree_node__next),
  last1(((rec__rec_types__test2__tree__pointer_value(temp___expr_211)).us_split_fields1).rec__rec_types__test2__tree_node__next))))))

axiom def_axiom1 :
  (forall temp___expr_211:us_rep.
  (forall temp___is_init_207:bool. forall temp___skip_constant_208:bool.
  forall temp___do_toplevel_209:bool. forall temp___do_typ_inv_210:bool
  [temp___dynamic_invariant_206(temp___expr_211, temp___is_init_207,
  temp___skip_constant_208, temp___do_toplevel_209, temp___do_typ_inv_210)].
  (temp___dynamic_invariant_206(temp___expr_211, temp___is_init_207,
  temp___skip_constant_208, temp___do_toplevel_209, temp___do_typ_inv_210) ->
  ((not ((temp___expr_211).rec__rec_types__test2__tree__is_null_pointer = true)) ->
  (first1(((rec__rec_types__test2__tree__pointer_value(temp___expr_211)).us_split_fields1).rec__rec_types__test2__tree_node__next) = 1)))))

axiom def_axiom2 :
  (forall temp___expr_211:us_rep.
  (forall temp___is_init_207:bool. forall temp___skip_constant_208:bool.
  forall temp___do_toplevel_209:bool. forall temp___do_typ_inv_210:bool
  [temp___dynamic_invariant_206(temp___expr_211, temp___is_init_207,
  temp___skip_constant_208, temp___do_toplevel_209, temp___do_typ_inv_210)].
  (temp___dynamic_invariant_206(temp___expr_211, temp___is_init_207,
  temp___skip_constant_208, temp___do_toplevel_209, temp___do_typ_inv_210) ->
  ((not ((temp___expr_211).rec__rec_types__test2__tree__is_null_pointer = true)) ->
  (last1(((rec__rec_types__test2__tree__pointer_value(temp___expr_211)).us_split_fields1).rec__rec_types__test2__tree_node__next) = to_rep1(((rec__rec_types__test2__tree__pointer_value(temp___expr_211)).us_split_discrs1).rec__rec_types__test2__tree_node__d))))))

axiom def_axiom3 :
  (forall temp___expr_211:us_rep.
  (forall temp___is_init_207:bool. forall temp___skip_constant_208:bool.
  forall temp___do_toplevel_209:bool. forall temp___do_typ_inv_210:bool
  [temp___dynamic_invariant_206(temp___expr_211, temp___is_init_207,
  temp___skip_constant_208, temp___do_toplevel_209, temp___do_typ_inv_210)].
  (temp___dynamic_invariant_206(temp___expr_211, temp___is_init_207,
  temp___skip_constant_208, temp___do_toplevel_209, temp___do_typ_inv_210) ->
  ((not ((temp___expr_211).rec__rec_types__test2__tree__is_null_pointer = true)) ->
  (forall temp___213:int.
  (((first1(((rec__rec_types__test2__tree__pointer_value(temp___expr_211)).us_split_fields1).rec__rec_types__test2__tree_node__next) <= temp___213) and
  (temp___213 <= last1(((rec__rec_types__test2__tree__pointer_value(temp___expr_211)).us_split_fields1).rec__rec_types__test2__tree_node__next))) ->
  temp___dynamic_invariant_206((to_array(((rec__rec_types__test2__tree__pointer_value(temp___expr_211)).us_split_fields1).rec__rec_types__test2__tree_node__next)[temp___213]),
  true, false, true, temp___do_typ_inv_210)))))))

axiom def_axiom4 :
  (forall temp___expr_211:us_rep.
  (forall temp___is_init_207:bool. forall temp___skip_constant_208:bool.
  forall temp___do_toplevel_209:bool. forall temp___do_typ_inv_210:bool
  [temp___dynamic_invariant_206(temp___expr_211, temp___is_init_207,
  temp___skip_constant_208, temp___do_toplevel_209, temp___do_typ_inv_210)].
  (((not ((temp___expr_211).rec__rec_types__test2__tree__is_null_pointer = true)) ->
  (let temp___212 =
  ((rec__rec_types__test2__tree__pointer_value(temp___expr_211)).us_split_discrs1).rec__rec_types__test2__tree_node__d
  : natural in ((dynamic_property(1, to_rep1(temp___212),
  first1(((rec__rec_types__test2__tree__pointer_value(temp___expr_211)).us_split_fields1).rec__rec_types__test2__tree_node__next),
  last1(((rec__rec_types__test2__tree__pointer_value(temp___expr_211)).us_split_fields1).rec__rec_types__test2__tree_node__next)) and
  ((first1(((rec__rec_types__test2__tree__pointer_value(temp___expr_211)).us_split_fields1).rec__rec_types__test2__tree_node__next) = 1) and
  (last1(((rec__rec_types__test2__tree__pointer_value(temp___expr_211)).us_split_fields1).rec__rec_types__test2__tree_node__next) = to_rep1(temp___212)))) and
  (forall temp___213:int.
  (((first1(((rec__rec_types__test2__tree__pointer_value(temp___expr_211)).us_split_fields1).rec__rec_types__test2__tree_node__next) <= temp___213) and
  (temp___213 <= last1(((rec__rec_types__test2__tree__pointer_value(temp___expr_211)).us_split_fields1).rec__rec_types__test2__tree_node__next))) ->
  temp___dynamic_invariant_206((to_array(((rec__rec_types__test2__tree__pointer_value(temp___expr_211)).us_split_fields1).rec__rec_types__test2__tree_node__next)[temp___213]),
  true, false, true, temp___do_typ_inv_210)))))) ->
  temp___dynamic_invariant_206(temp___expr_211, temp___is_init_207,
  temp___skip_constant_208, temp___do_toplevel_209, temp___do_typ_inv_210))))

predicate default_initial_assumption(temp___expr_214: us_rep,
  temp___skip_top_level_215: bool) =
  ((temp___expr_214).rec__rec_types__test2__tree__is_null_pointer = true)

type tTaSP1

logic tTaSP1qtint : tTaSP1 -> int

axiom tTaSP1qtaxiom : (forall i:tTaSP1. (1 <= tTaSP1qtint(i)))

axiom tTaSP1qtaxiom1 : (forall i:tTaSP1. (tTaSP1qtint(i) <= 10))

predicate in_range5(x: int) = ((1 <= x) and (x <= 10))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : tTaSP1, tTaSP1 -> bool

logic dummy6 : tTaSP1

type tTaSP1__ref = { tTaSP1__content : tTaSP1
}

function tTaSP1__ref_tTaSP1__content__projection(a: tTaSP1__ref) : tTaSP1 =
  (a).tTaSP1__content

predicate dynamic_invariant1(temp___expr_283: (int,us_rep) farray,
  temp___is_init_279: bool, temp___skip_constant_280: bool,
  temp___do_toplevel_281: bool, temp___do_typ_inv_282: bool) =
  (forall temp___284:int. (((1 <= temp___284) and (temp___284 <= 10)) ->
  ((not (((temp___expr_283[temp___284])).rec__rec_types__test2__tree__is_null_pointer = true)) ->
  (let temp___285 =
  ((rec__rec_types__test2__tree__pointer_value((temp___expr_283[temp___284]))).us_split_discrs1).rec__rec_types__test2__tree_node__d
  : natural in ((dynamic_property(1, to_rep1(temp___285),
  first1(((rec__rec_types__test2__tree__pointer_value((temp___expr_283[temp___284]))).us_split_fields1).rec__rec_types__test2__tree_node__next),
  last1(((rec__rec_types__test2__tree__pointer_value((temp___expr_283[temp___284]))).us_split_fields1).rec__rec_types__test2__tree_node__next)) and
  ((first1(((rec__rec_types__test2__tree__pointer_value((temp___expr_283[temp___284]))).us_split_fields1).rec__rec_types__test2__tree_node__next) = 1) and
  (last1(((rec__rec_types__test2__tree__pointer_value((temp___expr_283[temp___284]))).us_split_fields1).rec__rec_types__test2__tree_node__next) = to_rep1(temp___285)))) and
  (forall temp___286:int.
  (((first1(((rec__rec_types__test2__tree__pointer_value((temp___expr_283[temp___284]))).us_split_fields1).rec__rec_types__test2__tree_node__next) <= temp___286) and
  (temp___286 <= last1(((rec__rec_types__test2__tree__pointer_value((temp___expr_283[temp___284]))).us_split_fields1).rec__rec_types__test2__tree_node__next))) ->
  temp___dynamic_invariant_206((to_array(((rec__rec_types__test2__tree__pointer_value((temp___expr_283[temp___284]))).us_split_fields1).rec__rec_types__test2__tree_node__next)[temp___286]),
  true, false, true, temp___do_typ_inv_282))))))))

predicate default_initial_assumption1(temp___expr_287: (int,us_rep) farray,
  temp___skip_top_level_288: bool) =
  (forall temp___289:int. (((1 <= temp___289) and (temp___289 <= 10)) ->
  (((temp___expr_287[temp___289])).rec__rec_types__test2__tree__is_null_pointer = true)))

type tT8bP1

logic tT8bP1qtint : tT8bP1 -> int

axiom tT8bP1qtaxiom : (forall i:tT8bP1. (1 <= tT8bP1qtint(i)))

axiom tT8bP1qtaxiom1 : (forall i:tT8bP1. (tT8bP1qtint(i) <= 10))

predicate in_range6(x: int) = ((1 <= x) and (x <= 10))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : tT8bP1, tT8bP1 -> bool

logic dummy7 : tT8bP1

type tT8bP1__ref = { tT8bP1__content : tT8bP1
}

function tT8bP1__ref_tT8bP1__content__projection(a: tT8bP1__ref) : tT8bP1 =
  (a).tT8bP1__content

logic dummy8 : (int,us_rep) farray

logic value__size2 : int

logic object__size2 : int

logic component__size1 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom2 : (0 <= alignment2)

logic user_eq7 : (int,us_rep) farray, (int,us_rep) farray -> bool

type us_split_fields2 = { rec__rec_types__test2__tree_node__val1 : integer;
rec__rec_types__test2__tree_node__next1 : (int,us_rep) farray
}

function us_split_fields_rec__rec_types__test2__tree_node__val__2__projection(a: us_split_fields2) : integer =
  (a).rec__rec_types__test2__tree_node__val1

function us_split_fields_rec__rec_types__test2__tree_node__next__2__projection(a: us_split_fields2) : (int,us_rep) farray =
  (a).rec__rec_types__test2__tree_node__next1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__5__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep2 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__2__projection(a: us_rep2) : us_split_discrs =
  (a).us_split_discrs2

function us_rep___split_fields__5__projection(a: us_rep2) : us_split_fields2 =
  (a).us_split_fields3

function to_base(a: us_rep2) : us_rep1 = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = {
  rec__rec_types__test2__tree_node__val =
  ((a).us_split_fields3).rec__rec_types__test2__tree_node__val1;
  rec__rec_types__test2__tree_node__next =
  of_array(((a).us_split_fields3).rec__rec_types__test2__tree_node__next1, 1,
  10) } }

function of_base(r: us_rep1) : us_rep2 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = {
  rec__rec_types__test2__tree_node__val1 =
  ((r).us_split_fields1).rec__rec_types__test2__tree_node__val;
  rec__rec_types__test2__tree_node__next1 =
  to_array(((r).us_split_fields1).rec__rec_types__test2__tree_node__next) } }

function bool_eq10(a: us_rep2, b: us_rep2) : bool =
  (if ((to_rep1(((a).us_split_discrs2).rec__rec_types__test2__tree_node__d) = to_rep1(((b).us_split_discrs2).rec__rec_types__test2__tree_node__d)) and
  ((to_rep(((a).us_split_fields3).rec__rec_types__test2__tree_node__val1) = to_rep(((b).us_split_fields3).rec__rec_types__test2__tree_node__val1)) and
  (bool_eq5(((a).us_split_fields3).rec__rec_types__test2__tree_node__next1,
  1, 10, ((b).us_split_fields3).rec__rec_types__test2__tree_node__next1, 1,
  10) = true))) then true else false)

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic rec_types__test2__tree_node__d__first__bit1 : int

logic rec_types__test2__tree_node__d__last__bit1 : int

logic rec_types__test2__tree_node__d__position1 : int

axiom rec_types__test2__tree_node__d__first__bit_axiom1 :
  (0 <= rec_types__test2__tree_node__d__first__bit1)

axiom rec_types__test2__tree_node__d__last__bit_axiom1 :
  (rec_types__test2__tree_node__d__first__bit1 <  rec_types__test2__tree_node__d__last__bit1)

axiom rec_types__test2__tree_node__d__position_axiom1 :
  (0 <= rec_types__test2__tree_node__d__position1)

logic rec_types__test2__tree_node__val__first__bit1 : int

logic rec_types__test2__tree_node__val__last__bit1 : int

logic rec_types__test2__tree_node__val__position1 : int

axiom rec_types__test2__tree_node__val__first__bit_axiom1 :
  (0 <= rec_types__test2__tree_node__val__first__bit1)

axiom rec_types__test2__tree_node__val__last__bit_axiom1 :
  (rec_types__test2__tree_node__val__first__bit1 <  rec_types__test2__tree_node__val__last__bit1)

axiom rec_types__test2__tree_node__val__position_axiom1 :
  (0 <= rec_types__test2__tree_node__val__position1)

logic rec_types__test2__tree_node__next__first__bit1 : int

logic rec_types__test2__tree_node__next__last__bit1 : int

logic rec_types__test2__tree_node__next__position1 : int

axiom rec_types__test2__tree_node__next__first__bit_axiom1 :
  (0 <= rec_types__test2__tree_node__next__first__bit1)

axiom rec_types__test2__tree_node__next__last__bit_axiom1 :
  (rec_types__test2__tree_node__next__first__bit1 <  rec_types__test2__tree_node__next__last__bit1)

axiom rec_types__test2__tree_node__next__position_axiom1 :
  (0 <= rec_types__test2__tree_node__next__position1)

logic user_eq8 : us_rep2, us_rep2 -> bool

logic dummy9 : us_rep2

type t7b__ref = { t7b__content : us_rep2
}

function t7b__ref_t7b__content__projection(a: t7b__ref) : us_rep2 =
  (a).t7b__content

type t9b

logic t9bqtint : t9b -> int

axiom t9bqtaxiom : (forall i:t9b. (1 <= t9bqtint(i)))

axiom t9bqtaxiom1 : (forall i:t9b. (t9bqtint(i) <= 10))

predicate in_range7(x: int) = ((1 <= x) and (x <= 10))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq9 : t9b, t9b -> bool

logic dummy10 : t9b

type t9b__ref = { t9b__content : t9b
}

function t9b__ref_t9b__content__projection(a: t9b__ref) : t9b =
  (a).t9b__content

type tnextS__ref = { tnextS__content : us_t
}

function tnextS__ref_tnextS__content__projection(a: tnextS__ref) : us_t =
  (a).tnextS__content

type t12b__ref = { t12b__content : us_t
}

function t12b__ref_t12b__content__projection(a: t12b__ref) : us_t =
  (a).t12b__content

type us_split_fields4 = { rec__rec_types__test2__tree_node__val2 : integer;
rec__rec_types__test2__tree_node__next2 : us_t
}

function us_split_fields_rec__rec_types__test2__tree_node__val__3__projection(a: us_split_fields4) : integer =
  (a).rec__rec_types__test2__tree_node__val2

function us_split_fields_rec__rec_types__test2__tree_node__next__3__projection(a: us_split_fields4) : us_t =
  (a).rec__rec_types__test2__tree_node__next2

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__6__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep3 = { us_split_discrs3 : us_split_discrs; us_split_fields5 :
us_split_fields4
}

function us_rep___split_discrs__3__projection(a: us_rep3) : us_split_discrs =
  (a).us_split_discrs3

function us_rep___split_fields__6__projection(a: us_rep3) : us_split_fields4 =
  (a).us_split_fields5

function to_base1(a: us_rep3) : us_rep1 = { us_split_discrs1 =
  (a).us_split_discrs3; us_split_fields1 = {
  rec__rec_types__test2__tree_node__val =
  ((a).us_split_fields5).rec__rec_types__test2__tree_node__val2;
  rec__rec_types__test2__tree_node__next =
  of_array(to_array(((a).us_split_fields5).rec__rec_types__test2__tree_node__next2),
  first1(((a).us_split_fields5).rec__rec_types__test2__tree_node__next2),
  last1(((a).us_split_fields5).rec__rec_types__test2__tree_node__next2)) } }

function of_base1(r: us_rep1) : us_rep3 = { us_split_discrs3 =
  (r).us_split_discrs1; us_split_fields5 = {
  rec__rec_types__test2__tree_node__val2 =
  ((r).us_split_fields1).rec__rec_types__test2__tree_node__val;
  rec__rec_types__test2__tree_node__next2 =
  of_array(to_array(((r).us_split_fields1).rec__rec_types__test2__tree_node__next),
  first1(((r).us_split_fields1).rec__rec_types__test2__tree_node__next),
  last1(((r).us_split_fields1).rec__rec_types__test2__tree_node__next)) } }

function bool_eq12(a: us_rep3, b: us_rep3) : bool =
  (if ((to_rep1(((a).us_split_discrs3).rec__rec_types__test2__tree_node__d) = to_rep1(((b).us_split_discrs3).rec__rec_types__test2__tree_node__d)) and
  ((to_rep(((a).us_split_fields5).rec__rec_types__test2__tree_node__val2) = to_rep(((b).us_split_fields5).rec__rec_types__test2__tree_node__val2)) and
  (bool_eq6(((a).us_split_fields5).rec__rec_types__test2__tree_node__next2,
  ((b).us_split_fields5).rec__rec_types__test2__tree_node__next2) = true))) then true else false)

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic rec_types__test2__tree_node__d__first__bit2 : int

logic rec_types__test2__tree_node__d__last__bit2 : int

logic rec_types__test2__tree_node__d__position2 : int

axiom rec_types__test2__tree_node__d__first__bit_axiom2 :
  (0 <= rec_types__test2__tree_node__d__first__bit2)

axiom rec_types__test2__tree_node__d__last__bit_axiom2 :
  (rec_types__test2__tree_node__d__first__bit2 <  rec_types__test2__tree_node__d__last__bit2)

axiom rec_types__test2__tree_node__d__position_axiom2 :
  (0 <= rec_types__test2__tree_node__d__position2)

logic rec_types__test2__tree_node__val__first__bit2 : int

logic rec_types__test2__tree_node__val__last__bit2 : int

logic rec_types__test2__tree_node__val__position2 : int

axiom rec_types__test2__tree_node__val__first__bit_axiom2 :
  (0 <= rec_types__test2__tree_node__val__first__bit2)

axiom rec_types__test2__tree_node__val__last__bit_axiom2 :
  (rec_types__test2__tree_node__val__first__bit2 <  rec_types__test2__tree_node__val__last__bit2)

axiom rec_types__test2__tree_node__val__position_axiom2 :
  (0 <= rec_types__test2__tree_node__val__position2)

logic rec_types__test2__tree_node__next__first__bit2 : int

logic rec_types__test2__tree_node__next__last__bit2 : int

logic rec_types__test2__tree_node__next__position2 : int

axiom rec_types__test2__tree_node__next__first__bit_axiom2 :
  (0 <= rec_types__test2__tree_node__next__first__bit2)

axiom rec_types__test2__tree_node__next__last__bit_axiom2 :
  (rec_types__test2__tree_node__next__first__bit2 <  rec_types__test2__tree_node__next__last__bit2)

axiom rec_types__test2__tree_node__next__position_axiom2 :
  (0 <= rec_types__test2__tree_node__next__position2)

logic user_eq10 : us_rep3, us_rep3 -> bool

logic dummy11 : us_rep3

type t11b__ref = { t11b__content : us_rep3
}

function t11b__ref_t11b__content__projection(a: t11b__ref) : us_rep3 =
  (a).t11b__content

predicate dynamic_invariant2(temp___expr_295: us_t, temp___is_init_291: bool,
  temp___skip_constant_292: bool, temp___do_toplevel_293: bool,
  temp___do_typ_inv_294: bool, rec_types__test2__p_tree__L_2__i: int) =
  (((not (temp___skip_constant_292 = true)) -> (dynamic_property(1,
  rec_types__test2__p_tree__L_2__i, first1(temp___expr_295),
  last1(temp___expr_295)) and ((first1(temp___expr_295) = 1) and
  (last1(temp___expr_295) = rec_types__test2__p_tree__L_2__i)))) and
  (forall temp___296:int. (((first1(temp___expr_295) <= temp___296) and
  (temp___296 <= last1(temp___expr_295))) ->
  ((not (((to_array(temp___expr_295)[temp___296])).rec__rec_types__test2__tree__is_null_pointer = true)) ->
  (let temp___297 =
  ((rec__rec_types__test2__tree__pointer_value((to_array(temp___expr_295)[temp___296]))).us_split_discrs1).rec__rec_types__test2__tree_node__d
  : natural in ((dynamic_property(1, to_rep1(temp___297),
  first1(((rec__rec_types__test2__tree__pointer_value((to_array(temp___expr_295)[temp___296]))).us_split_fields1).rec__rec_types__test2__tree_node__next),
  last1(((rec__rec_types__test2__tree__pointer_value((to_array(temp___expr_295)[temp___296]))).us_split_fields1).rec__rec_types__test2__tree_node__next)) and
  ((first1(((rec__rec_types__test2__tree__pointer_value((to_array(temp___expr_295)[temp___296]))).us_split_fields1).rec__rec_types__test2__tree_node__next) = 1) and
  (last1(((rec__rec_types__test2__tree__pointer_value((to_array(temp___expr_295)[temp___296]))).us_split_fields1).rec__rec_types__test2__tree_node__next) = to_rep1(temp___297)))) and
  (forall temp___298:int.
  (((first1(((rec__rec_types__test2__tree__pointer_value((to_array(temp___expr_295)[temp___296]))).us_split_fields1).rec__rec_types__test2__tree_node__next) <= temp___298) and
  (temp___298 <= last1(((rec__rec_types__test2__tree__pointer_value((to_array(temp___expr_295)[temp___296]))).us_split_fields1).rec__rec_types__test2__tree_node__next))) ->
  temp___dynamic_invariant_206((to_array(((rec__rec_types__test2__tree__pointer_value((to_array(temp___expr_295)[temp___296]))).us_split_fields1).rec__rec_types__test2__tree_node__next)[temp___298]),
  true, false, true, temp___do_typ_inv_294)))))))))

predicate default_initial_assumption2(temp___expr_299: us_t,
  temp___skip_top_level_300: bool, rec_types__test2__p_tree__L_2__i: int) =
  (((first1(temp___expr_299) = 1) and
  (last1(temp___expr_299) = rec_types__test2__p_tree__L_2__i)) and
  (forall temp___301:int. (((first1(temp___expr_299) <= temp___301) and
  (temp___301 <= last1(temp___expr_299))) ->
  (((to_array(temp___expr_299)[temp___301])).rec__rec_types__test2__tree__is_null_pointer = true))))

predicate dynamic_invariant3(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate dynamic_invariant4(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

predicate dynamic_invariant5(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_46))

predicate dynamic_invariant6(temp___expr_228: us_rep1,
  temp___is_init_224: bool, temp___skip_constant_225: bool,
  temp___do_toplevel_226: bool, temp___do_typ_inv_227: bool) =
  (let temp___229 =
  ((temp___expr_228).us_split_discrs1).rec__rec_types__test2__tree_node__d
  : natural in ((dynamic_property(1, to_rep1(temp___229),
  first1(((temp___expr_228).us_split_fields1).rec__rec_types__test2__tree_node__next),
  last1(((temp___expr_228).us_split_fields1).rec__rec_types__test2__tree_node__next)) and
  ((first1(((temp___expr_228).us_split_fields1).rec__rec_types__test2__tree_node__next) = 1) and
  (last1(((temp___expr_228).us_split_fields1).rec__rec_types__test2__tree_node__next) = to_rep1(temp___229)))) and
  (forall temp___230:int.
  (((first1(((temp___expr_228).us_split_fields1).rec__rec_types__test2__tree_node__next) <= temp___230) and
  (temp___230 <= last1(((temp___expr_228).us_split_fields1).rec__rec_types__test2__tree_node__next))) ->
  ((not (((to_array(((temp___expr_228).us_split_fields1).rec__rec_types__test2__tree_node__next)[temp___230])).rec__rec_types__test2__tree__is_null_pointer = true)) ->
  (let temp___231 =
  ((rec__rec_types__test2__tree__pointer_value((to_array(((temp___expr_228).us_split_fields1).rec__rec_types__test2__tree_node__next)[temp___230]))).us_split_discrs1).rec__rec_types__test2__tree_node__d
  : natural in ((dynamic_property(1, to_rep1(temp___231),
  first1(((rec__rec_types__test2__tree__pointer_value((to_array(((temp___expr_228).us_split_fields1).rec__rec_types__test2__tree_node__next)[temp___230]))).us_split_fields1).rec__rec_types__test2__tree_node__next),
  last1(((rec__rec_types__test2__tree__pointer_value((to_array(((temp___expr_228).us_split_fields1).rec__rec_types__test2__tree_node__next)[temp___230]))).us_split_fields1).rec__rec_types__test2__tree_node__next)) and
  ((first1(((rec__rec_types__test2__tree__pointer_value((to_array(((temp___expr_228).us_split_fields1).rec__rec_types__test2__tree_node__next)[temp___230]))).us_split_fields1).rec__rec_types__test2__tree_node__next) = 1) and
  (last1(((rec__rec_types__test2__tree__pointer_value((to_array(((temp___expr_228).us_split_fields1).rec__rec_types__test2__tree_node__next)[temp___230]))).us_split_fields1).rec__rec_types__test2__tree_node__next) = to_rep1(temp___231)))) and
  (forall temp___232:int.
  (((first1(((rec__rec_types__test2__tree__pointer_value((to_array(((temp___expr_228).us_split_fields1).rec__rec_types__test2__tree_node__next)[temp___230]))).us_split_fields1).rec__rec_types__test2__tree_node__next) <= temp___232) and
  (temp___232 <= last1(((rec__rec_types__test2__tree__pointer_value((to_array(((temp___expr_228).us_split_fields1).rec__rec_types__test2__tree_node__next)[temp___230]))).us_split_fields1).rec__rec_types__test2__tree_node__next))) ->
  temp___dynamic_invariant_206((to_array(((rec__rec_types__test2__tree__pointer_value((to_array(((temp___expr_228).us_split_fields1).rec__rec_types__test2__tree_node__next)[temp___230]))).us_split_fields1).rec__rec_types__test2__tree_node__next)[temp___232]),
  true, false, true, temp___do_typ_inv_227))))))))))

logic rliteral : natural

axiom rliteral_axiom : (naturalqtint(rliteral) = 10)

logic rliteral1 : integer

axiom rliteral_axiom1 : (integerqtint(rliteral1) = 0)

 (* File "rec_types.ads", line 26, characters 0-0 *)
goal defqtvc :
  (forall a:(int,us_rep) farray. (default_initial_assumption1(a, false) ->
  (dynamic_invariant1(a, false, false, true, true) ->
  (forall us_next_pointer_address:int.
  (forall rec_types__test2__p_tree__x__assume:us_rep.
  ((andb((if ((not ((rec_types__test2__p_tree__x__assume).rec__rec_types__test2__tree__is_null_pointer = true)) and
  ((rec_types__test2__p_tree__x__assume).rec__rec_types__test2__tree__pointer_address = us_next_pointer_address)) then true else false),
  (if (rec__rec_types__test2__tree__pointer_value(rec_types__test2__p_tree__x__assume) = to_base({
  us_split_discrs2 = { rec__rec_types__test2__tree_node__d = rliteral };
  us_split_fields3 = { rec__rec_types__test2__tree_node__val1 = rliteral1;
  rec__rec_types__test2__tree_node__next1 = a }
  })) then true else false)) = true) ->
  (forall x__pointer_value:us_rep1.
  ((x__pointer_value = rec__rec_types__test2__tree__pointer_value(rec_types__test2__p_tree__x__assume)) ->
  (forall x__pointer_address:int.
  ((x__pointer_address = (rec_types__test2__p_tree__x__assume).rec__rec_types__test2__tree__pointer_address) ->
  (forall x__is_null_pointer:bool.
  ((x__is_null_pointer = (rec_types__test2__p_tree__x__assume).rec__rec_types__test2__tree__is_null_pointer) ->
  (dynamic_invariant({ rec__rec_types__test2__tree__is_null_pointer =
  x__is_null_pointer; rec__rec_types__test2__tree__pointer_address =
  x__pointer_address; rec__rec_types__test2__tree__pointer_value_abstr =
  us_close(x__pointer_value) }, true, false, true, true) ->
  (forall i:int. ((i = 1) -> ((andb((if (1 <= i) then true else false),
  (if (i <= 10) then true else false)) = true) -> ((notb(bool_eq4({
  rec__rec_types__test2__tree__is_null_pointer = x__is_null_pointer;
  rec__rec_types__test2__tree__pointer_address = x__pointer_address;
  rec__rec_types__test2__tree__pointer_value_abstr =
  us_close(x__pointer_value) }, us_null_pointer)) = true) ->
  rec__rec_types__test2__tree__pointer_value__pred({
  rec__rec_types__test2__tree__is_null_pointer = x__is_null_pointer;
  rec__rec_types__test2__tree__pointer_address = x__pointer_address;
  rec__rec_types__test2__tree__pointer_value_abstr =
  us_close(x__pointer_value) }))))))))))))))))))
