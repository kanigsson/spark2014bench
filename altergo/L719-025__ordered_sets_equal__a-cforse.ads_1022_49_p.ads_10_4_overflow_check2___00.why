(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : count_type, count_type -> bool

logic dummy : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

function to_rep(x: count_type) : int = count_typeqtint(x)

logic of_rep : int -> count_type

axiom inversion_axiom :
  (forall x:count_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:count_type [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__p__my_sets__set__capacity : count_type
}

function us_split_discrs_rec__p__my_sets__set__capacity__projection(a: us_split_discrs) : count_type =
  (a).rec__p__my_sets__set__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__p__my_sets__set : us_main_type
}

function us_split_fields_rec__p__my_sets__set__projection(a: us_split_fields) : us_main_type =
  (a).rec__p__my_sets__set

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__p__my_sets__set__capacity) = to_rep(((b).us_split_discrs1).rec__p__my_sets__set__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__p__my_sets__set,
  ((b).us_split_fields1).rec__p__my_sets__set) = true)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic p__my_sets__set__capacity__first__bit : int

logic p__my_sets__set__capacity__last__bit : int

logic p__my_sets__set__capacity__position : int

axiom p__my_sets__set__capacity__first__bit_axiom :
  (0 <= p__my_sets__set__capacity__first__bit)

axiom p__my_sets__set__capacity__last__bit_axiom :
  (p__my_sets__set__capacity__first__bit <  p__my_sets__set__capacity__last__bit)

axiom p__my_sets__set__capacity__position_axiom :
  (0 <= p__my_sets__set__capacity__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type set__ref = { set__content : us_rep
}

function set__ref_set__content__projection(a: set__ref) : us_rep =
  (a).set__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq1(a, b)]. (user_eq1(a,
  b) = oeq(a, b)))

predicate dynamic_invariant(temp___expr_275: int, temp___is_init_271: bool,
  temp___skip_constant_272: bool, temp___do_toplevel_273: bool,
  temp___do_typ_inv_274: bool) = (((temp___is_init_271 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_275))

axiom length__post_axiom :
  (forall container:us_rep [length(container)].
  (length(container) <= to_rep(((container).us_split_discrs1).rec__p__my_sets__set__capacity)))

axiom length__post_axiom1 :
  (forall container:us_rep [length(container)].
  dynamic_invariant(length(container), true, false, true, true))

logic left : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic right : us_rep

logic attr__ATTRIBUTE_ADDRESS1 : int

type tcount_typeB

logic tcount_typeBqtint : tcount_typeB -> int

axiom tcount_typeBqtaxiom :
  (forall i:tcount_typeB. ((- 2147483648) <= tcount_typeBqtint(i)))

axiom tcount_typeBqtaxiom1 :
  (forall i:tcount_typeB. (tcount_typeBqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq2 : tcount_typeB, tcount_typeB -> bool

logic dummy2 : tcount_typeB

type tcount_typeB__ref = { tcount_typeB__content : tcount_typeB
}

function tcount_typeB__ref_tcount_typeB__content__projection(a: tcount_typeB__ref) : tcount_typeB =
  (a).tcount_typeB__content

logic bool_eq3 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq3(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq3(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length1(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

logic my_lt__function_guard : bool, int, int -> prop

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq4(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range2(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE2 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> bool

function equivalent_elements(left1: int, right1: int) : bool =
  andb(notb(bool_lt(left1, right1)), notb(bool_lt(right1, left1)))

logic equivalent_elements__function_guard : bool, int, int -> prop

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep1

logic bool_eq5 : us_rep1, us_rep1 -> bool

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type sequence__ref = { sequence__content : us_rep1
}

function sequence__ref_sequence__content__projection(a: sequence__ref) : us_rep1 =
  (a).sequence__content

logic length2 : us_rep1 -> int

logic length__function_guard1 : int, us_rep1 -> prop

logic get : us_rep1, int -> int

logic get__function_guard : int, us_rep1, int -> prop

function e_bigger_than_range(container: us_rep1, fst: int, lst: int,
  item: int) : bool =
  (if (forall i:int. (((fst <= i) and (i <= lst)) -> (bool_lt(get(container,
      i), item) = true))) then true else false)

logic e_bigger_than_range__function_guard : bool, us_rep1, int, int,
  int -> prop

function e_smaller_than_range(container: us_rep1, fst: int, lst: int,
  item: int) : bool =
  (if (forall i:int. (((fst <= i) and (i <= lst)) -> (bool_lt(item,
      get(container, i)) = true))) then true else false)

logic e_smaller_than_range__function_guard : bool, us_rep1, int, int,
  int -> prop

function e_is_find(container: us_rep1, item: int, position: int) : bool =
  andb((if (0 <  position) then e_bigger_than_range(container, 1,
  (position - 1), item) else of_int(1)),
  (if (position <  length2(container)) then e_smaller_than_range(container,
  (position + 1), length2(container), item) else of_int(1)))

logic e_is_find__function_guard : bool, us_rep1, int, int -> prop

logic find : us_rep1, int -> int

logic find__function_guard : int, us_rep1, int -> prop

type element_type

logic element_typeqtint : element_type -> int

axiom element_typeqtaxiom :
  (forall i:element_type. (1 <= element_typeqtint(i)))

axiom element_typeqtaxiom1 :
  (forall i:element_type. (element_typeqtint(i) <= 100))

predicate in_range3(x: int) = ((1 <= x) and (x <= 100))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : element_type, element_type -> bool

logic dummy4 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_element_type__content__2__projection(a: element_type__ref) : element_type =
  (a).element_type__content

predicate dynamic_invariant1(temp___expr_268: int, temp___is_init_264: bool,
  temp___skip_constant_265: bool, temp___do_toplevel_266: bool,
  temp___do_typ_inv_267: bool) = (((temp___is_init_264 = true) or
  (1 <= 100)) -> in_range3(temp___expr_268))

function last(container: us_rep1) : int = (0 + length2(container))

logic last__function_guard : int, us_rep1 -> prop

function oeq1(left1: us_rep1, right1: us_rep1) : bool =
  andb(bool_eq3(length2(left1), length2(right1)),
  (if (forall n:int. (((1 <= n) and (n <= last(left1))) -> (get(left1,
      n) = get(right1, n)))) then true else false))

logic oeq__function_guard1 : bool, us_rep1, us_rep1 -> prop

axiom user_eq__def_axiom1 :
  (forall a:us_rep1. forall b:us_rep1 [user_eq3(a, b)]. (user_eq3(a,
  b) = oeq1(a, b)))

predicate default_initial_assumption(temp___expr_349: us_rep1,
  temp___skip_top_level_350: bool) =
  ((not (temp___skip_top_level_350 = true)) ->
  (length2(temp___expr_349) = 0))

axiom find__post_axiom :
  (forall container:us_rep1.
  (forall item:int [find(container, item)]. (dynamic_invariant1(item, true,
  true, true, true) -> (let result = find(container, item) : int in
  ((0 <  result) -> (result <= length2(container)))))))

axiom find__post_axiom1 :
  (forall container:us_rep1.
  (forall item:int [find(container, item)]. (dynamic_invariant1(item, true,
  true, true, true) -> (let result = find(container, item) : int in
  ((0 <  result) -> (equivalent_elements(item, get(container,
  result)) = true))))))

axiom find__post_axiom2 :
  (forall container:us_rep1.
  (forall item:int [find(container, item)]. (dynamic_invariant1(item, true,
  true, true, true) -> dynamic_invariant(find(container, item), true, false,
  true, true))))

function e_elements_included(left1: us_rep1, right1: us_rep1) : bool =
  (if (forall i:int. (((1 <= i) and (i <= length2(left1))) ->
      ((0 <  find(right1, get(left1, i))) and (get(right1, find(right1,
      get(left1, i))) = get(left1, i))))) then true else false)

logic e_elements_included__function_guard : bool, us_rep1, us_rep1 -> prop

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep2

logic bool_eq7 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic user_eq5 : us_rep2, us_rep2 -> bool

logic dummy5 : us_rep2

type set__ref1 = { set__content1 : us_rep2
}

function set__ref_set__content__2__projection(a: set__ref1) : us_rep2 =
  (a).set__content1

logic length3 : us_rep2 -> int

logic length__function_guard2 : int, us_rep2 -> prop

logic model : us_rep -> us_rep2

logic model__function_guard : us_rep2, us_rep -> prop

logic oeq2 : us_rep2, us_rep2 -> bool

logic oeq__function_guard2 : bool, us_rep2, us_rep2 -> prop

logic is_empty : us_rep2 -> bool

logic is_empty__function_guard : bool, us_rep2 -> prop

axiom user_eq__def_axiom2 :
  (forall a:us_rep2. forall b:us_rep2 [user_eq5(a, b)]. (user_eq5(a,
  b) = oeq2(a, b)))

predicate default_initial_assumption1(temp___expr_313: us_rep2,
  temp___skip_top_level_314: bool) =
  ((not (temp___skip_top_level_314 = true)) ->
  (is_empty(temp___expr_313) = true))

axiom model__post_axiom :
  (forall container:us_rep [model(container)].
  (length3(model(container)) = length(container)))

logic contains : us_rep2, int -> bool

logic contains__function_guard : bool, us_rep2, int -> prop

function iter_has_element(container: us_rep1, position: int) : bool =
  andb((if (1 <= position) then true else false),
  (if (position <= last(container)) then true else false))

logic iter_has_element__function_guard : bool, us_rep1, int -> prop

logic elements : us_rep -> us_rep1

logic elements__function_guard : us_rep1, us_rep -> prop

type element_type1

logic element_typeqtint1 : element_type1 -> int

axiom element_typeqtaxiom2 :
  (forall i:element_type1. (1 <= element_typeqtint1(i)))

axiom element_typeqtaxiom3 :
  (forall i:element_type1. (element_typeqtint1(i) <= 100))

predicate in_range4(x: int) = ((1 <= x) and (x <= 100))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq6 : element_type1, element_type1 -> bool

logic dummy6 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref_element_type__content__3__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. (0 <= extended_indexqtint(i)))

axiom extended_indexqtaxiom1 :
  (forall i:extended_index. (extended_indexqtint(i) <= 2147483647))

predicate in_range5(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq7 : extended_index, extended_index -> bool

logic dummy7 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref_extended_index__content__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

axiom elements__post_axiom :
  (forall container:us_rep [elements(container)].
  (length2(elements(container)) = length(container)))

axiom elements__post_axiom1 :
  (forall container:us_rep [elements(container)]. (let result =
  elements(container) : us_rep1 in
  (forall temp___423:int. ((in_range5(temp___423) and
  (iter_has_element(result, temp___423) = true)) ->
  (contains(model(container), get(result, temp___423)) = true)))))

axiom elements__post_axiom2 :
  (forall container:us_rep [elements(container)].
  (forall item:int. ((in_range4(item) and (contains(model(container),
  item) = true)) -> (0 <  find(elements(container), item)))))

axiom elements__post_axiom3 :
  (forall container:us_rep [elements(container)]. (let result =
  elements(container) : us_rep1 in
  (forall item:int. ((in_range4(item) and (contains(model(container),
  item) = true)) -> (equivalent_elements(get(result, find(result, item)),
  item) = true)))))

axiom elements__post_axiom4 :
  (forall container:us_rep [elements(container)]. (let result =
  elements(container) : us_rep1 in
  (forall i:int. (((1 <= i) and (i <= length(container))) -> (find(result,
  get(result, i)) = i)))))

axiom elements__post_axiom5 :
  (forall container:us_rep [elements(container)]. (let result =
  elements(container) : us_rep1 in
  (forall i:int. (((1 <= i) and (i <= length(container))) ->
  (e_is_find(result, get(result, i), i) = true)))))

axiom oeq__post_axiom :
  (forall left1:us_rep. forall right1:us_rep [oeq(left1, right1)].
  ((oeq(left1, right1) = true) -> (oeq1(elements(left1),
  elements(right1)) = true)))

axiom oeq__post_axiom1 :
  (forall left1:us_rep. forall right1:us_rep [oeq(left1, right1)].
  ((not (oeq(left1, right1) = true)) ->
  ((not (e_elements_included(elements(left1), elements(right1)) = true)) or
  (not (e_elements_included(elements(right1), elements(left1)) = true)))))

predicate dynamic_invariant2(temp___expr_305: int, temp___is_init_301: bool,
  temp___skip_constant_302: bool, temp___do_toplevel_303: bool,
  temp___do_typ_inv_304: bool) = (((temp___is_init_301 = true) or
  (1 <= 100)) -> in_range4(temp___expr_305))

axiom contains__post_axiom :
  (forall container:us_rep2.
  (forall item:int [contains(container, item)]. (dynamic_invariant2(item,
  true, true, true, true) -> ((of_int(1) = true) ->
  ((exists e:int. ((in_range4(e) and (contains(container, e) = true)) and
   (equivalent_elements(e, item) = true))) ->
  (contains(container, item) = true))))))

axiom length__post_axiom2 :
  (forall container:us_rep2 [length3(container)].
  dynamic_invariant(length3(container), true, false, true, true))

logic ole : us_rep2, us_rep2 -> bool

logic ole__function_guard : bool, us_rep2, us_rep2 -> prop

axiom ole__post_axiom :
  (forall left1:us_rep2. forall right1:us_rep2 [ole(left1, right1)].
  ((ole(left1, right1) = true) ->
  (forall item:int. ((in_range4(item) and (contains(left1, item) = true)) ->
  (contains(right1, item) = true)))))

axiom ole__post_axiom1 :
  (forall left1:us_rep2. forall right1:us_rep2 [ole(left1, right1)].
  ((forall item:int. ((in_range4(item) and (contains(left1, item) = true)) ->
   (contains(right1, item) = true))) ->
  (ole(left1, right1) = true)))

axiom oeq__post_axiom2 :
  (forall left1:us_rep2. forall right1:us_rep2 [oeq2(left1, right1)].
  ((oeq2(left1, right1) = true) -> (ole(left1, right1) = true)))

axiom oeq__post_axiom3 :
  (forall left1:us_rep2. forall right1:us_rep2 [oeq2(left1, right1)].
  ((oeq2(left1, right1) = true) -> (ole(right1, left1) = true)))

axiom oeq__post_axiom4 :
  (forall left1:us_rep2. forall right1:us_rep2 [oeq2(left1, right1)].
  (((ole(left1, right1) = true) and (ole(right1, left1) = true)) ->
  (oeq2(left1, right1) = true)))

axiom is_empty__post_axiom :
  (forall container:us_rep2 [is_empty(container)].
  ((is_empty(container) = true) ->
  (forall item:int. (not (in_range4(item) and (contains(container,
  item) = true))))))

axiom is_empty__post_axiom1 :
  (forall container:us_rep2 [is_empty(container)].
  ((forall item:int. (not (in_range4(item) and (contains(container,
   item) = true)))) ->
  (is_empty(container) = true)))

axiom is_empty__post_axiom2 :
  (forall container:us_rep2 [is_empty(container)].
  ((is_empty(container) = true) -> (length3(container) = 0)))

axiom is_empty__post_axiom3 :
  (forall container:us_rep2 [is_empty(container)].
  ((length3(container) = 0) -> (is_empty(container) = true)))

predicate dynamic_invariant3(temp___expr_341: int, temp___is_init_337: bool,
  temp___skip_constant_338: bool, temp___do_toplevel_339: bool,
  temp___do_typ_inv_340: bool) = (((temp___is_init_337 = true) or
  (0 <= 2147483647)) -> in_range5(temp___expr_341))

axiom length__post_axiom3 :
  (forall container:us_rep1 [length2(container)].
  ((0 + length2(container)) <= 2147483647))

axiom length__post_axiom4 :
  (forall container:us_rep1 [length2(container)].
  dynamic_invariant(length2(container), true, false, true, true))

type element_type2

logic element_typeqtint2 : element_type2 -> int

axiom element_typeqtaxiom4 :
  (forall i:element_type2. (1 <= element_typeqtint2(i)))

axiom element_typeqtaxiom5 :
  (forall i:element_type2. (element_typeqtint2(i) <= 100))

predicate in_range6(x: int) = ((1 <= x) and (x <= 100))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : element_type2, element_type2 -> bool

logic dummy8 : element_type2

type element_type__ref2 = { element_type__content2 : element_type2
}

function element_type__ref_element_type__content__4__projection(a: element_type__ref2) : element_type2 =
  (a).element_type__content2

predicate dynamic_invariant4(temp___expr_334: int, temp___is_init_330: bool,
  temp___skip_constant_331: bool, temp___do_toplevel_332: bool,
  temp___do_typ_inv_333: bool) = (((temp___is_init_330 = true) or
  (1 <= 100)) -> in_range6(temp___expr_334))

axiom get__post_axiom :
  (forall container:us_rep1.
  (forall position:int [get(container, position)].
  ((dynamic_invariant3(position, true, true, true, true) and
  ((1 <= position) and (position <= last(container)))) ->
  dynamic_invariant4(get(container, position), true, false, true, true))))

 (* File "a-cforse.ads", line 1020, characters 0-0 *)
goal defqtvc : (let o = right : us_rep in (let o1 = length(o) : int in
  ((dynamic_invariant(o1, true, false, true, true) and
  (o1 <= to_rep(((o).us_split_discrs1).rec__p__my_sets__set__capacity))) ->
  in_range1((2147483647 - o1)))))
