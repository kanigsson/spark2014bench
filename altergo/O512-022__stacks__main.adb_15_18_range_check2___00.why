(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant1(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_invariant2(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_46))

function to_rep1(x: positive) : int = positiveqtint(x)

logic of_rep1 : int -> positive

axiom inversion_axiom1 :
  (forall x:positive [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:positive [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type character

predicate in_range4(x: int) = ((0 <= x) and (x <= 255))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : character, character -> bool

logic dummy3 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep2 : character -> int

logic of_rep2 : int -> character

axiom inversion_axiom2 :
  (forall x:character [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:character [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq5(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep2((a[temp___idx_91])) = to_rep2((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep2((a[temp___idx_91])) = to_rep2((b[((b__first - a__first) + temp___idx_91)]))))))))

function to_rep3(x: integer) : int = integerqtint(x)

logic of_rep3 : int -> integer

axiom inversion_axiom3 :
  (forall x:integer [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:integer [to_rep3(x)]. in_range1(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range1(x) ->
  (to_rep3(of_rep3(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep3(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep3(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep3(first((a).rt))

function last1(a: us_t) : int = to_rep3(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep3(first((x).rt)), to_rep3(last((x).rt)), (y).elts,
  to_rep3(first((y).rt)), to_rep3(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

logic attr__ATTRIBUTE_ADDRESS : int

logic line_length : us_private, us_private, us_private, us_private,
  us_private, us_private, us_private -> int

logic line_length__function_guard : int, us_private, us_private, us_private,
  us_private, us_private, us_private, us_private -> prop

logic page_length : us_private, us_private, us_private, us_private,
  us_private, us_private, us_private -> int

logic page_length__function_guard : int, us_private, us_private, us_private,
  us_private, us_private, us_private, us_private -> prop

type num

logic numqtint : num -> int

axiom numqtaxiom : (forall i:num. ((- 2147483648) <= numqtint(i)))

axiom numqtaxiom1 : (forall i:num. (numqtint(i) <= 2147483647))

predicate in_range5(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : num, num -> bool

logic dummy5 : num

type num__ref = { num__content : num
}

function num__ref_num__content__projection(a: num__ref) : num =
  (a).num__content

predicate dynamic_invariant3(temp___expr_265: int, temp___is_init_261: bool,
  temp___skip_constant_262: bool, temp___do_toplevel_263: bool,
  temp___do_typ_inv_264: bool) = (((temp___is_init_261 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range5(temp___expr_265))

logic max_cst : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type element

logic elementqtint : element -> int

axiom elementqtaxiom :
  (forall i:element. ((- 2147483648) <= elementqtint(i)))

axiom elementqtaxiom1 : (forall i:element. (elementqtint(i) <= 2147483647))

predicate in_range6(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : element, element -> bool

logic dummy6 : element

type element__ref = { element__content : element
}

function element__ref_element__content__projection(a: element__ref) : element =
  (a).element__content

function to_rep4(x: element) : int = elementqtint(x)

logic of_rep4 : int -> element

axiom inversion_axiom4 :
  (forall x:element [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:element [to_rep4(x)]. in_range6(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range6(x) ->
  (to_rep4(of_rep4(x)) = x)))

type map__ref1 = { map__content1 : (int,element) farray
}

logic slide1 : (int,element) farray, int, int -> (int,element) farray

axiom slide_eq1 :
  (forall a:(int,element) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,element) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq9(a: (int,element) farray, a__first: int, a__last: int,
  b: (int,element) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) ->
  (to_rep4((a[temp___idx_157])) = to_rep4((b[((b__first - a__first) + temp___idx_157)])))))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) ->
  (to_rep4((a[temp___idx_157])) = to_rep4((b[((b__first - a__first) + temp___idx_157)]))))))))

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def2 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep3(first2(mk1(f, l))) = f))))

axiom mk_def3 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep3(last2(mk1(f, l))) = l))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t1 = { elts1 : (int,element) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,element) farray = (a).elts1

function of_array1(a: (int,element) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep3(first2((a).rt1))

function last3(a: us_t1) : int = to_rep3(last2((a).rt1))

function length1(a: us_t1) : int =
  (if (first3(a) <= last3(a)) then ((last3(a) - first3(a)) + 1) else 0)

logic value__size1 : int

logic object__size1 : int

logic component__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom1 : (0 <= alignment1)

function bool_eq10(x: us_t1, y: us_t1) : bool = bool_eq9((x).elts1,
  to_rep3(first2((x).rt1)), to_rep3(last2((x).rt1)), (y).elts1,
  to_rep3(first2((y).rt1)), to_rep3(last2((y).rt1)))

logic user_eq7 : us_t1, us_t1 -> bool

logic dummy7 : us_t1

type elements__ref = { elements__content : us_t1
}

function elements__ref_elements__content__projection(a: elements__ref) : us_t1 =
  (a).elements__content

type t20s__ref = { t20s__content : us_t1
}

function t20s__ref_t20s__content__projection(a: t20s__ref) : us_t1 =
  (a).t20s__content

type us_split_discrs = { rec__stacks__stack__max : positive
}

function us_split_discrs_rec__stacks__stack__max__projection(a: us_split_discrs) : positive =
  (a).rec__stacks__stack__max

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__stacks__stack__top : natural;
rec__stacks__stack__data : us_t1; rec__ext__ : us_private
}

function us_split_fields_rec__stacks__stack__top__projection(a: us_split_fields) : natural =
  (a).rec__stacks__stack__top

function us_split_fields_rec__stacks__stack__data__projection(a: us_split_fields) : us_t1 =
  (a).rec__stacks__stack__data

function us_split_fields_rec__ext____2__projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__tag : int
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__2__projection(a: us_rep) : int = (a).attr__tag

function bool_eq11(a: us_rep, b: us_rep) : bool =
  (if ((to_rep1(((a).us_split_discrs1).rec__stacks__stack__max) = to_rep1(((b).us_split_discrs1).rec__stacks__stack__max)) and
  ((to_rep(((a).us_split_fields1).rec__stacks__stack__top) = to_rep(((b).us_split_fields1).rec__stacks__stack__top)) and
  (bool_eq10(((a).us_split_fields1).rec__stacks__stack__data,
  ((b).us_split_fields1).rec__stacks__stack__data) = true))) then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

predicate in_range7(rec__stacks__stack__max1: int, a: us_split_discrs) =
  (rec__stacks__stack__max1 = to_rep1((a).rec__stacks__stack__max))

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic stacks__stack__max__first__bit : int

logic stacks__stack__max__last__bit : int

logic stacks__stack__max__position : int

axiom stacks__stack__max__first__bit_axiom :
  (0 <= stacks__stack__max__first__bit)

axiom stacks__stack__max__last__bit_axiom :
  (stacks__stack__max__first__bit <  stacks__stack__max__last__bit)

axiom stacks__stack__max__position_axiom :
  (0 <= stacks__stack__max__position)

logic stacks__stack__top__first__bit : int

logic stacks__stack__top__last__bit : int

logic stacks__stack__top__position : int

axiom stacks__stack__top__first__bit_axiom :
  (0 <= stacks__stack__top__first__bit)

axiom stacks__stack__top__last__bit_axiom :
  (stacks__stack__top__first__bit <  stacks__stack__top__last__bit)

axiom stacks__stack__top__position_axiom :
  (0 <= stacks__stack__top__position)

logic stacks__stack__data__first__bit : int

logic stacks__stack__data__last__bit : int

logic stacks__stack__data__position : int

axiom stacks__stack__data__first__bit_axiom :
  (0 <= stacks__stack__data__first__bit)

axiom stacks__stack__data__last__bit_axiom :
  (stacks__stack__data__first__bit <  stacks__stack__data__last__bit)

axiom stacks__stack__data__position_axiom :
  (0 <= stacks__stack__data__position)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy8 : us_rep

type stack__ref = { stack__content : us_rep
}

function stack__ref_stack__content__projection(a: stack__ref) : us_rep =
  (a).stack__content

type t3b__ref = { t3b__content : us_t1
}

function t3b__ref_t3b__content__projection(a: t3b__ref) : us_t1 =
  (a).t3b__content

type us_split_fields2 = { rec__stacks__stack__top1 : natural;
rec__stacks__stack__data1 : us_t1; rec__ext__1 : us_private
}

function us_split_fields_rec__stacks__stack__top__2__projection(a: us_split_fields2) : natural =
  (a).rec__stacks__stack__top1

function us_split_fields_rec__stacks__stack__data__2__projection(a: us_split_fields2) : us_t1 =
  (a).rec__stacks__stack__data1

function us_split_fields_rec__ext____3__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2; attr__tag1 : int
}

function us_rep___split_discrs__2__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep___split_fields__3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_attr__tag__3__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : us_private -> us_private

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = { rec__stacks__stack__top =
  ((a).us_split_fields3).rec__stacks__stack__top1; rec__stacks__stack__data =
  of_array1(to_array1(((a).us_split_fields3).rec__stacks__stack__data1),
  first3(((a).us_split_fields3).rec__stacks__stack__data1),
  last3(((a).us_split_fields3).rec__stacks__stack__data1)); rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__ext__1) }; attr__tag =
  (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = { rec__stacks__stack__top1 =
  ((r).us_split_fields1).rec__stacks__stack__top; rec__stacks__stack__data1 =
  of_array1(to_array1(((r).us_split_fields1).rec__stacks__stack__data),
  first3(((r).us_split_fields1).rec__stacks__stack__data),
  last3(((r).us_split_fields1).rec__stacks__stack__data)); rec__ext__1 =
  extract__ext__(((r).us_split_fields1).rec__ext__) }; attr__tag1 =
  (r).attr__tag }

function bool_eq12(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep1(((a).us_split_discrs2).rec__stacks__stack__max) = to_rep1(((b).us_split_discrs2).rec__stacks__stack__max)) and
  ((to_rep(((a).us_split_fields3).rec__stacks__stack__top1) = to_rep(((b).us_split_fields3).rec__stacks__stack__top1)) and
  (bool_eq10(((a).us_split_fields3).rec__stacks__stack__data1,
  ((b).us_split_fields3).rec__stacks__stack__data1) = true))) then true else false)

logic us_tag1 : int

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic stacks__stack__max__first__bit1 : int

logic stacks__stack__max__last__bit1 : int

logic stacks__stack__max__position1 : int

axiom stacks__stack__max__first__bit_axiom1 :
  (0 <= stacks__stack__max__first__bit1)

axiom stacks__stack__max__last__bit_axiom1 :
  (stacks__stack__max__first__bit1 <  stacks__stack__max__last__bit1)

axiom stacks__stack__max__position_axiom1 :
  (0 <= stacks__stack__max__position1)

logic stacks__stack__top__first__bit1 : int

logic stacks__stack__top__last__bit1 : int

logic stacks__stack__top__position1 : int

axiom stacks__stack__top__first__bit_axiom1 :
  (0 <= stacks__stack__top__first__bit1)

axiom stacks__stack__top__last__bit_axiom1 :
  (stacks__stack__top__first__bit1 <  stacks__stack__top__last__bit1)

axiom stacks__stack__top__position_axiom1 :
  (0 <= stacks__stack__top__position1)

logic stacks__stack__data__first__bit1 : int

logic stacks__stack__data__last__bit1 : int

logic stacks__stack__data__position1 : int

axiom stacks__stack__data__first__bit_axiom1 :
  (0 <= stacks__stack__data__first__bit1)

axiom stacks__stack__data__last__bit_axiom1 :
  (stacks__stack__data__first__bit1 <  stacks__stack__data__last__bit1)

axiom stacks__stack__data__position_axiom1 :
  (0 <= stacks__stack__data__position1)

logic user_eq9 : us_rep1, us_rep1 -> bool

logic dummy9 : us_rep1

type tsS__ref = { tsS__content : us_rep1
}

function tsS__ref_tsS__content__projection(a: tsS__ref) : us_rep1 =
  (a).tsS__content

logic s__split_discrs : us_split_discrs

logic s__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic bool_eq13 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq13(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq13(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length2(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

predicate dynamic_invariant4(temp___expr_292: us_rep,
  temp___is_init_288: bool, temp___skip_constant_289: bool,
  temp___do_toplevel_290: bool, temp___do_typ_inv_291: bool) =
  (let temp___293 =
  ((temp___expr_292).us_split_discrs1).rec__stacks__stack__max : positive in
  (dynamic_property1(1, to_rep1(temp___293),
  first3(((temp___expr_292).us_split_fields1).rec__stacks__stack__data),
  last3(((temp___expr_292).us_split_fields1).rec__stacks__stack__data)) and
  ((first3(((temp___expr_292).us_split_fields1).rec__stacks__stack__data) = 1) and
  (last3(((temp___expr_292).us_split_fields1).rec__stacks__stack__data) = to_rep1(temp___293)))))

logic size : us_rep -> int

logic size__function_guard : int, us_rep -> prop

logic size1 : int, us_rep -> int

logic size__function_guard1 : int, int, us_rep -> prop

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

logic is_empty1 : int, us_rep -> bool

logic is_empty__function_guard1 : bool, int, us_rep -> prop

logic pop__specific_post : int, us_split_fields, us_split_discrs, int,
  us_split_fields -> prop

axiom stacks__stack__compat_axiom :
  (forall stacks__pop__s__fields:us_split_fields.
  forall stacks__pop__s__old__fields:us_split_fields.
  (forall s__split_discrs1:us_split_discrs.
  (forall s__attr__tag1:int [pop__specific_post(us_tag,
  stacks__pop__s__fields, s__split_discrs1, s__attr__tag1,
  stacks__pop__s__old__fields)]. (pop__specific_post(us_tag,
  stacks__pop__s__fields, s__split_discrs1, s__attr__tag1,
  stacks__pop__s__old__fields) ->
  (forall stacks__pop__s__old__fields1:us_split_fields.
  forall s__split_discrs2:us_split_discrs. forall s__attr__tag2:int.
  size__function_guard(size({ us_split_discrs1 = s__split_discrs2;
  us_split_fields1 = stacks__pop__s__old__fields1; attr__tag = s__attr__tag2
  }), { us_split_discrs1 = s__split_discrs2; us_split_fields1 =
  stacks__pop__s__old__fields1; attr__tag = s__attr__tag2 }))))))

axiom stacks__stack__compat_axiom1 :
  (forall stacks__pop__s__fields:us_split_fields.
  forall stacks__pop__s__old__fields:us_split_fields.
  (forall s__split_discrs1:us_split_discrs.
  (forall s__attr__tag1:int [pop__specific_post(us_tag,
  stacks__pop__s__fields, s__split_discrs1, s__attr__tag1,
  stacks__pop__s__old__fields)]. (pop__specific_post(us_tag,
  stacks__pop__s__fields, s__split_discrs1, s__attr__tag1,
  stacks__pop__s__old__fields) ->
  (forall stacks__pop__s__fields1:us_split_fields.
  forall s__split_discrs2:us_split_discrs. forall s__attr__tag2:int.
  size__function_guard(size({ us_split_discrs1 = s__split_discrs2;
  us_split_fields1 = stacks__pop__s__fields1; attr__tag = s__attr__tag2 }), {
  us_split_discrs1 = s__split_discrs2; us_split_fields1 =
  stacks__pop__s__fields1; attr__tag = s__attr__tag2 }))))))

axiom stacks__stack__compat_axiom2 :
  (forall stacks__pop__s__fields:us_split_fields.
  forall stacks__pop__s__old__fields:us_split_fields.
  (forall s__split_discrs1:us_split_discrs.
  (forall s__attr__tag1:int [pop__specific_post(us_tag,
  stacks__pop__s__fields, s__split_discrs1, s__attr__tag1,
  stacks__pop__s__old__fields)]. (pop__specific_post(us_tag,
  stacks__pop__s__fields, s__split_discrs1, s__attr__tag1,
  stacks__pop__s__old__fields) -> (size({ us_split_discrs1 =
  s__split_discrs1; us_split_fields1 = stacks__pop__s__fields; attr__tag =
  s__attr__tag1 }) = (size({ us_split_discrs1 = s__split_discrs1;
  us_split_fields1 = stacks__pop__s__old__fields; attr__tag = s__attr__tag1
  }) - 1))))))

axiom main__B_1__TsS__compat_axiom :
  (forall stacks__pop__s__fields:us_split_fields.
  forall stacks__pop__s__old__fields:us_split_fields.
  (forall s__split_discrs1:us_split_discrs.
  (forall s__attr__tag1:int [pop__specific_post(us_tag1,
  stacks__pop__s__fields, s__split_discrs1, s__attr__tag1,
  stacks__pop__s__old__fields)]. (pop__specific_post(us_tag1,
  stacks__pop__s__fields, s__split_discrs1, s__attr__tag1,
  stacks__pop__s__old__fields) ->
  (forall stacks__pop__s__old__fields1:us_split_fields.
  forall s__split_discrs2:us_split_discrs. forall s__attr__tag2:int.
  size__function_guard(size({ us_split_discrs1 = s__split_discrs2;
  us_split_fields1 = stacks__pop__s__old__fields1; attr__tag = s__attr__tag2
  }), { us_split_discrs1 = s__split_discrs2; us_split_fields1 =
  stacks__pop__s__old__fields1; attr__tag = s__attr__tag2 }))))))

axiom main__B_1__TsS__compat_axiom1 :
  (forall stacks__pop__s__fields:us_split_fields.
  forall stacks__pop__s__old__fields:us_split_fields.
  (forall s__split_discrs1:us_split_discrs.
  (forall s__attr__tag1:int [pop__specific_post(us_tag1,
  stacks__pop__s__fields, s__split_discrs1, s__attr__tag1,
  stacks__pop__s__old__fields)]. (pop__specific_post(us_tag1,
  stacks__pop__s__fields, s__split_discrs1, s__attr__tag1,
  stacks__pop__s__old__fields) ->
  (forall stacks__pop__s__fields1:us_split_fields.
  forall s__split_discrs2:us_split_discrs. forall s__attr__tag2:int.
  size__function_guard(size({ us_split_discrs1 = s__split_discrs2;
  us_split_fields1 = stacks__pop__s__fields1; attr__tag = s__attr__tag2 }), {
  us_split_discrs1 = s__split_discrs2; us_split_fields1 =
  stacks__pop__s__fields1; attr__tag = s__attr__tag2 }))))))

axiom main__B_1__TsS__compat_axiom2 :
  (forall stacks__pop__s__fields:us_split_fields.
  forall stacks__pop__s__old__fields:us_split_fields.
  (forall s__split_discrs1:us_split_discrs.
  (forall s__attr__tag1:int [pop__specific_post(us_tag1,
  stacks__pop__s__fields, s__split_discrs1, s__attr__tag1,
  stacks__pop__s__old__fields)]. (pop__specific_post(us_tag1,
  stacks__pop__s__fields, s__split_discrs1, s__attr__tag1,
  stacks__pop__s__old__fields) -> (size({ us_split_discrs1 =
  s__split_discrs1; us_split_fields1 = stacks__pop__s__fields; attr__tag =
  s__attr__tag1 }) = (size({ us_split_discrs1 = s__split_discrs1;
  us_split_fields1 = stacks__pop__s__old__fields; attr__tag = s__attr__tag1
  }) - 1))))))

logic print__specific_post : int, us_rep, us_private, us_private, us_private,
  us_private, us_private, us_private, us_private, us_private, us_private,
  us_private, us_private, us_private, us_private, us_private -> prop

logic r12b : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic is_full : us_rep -> bool

logic is_full__function_guard : bool, us_rep -> prop

logic is_full1 : int, us_rep -> bool

logic is_full__function_guard1 : bool, int, us_rep -> prop

logic push__specific_post : int, us_split_fields, us_split_discrs, int, int,
  us_split_fields -> prop

axiom stacks__stack__compat_axiom3 :
  (forall stacks__push__s__fields:us_split_fields.
  forall stacks__push__s__old__fields:us_split_fields.
  (forall s__split_discrs1:us_split_discrs.
  (forall s__attr__tag1:int. forall e:int [push__specific_post(us_tag,
  stacks__push__s__fields, s__split_discrs1, s__attr__tag1, e,
  stacks__push__s__old__fields)]. (push__specific_post(us_tag,
  stacks__push__s__fields, s__split_discrs1, s__attr__tag1, e,
  stacks__push__s__old__fields) ->
  (forall stacks__push__s__old__fields1:us_split_fields.
  forall s__split_discrs2:us_split_discrs. forall s__attr__tag2:int.
  size__function_guard(size({ us_split_discrs1 = s__split_discrs2;
  us_split_fields1 = stacks__push__s__old__fields1; attr__tag = s__attr__tag2
  }), { us_split_discrs1 = s__split_discrs2; us_split_fields1 =
  stacks__push__s__old__fields1; attr__tag = s__attr__tag2 }))))))

axiom stacks__stack__compat_axiom4 :
  (forall stacks__push__s__fields:us_split_fields.
  forall stacks__push__s__old__fields:us_split_fields.
  (forall s__split_discrs1:us_split_discrs.
  (forall s__attr__tag1:int. forall e:int [push__specific_post(us_tag,
  stacks__push__s__fields, s__split_discrs1, s__attr__tag1, e,
  stacks__push__s__old__fields)]. (push__specific_post(us_tag,
  stacks__push__s__fields, s__split_discrs1, s__attr__tag1, e,
  stacks__push__s__old__fields) ->
  (forall stacks__push__s__fields1:us_split_fields.
  forall s__split_discrs2:us_split_discrs. forall s__attr__tag2:int.
  size__function_guard(size({ us_split_discrs1 = s__split_discrs2;
  us_split_fields1 = stacks__push__s__fields1; attr__tag = s__attr__tag2 }),
  { us_split_discrs1 = s__split_discrs2; us_split_fields1 =
  stacks__push__s__fields1; attr__tag = s__attr__tag2 }))))))

axiom stacks__stack__compat_axiom5 :
  (forall stacks__push__s__fields:us_split_fields.
  forall stacks__push__s__old__fields:us_split_fields.
  (forall s__split_discrs1:us_split_discrs.
  (forall s__attr__tag1:int. forall e:int [push__specific_post(us_tag,
  stacks__push__s__fields, s__split_discrs1, s__attr__tag1, e,
  stacks__push__s__old__fields)]. (push__specific_post(us_tag,
  stacks__push__s__fields, s__split_discrs1, s__attr__tag1, e,
  stacks__push__s__old__fields) -> (size({ us_split_discrs1 =
  s__split_discrs1; us_split_fields1 = stacks__push__s__fields; attr__tag =
  s__attr__tag1 }) = (size({ us_split_discrs1 = s__split_discrs1;
  us_split_fields1 = stacks__push__s__old__fields; attr__tag = s__attr__tag1
  }) + 1))))))

axiom main__B_1__TsS__compat_axiom3 :
  (forall stacks__push__s__fields:us_split_fields.
  forall stacks__push__s__old__fields:us_split_fields.
  (forall s__split_discrs1:us_split_discrs.
  (forall s__attr__tag1:int. forall e:int [push__specific_post(us_tag1,
  stacks__push__s__fields, s__split_discrs1, s__attr__tag1, e,
  stacks__push__s__old__fields)]. (push__specific_post(us_tag1,
  stacks__push__s__fields, s__split_discrs1, s__attr__tag1, e,
  stacks__push__s__old__fields) ->
  (forall stacks__push__s__old__fields1:us_split_fields.
  forall s__split_discrs2:us_split_discrs. forall s__attr__tag2:int.
  size__function_guard(size({ us_split_discrs1 = s__split_discrs2;
  us_split_fields1 = stacks__push__s__old__fields1; attr__tag = s__attr__tag2
  }), { us_split_discrs1 = s__split_discrs2; us_split_fields1 =
  stacks__push__s__old__fields1; attr__tag = s__attr__tag2 }))))))

axiom main__B_1__TsS__compat_axiom4 :
  (forall stacks__push__s__fields:us_split_fields.
  forall stacks__push__s__old__fields:us_split_fields.
  (forall s__split_discrs1:us_split_discrs.
  (forall s__attr__tag1:int. forall e:int [push__specific_post(us_tag1,
  stacks__push__s__fields, s__split_discrs1, s__attr__tag1, e,
  stacks__push__s__old__fields)]. (push__specific_post(us_tag1,
  stacks__push__s__fields, s__split_discrs1, s__attr__tag1, e,
  stacks__push__s__old__fields) ->
  (forall stacks__push__s__fields1:us_split_fields.
  forall s__split_discrs2:us_split_discrs. forall s__attr__tag2:int.
  size__function_guard(size({ us_split_discrs1 = s__split_discrs2;
  us_split_fields1 = stacks__push__s__fields1; attr__tag = s__attr__tag2 }),
  { us_split_discrs1 = s__split_discrs2; us_split_fields1 =
  stacks__push__s__fields1; attr__tag = s__attr__tag2 }))))))

axiom main__B_1__TsS__compat_axiom5 :
  (forall stacks__push__s__fields:us_split_fields.
  forall stacks__push__s__old__fields:us_split_fields.
  (forall s__split_discrs1:us_split_discrs.
  (forall s__attr__tag1:int. forall e:int [push__specific_post(us_tag1,
  stacks__push__s__fields, s__split_discrs1, s__attr__tag1, e,
  stacks__push__s__old__fields)]. (push__specific_post(us_tag1,
  stacks__push__s__fields, s__split_discrs1, s__attr__tag1, e,
  stacks__push__s__old__fields) -> (size({ us_split_discrs1 =
  s__split_discrs1; us_split_fields1 = stacks__push__s__fields; attr__tag =
  s__attr__tag1 }) = (size({ us_split_discrs1 = s__split_discrs1;
  us_split_fields1 = stacks__push__s__old__fields; attr__tag = s__attr__tag1
  }) + 1))))))

predicate dynamic_invariant5(temp___expr_279: int, temp___is_init_275: bool,
  temp___skip_constant_276: bool, temp___do_toplevel_277: bool,
  temp___do_typ_inv_278: bool) = (((temp___is_init_275 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range6(temp___expr_279))

type tTcmdSP1

logic tTcmdSP1qtint : tTcmdSP1 -> int

axiom tTcmdSP1qtaxiom : (forall i:tTcmdSP1. (1 <= tTcmdSP1qtint(i)))

axiom tTcmdSP1qtaxiom1 : (forall i:tTcmdSP1. (tTcmdSP1qtint(i) <= 20))

predicate in_range8(x: int) = ((1 <= x) and (x <= 20))

function bool_eq14(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq10 : tTcmdSP1, tTcmdSP1 -> bool

logic dummy10 : tTcmdSP1

type tTcmdSP1__ref = { tTcmdSP1__content : tTcmdSP1
}

function tTcmdSP1__ref_tTcmdSP1__content__projection(a: tTcmdSP1__ref) : tTcmdSP1 =
  (a).tTcmdSP1__content

type t5b

logic t5bqtint : t5b -> int

axiom t5bqtaxiom : (forall i:t5b. (1 <= t5bqtint(i)))

axiom t5bqtaxiom1 : (forall i:t5b. (t5bqtint(i) <= 3))

predicate in_range9(x: int) = ((1 <= x) and (x <= 3))

function bool_eq15(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq11 : t5b, t5b -> bool

logic dummy11 : t5b

type t5b__ref = { t5b__content : t5b
}

function t5b__ref_t5b__content__projection(a: t5b__ref) : t5b =
  (a).t5b__content

type t9b

logic t9bqtint : t9b -> int

axiom t9bqtaxiom : (forall i:t9b. (1 <= t9bqtint(i)))

axiom t9bqtaxiom1 : (forall i:t9b. (t9bqtint(i) <= 5))

predicate in_range10(x: int) = ((1 <= x) and (x <= 5))

function bool_eq16(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq12 : t9b, t9b -> bool

logic dummy12 : t9b

type t9b__ref = { t9b__content : t9b
}

function t9b__ref_t9b__content__projection(a: t9b__ref) : t9b =
  (a).t9b__content

type t14b__ref = { t14b__content : us_t
}

function t14b__ref_t14b__content__projection(a: t14b__ref) : us_t =
  (a).t14b__content

logic temp___String_Literal_502 : unit -> (int,character) farray

axiom temp___String_Literal_502__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[1])) = 104))

axiom temp___String_Literal_502__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[2])) = 111))

axiom temp___String_Literal_502__def_axiom2 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[3])) = 119))

axiom temp___String_Literal_502__def_axiom3 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[4])) = 32))

axiom temp___String_Literal_502__def_axiom4 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[5])) = 109))

axiom temp___String_Literal_502__def_axiom5 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[6])) = 97))

axiom temp___String_Literal_502__def_axiom6 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[7])) = 110))

axiom temp___String_Literal_502__def_axiom7 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[8])) = 121))

axiom temp___String_Literal_502__def_axiom8 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[9])) = 32))

axiom temp___String_Literal_502__def_axiom9 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[10])) = 101))

axiom temp___String_Literal_502__def_axiom10 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[11])) = 108))

axiom temp___String_Literal_502__def_axiom11 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[12])) = 101))

axiom temp___String_Literal_502__def_axiom12 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[13])) = 109))

axiom temp___String_Literal_502__def_axiom13 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[14])) = 101))

axiom temp___String_Literal_502__def_axiom14 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[15])) = 110))

axiom temp___String_Literal_502__def_axiom15 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[16])) = 116))

axiom temp___String_Literal_502__def_axiom16 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[17])) = 115))

axiom temp___String_Literal_502__def_axiom17 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[18])) = 32))

axiom temp___String_Literal_502__def_axiom18 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[19])) = 105))

axiom temp___String_Literal_502__def_axiom19 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[20])) = 110))

axiom temp___String_Literal_502__def_axiom20 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[21])) = 32))

axiom temp___String_Literal_502__def_axiom21 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[22])) = 115))

axiom temp___String_Literal_502__def_axiom22 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[23])) = 116))

axiom temp___String_Literal_502__def_axiom23 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[24])) = 97))

axiom temp___String_Literal_502__def_axiom24 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[25])) = 99))

axiom temp___String_Literal_502__def_axiom25 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[26])) = 107))

axiom temp___String_Literal_502__def_axiom26 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[27])) = 32))

axiom temp___String_Literal_502__def_axiom27 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[28])) = 97))

axiom temp___String_Literal_502__def_axiom28 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[29])) = 116))

axiom temp___String_Literal_502__def_axiom29 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[30])) = 32))

axiom temp___String_Literal_502__def_axiom30 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[31])) = 109))

axiom temp___String_Literal_502__def_axiom31 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[32])) = 111))

axiom temp___String_Literal_502__def_axiom32 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[33])) = 115))

axiom temp___String_Literal_502__def_axiom33 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[34])) = 116))

axiom temp___String_Literal_502__def_axiom34 :
  (forall us_void_param:unit [temp___String_Literal_502(us_void_param)].
  (to_rep2((temp___String_Literal_502(us_void_param)[35])) = 63))

logic temp___String_Literal_503 : unit -> (int,character) farray

axiom temp___String_Literal_503__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_503(us_void_param)].
  (to_rep2((temp___String_Literal_503(us_void_param)[1])) = 112))

axiom temp___String_Literal_503__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_503(us_void_param)].
  (to_rep2((temp___String_Literal_503(us_void_param)[2])) = 117))

axiom temp___String_Literal_503__def_axiom2 :
  (forall us_void_param:unit [temp___String_Literal_503(us_void_param)].
  (to_rep2((temp___String_Literal_503(us_void_param)[3])) = 115))

axiom temp___String_Literal_503__def_axiom3 :
  (forall us_void_param:unit [temp___String_Literal_503(us_void_param)].
  (to_rep2((temp___String_Literal_503(us_void_param)[4])) = 104))

axiom temp___String_Literal_503__def_axiom4 :
  (forall us_void_param:unit [temp___String_Literal_503(us_void_param)].
  (to_rep2((temp___String_Literal_503(us_void_param)[5])) = 32))

axiom temp___String_Literal_503__def_axiom5 :
  (forall us_void_param:unit [temp___String_Literal_503(us_void_param)].
  (to_rep2((temp___String_Literal_503(us_void_param)[6])) = 111))

axiom temp___String_Literal_503__def_axiom6 :
  (forall us_void_param:unit [temp___String_Literal_503(us_void_param)].
  (to_rep2((temp___String_Literal_503(us_void_param)[7])) = 114))

axiom temp___String_Literal_503__def_axiom7 :
  (forall us_void_param:unit [temp___String_Literal_503(us_void_param)].
  (to_rep2((temp___String_Literal_503(us_void_param)[8])) = 32))

axiom temp___String_Literal_503__def_axiom8 :
  (forall us_void_param:unit [temp___String_Literal_503(us_void_param)].
  (to_rep2((temp___String_Literal_503(us_void_param)[9])) = 112))

axiom temp___String_Literal_503__def_axiom9 :
  (forall us_void_param:unit [temp___String_Literal_503(us_void_param)].
  (to_rep2((temp___String_Literal_503(us_void_param)[10])) = 111))

axiom temp___String_Literal_503__def_axiom10 :
  (forall us_void_param:unit [temp___String_Literal_503(us_void_param)].
  (to_rep2((temp___String_Literal_503(us_void_param)[11])) = 112))

axiom temp___String_Literal_503__def_axiom11 :
  (forall us_void_param:unit [temp___String_Literal_503(us_void_param)].
  (to_rep2((temp___String_Literal_503(us_void_param)[12])) = 32))

axiom temp___String_Literal_503__def_axiom12 :
  (forall us_void_param:unit [temp___String_Literal_503(us_void_param)].
  (to_rep2((temp___String_Literal_503(us_void_param)[13])) = 101))

axiom temp___String_Literal_503__def_axiom13 :
  (forall us_void_param:unit [temp___String_Literal_503(us_void_param)].
  (to_rep2((temp___String_Literal_503(us_void_param)[14])) = 108))

axiom temp___String_Literal_503__def_axiom14 :
  (forall us_void_param:unit [temp___String_Literal_503(us_void_param)].
  (to_rep2((temp___String_Literal_503(us_void_param)[15])) = 101))

axiom temp___String_Literal_503__def_axiom15 :
  (forall us_void_param:unit [temp___String_Literal_503(us_void_param)].
  (to_rep2((temp___String_Literal_503(us_void_param)[16])) = 109))

axiom temp___String_Literal_503__def_axiom16 :
  (forall us_void_param:unit [temp___String_Literal_503(us_void_param)].
  (to_rep2((temp___String_Literal_503(us_void_param)[17])) = 101))

axiom temp___String_Literal_503__def_axiom17 :
  (forall us_void_param:unit [temp___String_Literal_503(us_void_param)].
  (to_rep2((temp___String_Literal_503(us_void_param)[18])) = 110))

axiom temp___String_Literal_503__def_axiom18 :
  (forall us_void_param:unit [temp___String_Literal_503(us_void_param)].
  (to_rep2((temp___String_Literal_503(us_void_param)[19])) = 116))

axiom temp___String_Literal_503__def_axiom19 :
  (forall us_void_param:unit [temp___String_Literal_503(us_void_param)].
  (to_rep2((temp___String_Literal_503(us_void_param)[20])) = 46))

axiom temp___String_Literal_503__def_axiom20 :
  (forall us_void_param:unit [temp___String_Literal_503(us_void_param)].
  (to_rep2((temp___String_Literal_503(us_void_param)[21])) = 46))

axiom temp___String_Literal_503__def_axiom21 :
  (forall us_void_param:unit [temp___String_Literal_503(us_void_param)].
  (to_rep2((temp___String_Literal_503(us_void_param)[22])) = 46))

logic temp___String_Literal_506 : unit -> (int,character) farray

axiom temp___String_Literal_506__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_506(us_void_param)].
  (to_rep2((temp___String_Literal_506(us_void_param)[1])) = 115))

axiom temp___String_Literal_506__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_506(us_void_param)].
  (to_rep2((temp___String_Literal_506(us_void_param)[2])) = 116))

axiom temp___String_Literal_506__def_axiom2 :
  (forall us_void_param:unit [temp___String_Literal_506(us_void_param)].
  (to_rep2((temp___String_Literal_506(us_void_param)[3])) = 97))

axiom temp___String_Literal_506__def_axiom3 :
  (forall us_void_param:unit [temp___String_Literal_506(us_void_param)].
  (to_rep2((temp___String_Literal_506(us_void_param)[4])) = 99))

axiom temp___String_Literal_506__def_axiom4 :
  (forall us_void_param:unit [temp___String_Literal_506(us_void_param)].
  (to_rep2((temp___String_Literal_506(us_void_param)[5])) = 107))

axiom temp___String_Literal_506__def_axiom5 :
  (forall us_void_param:unit [temp___String_Literal_506(us_void_param)].
  (to_rep2((temp___String_Literal_506(us_void_param)[6])) = 32))

axiom temp___String_Literal_506__def_axiom6 :
  (forall us_void_param:unit [temp___String_Literal_506(us_void_param)].
  (to_rep2((temp___String_Literal_506(us_void_param)[7])) = 105))

axiom temp___String_Literal_506__def_axiom7 :
  (forall us_void_param:unit [temp___String_Literal_506(us_void_param)].
  (to_rep2((temp___String_Literal_506(us_void_param)[8])) = 115))

axiom temp___String_Literal_506__def_axiom8 :
  (forall us_void_param:unit [temp___String_Literal_506(us_void_param)].
  (to_rep2((temp___String_Literal_506(us_void_param)[9])) = 32))

axiom temp___String_Literal_506__def_axiom9 :
  (forall us_void_param:unit [temp___String_Literal_506(us_void_param)].
  (to_rep2((temp___String_Literal_506(us_void_param)[10])) = 110))

axiom temp___String_Literal_506__def_axiom10 :
  (forall us_void_param:unit [temp___String_Literal_506(us_void_param)].
  (to_rep2((temp___String_Literal_506(us_void_param)[11])) = 111))

axiom temp___String_Literal_506__def_axiom11 :
  (forall us_void_param:unit [temp___String_Literal_506(us_void_param)].
  (to_rep2((temp___String_Literal_506(us_void_param)[12])) = 119))

axiom temp___String_Literal_506__def_axiom12 :
  (forall us_void_param:unit [temp___String_Literal_506(us_void_param)].
  (to_rep2((temp___String_Literal_506(us_void_param)[13])) = 58))

axiom temp___String_Literal_506__def_axiom13 :
  (forall us_void_param:unit [temp___String_Literal_506(us_void_param)].
  (to_rep2((temp___String_Literal_506(us_void_param)[14])) = 32))

logic temp___String_Literal_510 : unit -> (int,character) farray

axiom temp___String_Literal_510__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_510(us_void_param)].
  (to_rep2((temp___String_Literal_510(us_void_param)[1])) = 115))

axiom temp___String_Literal_510__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_510(us_void_param)].
  (to_rep2((temp___String_Literal_510(us_void_param)[2])) = 116))

axiom temp___String_Literal_510__def_axiom2 :
  (forall us_void_param:unit [temp___String_Literal_510(us_void_param)].
  (to_rep2((temp___String_Literal_510(us_void_param)[3])) = 97))

axiom temp___String_Literal_510__def_axiom3 :
  (forall us_void_param:unit [temp___String_Literal_510(us_void_param)].
  (to_rep2((temp___String_Literal_510(us_void_param)[4])) = 99))

axiom temp___String_Literal_510__def_axiom4 :
  (forall us_void_param:unit [temp___String_Literal_510(us_void_param)].
  (to_rep2((temp___String_Literal_510(us_void_param)[5])) = 107))

axiom temp___String_Literal_510__def_axiom5 :
  (forall us_void_param:unit [temp___String_Literal_510(us_void_param)].
  (to_rep2((temp___String_Literal_510(us_void_param)[6])) = 32))

axiom temp___String_Literal_510__def_axiom6 :
  (forall us_void_param:unit [temp___String_Literal_510(us_void_param)].
  (to_rep2((temp___String_Literal_510(us_void_param)[7])) = 105))

axiom temp___String_Literal_510__def_axiom7 :
  (forall us_void_param:unit [temp___String_Literal_510(us_void_param)].
  (to_rep2((temp___String_Literal_510(us_void_param)[8])) = 115))

axiom temp___String_Literal_510__def_axiom8 :
  (forall us_void_param:unit [temp___String_Literal_510(us_void_param)].
  (to_rep2((temp___String_Literal_510(us_void_param)[9])) = 32))

axiom temp___String_Literal_510__def_axiom9 :
  (forall us_void_param:unit [temp___String_Literal_510(us_void_param)].
  (to_rep2((temp___String_Literal_510(us_void_param)[10])) = 110))

axiom temp___String_Literal_510__def_axiom10 :
  (forall us_void_param:unit [temp___String_Literal_510(us_void_param)].
  (to_rep2((temp___String_Literal_510(us_void_param)[11])) = 111))

axiom temp___String_Literal_510__def_axiom11 :
  (forall us_void_param:unit [temp___String_Literal_510(us_void_param)].
  (to_rep2((temp___String_Literal_510(us_void_param)[12])) = 119))

axiom temp___String_Literal_510__def_axiom12 :
  (forall us_void_param:unit [temp___String_Literal_510(us_void_param)].
  (to_rep2((temp___String_Literal_510(us_void_param)[13])) = 58))

axiom temp___String_Literal_510__def_axiom13 :
  (forall us_void_param:unit [temp___String_Literal_510(us_void_param)].
  (to_rep2((temp___String_Literal_510(us_void_param)[14])) = 32))

logic temp___String_Literal_513 : unit -> (int,character) farray

axiom temp___String_Literal_513__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_513(us_void_param)].
  (to_rep2((temp___String_Literal_513(us_void_param)[1])) = 112))

axiom temp___String_Literal_513__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_513(us_void_param)].
  (to_rep2((temp___String_Literal_513(us_void_param)[2])) = 117))

axiom temp___String_Literal_513__def_axiom2 :
  (forall us_void_param:unit [temp___String_Literal_513(us_void_param)].
  (to_rep2((temp___String_Literal_513(us_void_param)[3])) = 115))

axiom temp___String_Literal_513__def_axiom3 :
  (forall us_void_param:unit [temp___String_Literal_513(us_void_param)].
  (to_rep2((temp___String_Literal_513(us_void_param)[4])) = 104))

axiom temp___String_Literal_513__def_axiom4 :
  (forall us_void_param:unit [temp___String_Literal_513(us_void_param)].
  (to_rep2((temp___String_Literal_513(us_void_param)[5])) = 32))

logic temp___String_Literal_520 : unit -> (int,character) farray

axiom temp___String_Literal_520__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_520(us_void_param)].
  (to_rep2((temp___String_Literal_520(us_void_param)[1])) = 112))

axiom temp___String_Literal_520__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_520(us_void_param)].
  (to_rep2((temp___String_Literal_520(us_void_param)[2])) = 111))

axiom temp___String_Literal_520__def_axiom2 :
  (forall us_void_param:unit [temp___String_Literal_520(us_void_param)].
  (to_rep2((temp___String_Literal_520(us_void_param)[3])) = 112))

predicate dynamic_invariant6(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range4(temp___expr_74))

predicate dynamic_invariant7(temp___expr_96: us_t, temp___is_init_92: bool,
  temp___skip_constant_93: bool, temp___do_toplevel_94: bool,
  temp___do_typ_inv_95: bool) = ((not (temp___skip_constant_93 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_96),
  last1(temp___expr_96)))

type count

logic countqtint : count -> int

axiom countqtaxiom : (forall i:count. (0 <= countqtint(i)))

axiom countqtaxiom1 : (forall i:count. (countqtint(i) <= 2147483647))

predicate in_range11(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq17(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq13 : count, count -> bool

logic dummy13 : count

type count__ref = { count__content : count
}

function count__ref_count__content__projection(a: count__ref) : count =
  (a).count__content

predicate dynamic_invariant8(temp___expr_215: int, temp___is_init_211: bool,
  temp___skip_constant_212: bool, temp___do_toplevel_213: bool,
  temp___do_typ_inv_214: bool) = (((temp___is_init_211 = true) or
  (0 <= 2147483647)) -> in_range11(temp___expr_215))

axiom line_length__post_axiom :
  (forall ada___ada__text_io__standard_in:us_private.
  forall ada___ada__text_io__file_system:us_private.
  forall ada___ada__text_io__standard_out:us_private.
  forall ada___ada__text_io__standard_err:us_private.
  forall ada___ada__text_io__current_in:us_private.
  forall ada___ada__text_io__current_out:us_private.
  forall ada___ada__text_io__current_err:us_private
  [line_length(ada___ada__text_io__standard_in,
  ada___ada__text_io__file_system, ada___ada__text_io__standard_out,
  ada___ada__text_io__standard_err, ada___ada__text_io__current_in,
  ada___ada__text_io__current_out, ada___ada__text_io__current_err)].
  dynamic_invariant8(line_length(ada___ada__text_io__standard_in,
  ada___ada__text_io__file_system, ada___ada__text_io__standard_out,
  ada___ada__text_io__standard_err, ada___ada__text_io__current_in,
  ada___ada__text_io__current_out, ada___ada__text_io__current_err), true,
  false, true, true))

axiom page_length__post_axiom :
  (forall ada___ada__text_io__standard_in:us_private.
  forall ada___ada__text_io__file_system:us_private.
  forall ada___ada__text_io__standard_out:us_private.
  forall ada___ada__text_io__standard_err:us_private.
  forall ada___ada__text_io__current_in:us_private.
  forall ada___ada__text_io__current_out:us_private.
  forall ada___ada__text_io__current_err:us_private
  [page_length(ada___ada__text_io__standard_in,
  ada___ada__text_io__file_system, ada___ada__text_io__standard_out,
  ada___ada__text_io__standard_err, ada___ada__text_io__current_in,
  ada___ada__text_io__current_out, ada___ada__text_io__current_err)].
  dynamic_invariant8(page_length(ada___ada__text_io__standard_in,
  ada___ada__text_io__file_system, ada___ada__text_io__standard_out,
  ada___ada__text_io__standard_err, ada___ada__text_io__current_in,
  ada___ada__text_io__current_out, ada___ada__text_io__current_err), true,
  false, true, true))

axiom stacks__stack__compat_axiom6 :
  (forall s:us_rep [is_empty1(us_tag, s)].
  (is_empty__function_guard1(is_empty1(us_tag, s), us_tag, s) ->
  (forall s1:us_rep. is_empty__function_guard(is_empty(s1), s1))))

axiom stacks__stack__compat_axiom7 :
  (forall s:us_rep [is_empty1(us_tag, s)].
  (is_empty__function_guard1(is_empty1(us_tag, s), us_tag, s) ->
  (to_int(is_empty(s)) = to_int(is_empty1(us_tag, s)))))

axiom main__B_1__TsS__compat_axiom6 :
  (forall s:us_rep [is_empty1(us_tag1, s)].
  (is_empty__function_guard1(is_empty1(us_tag1, s), us_tag1, s) ->
  (forall s1:us_rep. is_empty__function_guard(is_empty(s1), s1))))

axiom main__B_1__TsS__compat_axiom7 :
  (forall s:us_rep [is_empty1(us_tag1, s)].
  (is_empty__function_guard1(is_empty1(us_tag1, s), us_tag1, s) ->
  (to_int(is_empty(s)) = to_int(is_empty1(us_tag1, s)))))

axiom is_empty__def_axiom :
  (forall s:us_rep. size__function_guard(size(s), s))

axiom is_empty__def_axiom1 :
  (forall s:us_rep [is_empty(s)]. ((is_empty(s) = true) -> (size(s) = 0)))

axiom is_empty__def_axiom2 :
  (forall s:us_rep [is_empty(s)]. ((size(s) = 0) -> (is_empty(s) = true)))

axiom stacks__stack__compat_axiom8 :
  (forall s:us_rep [is_full1(us_tag, s)].
  (is_full__function_guard1(is_full1(us_tag, s), us_tag, s) ->
  (forall s1:us_rep. is_full__function_guard(is_full(s1), s1))))

axiom stacks__stack__compat_axiom9 :
  (forall s:us_rep [is_full1(us_tag, s)].
  (is_full__function_guard1(is_full1(us_tag, s), us_tag, s) ->
  (to_int(is_full(s)) = to_int(is_full1(us_tag, s)))))

axiom main__B_1__TsS__compat_axiom8 :
  (forall s:us_rep [is_full1(us_tag1, s)].
  (is_full__function_guard1(is_full1(us_tag1, s), us_tag1, s) ->
  (forall s1:us_rep. is_full__function_guard(is_full(s1), s1))))

axiom main__B_1__TsS__compat_axiom9 :
  (forall s:us_rep [is_full1(us_tag1, s)].
  (is_full__function_guard1(is_full1(us_tag1, s), us_tag1, s) ->
  (to_int(is_full(s)) = to_int(is_full1(us_tag1, s)))))

axiom is_full__def_axiom :
  (forall s:us_rep. size__function_guard(size(s), s))

axiom is_full__def_axiom1 :
  (forall s:us_rep [is_full(s)]. ((is_full(s) = true) ->
  (size(s) = to_rep1(((s).us_split_discrs1).rec__stacks__stack__max))))

axiom is_full__def_axiom2 :
  (forall s:us_rep [is_full(s)].
  ((size(s) = to_rep1(((s).us_split_discrs1).rec__stacks__stack__max)) ->
  (is_full(s) = true)))

axiom size__post_axiom :
  (forall s:us_rep [size(s)]. (dynamic_invariant4(s, true, true, true,
  true) -> (let result = size(s) : int in (size__function_guard(result, s) ->
  dynamic_invariant1(result, true, false, true, true)))))

axiom size__post__dispatch_axiom :
  (forall attr__tag2:int.
  (forall s:us_rep [size1(attr__tag2, s)]. (dynamic_invariant4(s, true, true,
  true, true) -> (let result = size1(attr__tag2, s) : int in
  (size__function_guard1(result, attr__tag2, s) -> dynamic_invariant1(result,
  true, false, true, true))))))

axiom stacks__stack__compat_axiom10 :
  (forall s:us_rep [size1(us_tag, s)]. (size__function_guard1(size1(us_tag,
  s), us_tag, s) -> (forall s1:us_rep. size__function_guard(size(s1), s1))))

axiom stacks__stack__compat_axiom11 :
  (forall s:us_rep [size1(us_tag, s)]. (size__function_guard1(size1(us_tag,
  s), us_tag, s) -> (size(s) = size1(us_tag, s))))

axiom main__B_1__TsS__compat_axiom10 :
  (forall s:us_rep [size1(us_tag1, s)]. (size__function_guard1(size1(us_tag1,
  s), us_tag1, s) -> (forall s1:us_rep. size__function_guard(size(s1), s1))))

axiom main__B_1__TsS__compat_axiom11 :
  (forall s:us_rep [size1(us_tag1, s)]. (size__function_guard1(size1(us_tag1,
  s), us_tag1, s) -> (size(s) = size1(us_tag1, s))))

axiom size__def_axiom :
  (forall s:us_rep [size(s)]. (dynamic_invariant4(s, true, true, true,
  true) ->
  (size(s) = to_rep(((s).us_split_fields1).rec__stacks__stack__top))))

 (* File "main.adb", line 6, characters 0-0 *)
goal defqtvc :
  (forall max:int. forall standard_in:us_private.
  forall file_system:us_private. forall standard_out:us_private.
  forall standard_err:us_private. forall current_in:us_private.
  forall current_out:us_private. forall current_err:us_private.
  (dynamic_invariant2(max, false, false, true, true) ->
  (forall standard_in1:us_private. forall file_system1:us_private.
  forall standard_out1:us_private. forall standard_err1:us_private.
  forall current_in1:us_private. forall current_out1:us_private.
  forall current_err1:us_private. (((line_length(standard_in, file_system,
  standard_out, standard_err, current_in, current_out,
  current_err) = line_length(standard_in1, file_system1, standard_out1,
  standard_err1, current_in1, current_out1, current_err1)) and
  (page_length(standard_in, file_system, standard_out, standard_err,
  current_in, current_out, current_err) = page_length(standard_in1,
  file_system1, standard_out1, standard_err1, current_in1, current_out1,
  current_err1))) ->
  (forall standard_in2:us_private. forall file_system2:us_private.
  forall standard_out2:us_private. forall standard_err2:us_private.
  forall current_in2:us_private. forall current_out2:us_private.
  forall current_err2:us_private.
  forall ada___ada__integer_text_io__get__2__item:int.
  ((((line_length(standard_in1, file_system1, standard_out1, standard_err1,
  current_in1, current_out1, current_err1) = line_length(standard_in2,
  file_system2, standard_out2, standard_err2, current_in2, current_out2,
  current_err2)) and (page_length(standard_in1, file_system1, standard_out1,
  standard_err1, current_in1, current_out1,
  current_err1) = page_length(standard_in2, file_system2, standard_out2,
  standard_err2, current_in2, current_out2, current_err2))) and
  dynamic_invariant3(ada___ada__integer_text_io__get__2__item, true, true,
  true, true)) -> (in_range3(ada___ada__integer_text_io__get__2__item) ->
  (forall max1:int. ((max1 = ada___ada__integer_text_io__get__2__item) ->
  (forall standard_in3:us_private. forall file_system3:us_private.
  forall standard_out3:us_private. forall standard_err3:us_private.
  forall current_in3:us_private. forall current_out3:us_private.
  forall current_err3:us_private. (((line_length(standard_in2, file_system2,
  standard_out2, standard_err2, current_in2, current_out2,
  current_err2) = line_length(standard_in3, file_system3, standard_out3,
  standard_err3, current_in3, current_out3, current_err3)) and
  (page_length(standard_in2, file_system2, standard_out2, standard_err2,
  current_in2, current_out2, current_err2) = page_length(standard_in3,
  file_system3, standard_out3, standard_err3, current_in3, current_out3,
  current_err3))) -> ((max1 = max_cst) -> (dynamic_invariant2(max_cst, true,
  false, true, true) -> in_range3(max_cst))))))))))))))
