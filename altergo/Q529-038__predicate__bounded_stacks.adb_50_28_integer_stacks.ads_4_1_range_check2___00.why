(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

function to_rep1(x: positive) : int = positiveqtint(x)

logic of_rep1 : int -> positive

axiom inversion_axiom1 :
  (forall x:positive [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:positive [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep2(x: integer) : int = integerqtint(x)

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type element

logic elementqtint : element -> int

axiom elementqtaxiom :
  (forall i:element. ((- 2147483648) <= elementqtint(i)))

axiom elementqtaxiom1 : (forall i:element. (elementqtint(i) <= 2147483647))

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : element, element -> bool

logic dummy3 : element

type element__ref = { element__content : element
}

function element__ref_element__content__projection(a: element__ref) : element =
  (a).element__content

function to_rep3(x: element) : int = elementqtint(x)

logic of_rep3 : int -> element

axiom inversion_axiom3 :
  (forall x:element [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:element [to_rep3(x)]. in_range3(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range3(x) ->
  (to_rep3(of_rep3(x)) = x)))

type map__ref = { map__content : (int,element) farray
}

logic slide : (int,element) farray, int, int -> (int,element) farray

axiom slide_eq :
  (forall a:(int,element) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,element) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,element) farray, a__first: int, a__last: int,
  b: (int,element) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep3((a[temp___idx_154])) = to_rep3((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep3((a[temp___idx_154])) = to_rep3((b[((b__first - a__first) + temp___idx_154)]))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep2(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep2(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,element) farray; rt : t
}

function to_array(a: us_t) : (int,element) farray = (a).elts

function of_array(a: (int,element) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : us_t

type contents__ref = { contents__content : us_t
}

function contents__ref_contents__content__projection(a: contents__ref) : us_t =
  (a).contents__content

type t12s__ref = { t12s__content : us_t
}

function t12s__ref_t12s__content__projection(a: t12s__ref) : us_t =
  (a).t12s__content

type us_split_discrs = { rec__integer_stacks__stack__capacity : positive
}

function us_split_discrs_rec__integer_stacks__stack__capacity__projection(a: us_split_discrs) : positive =
  (a).rec__integer_stacks__stack__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__integer_stacks__stack__values : us_t;
rec__integer_stacks__stack__top : natural; rec__ext__ : us_private
}

function us_split_fields_rec__integer_stacks__stack__values__projection(a: us_split_fields) : us_t =
  (a).rec__integer_stacks__stack__values

function us_split_fields_rec__integer_stacks__stack__top__projection(a: us_split_fields) : natural =
  (a).rec__integer_stacks__stack__top

function us_split_fields_rec__ext____projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__tag : int
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__projection(a: us_rep) : int = (a).attr__tag

function bool_eq6(a: us_rep, b: us_rep) : bool =
  (if ((to_rep1(((a).us_split_discrs1).rec__integer_stacks__stack__capacity) = to_rep1(((b).us_split_discrs1).rec__integer_stacks__stack__capacity)) and
  ((bool_eq5(((a).us_split_fields1).rec__integer_stacks__stack__values,
  ((b).us_split_fields1).rec__integer_stacks__stack__values) = true) and
  (to_rep(((a).us_split_fields1).rec__integer_stacks__stack__top) = to_rep(((b).us_split_fields1).rec__integer_stacks__stack__top)))) then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic integer_stacks__stack__capacity__first__bit : int

logic integer_stacks__stack__capacity__last__bit : int

logic integer_stacks__stack__capacity__position : int

axiom integer_stacks__stack__capacity__first__bit_axiom :
  (0 <= integer_stacks__stack__capacity__first__bit)

axiom integer_stacks__stack__capacity__last__bit_axiom :
  (integer_stacks__stack__capacity__first__bit <  integer_stacks__stack__capacity__last__bit)

axiom integer_stacks__stack__capacity__position_axiom :
  (0 <= integer_stacks__stack__capacity__position)

logic integer_stacks__stack__values__first__bit : int

logic integer_stacks__stack__values__last__bit : int

logic integer_stacks__stack__values__position : int

axiom integer_stacks__stack__values__first__bit_axiom :
  (0 <= integer_stacks__stack__values__first__bit)

axiom integer_stacks__stack__values__last__bit_axiom :
  (integer_stacks__stack__values__first__bit <  integer_stacks__stack__values__last__bit)

axiom integer_stacks__stack__values__position_axiom :
  (0 <= integer_stacks__stack__values__position)

logic integer_stacks__stack__top__first__bit : int

logic integer_stacks__stack__top__last__bit : int

logic integer_stacks__stack__top__position : int

axiom integer_stacks__stack__top__first__bit_axiom :
  (0 <= integer_stacks__stack__top__first__bit)

axiom integer_stacks__stack__top__last__bit_axiom :
  (integer_stacks__stack__top__first__bit <  integer_stacks__stack__top__last__bit)

axiom integer_stacks__stack__top__position_axiom :
  (0 <= integer_stacks__stack__top__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : us_rep

type stack__ref = { stack__content : us_rep
}

function stack__ref_stack__content__projection(a: stack__ref) : us_rep =
  (a).stack__content

logic extent : us_rep -> int

logic extent__function_guard : int, us_rep -> prop

logic extent1 : int, us_rep -> int

logic extent__function_guard1 : int, int, us_rep -> prop

logic empty : us_rep -> bool

logic empty__function_guard : bool, us_rep -> prop

logic empty1 : int, us_rep -> bool

logic empty__function_guard1 : bool, int, us_rep -> prop

logic full : us_rep -> bool

logic full__function_guard : bool, us_rep -> prop

logic full1 : int, us_rep -> bool

logic full__function_guard1 : bool, int, us_rep -> prop

predicate dynamic_invariant(temp___expr_182: us_rep,
  temp___is_init_178: bool, temp___skip_constant_179: bool,
  temp___do_toplevel_180: bool, temp___do_typ_inv_181: bool) =
  (((temp___do_toplevel_180 = true) ->
  (to_rep(((temp___expr_182).us_split_fields1).rec__integer_stacks__stack__top) <= to_rep1(((temp___expr_182).us_split_discrs1).rec__integer_stacks__stack__capacity))) and
  (let temp___184 =
  ((temp___expr_182).us_split_discrs1).rec__integer_stacks__stack__capacity
  : positive in (dynamic_property(1, to_rep1(temp___184),
  first1(((temp___expr_182).us_split_fields1).rec__integer_stacks__stack__values),
  last1(((temp___expr_182).us_split_fields1).rec__integer_stacks__stack__values)) and
  ((first1(((temp___expr_182).us_split_fields1).rec__integer_stacks__stack__values) = 1) and
  (last1(((temp___expr_182).us_split_fields1).rec__integer_stacks__stack__values) = to_rep1(temp___184))))))

predicate dynamic_predicate(temp___186: us_rep) =
  (to_rep(((temp___186).us_split_fields1).rec__integer_stacks__stack__top) <= to_rep1(((temp___186).us_split_discrs1).rec__integer_stacks__stack__capacity))

logic this__split_discrs : us_split_discrs

logic this__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic i15s : us_rep

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_invariant1(temp___expr_169: int, temp___is_init_165: bool,
  temp___skip_constant_166: bool, temp___do_toplevel_167: bool,
  temp___do_typ_inv_168: bool) = (((temp___is_init_165 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range3(temp___expr_169))

predicate dynamic_invariant2(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_39))

predicate dynamic_invariant3(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range1(temp___expr_46))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq7(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range4(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE4 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> bool

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

logic oeq1 : int, us_rep, us_rep -> bool

logic oeq__function_guard1 : bool, int, us_rep, us_rep -> prop

type t24b__ref = { t24b__content : us_t
}

function t24b__ref_t24b__content__projection(a: t24b__ref) : us_t =
  (a).t24b__content

type us_split_fields2 = { rec__integer_stacks__stack__values1 : us_t;
rec__integer_stacks__stack__top1 : natural; rec__ext__1 : us_private
}

function us_split_fields_rec__integer_stacks__stack__values__2__projection(a: us_split_fields2) : us_t =
  (a).rec__integer_stacks__stack__values1

function us_split_fields_rec__integer_stacks__stack__top__2__projection(a: us_split_fields2) : natural =
  (a).rec__integer_stacks__stack__top1

function us_split_fields_rec__ext____2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2; attr__tag1 : int
}

function us_rep___split_discrs__2__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_attr__tag__2__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : us_private -> us_private

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = {
  rec__integer_stacks__stack__values =
  of_array(to_array(((a).us_split_fields3).rec__integer_stacks__stack__values1),
  first1(((a).us_split_fields3).rec__integer_stacks__stack__values1),
  last1(((a).us_split_fields3).rec__integer_stacks__stack__values1));
  rec__integer_stacks__stack__top =
  ((a).us_split_fields3).rec__integer_stacks__stack__top1; rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__ext__1) }; attr__tag =
  (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = {
  rec__integer_stacks__stack__values1 =
  of_array(to_array(((r).us_split_fields1).rec__integer_stacks__stack__values),
  first1(((r).us_split_fields1).rec__integer_stacks__stack__values),
  last1(((r).us_split_fields1).rec__integer_stacks__stack__values));
  rec__integer_stacks__stack__top1 =
  ((r).us_split_fields1).rec__integer_stacks__stack__top; rec__ext__1 =
  extract__ext__(((r).us_split_fields1).rec__ext__) }; attr__tag1 =
  (r).attr__tag }

function bool_eq8(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep1(((a).us_split_discrs2).rec__integer_stacks__stack__capacity) = to_rep1(((b).us_split_discrs2).rec__integer_stacks__stack__capacity)) and
  ((bool_eq5(((a).us_split_fields3).rec__integer_stacks__stack__values1,
  ((b).us_split_fields3).rec__integer_stacks__stack__values1) = true) and
  (to_rep(((a).us_split_fields3).rec__integer_stacks__stack__top1) = to_rep(((b).us_split_fields3).rec__integer_stacks__stack__top1)))) then true else false)

logic us_tag1 : int

predicate in_range5(rec__integer_stacks__stack__capacity1: int, a: us_rep) =
  (rec__integer_stacks__stack__capacity1 = to_rep1(((a).us_split_discrs1).rec__integer_stacks__stack__capacity))

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic integer_stacks__stack__capacity__first__bit1 : int

logic integer_stacks__stack__capacity__last__bit1 : int

logic integer_stacks__stack__capacity__position1 : int

axiom integer_stacks__stack__capacity__first__bit_axiom1 :
  (0 <= integer_stacks__stack__capacity__first__bit1)

axiom integer_stacks__stack__capacity__last__bit_axiom1 :
  (integer_stacks__stack__capacity__first__bit1 <  integer_stacks__stack__capacity__last__bit1)

axiom integer_stacks__stack__capacity__position_axiom1 :
  (0 <= integer_stacks__stack__capacity__position1)

logic integer_stacks__stack__values__first__bit1 : int

logic integer_stacks__stack__values__last__bit1 : int

logic integer_stacks__stack__values__position1 : int

axiom integer_stacks__stack__values__first__bit_axiom1 :
  (0 <= integer_stacks__stack__values__first__bit1)

axiom integer_stacks__stack__values__last__bit_axiom1 :
  (integer_stacks__stack__values__first__bit1 <  integer_stacks__stack__values__last__bit1)

axiom integer_stacks__stack__values__position_axiom1 :
  (0 <= integer_stacks__stack__values__position1)

logic integer_stacks__stack__top__first__bit1 : int

logic integer_stacks__stack__top__last__bit1 : int

logic integer_stacks__stack__top__position1 : int

axiom integer_stacks__stack__top__first__bit_axiom1 :
  (0 <= integer_stacks__stack__top__first__bit1)

axiom integer_stacks__stack__top__last__bit_axiom1 :
  (integer_stacks__stack__top__first__bit1 <  integer_stacks__stack__top__last__bit1)

axiom integer_stacks__stack__top__position_axiom1 :
  (0 <= integer_stacks__stack__top__position1)

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy6 : us_rep1

type s23b__ref = { s23b__content : us_rep1
}

function s23b__ref_s23b__content__projection(a: s23b__ref) : us_rep1 =
  (a).s23b__content

type t22b__ref = { t22b__content : us_t
}

function t22b__ref_t22b__content__projection(a: t22b__ref) : us_t =
  (a).t22b__content

type us_split_fields4 = { rec__integer_stacks__stack__values2 : us_t;
rec__integer_stacks__stack__top2 : natural; rec__ext__2 : us_private
}

function us_split_fields_rec__integer_stacks__stack__values__3__projection(a: us_split_fields4) : us_t =
  (a).rec__integer_stacks__stack__values2

function us_split_fields_rec__integer_stacks__stack__top__3__projection(a: us_split_fields4) : natural =
  (a).rec__integer_stacks__stack__top2

function us_split_fields_rec__ext____3__projection(a: us_split_fields4) : us_private =
  (a).rec__ext__2

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs3 : us_split_discrs; us_split_fields5 :
us_split_fields4; attr__tag2 : int
}

function us_rep___split_discrs__3__projection(a: us_rep2) : us_split_discrs =
  (a).us_split_discrs3

function us_rep___split_fields__3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function us_rep_attr__tag__3__projection(a: us_rep2) : int = (a).attr__tag2

logic hide_ext__1 : us_private -> us_private

logic extract__ext__1 : us_private -> us_private

function to_base1(a: us_rep2) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs3; us_split_fields1 = {
  rec__integer_stacks__stack__values =
  of_array(to_array(((a).us_split_fields5).rec__integer_stacks__stack__values2),
  first1(((a).us_split_fields5).rec__integer_stacks__stack__values2),
  last1(((a).us_split_fields5).rec__integer_stacks__stack__values2));
  rec__integer_stacks__stack__top =
  ((a).us_split_fields5).rec__integer_stacks__stack__top2; rec__ext__ =
  hide_ext__1(((a).us_split_fields5).rec__ext__2) }; attr__tag =
  (a).attr__tag2 }

function of_base1(r: us_rep) : us_rep2 = { us_split_discrs3 =
  (r).us_split_discrs1; us_split_fields5 = {
  rec__integer_stacks__stack__values2 =
  of_array(to_array(((r).us_split_fields1).rec__integer_stacks__stack__values),
  first1(((r).us_split_fields1).rec__integer_stacks__stack__values),
  last1(((r).us_split_fields1).rec__integer_stacks__stack__values));
  rec__integer_stacks__stack__top2 =
  ((r).us_split_fields1).rec__integer_stacks__stack__top; rec__ext__2 =
  extract__ext__1(((r).us_split_fields1).rec__ext__) }; attr__tag2 =
  (r).attr__tag }

function bool_eq9(a: us_rep2, b: us_rep2) : bool =
  (if ((to_rep1(((a).us_split_discrs3).rec__integer_stacks__stack__capacity) = to_rep1(((b).us_split_discrs3).rec__integer_stacks__stack__capacity)) and
  ((bool_eq5(((a).us_split_fields5).rec__integer_stacks__stack__values2,
  ((b).us_split_fields5).rec__integer_stacks__stack__values2) = true) and
  (to_rep(((a).us_split_fields5).rec__integer_stacks__stack__top2) = to_rep(((b).us_split_fields5).rec__integer_stacks__stack__top2)))) then true else false)

logic us_tag2 : int

predicate in_range6(rec__integer_stacks__stack__capacity1: int, a: us_rep) =
  (rec__integer_stacks__stack__capacity1 = to_rep1(((a).us_split_discrs1).rec__integer_stacks__stack__capacity))

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic integer_stacks__stack__capacity__first__bit2 : int

logic integer_stacks__stack__capacity__last__bit2 : int

logic integer_stacks__stack__capacity__position2 : int

axiom integer_stacks__stack__capacity__first__bit_axiom2 :
  (0 <= integer_stacks__stack__capacity__first__bit2)

axiom integer_stacks__stack__capacity__last__bit_axiom2 :
  (integer_stacks__stack__capacity__first__bit2 <  integer_stacks__stack__capacity__last__bit2)

axiom integer_stacks__stack__capacity__position_axiom2 :
  (0 <= integer_stacks__stack__capacity__position2)

logic integer_stacks__stack__values__first__bit2 : int

logic integer_stacks__stack__values__last__bit2 : int

logic integer_stacks__stack__values__position2 : int

axiom integer_stacks__stack__values__first__bit_axiom2 :
  (0 <= integer_stacks__stack__values__first__bit2)

axiom integer_stacks__stack__values__last__bit_axiom2 :
  (integer_stacks__stack__values__first__bit2 <  integer_stacks__stack__values__last__bit2)

axiom integer_stacks__stack__values__position_axiom2 :
  (0 <= integer_stacks__stack__values__position2)

logic integer_stacks__stack__top__first__bit2 : int

logic integer_stacks__stack__top__last__bit2 : int

logic integer_stacks__stack__top__position2 : int

axiom integer_stacks__stack__top__first__bit_axiom2 :
  (0 <= integer_stacks__stack__top__first__bit2)

axiom integer_stacks__stack__top__last__bit_axiom2 :
  (integer_stacks__stack__top__first__bit2 <  integer_stacks__stack__top__last__bit2)

axiom integer_stacks__stack__top__position_axiom2 :
  (0 <= integer_stacks__stack__top__position2)

logic user_eq7 : us_rep2, us_rep2 -> bool

logic dummy7 : us_rep2

type s21b__ref = { s21b__content : us_rep2
}

function s21b__ref_s21b__content__projection(a: s21b__ref) : us_rep2 =
  (a).s21b__content

axiom integer_stacks__stack__compat_axiom :
  (forall left:us_rep. forall right:us_rep [oeq1(us_tag, left, right)].
  (oeq__function_guard1(oeq1(us_tag, left, right), us_tag, left, right) ->
  (forall left1:us_rep. forall right1:us_rep. oeq__function_guard(oeq(left1,
  right1), left1, right1))))

axiom integer_stacks__stack__compat_axiom1 :
  (forall left:us_rep. forall right:us_rep [oeq1(us_tag, left, right)].
  (oeq__function_guard1(oeq1(us_tag, left, right), us_tag, left, right) ->
  (to_int(oeq(left, right)) = to_int(oeq1(us_tag, left, right)))))

axiom integer_stacks__Oeq__S21b__compat_axiom :
  (forall left:us_rep. forall right:us_rep [oeq1(us_tag2, left, right)].
  (oeq__function_guard1(oeq1(us_tag2, left, right), us_tag2, left, right) ->
  (forall left1:us_rep. forall right1:us_rep. oeq__function_guard(oeq(left1,
  right1), left1, right1))))

axiom integer_stacks__Oeq__S21b__compat_axiom1 :
  (forall left:us_rep. forall right:us_rep [oeq1(us_tag2, left, right)].
  (oeq__function_guard1(oeq1(us_tag2, left, right), us_tag2, left, right) ->
  (to_int(oeq(left, right)) = to_int(oeq1(us_tag2, left, right)))))

axiom integer_stacks__Oeq__S23b__compat_axiom :
  (forall left:us_rep. forall right:us_rep [oeq1(us_tag1, left, right)].
  (oeq__function_guard1(oeq1(us_tag1, left, right), us_tag1, left, right) ->
  (forall left1:us_rep. forall right1:us_rep. oeq__function_guard(oeq(left1,
  right1), left1, right1))))

axiom integer_stacks__Oeq__S23b__compat_axiom1 :
  (forall left:us_rep. forall right:us_rep [oeq1(us_tag1, left, right)].
  (oeq__function_guard1(oeq1(us_tag1, left, right), us_tag1, left, right) ->
  (to_int(oeq(left, right)) = to_int(oeq1(us_tag1, left, right)))))

axiom extent__post_axiom :
  (forall this:us_rep [extent(this)]. (dynamic_invariant(this, true, true,
  true, true) -> (let result = extent(this) : int in
  (extent__function_guard(result, this) -> dynamic_invariant2(result, true,
  false, true, true)))))

axiom extent__post__dispatch_axiom :
  (forall attr__tag3:int.
  (forall this:us_rep [extent1(attr__tag3, this)]. (dynamic_invariant(this,
  true, true, true, true) -> (let result = extent1(attr__tag3, this) : int in
  (extent__function_guard1(result, attr__tag3, this) ->
  dynamic_invariant2(result, true, false, true, true))))))

axiom integer_stacks__stack__compat_axiom2 :
  (forall this:us_rep [extent1(us_tag, this)].
  (extent__function_guard1(extent1(us_tag, this), us_tag, this) ->
  (forall this1:us_rep. extent__function_guard(extent(this1), this1))))

axiom integer_stacks__stack__compat_axiom3 :
  (forall this:us_rep [extent1(us_tag, this)].
  (extent__function_guard1(extent1(us_tag, this), us_tag, this) ->
  (extent(this) = extent1(us_tag, this))))

axiom integer_stacks__Oeq__S21b__compat_axiom2 :
  (forall this:us_rep [extent1(us_tag2, this)].
  (extent__function_guard1(extent1(us_tag2, this), us_tag2, this) ->
  (forall this1:us_rep. extent__function_guard(extent(this1), this1))))

axiom integer_stacks__Oeq__S21b__compat_axiom3 :
  (forall this:us_rep [extent1(us_tag2, this)].
  (extent__function_guard1(extent1(us_tag2, this), us_tag2, this) ->
  (extent(this) = extent1(us_tag2, this))))

axiom integer_stacks__Oeq__S23b__compat_axiom2 :
  (forall this:us_rep [extent1(us_tag1, this)].
  (extent__function_guard1(extent1(us_tag1, this), us_tag1, this) ->
  (forall this1:us_rep. extent__function_guard(extent(this1), this1))))

axiom integer_stacks__Oeq__S23b__compat_axiom3 :
  (forall this:us_rep [extent1(us_tag1, this)].
  (extent__function_guard1(extent1(us_tag1, this), us_tag1, this) ->
  (extent(this) = extent1(us_tag1, this))))

axiom extent__def_axiom :
  (forall this:us_rep [extent(this)]. (dynamic_invariant(this, true, true,
  true, true) ->
  (extent(this) = to_rep(((this).us_split_fields1).rec__integer_stacks__stack__top))))

axiom integer_stacks__stack__compat_axiom4 :
  (forall this:us_rep [empty1(us_tag, this)].
  (empty__function_guard1(empty1(us_tag, this), us_tag, this) ->
  (forall this1:us_rep. empty__function_guard(empty(this1), this1))))

axiom integer_stacks__stack__compat_axiom5 :
  (forall this:us_rep [empty1(us_tag, this)].
  (empty__function_guard1(empty1(us_tag, this), us_tag, this) ->
  (to_int(empty(this)) = to_int(empty1(us_tag, this)))))

axiom integer_stacks__Oeq__S21b__compat_axiom4 :
  (forall this:us_rep [empty1(us_tag2, this)].
  (empty__function_guard1(empty1(us_tag2, this), us_tag2, this) ->
  (forall this1:us_rep. empty__function_guard(empty(this1), this1))))

axiom integer_stacks__Oeq__S21b__compat_axiom5 :
  (forall this:us_rep [empty1(us_tag2, this)].
  (empty__function_guard1(empty1(us_tag2, this), us_tag2, this) ->
  (to_int(empty(this)) = to_int(empty1(us_tag2, this)))))

axiom integer_stacks__Oeq__S23b__compat_axiom4 :
  (forall this:us_rep [empty1(us_tag1, this)].
  (empty__function_guard1(empty1(us_tag1, this), us_tag1, this) ->
  (forall this1:us_rep. empty__function_guard(empty(this1), this1))))

axiom integer_stacks__Oeq__S23b__compat_axiom5 :
  (forall this:us_rep [empty1(us_tag1, this)].
  (empty__function_guard1(empty1(us_tag1, this), us_tag1, this) ->
  (to_int(empty(this)) = to_int(empty1(us_tag1, this)))))

axiom empty__def_axiom :
  (forall this:us_rep [empty(this)]. ((empty(this) = true) ->
  (to_rep(((this).us_split_fields1).rec__integer_stacks__stack__top) = 0)))

axiom empty__def_axiom1 :
  (forall this:us_rep [empty(this)].
  ((to_rep(((this).us_split_fields1).rec__integer_stacks__stack__top) = 0) ->
  (empty(this) = true)))

axiom integer_stacks__stack__compat_axiom6 :
  (forall this:us_rep [full1(us_tag, this)].
  (full__function_guard1(full1(us_tag, this), us_tag, this) ->
  (forall this1:us_rep. full__function_guard(full(this1), this1))))

axiom integer_stacks__stack__compat_axiom7 :
  (forall this:us_rep [full1(us_tag, this)].
  (full__function_guard1(full1(us_tag, this), us_tag, this) ->
  (to_int(full(this)) = to_int(full1(us_tag, this)))))

axiom integer_stacks__Oeq__S21b__compat_axiom6 :
  (forall this:us_rep [full1(us_tag2, this)].
  (full__function_guard1(full1(us_tag2, this), us_tag2, this) ->
  (forall this1:us_rep. full__function_guard(full(this1), this1))))

axiom integer_stacks__Oeq__S21b__compat_axiom7 :
  (forall this:us_rep [full1(us_tag2, this)].
  (full__function_guard1(full1(us_tag2, this), us_tag2, this) ->
  (to_int(full(this)) = to_int(full1(us_tag2, this)))))

axiom integer_stacks__Oeq__S23b__compat_axiom6 :
  (forall this:us_rep [full1(us_tag1, this)].
  (full__function_guard1(full1(us_tag1, this), us_tag1, this) ->
  (forall this1:us_rep. full__function_guard(full(this1), this1))))

axiom integer_stacks__Oeq__S23b__compat_axiom7 :
  (forall this:us_rep [full1(us_tag1, this)].
  (full__function_guard1(full1(us_tag1, this), us_tag1, this) ->
  (to_int(full(this)) = to_int(full1(us_tag1, this)))))

axiom full__def_axiom :
  (forall this:us_rep [full(this)]. ((full(this) = true) ->
  (to_rep(((this).us_split_fields1).rec__integer_stacks__stack__top) = to_rep1(((this).us_split_discrs1).rec__integer_stacks__stack__capacity))))

axiom full__def_axiom1 :
  (forall this:us_rep [full(this)].
  ((to_rep(((this).us_split_fields1).rec__integer_stacks__stack__top) = to_rep1(((this).us_split_discrs1).rec__integer_stacks__stack__capacity)) ->
  (full(this) = true)))

logic left : us_rep

logic attr__ATTRIBUTE_ADDRESS3 : int

axiom user_eq__def_axiom :
  (forall a:us_rep2. forall b:us_rep2. oeq__function_guard(oeq(to_base1(a),
  to_base1(b)), to_base1(a), to_base1(b)))

axiom user_eq__def_axiom1 :
  (forall a:us_rep2. forall b:us_rep2 [user_eq7(a, b)]. (user_eq7(a,
  b) = oeq(to_base1(a), to_base1(b))))

predicate dynamic_invariant4(temp___expr_331: us_rep2,
  temp___is_init_327: bool, temp___skip_constant_328: bool,
  temp___do_toplevel_329: bool, temp___do_typ_inv_330: bool) =
  ((((not (temp___skip_constant_328 = true)) ->
  in_range6(to_rep1(((left).us_split_discrs1).rec__integer_stacks__stack__capacity),
  to_base1(temp___expr_331))) and
  (to_rep(((to_base1(temp___expr_331)).us_split_fields1).rec__integer_stacks__stack__top) <= to_rep1(((to_base1(temp___expr_331)).us_split_discrs1).rec__integer_stacks__stack__capacity))) and
  (dynamic_property(1,
  to_rep1(((left).us_split_discrs1).rec__integer_stacks__stack__capacity),
  first1(((temp___expr_331).us_split_fields5).rec__integer_stacks__stack__values2),
  last1(((temp___expr_331).us_split_fields5).rec__integer_stacks__stack__values2)) and
  ((first1(((temp___expr_331).us_split_fields5).rec__integer_stacks__stack__values2) = 1) and
  (last1(((temp___expr_331).us_split_fields5).rec__integer_stacks__stack__values2) = to_rep1(((left).us_split_discrs1).rec__integer_stacks__stack__capacity)))))

axiom temp___result_343qtdef :
  (forall temp___342:us_rep2.
  empty__function_guard(empty(to_base1(temp___342)), to_base1(temp___342)))

predicate default_initial_assumption(temp___expr_336: us_rep2,
  temp___skip_top_level_337: bool) =
  ((((temp___expr_336).attr__tag2 = us_tag2) and
  ((to_rep1(((temp___expr_336).us_split_discrs3).rec__integer_stacks__stack__capacity) = to_rep1(((left).us_split_discrs1).rec__integer_stacks__stack__capacity)) and
  (((first1(((temp___expr_336).us_split_fields5).rec__integer_stacks__stack__values2) = 1) and
  (last1(((temp___expr_336).us_split_fields5).rec__integer_stacks__stack__values2) = to_rep1(((left).us_split_discrs1).rec__integer_stacks__stack__capacity))) and
  (to_rep(((temp___expr_336).us_split_fields5).rec__integer_stacks__stack__top2) = 0)))) and
  ((not (temp___skip_top_level_337 = true)) ->
  (empty(to_base1(temp___expr_336)) = true)))

predicate dynamic_predicate1(temp___344: us_rep2) =
  (to_rep(((to_base1(temp___344)).us_split_fields1).rec__integer_stacks__stack__top) <= to_rep1(((to_base1(temp___344)).us_split_discrs1).rec__integer_stacks__stack__capacity))

logic right : us_rep

logic attr__ATTRIBUTE_ADDRESS4 : int

axiom user_eq__def_axiom2 :
  (forall a:us_rep1. forall b:us_rep1. oeq__function_guard(oeq(to_base(a),
  to_base(b)), to_base(a), to_base(b)))

axiom user_eq__def_axiom3 :
  (forall a:us_rep1. forall b:us_rep1 [user_eq6(a, b)]. (user_eq6(a,
  b) = oeq(to_base(a), to_base(b))))

predicate dynamic_invariant5(temp___expr_311: us_rep1,
  temp___is_init_307: bool, temp___skip_constant_308: bool,
  temp___do_toplevel_309: bool, temp___do_typ_inv_310: bool) =
  ((((not (temp___skip_constant_308 = true)) ->
  in_range5(to_rep1(((right).us_split_discrs1).rec__integer_stacks__stack__capacity),
  to_base(temp___expr_311))) and
  (to_rep(((to_base(temp___expr_311)).us_split_fields1).rec__integer_stacks__stack__top) <= to_rep1(((to_base(temp___expr_311)).us_split_discrs1).rec__integer_stacks__stack__capacity))) and
  (dynamic_property(1,
  to_rep1(((right).us_split_discrs1).rec__integer_stacks__stack__capacity),
  first1(((temp___expr_311).us_split_fields3).rec__integer_stacks__stack__values1),
  last1(((temp___expr_311).us_split_fields3).rec__integer_stacks__stack__values1)) and
  ((first1(((temp___expr_311).us_split_fields3).rec__integer_stacks__stack__values1) = 1) and
  (last1(((temp___expr_311).us_split_fields3).rec__integer_stacks__stack__values1) = to_rep1(((right).us_split_discrs1).rec__integer_stacks__stack__capacity)))))

axiom temp___result_323qtdef :
  (forall temp___322:us_rep1.
  empty__function_guard(empty(to_base(temp___322)), to_base(temp___322)))

predicate default_initial_assumption1(temp___expr_316: us_rep1,
  temp___skip_top_level_317: bool) =
  ((((temp___expr_316).attr__tag1 = us_tag1) and
  ((to_rep1(((temp___expr_316).us_split_discrs2).rec__integer_stacks__stack__capacity) = to_rep1(((right).us_split_discrs1).rec__integer_stacks__stack__capacity)) and
  (((first1(((temp___expr_316).us_split_fields3).rec__integer_stacks__stack__values1) = 1) and
  (last1(((temp___expr_316).us_split_fields3).rec__integer_stacks__stack__values1) = to_rep1(((right).us_split_discrs1).rec__integer_stacks__stack__capacity))) and
  (to_rep(((temp___expr_316).us_split_fields3).rec__integer_stacks__stack__top1) = 0)))) and
  ((not (temp___skip_top_level_317 = true)) ->
  (empty(to_base(temp___expr_316)) = true)))

predicate dynamic_predicate2(temp___324: us_rep1) =
  (to_rep(((to_base(temp___324)).us_split_fields1).rec__integer_stacks__stack__top) <= to_rep1(((to_base(temp___324)).us_split_discrs1).rec__integer_stacks__stack__capacity))

 (* File "bounded_stacks.ads", line 35, characters 0-0 *)
goal defqtvc :
  (forall this__split_fields:us_split_fields. forall item:int.
  (forall this__split_fields1:us_split_fields.
  ((this__split_fields1 = this__split_fields) -> (dynamic_invariant(i15s,
  true, false, true, true) -> (dynamic_invariant(i15s, true, false, true,
  true) -> (dynamic_invariant({ us_split_discrs1 = this__split_discrs;
  us_split_fields1 = this__split_fields; attr__tag = this__attr__tag }, true,
  false, true, true) -> (dynamic_invariant1(item, false, false, true,
  true) ->
  ((forall this__split_fields2:us_split_fields. empty__function_guard(empty({
   us_split_discrs1 = this__split_discrs; us_split_fields1 =
   this__split_fields2; attr__tag = this__attr__tag }), { us_split_discrs1 =
   this__split_discrs; us_split_fields1 = this__split_fields2; attr__tag =
   this__attr__tag })) ->
  ((not (empty({ us_split_discrs1 = this__split_discrs; us_split_fields1 =
  this__split_fields; attr__tag = this__attr__tag }) = true)) ->
  (let temp___412 = (this__split_fields).rec__integer_stacks__stack__values
  : us_t in
  (forall temp___413:int.
  ((to_rep((this__split_fields).rec__integer_stacks__stack__top) = temp___413) ->
  (((first1(temp___412) <= temp___413) and
  (temp___413 <= last1(temp___412))) ->
  ((exists o:int. (to_rep3((to_array(temp___412)[temp___413])) = o)) ->
  (forall o:int.
  ((to_rep((this__split_fields).rec__integer_stacks__stack__top) = o) ->
  in_range((o - 1))))))))))))))))))
