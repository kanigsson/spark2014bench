(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep1 : character -> int

logic of_rep1 : int -> character

axiom inversion_axiom1 :
  (forall x:character [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:character [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep1((a[temp___idx_91])) = to_rep1((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep1((a[temp___idx_91])) = to_rep1((b[((b__first - a__first) + temp___idx_91)]))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type map

type map__ref1 = { map__content1 : map
}

logic get : map, int, int -> integer

logic set : map, int, int, integer -> map

axiom Select_eq :
  (forall m:map.
  (forall i:int.
  (forall j:int.
  (forall a:integer [set(m, i, j, a)]. (get(set(m, i, j, a), i, j) = a)))))

axiom Select_neq :
  (forall m:map.
  (forall i:int. forall i2:int.
  (forall j:int. forall j2:int.
  (forall a:integer [get(set(m, i, j, a), i2, j2)| set(m, i, j, a), get(m,
  i2, j2)]. ((not ((i = i2) and (j = j2))) -> (get(set(m, i, j, a), i2,
  j2) = get(m, i2, j2)))))))

logic slide1 : map, int, int, int, int -> map

axiom slide_def1 :
  (forall a:map.
  (forall new_first:int. forall old_first:int.
  (forall new_first_2:int. forall old_first_2:int.
  (forall i:int.
  (forall j:int [get(slide1(a, old_first, new_first, old_first_2,
  new_first_2), i, j)]. (get(slide1(a, old_first, new_first, old_first_2,
  new_first_2), i, j) = get(a, (i - (new_first - old_first)),
  (j - (new_first_2 - old_first_2)))))))))

function bool_eq5(a: map, a__first: int, a__last: int, a__first_2: int,
  a__last_2: int, b: map, b__first: int, b__last: int, b__first_2: int,
  b__last_2: int) : bool =
  (if (((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (if (a__first_2 <= a__last_2) then ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2))) else (b__last_2 <  b__first_2))) and
  (forall temp___idx_155:int. forall temp___idx_156:int.
  ((((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)) and
  ((a__first_2 <= temp___idx_156) and (temp___idx_156 <= a__last_2))) ->
  (to_rep(get(a, temp___idx_155, temp___idx_156)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_155),
  ((b__first_2 - a__first_2) + temp___idx_156))))))) then true else false)

axiom bool_eq_rev4 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq5(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq5(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq5(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq5(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first_2 <= a__last_2) ->
  (b__first_2 <= b__last_2)))))

axiom bool_eq_rev8 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq5(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first_2 <= a__last_2) ->
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2))))))

axiom bool_eq_rev9 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq5(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((not (a__first_2 <= a__last_2)) ->
  (b__last_2 <  b__first_2)))))

axiom bool_eq_rev10 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq5(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) ->
  (forall temp___idx_155:int. forall temp___idx_156:int.
  ((((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)) and
  ((a__first_2 <= temp___idx_156) and (temp___idx_156 <= a__last_2))) ->
  (to_rep(get(a, temp___idx_155, temp___idx_156)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_155),
  ((b__first_2 - a__first_2) + temp___idx_156)))))))))

logic matrix__first : integer

logic matrix__last : integer

logic matrix__first_2 : integer

logic matrix__last_2 : integer

logic attr__ATTRIBUTE_ADDRESS2 : int

type tTglobSP1

logic tTglobSP1qtint : tTglobSP1 -> int

axiom tTglobSP1qtaxiom : (forall i:tTglobSP1. (1 <= tTglobSP1qtint(i)))

axiom tTglobSP1qtaxiom1 : (forall i:tTglobSP1. (tTglobSP1qtint(i) <= 26))

predicate in_range4(x: int) = ((1 <= x) and (x <= 26))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : tTglobSP1, tTglobSP1 -> bool

logic dummy3 : tTglobSP1

type tTglobSP1__ref = { tTglobSP1__content : tTglobSP1
}

function tTglobSP1__ref_tTglobSP1__content__projection(a: tTglobSP1__ref) : tTglobSP1 =
  (a).tTglobSP1__content

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type t1

logic first1 : t1 -> integer

logic last1 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def2 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep(first1(mk1(f, l))) = f))))

axiom mk_def3 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep(last1(mk1(f, l))) = l))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : map; rt : t; rt_2 : t1
}

function to_array(a: us_t) : map = (a).elts

function of_array(a: map, f: int, l: int, f2: int, l2: int) : us_t = { elts =
  a; rt = mk(f, l); rt_2 = mk1(f2, l2) }

function first2(a: us_t) : int = to_rep(first((a).rt))

function last2(a: us_t) : int = to_rep(last((a).rt))

function length(a: us_t) : int =
  (if (first2(a) <= last2(a)) then ((last2(a) - first2(a)) + 1) else 0)

function first_2(a: us_t) : int = to_rep(first1((a).rt_2))

function last_2(a: us_t) : int = to_rep(last1((a).rt_2))

function length_2(a: us_t) : int =
  (if (first_2(a) <= last_2(a)) then ((last_2(a) - first_2(a)) + 1) else 0)

predicate dynamic_property2(range_first1: int, range_last1: int, f1: int,
  l1: int, range_first2: int, range_last2: int, f2: int, l2: int) =
  (dynamic_property(range_first1, range_last1, f1, l1) and
  dynamic_property1(range_first2, range_last2, f2, l2))

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), to_rep(first1((x).rt_2)),
  to_rep(last1((x).rt_2)), (y).elts, to_rep(first((y).rt)),
  to_rep(last((y).rt)), to_rep(first1((y).rt_2)), to_rep(last1((y).rt_2)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : us_t

type arr2__ref = { arr2__content : us_t
}

function arr2__ref_arr2__content__projection(a: arr2__ref) : us_t =
  (a).arr2__content

type t6b

logic t6bqtint : t6b -> int

axiom t6bqtaxiom : (forall i:t6b. (1 <= t6bqtint(i)))

axiom t6bqtaxiom1 : (forall i:t6b. (t6bqtint(i) <= 4))

predicate in_range5(x: int) = ((1 <= x) and (x <= 4))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : t6b, t6b -> bool

logic dummy5 : t6b

type t6b__ref = { t6b__content : t6b
}

function t6b__ref_t6b__content__projection(a: t6b__ref) : t6b =
  (a).t6b__content

type t7b

logic t7bqtint : t7b -> int

axiom t7bqtaxiom : (forall i:t7b. (1 <= t7bqtint(i)))

axiom t7bqtaxiom1 : (forall i:t7b. (t7bqtint(i) <= 4))

predicate in_range6(x: int) = ((1 <= x) and (x <= 4))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : t7b, t7b -> bool

logic dummy6 : t7b

type t7b__ref = { t7b__content : t7b
}

function t7b__ref_t7b__content__projection(a: t7b__ref) : t7b =
  (a).t7b__content

logic temp___String_Literal_393 : unit -> (int,character) farray

axiom temp___String_Literal_393__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_393(us_void_param)].
  (to_rep1((temp___String_Literal_393(us_void_param)[1])) = 113))

axiom temp___String_Literal_393__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_393(us_void_param)].
  (to_rep1((temp___String_Literal_393(us_void_param)[2])) = 119))

axiom temp___String_Literal_393__def_axiom2 :
  (forall us_void_param:unit [temp___String_Literal_393(us_void_param)].
  (to_rep1((temp___String_Literal_393(us_void_param)[3])) = 101))

axiom temp___String_Literal_393__def_axiom3 :
  (forall us_void_param:unit [temp___String_Literal_393(us_void_param)].
  (to_rep1((temp___String_Literal_393(us_void_param)[4])) = 114))

axiom temp___String_Literal_393__def_axiom4 :
  (forall us_void_param:unit [temp___String_Literal_393(us_void_param)].
  (to_rep1((temp___String_Literal_393(us_void_param)[5])) = 116))

axiom temp___String_Literal_393__def_axiom5 :
  (forall us_void_param:unit [temp___String_Literal_393(us_void_param)].
  (to_rep1((temp___String_Literal_393(us_void_param)[6])) = 121))

axiom temp___String_Literal_393__def_axiom6 :
  (forall us_void_param:unit [temp___String_Literal_393(us_void_param)].
  (to_rep1((temp___String_Literal_393(us_void_param)[7])) = 117))

axiom temp___String_Literal_393__def_axiom7 :
  (forall us_void_param:unit [temp___String_Literal_393(us_void_param)].
  (to_rep1((temp___String_Literal_393(us_void_param)[8])) = 105))

axiom temp___String_Literal_393__def_axiom8 :
  (forall us_void_param:unit [temp___String_Literal_393(us_void_param)].
  (to_rep1((temp___String_Literal_393(us_void_param)[9])) = 111))

axiom temp___String_Literal_393__def_axiom9 :
  (forall us_void_param:unit [temp___String_Literal_393(us_void_param)].
  (to_rep1((temp___String_Literal_393(us_void_param)[10])) = 112))

axiom temp___String_Literal_393__def_axiom10 :
  (forall us_void_param:unit [temp___String_Literal_393(us_void_param)].
  (to_rep1((temp___String_Literal_393(us_void_param)[11])) = 97))

axiom temp___String_Literal_393__def_axiom11 :
  (forall us_void_param:unit [temp___String_Literal_393(us_void_param)].
  (to_rep1((temp___String_Literal_393(us_void_param)[12])) = 115))

axiom temp___String_Literal_393__def_axiom12 :
  (forall us_void_param:unit [temp___String_Literal_393(us_void_param)].
  (to_rep1((temp___String_Literal_393(us_void_param)[13])) = 100))

axiom temp___String_Literal_393__def_axiom13 :
  (forall us_void_param:unit [temp___String_Literal_393(us_void_param)].
  (to_rep1((temp___String_Literal_393(us_void_param)[14])) = 102))

axiom temp___String_Literal_393__def_axiom14 :
  (forall us_void_param:unit [temp___String_Literal_393(us_void_param)].
  (to_rep1((temp___String_Literal_393(us_void_param)[15])) = 103))

axiom temp___String_Literal_393__def_axiom15 :
  (forall us_void_param:unit [temp___String_Literal_393(us_void_param)].
  (to_rep1((temp___String_Literal_393(us_void_param)[16])) = 104))

axiom temp___String_Literal_393__def_axiom16 :
  (forall us_void_param:unit [temp___String_Literal_393(us_void_param)].
  (to_rep1((temp___String_Literal_393(us_void_param)[17])) = 106))

axiom temp___String_Literal_393__def_axiom17 :
  (forall us_void_param:unit [temp___String_Literal_393(us_void_param)].
  (to_rep1((temp___String_Literal_393(us_void_param)[18])) = 107))

axiom temp___String_Literal_393__def_axiom18 :
  (forall us_void_param:unit [temp___String_Literal_393(us_void_param)].
  (to_rep1((temp___String_Literal_393(us_void_param)[19])) = 108))

axiom temp___String_Literal_393__def_axiom19 :
  (forall us_void_param:unit [temp___String_Literal_393(us_void_param)].
  (to_rep1((temp___String_Literal_393(us_void_param)[20])) = 122))

axiom temp___String_Literal_393__def_axiom20 :
  (forall us_void_param:unit [temp___String_Literal_393(us_void_param)].
  (to_rep1((temp___String_Literal_393(us_void_param)[21])) = 120))

axiom temp___String_Literal_393__def_axiom21 :
  (forall us_void_param:unit [temp___String_Literal_393(us_void_param)].
  (to_rep1((temp___String_Literal_393(us_void_param)[22])) = 99))

axiom temp___String_Literal_393__def_axiom22 :
  (forall us_void_param:unit [temp___String_Literal_393(us_void_param)].
  (to_rep1((temp___String_Literal_393(us_void_param)[23])) = 118))

axiom temp___String_Literal_393__def_axiom23 :
  (forall us_void_param:unit [temp___String_Literal_393(us_void_param)].
  (to_rep1((temp___String_Literal_393(us_void_param)[24])) = 98))

axiom temp___String_Literal_393__def_axiom24 :
  (forall us_void_param:unit [temp___String_Literal_393(us_void_param)].
  (to_rep1((temp___String_Literal_393(us_void_param)[25])) = 110))

axiom temp___String_Literal_393__def_axiom25 :
  (forall us_void_param:unit [temp___String_Literal_393(us_void_param)].
  (to_rep1((temp___String_Literal_393(us_void_param)[26])) = 109))

logic pack__matrix__aggregate_def : int -> map

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range2(temp___expr_18))

predicate dynamic_invariant1(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

predicate dynamic_invariant2(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range3(temp___expr_74))

predicate dynamic_invariant3(temp___expr_209: us_t, temp___is_init_205: bool,
  temp___skip_constant_206: bool, temp___do_toplevel_207: bool,
  temp___do_typ_inv_208: bool) = ((not (temp___skip_constant_206 = true)) ->
  dynamic_property2(0, 2147483647, first2(temp___expr_209),
  last2(temp___expr_209), 0, 2147483647, first_2(temp___expr_209),
  last_2(temp___expr_209)))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 1)

axiom def_axiom :
  (forall temp___397:int. (dynamic_invariant(temp___397, true, true, true,
  true) ->
  (forall temp___398:int. forall temp___399:int.
  (get(pack__matrix__aggregate_def(temp___397), temp___398,
  temp___399) = rliteral))))

 (* File "pack.ads", line 1, characters 0-0 *)
goal defqtvc :
  (forall glob:(int,character) farray.
  ((glob = temp___String_Literal_393(void)) -> ((1 <= 4) -> (1 <= 1))))
