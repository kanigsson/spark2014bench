(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : positive, positive -> bool

logic dummy : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_invariant(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range(temp___expr_46))

function to_rep(x: positive) : int = positiveqtint(x)

logic of_rep : int -> positive

axiom inversion_axiom :
  (forall x:positive [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:positive [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map

type map__ref = { map__content : map
}

logic get : map, int, int -> integer

logic set : map, int, int, integer -> map

axiom Select_eq :
  (forall m:map.
  (forall i:int.
  (forall j:int.
  (forall a:integer [set(m, i, j, a)]. (get(set(m, i, j, a), i, j) = a)))))

axiom Select_neq :
  (forall m:map.
  (forall i:int. forall i2:int.
  (forall j:int. forall j2:int.
  (forall a:integer [get(set(m, i, j, a), i2, j2)| set(m, i, j, a), get(m,
  i2, j2)]. ((not ((i = i2) and (j = j2))) -> (get(set(m, i, j, a), i2,
  j2) = get(m, i2, j2)))))))

logic slide : map, int, int, int, int -> map

axiom slide_def :
  (forall a:map.
  (forall new_first:int. forall old_first:int.
  (forall new_first_2:int. forall old_first_2:int.
  (forall i:int.
  (forall j:int [get(slide(a, old_first, new_first, old_first_2,
  new_first_2), i, j)]. (get(slide(a, old_first, new_first, old_first_2,
  new_first_2), i, j) = get(a, (i - (new_first - old_first)),
  (j - (new_first_2 - old_first_2)))))))))

function bool_eq2(a: map, a__first: int, a__last: int, a__first_2: int,
  a__last_2: int, b: map, b__first: int, b__last: int, b__first_2: int,
  b__last_2: int) : bool =
  (if (((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (if (a__first_2 <= a__last_2) then ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2))) else (b__last_2 <  b__first_2))) and
  (forall temp___idx_154:int. forall temp___idx_155:int.
  ((((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)) and
  ((a__first_2 <= temp___idx_155) and (temp___idx_155 <= a__last_2))) ->
  (to_rep1(get(a, temp___idx_154, temp___idx_155)) = to_rep1(get(b,
  ((b__first - a__first) + temp___idx_154),
  ((b__first_2 - a__first_2) + temp___idx_155))))))) then true else false)

axiom bool_eq_rev :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq2(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq2(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq2(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq2(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first_2 <= a__last_2) ->
  (b__first_2 <= b__last_2)))))

axiom bool_eq_rev4 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq2(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first_2 <= a__last_2) ->
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2))))))

axiom bool_eq_rev5 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq2(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((not (a__first_2 <= a__last_2)) ->
  (b__last_2 <  b__first_2)))))

axiom bool_eq_rev6 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq2(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) ->
  (forall temp___idx_154:int. forall temp___idx_155:int.
  ((((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)) and
  ((a__first_2 <= temp___idx_155) and (temp___idx_155 <= a__last_2))) ->
  (to_rep1(get(a, temp___idx_154, temp___idx_155)) = to_rep1(get(b,
  ((b__first - a__first) + temp___idx_154),
  ((b__first_2 - a__first_2) + temp___idx_155)))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range(low) and in_range(high)))))

type t1

logic first1 : t1 -> integer

logic last1 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def2 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first1(mk1(f, l))) = f))))

axiom mk_def3 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last1(mk1(f, l))) = l))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range(low) and in_range(high)))))

type us_t = { elts : map; rt : t; rt_2 : t1
}

function to_array(a: us_t) : map = (a).elts

function of_array(a: map, f: int, l: int, f2: int, l2: int) : us_t = { elts =
  a; rt = mk(f, l); rt_2 = mk1(f2, l2) }

function first2(a: us_t) : int = to_rep1(first((a).rt))

function last2(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first2(a) <= last2(a)) then ((last2(a) - first2(a)) + 1) else 0)

function first_2(a: us_t) : int = to_rep1(first1((a).rt_2))

function last_2(a: us_t) : int = to_rep1(last1((a).rt_2))

function length_2(a: us_t) : int =
  (if (first_2(a) <= last_2(a)) then ((last_2(a) - first_2(a)) + 1) else 0)

predicate dynamic_property2(range_first1: int, range_last1: int, f1: int,
  l1: int, range_first2: int, range_last2: int, f2: int, l2: int) =
  (dynamic_property(range_first1, range_last1, f1, l1) and
  dynamic_property1(range_first2, range_last2, f2, l2))

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq3(x: us_t, y: us_t) : bool = bool_eq2((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), to_rep1(first1((x).rt_2)),
  to_rep1(last1((x).rt_2)), (y).elts, to_rep1(first((y).rt)),
  to_rep1(last((y).rt)), to_rep1(first1((y).rt_2)), to_rep1(last1((y).rt_2)))

logic user_eq2 : us_t, us_t -> bool

logic dummy2 : us_t

type t_array__ref = { t_array__content : us_t
}

function t_array__ref_t_array__content__projection(a: t_array__ref) : us_t =
  (a).t_array__content

type t3s__ref = { t3s__content : us_t
}

function t3s__ref_t3s__content__projection(a: t3s__ref) : us_t =
  (a).t3s__content

type us_split_discrs = { rec__discr__t_record__row_first : positive;
rec__discr__t_record__row_last : positive; rec__discr__t_record__col_first :
positive; rec__discr__t_record__col_last : positive
}

function us_split_discrs_rec__discr__t_record__row_first__projection(a: us_split_discrs) : positive =
  (a).rec__discr__t_record__row_first

function us_split_discrs_rec__discr__t_record__row_last__projection(a: us_split_discrs) : positive =
  (a).rec__discr__t_record__row_last

function us_split_discrs_rec__discr__t_record__col_first__projection(a: us_split_discrs) : positive =
  (a).rec__discr__t_record__col_first

function us_split_discrs_rec__discr__t_record__col_last__projection(a: us_split_discrs) : positive =
  (a).rec__discr__t_record__col_last

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__discr__t_record__data : us_t
}

function us_split_fields_rec__discr__t_record__data__projection(a: us_split_fields) : us_t =
  (a).rec__discr__t_record__data

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq4(a: us_rep, b: us_rep) : bool =
  (if (((((to_rep(((a).us_split_discrs1).rec__discr__t_record__row_first) = to_rep(((b).us_split_discrs1).rec__discr__t_record__row_first)) and
  (to_rep(((a).us_split_discrs1).rec__discr__t_record__row_last) = to_rep(((b).us_split_discrs1).rec__discr__t_record__row_last))) and
  (to_rep(((a).us_split_discrs1).rec__discr__t_record__col_first) = to_rep(((b).us_split_discrs1).rec__discr__t_record__col_first))) and
  (to_rep(((a).us_split_discrs1).rec__discr__t_record__col_last) = to_rep(((b).us_split_discrs1).rec__discr__t_record__col_last))) and
  (bool_eq3(((a).us_split_fields1).rec__discr__t_record__data,
  ((b).us_split_fields1).rec__discr__t_record__data) = true)) then true else false)

predicate in_range2(rec__discr__t_record__row_first1: int,
  rec__discr__t_record__row_last1: int,
  rec__discr__t_record__col_first1: int,
  rec__discr__t_record__col_last1: int, a: us_split_discrs) =
  ((((rec__discr__t_record__row_first1 = to_rep((a).rec__discr__t_record__row_first)) and
  (rec__discr__t_record__row_last1 = to_rep((a).rec__discr__t_record__row_last))) and
  (rec__discr__t_record__col_first1 = to_rep((a).rec__discr__t_record__col_first))) and
  (rec__discr__t_record__col_last1 = to_rep((a).rec__discr__t_record__col_last)))

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic discr__t_record__row_first__first__bit : int

logic discr__t_record__row_first__last__bit : int

logic discr__t_record__row_first__position : int

axiom discr__t_record__row_first__first__bit_axiom :
  (0 <= discr__t_record__row_first__first__bit)

axiom discr__t_record__row_first__last__bit_axiom :
  (discr__t_record__row_first__first__bit <  discr__t_record__row_first__last__bit)

axiom discr__t_record__row_first__position_axiom :
  (0 <= discr__t_record__row_first__position)

logic discr__t_record__row_last__first__bit : int

logic discr__t_record__row_last__last__bit : int

logic discr__t_record__row_last__position : int

axiom discr__t_record__row_last__first__bit_axiom :
  (0 <= discr__t_record__row_last__first__bit)

axiom discr__t_record__row_last__last__bit_axiom :
  (discr__t_record__row_last__first__bit <  discr__t_record__row_last__last__bit)

axiom discr__t_record__row_last__position_axiom :
  (0 <= discr__t_record__row_last__position)

logic discr__t_record__col_first__first__bit : int

logic discr__t_record__col_first__last__bit : int

logic discr__t_record__col_first__position : int

axiom discr__t_record__col_first__first__bit_axiom :
  (0 <= discr__t_record__col_first__first__bit)

axiom discr__t_record__col_first__last__bit_axiom :
  (discr__t_record__col_first__first__bit <  discr__t_record__col_first__last__bit)

axiom discr__t_record__col_first__position_axiom :
  (0 <= discr__t_record__col_first__position)

logic discr__t_record__col_last__first__bit : int

logic discr__t_record__col_last__last__bit : int

logic discr__t_record__col_last__position : int

axiom discr__t_record__col_last__first__bit_axiom :
  (0 <= discr__t_record__col_last__first__bit)

axiom discr__t_record__col_last__last__bit_axiom :
  (discr__t_record__col_last__first__bit <  discr__t_record__col_last__last__bit)

axiom discr__t_record__col_last__position_axiom :
  (0 <= discr__t_record__col_last__position)

logic discr__t_record__data__first__bit : int

logic discr__t_record__data__last__bit : int

logic discr__t_record__data__position : int

axiom discr__t_record__data__first__bit_axiom :
  (0 <= discr__t_record__data__first__bit)

axiom discr__t_record__data__last__bit_axiom :
  (discr__t_record__data__first__bit <  discr__t_record__data__last__bit)

axiom discr__t_record__data__position_axiom :
  (0 <= discr__t_record__data__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type t_record__ref = { t_record__content : us_rep
}

function t_record__ref_t_record__content__projection(a: t_record__ref) : us_rep =
  (a).t_record__content

predicate dynamic_invariant1(temp___expr_169: us_rep,
  temp___is_init_165: bool, temp___skip_constant_166: bool,
  temp___do_toplevel_167: bool, temp___do_typ_inv_168: bool) =
  (let temp___173 =
  ((temp___expr_169).us_split_discrs1).rec__discr__t_record__col_last
  : positive in (let temp___172 =
  ((temp___expr_169).us_split_discrs1).rec__discr__t_record__col_first
  : positive in (let temp___171 =
  ((temp___expr_169).us_split_discrs1).rec__discr__t_record__row_last
  : positive in (let temp___170 =
  ((temp___expr_169).us_split_discrs1).rec__discr__t_record__row_first
  : positive in ((dynamic_property2(to_rep(temp___170), to_rep(temp___171),
  first2(((temp___expr_169).us_split_fields1).rec__discr__t_record__data),
  last2(((temp___expr_169).us_split_fields1).rec__discr__t_record__data),
  to_rep(temp___172), to_rep(temp___173),
  first_2(((temp___expr_169).us_split_fields1).rec__discr__t_record__data),
  last_2(((temp___expr_169).us_split_fields1).rec__discr__t_record__data)) and
  ((first2(((temp___expr_169).us_split_fields1).rec__discr__t_record__data) = to_rep(temp___170)) and
  (last2(((temp___expr_169).us_split_fields1).rec__discr__t_record__data) = to_rep(temp___171)))) and
  ((first_2(((temp___expr_169).us_split_fields1).rec__discr__t_record__data) = to_rep(temp___172)) and
  (last_2(((temp___expr_169).us_split_fields1).rec__discr__t_record__data) = to_rep(temp___173))))))))

 (* File "discr.ads", line 1, characters 0-0 *)
goal defqtvc :
  (forall usf:int. (dynamic_invariant(usf, true, true, true, true) ->
  (forall usf1:int. (dynamic_invariant(usf1, true, true, true, true) ->
  (forall usf2:int. (dynamic_invariant(usf2, true, true, true, true) ->
  (forall usf3:int. (dynamic_invariant(usf3, true, true, true, true) ->
  (forall usf4:us_rep.
  (((((to_rep(((usf4).us_split_discrs1).rec__discr__t_record__row_first) = usf3) and
  (to_rep(((usf4).us_split_discrs1).rec__discr__t_record__row_last) = usf2)) and
  (to_rep(((usf4).us_split_discrs1).rec__discr__t_record__col_first) = usf1)) and
  (to_rep(((usf4).us_split_discrs1).rec__discr__t_record__col_last) = usf)) ->
  ((usf1 <= usf) -> (1 <= usf1))))))))))))
