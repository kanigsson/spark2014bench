(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type int_bad

logic int_badqtint : int_bad -> int

axiom int_badqtaxiom :
  (forall i:int_bad. ((- 2147483648) <= int_badqtint(i)))

axiom int_badqtaxiom1 : (forall i:int_bad. (int_badqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : int_bad, int_bad -> bool

logic dummy1 : int_bad

type int_bad__ref = { int_bad__content : int_bad
}

function int_bad__ref_int_bad__content__projection(a: int_bad__ref) : int_bad =
  (a).int_bad__content

function to_rep1(x: int_bad) : int = int_badqtint(x)

logic of_rep1 : int -> int_bad

axiom inversion_axiom1 :
  (forall x:int_bad [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:int_bad [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)]))))))))

logic dummy2 : (int,integer) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq2 : (int,integer) farray, (int,integer) farray -> bool

type us_split_fields = { rec__preds__rec_bad__i : integer;
rec__preds__rec_bad__x : int_bad; rec__preds__rec_bad__a :
(int,integer) farray
}

function us_split_fields_rec__preds__rec_bad__i__projection(a: us_split_fields) : integer =
  (a).rec__preds__rec_bad__i

function us_split_fields_rec__preds__rec_bad__x__projection(a: us_split_fields) : int_bad =
  (a).rec__preds__rec_bad__x

function us_split_fields_rec__preds__rec_bad__a__projection(a: us_split_fields) : (int,integer) farray =
  (a).rec__preds__rec_bad__a

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq4(a: us_rep, b: us_rep) : bool =
  (if (((to_rep(((a).us_split_fields1).rec__preds__rec_bad__i) = to_rep(((b).us_split_fields1).rec__preds__rec_bad__i)) and
  (to_rep1(((a).us_split_fields1).rec__preds__rec_bad__x) = to_rep1(((b).us_split_fields1).rec__preds__rec_bad__x))) and
  (bool_eq3(((a).us_split_fields1).rec__preds__rec_bad__a, 1, 10,
  ((b).us_split_fields1).rec__preds__rec_bad__a, 1,
  10) = true)) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic preds__rec_bad__i__first__bit : int

logic preds__rec_bad__i__last__bit : int

logic preds__rec_bad__i__position : int

axiom preds__rec_bad__i__first__bit_axiom :
  (0 <= preds__rec_bad__i__first__bit)

axiom preds__rec_bad__i__last__bit_axiom :
  (preds__rec_bad__i__first__bit <  preds__rec_bad__i__last__bit)

axiom preds__rec_bad__i__position_axiom : (0 <= preds__rec_bad__i__position)

logic preds__rec_bad__x__first__bit : int

logic preds__rec_bad__x__last__bit : int

logic preds__rec_bad__x__position : int

axiom preds__rec_bad__x__first__bit_axiom :
  (0 <= preds__rec_bad__x__first__bit)

axiom preds__rec_bad__x__last__bit_axiom :
  (preds__rec_bad__x__first__bit <  preds__rec_bad__x__last__bit)

axiom preds__rec_bad__x__position_axiom : (0 <= preds__rec_bad__x__position)

logic preds__rec_bad__a__first__bit : int

logic preds__rec_bad__a__last__bit : int

logic preds__rec_bad__a__position : int

axiom preds__rec_bad__a__first__bit_axiom :
  (0 <= preds__rec_bad__a__first__bit)

axiom preds__rec_bad__a__last__bit_axiom :
  (preds__rec_bad__a__first__bit <  preds__rec_bad__a__last__bit)

axiom preds__rec_bad__a__position_axiom : (0 <= preds__rec_bad__a__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type rec_bad__ref = { rec_bad__content : us_rep
}

function rec_bad__ref_rec_bad__content__projection(a: rec_bad__ref) : us_rep =
  (a).rec_bad__content

logic attr__ATTRIBUTE_ADDRESS : int

type tarr_badD1

logic tarr_badD1qtint : tarr_badD1 -> int

axiom tarr_badD1qtaxiom : (forall i:tarr_badD1. (1 <= tarr_badD1qtint(i)))

axiom tarr_badD1qtaxiom1 : (forall i:tarr_badD1. (tarr_badD1qtint(i) <= 10))

predicate in_range2(x: int) = ((1 <= x) and (x <= 10))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq4 : tarr_badD1, tarr_badD1 -> bool

logic dummy4 : tarr_badD1

type tarr_badD1__ref = { tarr_badD1__content : tarr_badD1
}

function tarr_badD1__ref_tarr_badD1__content__projection(a: tarr_badD1__ref) : tarr_badD1 =
  (a).tarr_badD1__content

predicate dynamic_invariant(temp___expr_303: us_rep,
  temp___is_init_299: bool, temp___skip_constant_300: bool,
  temp___do_toplevel_301: bool, temp___do_typ_inv_302: bool) =
  (((temp___do_toplevel_301 = true) ->
  (((not (to_rep(((temp___expr_303).us_split_fields1).rec__preds__rec_bad__i) = 0)) and
  (not (to_rep1(((temp___expr_303).us_split_fields1).rec__preds__rec_bad__x) = 0))) and
  (forall k:int. (((1 <= k) and (k <= 10)) ->
  (not (to_rep((((temp___expr_303).us_split_fields1).rec__preds__rec_bad__a[k])) = 0)))))) and
  ((let temp___307 =
  to_rep1(((temp___expr_303).us_split_fields1).rec__preds__rec_bad__x)
  : int in ((((- 2147483648) <= temp___307) and (temp___307 <= (- 1))) or
  ((1 <= temp___307) and (temp___307 <= 2147483647)))) and
  (forall k:int. (((1 <= k) and (k <= 10)) ->
  (not (to_rep((((temp___expr_303).us_split_fields1).rec__preds__rec_bad__a[k])) = 0))))))

predicate default_initial_assumption(temp___expr_312: us_rep,
  temp___skip_top_level_313: bool) =
  (((to_rep(((temp___expr_312).us_split_fields1).rec__preds__rec_bad__i) = 0) and
  (to_rep1(((temp___expr_312).us_split_fields1).rec__preds__rec_bad__x) = 0)) and
  (forall temp___316:int. (((1 <= temp___316) and (temp___316 <= 10)) ->
  (to_rep((((temp___expr_312).us_split_fields1).rec__preds__rec_bad__a[temp___316])) = 0))))

predicate dynamic_predicate(temp___317: us_rep) =
  (((not (to_rep(((temp___317).us_split_fields1).rec__preds__rec_bad__i) = 0)) and
  (not (to_rep1(((temp___317).us_split_fields1).rec__preds__rec_bad__x) = 0))) and
  (forall k:int. (((1 <= k) and (k <= 10)) ->
  (not (to_rep((((temp___317).us_split_fields1).rec__preds__rec_bad__a[k])) = 0)))))

logic i9s : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic i25s : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS2 : int

logic i37s : us_rep

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

predicate dynamic_invariant1(temp___expr_182: int, temp___is_init_178: bool,
  temp___skip_constant_179: bool, temp___do_toplevel_180: bool,
  temp___do_typ_inv_181: bool) = ((((temp___is_init_178 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_182)) and
  ((temp___do_toplevel_180 = true) ->
  ((((- 2147483648) <= temp___expr_182) and (temp___expr_182 <= (- 1))) or
  ((1 <= temp___expr_182) and (temp___expr_182 <= 2147483647)))))

predicate dynamic_predicate1(temp___186: int) =
  ((((- 2147483648) <= temp___186) and (temp___186 <= (- 1))) or
  ((1 <= temp___186) and (temp___186 <= 2147483647)))

predicate dynamic_invariant2(temp___expr_268: (int,integer) farray,
  temp___is_init_264: bool, temp___skip_constant_265: bool,
  temp___do_toplevel_266: bool, temp___do_typ_inv_267: bool) =
  ((temp___do_toplevel_266 = true) ->
  (forall k:int. (((1 <= k) and (k <= 10)) ->
  (not (to_rep((temp___expr_268[k])) = 0)))))

predicate default_initial_assumption1(temp___expr_271: (int,integer) farray,
  temp___skip_top_level_272: bool) =
  (forall temp___273:int. (((1 <= temp___273) and (temp___273 <= 10)) ->
  (to_rep((temp___expr_271[temp___273])) = 0)))

predicate dynamic_predicate2(temp___274: (int,integer) farray) =
  (forall k:int. (((1 <= k) and (k <= 10)) ->
  (not (to_rep((temp___274[k])) = 0))))

predicate dynamic_invariant3(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

 (* File "preds.ads", line 67, characters 0-0 *)
goal defqtvc :
  (forall x__split_fields:us_split_fields. (dynamic_invariant1(i9s, true,
  false, true, true) -> (dynamic_invariant2(i25s, true, false, true, true) ->
  (dynamic_invariant(i37s, true, false, true, true) ->
  (dynamic_invariant1(i9s, true, false, true, true) ->
  (dynamic_invariant2(i25s, true, false, true, true) ->
  (dynamic_invariant(i37s, true, false, true, true) -> (dynamic_invariant({
  us_split_fields1 = x__split_fields }, false, false, true, true) ->
  (forall usf:(int,integer) farray. (default_initial_assumption1(usf,
  false) -> dynamic_predicate2(usf)))))))))))
