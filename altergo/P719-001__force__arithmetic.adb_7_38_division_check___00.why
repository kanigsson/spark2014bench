(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (div(x, y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((-abs_int(y)) <  mod(x,
  y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (mod(x, y) <  abs_int(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <  y) then (x % y) else ((x % y) + y))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic n : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type unsigned_byte

logic unsigned_byteqtint : unsigned_byte -> int

axiom unsigned_byteqtaxiom :
  (forall i:unsigned_byte. (0 <= unsigned_byteqtint(i)))

axiom unsigned_byteqtaxiom1 :
  (forall i:unsigned_byte. (unsigned_byteqtint(i) <= 255))

predicate in_range1(x: int) = ((0 <= x) and (x <= 255))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : unsigned_byte, unsigned_byte -> bool

logic dummy : unsigned_byte

type unsigned_byte__ref = { unsigned_byte__content : unsigned_byte
}

function unsigned_byte__ref_unsigned_byte__content__projection(a: unsigned_byte__ref) : unsigned_byte =
  (a).unsigned_byte__content

predicate dynamic_invariant(temp___expr_159: int, temp___is_init_155: bool,
  temp___skip_constant_156: bool, temp___do_toplevel_157: bool,
  temp___do_typ_inv_158: bool) = (((temp___is_init_155 = true) or
  (0 <= 255)) -> in_range1(temp___expr_159))

type t2b

logic t2bqtint : t2b -> int

axiom t2bqtaxiom : (forall i:t2b. (0 <= t2bqtint(i)))

axiom t2bqtaxiom1 : (forall i:t2b. (t2bqtint(i) <= 127))

predicate in_range2(x: int) = ((0 <= x) and (x <= 127))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : t2b, t2b -> bool

logic dummy1 : t2b

type t2b__ref = { t2b__content : t2b
}

function t2b__ref_t2b__content__projection(a: t2b__ref) : t2b =
  (a).t2b__content

axiom cdiv_cases :
  (forall n1:int. forall d:int [div(n1, d)]. ((0 <= n1) -> ((0 <  d) ->
  (div(n1, d) = (n1 / d)))))

axiom cdiv_cases1 :
  (forall n1:int. forall d:int [div(n1, d)]. ((n1 <= 0) -> ((0 <  d) ->
  (div(n1, d) = (-((-n1) / d))))))

axiom cdiv_cases2 :
  (forall n1:int. forall d:int [div(n1, d)]. ((0 <= n1) -> ((d <  0) ->
  (div(n1, d) = (-(n1 / (-d)))))))

axiom cdiv_cases3 :
  (forall n1:int. forall d:int [div(n1, d)]. ((n1 <= 0) -> ((d <  0) ->
  (div(n1, d) = ((-n1) / (-d))))))

axiom cmod_cases :
  (forall n1:int. forall d:int [mod(n1, d)]. ((0 <= n1) -> ((0 <  d) ->
  (mod(n1, d) = (n1 % d)))))

axiom cmod_cases1 :
  (forall n1:int. forall d:int [mod(n1, d)]. ((n1 <= 0) -> ((0 <  d) ->
  (mod(n1, d) = (-((-n1) % d))))))

axiom cmod_cases2 :
  (forall n1:int. forall d:int [mod(n1, d)]. ((0 <= n1) -> ((d <  0) ->
  (mod(n1, d) = (n1 % (-d))))))

axiom cmod_cases3 :
  (forall n1:int. forall d:int [mod(n1, d)]. ((n1 <= 0) -> ((d <  0) ->
  (mod(n1, d) = (-((-n1) % (-d)))))))

 (* File "arithmetic.adb", line 6, characters 0-0 *)
goal defqtvc :
  (forall r:int. (dynamic_invariant(n, true, false, true, true) ->
  (dynamic_invariant(r, false, false, true, true) ->
  (forall r1:int.
  ((exists i:int. ((i = 0) and (if (andb((if (0 <= i) then true else false),
   (if (i <= 127) then true else false)) = true) then (exists r2:int.
                                                      ((r2 = i) and
                                                      (if (orb((if ((r2 + r2) = n) then true else false),
                                                      (if (((r2 + r2) + 1) = n) then true else false)) = true) then (r1 = r2) else 
                                                      (exists r3:int.
                                                      exists i1:int.
                                                      ((((r3 = i1) and
                                                      (((r3 + r3) + 1) <  n)) and
                                                      in_range1(r3)) and
                                                      ((andb((if (dynamic_invariant(r3,
                                                      false, true, true,
                                                      true) and
                                                      in_range2(i1)) then true else false),
                                                      (if ((0 <= i1) and
                                                      (i1 <= 127)) then true else false)) = true) and
                                                      (if (i1 = 127) then (r1 = r3) else 
                                                      (exists i2:int.
                                                      ((i2 = (i1 + 1)) and
                                                      ((r1 = i2) and
                                                      (orb((if ((r1 + r1) = n) then true else false),
                                                      (if (((r1 + r1) + 1) = n) then true else false)) = true))))))))))) else (r1 = r)))) ->
  (forall arithmetic__halve_d__result:int.
  ((arithmetic__halve_d__result = r1) -> (not (2 = 0)))))))))
