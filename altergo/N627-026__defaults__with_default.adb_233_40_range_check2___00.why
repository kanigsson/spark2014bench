(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_39))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

function to_rep(x: positive) : int = positiveqtint(x)

logic of_rep : int -> positive

axiom inversion_axiom :
  (forall x:positive [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:positive [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

logic c : int

logic attr__ATTRIBUTE_ADDRESS : int

function to_rep1(x: natural) : int = naturalqtint(x)

logic of_rep1 : int -> natural

axiom inversion_axiom1 :
  (forall x:natural [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:natural [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_discrs = { rec__with_default__ok_nested_defaults__empty_rec1__d
: positive
}

function us_split_discrs_rec__with_default__ok_nested_defaults__empty_rec1__d__projection(a: us_split_discrs) : positive =
  (a).rec__with_default__ok_nested_defaults__empty_rec1__d

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__11__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_rep = { us_split_discrs1 : us_split_discrs
}

function us_rep___split_discrs__11__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_discrs1).rec__with_default__ok_nested_defaults__empty_rec1__d) = to_rep(((b).us_split_discrs1).rec__with_default__ok_nested_defaults__empty_rec1__d)) then true else false)

predicate in_range2(rec__with_default__ok_nested_defaults__empty_rec1__d1: int,
  a: us_split_discrs) =
  (rec__with_default__ok_nested_defaults__empty_rec1__d1 = to_rep((a).rec__with_default__ok_nested_defaults__empty_rec1__d))

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic with_default__ok_nested_defaults__empty_rec1__d__first__bit : int

logic with_default__ok_nested_defaults__empty_rec1__d__last__bit : int

logic with_default__ok_nested_defaults__empty_rec1__d__position : int

axiom with_default__ok_nested_defaults__empty_rec1__d__first__bit_axiom :
  (0 <= with_default__ok_nested_defaults__empty_rec1__d__first__bit)

axiom with_default__ok_nested_defaults__empty_rec1__d__last__bit_axiom :
  (with_default__ok_nested_defaults__empty_rec1__d__first__bit <  with_default__ok_nested_defaults__empty_rec1__d__last__bit)

axiom with_default__ok_nested_defaults__empty_rec1__d__position_axiom :
  (0 <= with_default__ok_nested_defaults__empty_rec1__d__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type empty_rec1__ref = { empty_rec1__content : us_rep
}

function empty_rec1__ref_empty_rec1__content__projection(a: empty_rec1__ref) : us_rep =
  (a).empty_rec1__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_162:int. (((a__first <= temp___idx_162) and
  (temp___idx_162 <= a__last)) -> (bool_eq3((a[temp___idx_162]),
  (b[((b__first - a__first) + temp___idx_162)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_162:int. (((a__first <= temp___idx_162) and
  (temp___idx_162 <= a__last)) -> (bool_eq3((a[temp___idx_162]),
  (b[((b__first - a__first) + temp___idx_162)])) = true))))))

logic dummy3 : (int,us_rep) farray

logic value__size1 : int

logic object__size1 : int

logic component__size : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq3 : (int,us_rep) farray, (int,us_rep) farray -> bool

type us_split_fields = { rec__with_default__ok_nested_defaults__non_init1__e
: (int,us_rep) farray; rec__with_default__ok_nested_defaults__non_init1__f :
natural
}

function us_split_fields_rec__with_default__ok_nested_defaults__non_init1__e__projection(a: us_split_fields) : (int,us_rep) farray =
  (a).rec__with_default__ok_nested_defaults__non_init1__e

function us_split_fields_rec__with_default__ok_nested_defaults__non_init1__f__projection(a: us_split_fields) : natural =
  (a).rec__with_default__ok_nested_defaults__non_init1__f

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__13__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__13__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

function bool_eq5(a: us_rep1, b: us_rep1) : bool =
  (if ((bool_eq4(((a).us_split_fields1).rec__with_default__ok_nested_defaults__non_init1__e,
  1, 0,
  ((b).us_split_fields1).rec__with_default__ok_nested_defaults__non_init1__e,
  1, 0) = true) and
  (to_rep1(((a).us_split_fields1).rec__with_default__ok_nested_defaults__non_init1__f) = to_rep1(((b).us_split_fields1).rec__with_default__ok_nested_defaults__non_init1__f))) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic with_default__ok_nested_defaults__non_init1__e__first__bit : int

logic with_default__ok_nested_defaults__non_init1__e__last__bit : int

logic with_default__ok_nested_defaults__non_init1__e__position : int

axiom with_default__ok_nested_defaults__non_init1__e__first__bit_axiom :
  (0 <= with_default__ok_nested_defaults__non_init1__e__first__bit)

axiom with_default__ok_nested_defaults__non_init1__e__last__bit_axiom :
  (with_default__ok_nested_defaults__non_init1__e__first__bit <  with_default__ok_nested_defaults__non_init1__e__last__bit)

axiom with_default__ok_nested_defaults__non_init1__e__position_axiom :
  (0 <= with_default__ok_nested_defaults__non_init1__e__position)

logic with_default__ok_nested_defaults__non_init1__f__first__bit : int

logic with_default__ok_nested_defaults__non_init1__f__last__bit : int

logic with_default__ok_nested_defaults__non_init1__f__position : int

axiom with_default__ok_nested_defaults__non_init1__f__first__bit_axiom :
  (0 <= with_default__ok_nested_defaults__non_init1__f__first__bit)

axiom with_default__ok_nested_defaults__non_init1__f__last__bit_axiom :
  (with_default__ok_nested_defaults__non_init1__f__first__bit <  with_default__ok_nested_defaults__non_init1__f__last__bit)

axiom with_default__ok_nested_defaults__non_init1__f__position_axiom :
  (0 <= with_default__ok_nested_defaults__non_init1__f__position)

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy4 : us_rep1

type non_init1__ref = { non_init1__content : us_rep1
}

function non_init1__ref_non_init1__content__projection(a: non_init1__ref) : us_rep1 =
  (a).non_init1__content

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate default_initial_assumption(temp___expr_652: us_rep1,
  temp___skip_top_level_653: bool) =
  (forall temp___655:int. (((1 <= temp___655) and (temp___655 <= 0)) ->
  (to_rep((((((temp___expr_652).us_split_fields1).rec__with_default__ok_nested_defaults__non_init1__e[temp___655])).us_split_discrs1).rec__with_default__ok_nested_defaults__empty_rec1__d) = c)))

type us_split_discrs2 = {
rec__with_default__ok_nested_defaults__empty_rec2__d : positive
}

function us_split_discrs_rec__with_default__ok_nested_defaults__empty_rec2__d__projection(a: us_split_discrs2) : positive =
  (a).rec__with_default__ok_nested_defaults__empty_rec2__d

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___split_discrs__content__12__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_rep2 = { us_split_discrs3 : us_split_discrs2
}

function us_rep___split_discrs__12__projection(a: us_rep2) : us_split_discrs2 =
  (a).us_split_discrs3

function bool_eq6(a: us_rep2, b: us_rep2) : bool =
  (if (to_rep(((a).us_split_discrs3).rec__with_default__ok_nested_defaults__empty_rec2__d) = to_rep(((b).us_split_discrs3).rec__with_default__ok_nested_defaults__empty_rec2__d)) then true else false)

predicate in_range3(rec__with_default__ok_nested_defaults__empty_rec2__d1: int,
  a: us_split_discrs2) =
  (rec__with_default__ok_nested_defaults__empty_rec2__d1 = to_rep((a).rec__with_default__ok_nested_defaults__empty_rec2__d))

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic with_default__ok_nested_defaults__empty_rec2__d__first__bit : int

logic with_default__ok_nested_defaults__empty_rec2__d__last__bit : int

logic with_default__ok_nested_defaults__empty_rec2__d__position : int

axiom with_default__ok_nested_defaults__empty_rec2__d__first__bit_axiom :
  (0 <= with_default__ok_nested_defaults__empty_rec2__d__first__bit)

axiom with_default__ok_nested_defaults__empty_rec2__d__last__bit_axiom :
  (with_default__ok_nested_defaults__empty_rec2__d__first__bit <  with_default__ok_nested_defaults__empty_rec2__d__last__bit)

axiom with_default__ok_nested_defaults__empty_rec2__d__position_axiom :
  (0 <= with_default__ok_nested_defaults__empty_rec2__d__position)

logic user_eq5 : us_rep2, us_rep2 -> bool

logic dummy5 : us_rep2

type empty_rec2__ref = { empty_rec2__content : us_rep2
}

function empty_rec2__ref_empty_rec2__content__projection(a: empty_rec2__ref) : us_rep2 =
  (a).empty_rec2__content

type map__ref1 = { map__content1 : (int,us_rep2) farray
}

logic slide1 : (int,us_rep2) farray, int, int -> (int,us_rep2) farray

axiom slide_eq1 :
  (forall a:(int,us_rep2) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep2) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq7(a: (int,us_rep2) farray, a__first: int, a__last: int,
  b: (int,us_rep2) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_163:int. (((a__first <= temp___idx_163) and
  (temp___idx_163 <= a__last)) -> (bool_eq6((a[temp___idx_163]),
  (b[((b__first - a__first) + temp___idx_163)])) = true)))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_163:int. (((a__first <= temp___idx_163) and
  (temp___idx_163 <= a__last)) -> (bool_eq6((a[temp___idx_163]),
  (b[((b__first - a__first) + temp___idx_163)])) = true))))))

logic dummy6 : (int,us_rep2) farray

logic value__size4 : int

logic object__size4 : int

logic component__size1 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom4 : (0 <= alignment4)

logic user_eq6 : (int,us_rep2) farray, (int,us_rep2) farray -> bool

type us_split_fields2 = { rec__with_default__ok_nested_defaults__non_init2__e
: (int,us_rep2) farray; rec__with_default__ok_nested_defaults__non_init2__f :
natural
}

function us_split_fields_rec__with_default__ok_nested_defaults__non_init2__e__projection(a: us_split_fields2) : (int,us_rep2) farray =
  (a).rec__with_default__ok_nested_defaults__non_init2__e

function us_split_fields_rec__with_default__ok_nested_defaults__non_init2__f__projection(a: us_split_fields2) : natural =
  (a).rec__with_default__ok_nested_defaults__non_init2__f

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__14__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep3 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__14__projection(a: us_rep3) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq8(a: us_rep3, b: us_rep3) : bool =
  (if ((bool_eq7(((a).us_split_fields3).rec__with_default__ok_nested_defaults__non_init2__e,
  1, 100,
  ((b).us_split_fields3).rec__with_default__ok_nested_defaults__non_init2__e,
  1, 100) = true) and
  (to_rep1(((a).us_split_fields3).rec__with_default__ok_nested_defaults__non_init2__f) = to_rep1(((b).us_split_fields3).rec__with_default__ok_nested_defaults__non_init2__f))) then true else false)

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic with_default__ok_nested_defaults__non_init2__e__first__bit : int

logic with_default__ok_nested_defaults__non_init2__e__last__bit : int

logic with_default__ok_nested_defaults__non_init2__e__position : int

axiom with_default__ok_nested_defaults__non_init2__e__first__bit_axiom :
  (0 <= with_default__ok_nested_defaults__non_init2__e__first__bit)

axiom with_default__ok_nested_defaults__non_init2__e__last__bit_axiom :
  (with_default__ok_nested_defaults__non_init2__e__first__bit <  with_default__ok_nested_defaults__non_init2__e__last__bit)

axiom with_default__ok_nested_defaults__non_init2__e__position_axiom :
  (0 <= with_default__ok_nested_defaults__non_init2__e__position)

logic with_default__ok_nested_defaults__non_init2__f__first__bit : int

logic with_default__ok_nested_defaults__non_init2__f__last__bit : int

logic with_default__ok_nested_defaults__non_init2__f__position : int

axiom with_default__ok_nested_defaults__non_init2__f__first__bit_axiom :
  (0 <= with_default__ok_nested_defaults__non_init2__f__first__bit)

axiom with_default__ok_nested_defaults__non_init2__f__last__bit_axiom :
  (with_default__ok_nested_defaults__non_init2__f__first__bit <  with_default__ok_nested_defaults__non_init2__f__last__bit)

axiom with_default__ok_nested_defaults__non_init2__f__position_axiom :
  (0 <= with_default__ok_nested_defaults__non_init2__f__position)

logic user_eq7 : us_rep3, us_rep3 -> bool

logic dummy7 : us_rep3

type non_init2__ref = { non_init2__content : us_rep3
}

function non_init2__ref_non_init2__content__projection(a: non_init2__ref) : us_rep3 =
  (a).non_init2__content

logic attr__ATTRIBUTE_ADDRESS2 : int

type t37b

logic t37bqtint : t37b -> int

axiom t37bqtaxiom : (forall i:t37b. (1 <= t37bqtint(i)))

axiom t37bqtaxiom1 : (forall i:t37b. (t37bqtint(i) <= 100))

predicate in_range4(x: int) = ((1 <= x) and (x <= 100))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq8 : t37b, t37b -> bool

logic dummy8 : t37b

type t37b__ref = { t37b__content : t37b
}

function t37b__ref_t37b__content__projection(a: t37b__ref) : t37b =
  (a).t37b__content

predicate default_initial_assumption1(temp___expr_682: us_rep3,
  temp___skip_top_level_683: bool) =
  (forall temp___685:int. (((1 <= temp___685) and (temp___685 <= 100)) ->
  (to_rep((((((temp___expr_682).us_split_fields3).rec__with_default__ok_nested_defaults__non_init2__e[temp___685])).us_split_discrs3).rec__with_default__ok_nested_defaults__empty_rec2__d) = 1)))

predicate dynamic_invariant1(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range1(temp___expr_46))

predicate default_initial_assumption2(temp___expr_635: us_rep,
  temp___skip_top_level_636: bool) =
  (to_rep(((temp___expr_635).us_split_discrs1).rec__with_default__ok_nested_defaults__empty_rec1__d) = c)

predicate default_initial_assumption3(temp___expr_665: us_rep2,
  temp___skip_top_level_666: bool) =
  (to_rep(((temp___expr_665).us_split_discrs3).rec__with_default__ok_nested_defaults__empty_rec2__d) = 1)

 (* File "with_default.ads", line 26, characters 0-0 *)
goal defqtvc : (dynamic_invariant(c, true, false, true, true) ->
  ((0 <  length(1, 0)) -> in_range1(c)))
