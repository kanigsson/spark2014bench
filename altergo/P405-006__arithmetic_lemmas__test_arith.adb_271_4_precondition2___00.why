(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (div(x, y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((-abs_int(y)) <  mod(x,
  y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (mod(x, y) <  abs_int(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <  y) then (x % y) else ((x % y) + y))

logic sign : int -> int

logic sign__function_guard : int, int -> prop

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type small_integer

logic small_integerqtint : small_integer -> int

axiom small_integerqtaxiom :
  (forall i:small_integer. ((- 10000) <= small_integerqtint(i)))

axiom small_integerqtaxiom1 :
  (forall i:small_integer. (small_integerqtint(i) <= 10000))

predicate in_range3(x: int) = (((- 10000) <= x) and (x <= 10000))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : small_integer, small_integer -> bool

logic dummy3 : small_integer

type small_integer__ref = { small_integer__content : small_integer
}

function small_integer__ref_small_integer__content__projection(a: small_integer__ref) : small_integer =
  (a).small_integer__content

type small_natural

logic small_naturalqtint : small_natural -> int

axiom small_naturalqtaxiom :
  (forall i:small_natural. (0 <= small_naturalqtint(i)))

axiom small_naturalqtaxiom1 :
  (forall i:small_natural. (small_naturalqtint(i) <= 10000))

predicate in_range4(x: int) = ((0 <= x) and (x <= 10000))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : small_natural, small_natural -> bool

logic dummy4 : small_natural

type small_natural__ref = { small_natural__content : small_natural
}

function small_natural__ref_small_natural__content__projection(a: small_natural__ref) : small_natural =
  (a).small_natural__content

type small_positive

logic small_positiveqtint : small_positive -> int

axiom small_positiveqtaxiom :
  (forall i:small_positive. (1 <= small_positiveqtint(i)))

axiom small_positiveqtaxiom1 :
  (forall i:small_positive. (small_positiveqtint(i) <= 10000))

predicate in_range5(x: int) = ((1 <= x) and (x <= 10000))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : small_positive, small_positive -> bool

logic dummy5 : small_positive

type small_positive__ref = { small_positive__content : small_positive
}

function small_positive__ref_small_positive__content__projection(a: small_positive__ref) : small_positive =
  (a).small_positive__content

type very_small_natural

logic very_small_naturalqtint : very_small_natural -> int

axiom very_small_naturalqtaxiom :
  (forall i:very_small_natural. (0 <= very_small_naturalqtint(i)))

axiom very_small_naturalqtaxiom1 :
  (forall i:very_small_natural. (very_small_naturalqtint(i) <= 50))

predicate in_range6(x: int) = ((0 <= x) and (x <= 50))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : very_small_natural, very_small_natural -> bool

logic dummy6 : very_small_natural

type very_small_natural__ref = { very_small_natural__content :
very_small_natural
}

function very_small_natural__ref_very_small_natural__content__projection(a: very_small_natural__ref) : very_small_natural =
  (a).very_small_natural__content

type very_small_positive

logic very_small_positiveqtint : very_small_positive -> int

axiom very_small_positiveqtaxiom :
  (forall i:very_small_positive. (1 <= very_small_positiveqtint(i)))

axiom very_small_positiveqtaxiom1 :
  (forall i:very_small_positive. (very_small_positiveqtint(i) <= 50))

predicate in_range7(x: int) = ((1 <= x) and (x <= 50))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : very_small_positive, very_small_positive -> bool

logic dummy7 : very_small_positive

type very_small_positive__ref = { very_small_positive__content :
very_small_positive
}

function very_small_positive__ref_very_small_positive__content__projection(a: very_small_positive__ref) : very_small_positive =
  (a).very_small_positive__content

type very_very_small_natural

logic very_very_small_naturalqtint : very_very_small_natural -> int

axiom very_very_small_naturalqtaxiom :
  (forall i:very_very_small_natural. (0 <= very_very_small_naturalqtint(i)))

axiom very_very_small_naturalqtaxiom1 :
  (forall i:very_very_small_natural. (very_very_small_naturalqtint(i) <= 5))

predicate in_range8(x: int) = ((0 <= x) and (x <= 5))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : very_very_small_natural, very_very_small_natural -> bool

logic dummy8 : very_very_small_natural

type very_very_small_natural__ref = { very_very_small_natural__content :
very_very_small_natural
}

function very_very_small_natural__ref_very_very_small_natural__content__projection(a: very_very_small_natural__ref) : very_very_small_natural =
  (a).very_very_small_natural__content

predicate dynamic_invariant1(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

predicate dynamic_invariant2(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range2(temp___expr_46))

predicate dynamic_invariant3(temp___expr_180: int, temp___is_init_176: bool,
  temp___skip_constant_177: bool, temp___do_toplevel_178: bool,
  temp___do_typ_inv_179: bool) = (((temp___is_init_176 = true) or
  ((- 10000) <= 10000)) -> in_range3(temp___expr_180))

predicate dynamic_invariant4(temp___expr_187: int, temp___is_init_183: bool,
  temp___skip_constant_184: bool, temp___do_toplevel_185: bool,
  temp___do_typ_inv_186: bool) = (((temp___is_init_183 = true) or
  (0 <= 10000)) -> in_range4(temp___expr_187))

predicate dynamic_invariant5(temp___expr_194: int, temp___is_init_190: bool,
  temp___skip_constant_191: bool, temp___do_toplevel_192: bool,
  temp___do_typ_inv_193: bool) = (((temp___is_init_190 = true) or
  (1 <= 10000)) -> in_range5(temp___expr_194))

type sign_t

predicate in_range9(x: int) = ((0 <= x) and (x <= 2))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq9 : sign_t, sign_t -> bool

logic dummy9 : sign_t

type sign_t__ref = { sign_t__content : sign_t
}

function sign_t__ref_sign_t__content__projection(a: sign_t__ref) : sign_t =
  (a).sign_t__content

predicate dynamic_invariant6(temp___expr_201: int, temp___is_init_197: bool,
  temp___skip_constant_198: bool, temp___do_toplevel_199: bool,
  temp___do_typ_inv_200: bool) = (((temp___is_init_197 = true) or
  (0 <= 2)) -> in_range9(temp___expr_201))

axiom sign__post_axiom :
  (forall x:int [sign(x)]. (dynamic_invariant(x, true, true, true, true) ->
  (let result = sign(x) : int in (sign__function_guard(result, x) ->
  dynamic_invariant6(result, true, false, true, true)))))

axiom sign__def_axiom :
  (forall x:int [sign(x)]. (dynamic_invariant(x, true, true, true, true) ->
  (sign(x) = (if (x <  0) then 0 else (if (x = 0) then 1 else 2)))))

predicate dynamic_invariant7(temp___expr_231: int, temp___is_init_227: bool,
  temp___skip_constant_228: bool, temp___do_toplevel_229: bool,
  temp___do_typ_inv_230: bool) = (((temp___is_init_227 = true) or
  (0 <= 50)) -> in_range6(temp___expr_231))

predicate dynamic_invariant8(temp___expr_238: int, temp___is_init_234: bool,
  temp___skip_constant_235: bool, temp___do_toplevel_236: bool,
  temp___do_typ_inv_237: bool) = (((temp___is_init_234 = true) or
  (1 <= 50)) -> in_range7(temp___expr_238))

predicate dynamic_invariant9(temp___expr_245: int, temp___is_init_241: bool,
  temp___skip_constant_242: bool, temp___do_toplevel_243: bool,
  temp___do_typ_inv_244: bool) = (((temp___is_init_241 = true) or
  (0 <= 5)) -> in_range8(temp___expr_245))

axiom cdiv_cases :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((0 <  d) -> (div(n,
  d) = (n / d)))))

axiom cdiv_cases1 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((0 <  d) -> (div(n,
  d) = (-((-n) / d))))))

axiom cdiv_cases2 :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((d <  0) -> (div(n,
  d) = (-(n / (-d)))))))

axiom cdiv_cases3 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((d <  0) -> (div(n,
  d) = ((-n) / (-d))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))))

axiom cmod_cases1 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))))

axiom cmod_cases2 :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))))

axiom cmod_cases3 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d)))))))

 (* File "test_arith.adb", line 3, characters 0-0 *)
goal defqtvc :
  (forall x:int. forall y:int. forall z:int. forall r:int. forall s:int.
  (dynamic_invariant(x, false, false, true, true) -> (dynamic_invariant(y,
  false, false, true, true) -> (dynamic_invariant(z, false, false, true,
  true) -> (dynamic_invariant(r, false, false, true, true) ->
  (dynamic_invariant(s, false, false, true, true) ->
  (forall x1:int. ((x1 = 0) ->
  (forall y1:int. ((y1 = 1) ->
  (forall r1:int. (((r1 = 0) and dynamic_invariant(r1, true, true, true,
  true)) ->
  (forall x2:int. ((x2 = 1) ->
  (forall y2:int. ((y2 = 1) -> (in_range5(y2) -> (in_range5(x2) ->
  (forall r2:int. ((((x2 <= r2) and (y2 <= r2)) and dynamic_invariant(r2,
  true, true, true, true)) ->
  (forall x3:int. ((x3 = 0) ->
  (forall y3:int. ((y3 = 1) -> (in_range3(y3) -> (in_range3(x3) ->
  (forall r3:int. ((((r3 = 0) -> ((x3 = 0) or (y3 = 0))) and
  dynamic_invariant(r3, true, true, true, true)) ->
  (forall x4:int. ((x4 = 1) ->
  (forall y4:int. ((y4 = 1) -> (in_range3(y4) -> (in_range3(x4) ->
  (forall r4:int. ((((r4 = 0) -> ((x4 = 0) or (y4 = 0))) and
  dynamic_invariant(r4, true, true, true, true)) ->
  (forall x5:int. ((x5 = 45) ->
  (forall y5:int. ((y5 = 234) -> (in_range4(y5) -> (let o = (x5 + 34)
  : int in (in_range(o) -> (in_range4(o) -> (in_range4(x5) ->
  (forall r5:int. forall s1:int. (((r5 <= s1) and (dynamic_invariant(r5,
  true, true, true, true) and dynamic_invariant(s1, true, true, true,
  true))) ->
  (forall x6:int. ((x6 = 45) ->
  (forall y6:int. ((y6 = 234) -> (in_range5(y6) -> (let o1 = (x6 + 34)
  : int in (in_range(o1) -> (in_range4(o1) -> (in_range4(x6) ->
  (forall r6:int. forall s2:int. (((r6 <  s2) and (dynamic_invariant(r6,
  true, true, true, true) and dynamic_invariant(s2, true, true, true,
  true))) ->
  (forall x7:int. ((x7 = 45) ->
  (forall y7:int. ((y7 = 234) -> (let o2 = (y7 + 1) : int in (in_range(o2) ->
  (in_range5(o2) -> (in_range4(y7) -> (in_range4(x7) ->
  (forall r7:int. ((((0 <= r7) and (r7 <= x7)) and dynamic_invariant(r7,
  true, true, true, true)) ->
  (forall x8:int. ((x8 = 45) ->
  (forall y8:int. ((y8 = (- 234)) ->
  (forall z1:int. ((z1 = (- 2)) -> (in_range3(z1) -> (in_range3(y8) ->
  (in_range3(x8) ->
  (forall r8:int. forall s3:int. (((r8 = s3) and (dynamic_invariant(r8, true,
  true, true, true) and dynamic_invariant(s3, true, true, true, true))) ->
  (forall x9:int. ((x9 = 24) ->
  (forall y9:int. ((y9 = 45) ->
  (forall r9:int. ((((x9 <= r9) and (r9 <= y9)) and dynamic_invariant(r9,
  true, true, true, true)) ->
  (forall x10:int. ((x10 = 45) ->
  (forall y10:int. ((y10 = 24) -> (in_range5(y10) -> (in_range3(x10) ->
  (forall r10:int. ((((r10 = 0) -> (x10 <  abs_int(y10))) and
  dynamic_invariant(r10, true, true, true, true)) ->
  (forall x11:int. ((x11 = 24) ->
  (forall y11:int. ((y11 = 45) -> (in_range5(y11) -> (in_range3(x11) ->
  (forall r11:int. ((((r11 = 0) -> (x11 <  abs_int(y11))) and
  dynamic_invariant(r11, true, true, true, true)) ->
  (forall x12:int. ((x12 = 24) ->
  (forall y12:int. ((y12 = 45) ->
  (forall z2:int. ((z2 = 3) -> (in_range5(z2) -> (in_range4(y12) ->
  (in_range4(x12) ->
  (forall r12:int. forall s4:int. (((r12 <= s4) and (dynamic_invariant(r12,
  true, true, true, true) and dynamic_invariant(s4, true, true, true,
  true))) ->
  (forall x13:int. ((x13 = 24) ->
  (forall y13:int. ((y13 = 45) -> (in_range5(y13) -> (in_range5(x13) ->
  (forall r13:int. (((r13 = x13) and dynamic_invariant(r13, true, true, true,
  true)) ->
  (forall x14:int. ((x14 = 24) ->
  (forall y14:int. ((y14 = 45) -> (in_range5(y14) -> (in_range1(x14) ->
  (forall r14:int. ((((((x14 - y14) + 1) <= r14) and (r14 <= x14)) and
  dynamic_invariant(r14, true, true, true, true)) ->
  (forall x15:int. ((x15 = 24) ->
  (forall y15:int. ((y15 = 45) ->
  (forall z3:int. ((z3 = 2046) -> (in_range1(z3) -> (in_range2(y15) ->
  (in_range1(x15) ->
  (forall r15:int. (((r15 <= z3) and dynamic_invariant(r15, true, true, true,
  true)) ->
  (forall x16:int. ((x16 = (- 2356)) ->
  (forall y16:int. ((y16 = (- 45)) -> (in_range3(y16) -> (in_range3(x16) ->
  (forall r16:int. (((abs_int(r16) <  abs_int(y16)) and
  dynamic_invariant(r16, true, true, true, true)) ->
  (forall x17:int. ((x17 = (- 2356)) ->
  (forall y17:int. ((y17 = (- 45)) -> (in_range3(y17) -> (in_range3(x17) ->
  (not (y17 = 0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
