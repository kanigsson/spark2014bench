(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

type my_int

logic my_intqtint : my_int -> int

axiom my_intqtaxiom : (forall i:my_int. (0 <= my_intqtint(i)))

axiom my_intqtaxiom1 : (forall i:my_int. (my_intqtint(i) <= 10000))

predicate in_range3(x: int) = ((0 <= x) and (x <= 10000))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : my_int, my_int -> bool

logic dummy2 : my_int

type my_int__ref = { my_int__content : my_int
}

function my_int__ref_my_int__content__projection(a: my_int__ref) : my_int =
  (a).my_int__content

function to_rep(x: my_int) : int = my_intqtint(x)

logic of_rep : int -> my_int

axiom inversion_axiom :
  (forall x:my_int [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:my_int [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__pricing__item__price : my_int;
rec__pricing__item__number : my_int
}

function us_split_fields_rec__pricing__item__price__projection(a: us_split_fields) : my_int =
  (a).rec__pricing__item__price

function us_split_fields_rec__pricing__item__number__projection(a: us_split_fields) : my_int =
  (a).rec__pricing__item__number

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq4(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_fields1).rec__pricing__item__price) = to_rep(((b).us_split_fields1).rec__pricing__item__price)) and
  (to_rep(((a).us_split_fields1).rec__pricing__item__number) = to_rep(((b).us_split_fields1).rec__pricing__item__number))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic pricing__item__price__first__bit : int

logic pricing__item__price__last__bit : int

logic pricing__item__price__position : int

axiom pricing__item__price__first__bit_axiom :
  (0 <= pricing__item__price__first__bit)

axiom pricing__item__price__last__bit_axiom :
  (pricing__item__price__first__bit <  pricing__item__price__last__bit)

axiom pricing__item__price__position_axiom :
  (0 <= pricing__item__price__position)

logic pricing__item__number__first__bit : int

logic pricing__item__number__last__bit : int

logic pricing__item__number__position : int

axiom pricing__item__number__first__bit_axiom :
  (0 <= pricing__item__number__first__bit)

axiom pricing__item__number__last__bit_axiom :
  (pricing__item__number__first__bit <  pricing__item__number__last__bit)

axiom pricing__item__number__position_axiom :
  (0 <= pricing__item__number__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type item__ref = { item__content : us_rep
}

function item__ref_item__content__projection(a: item__ref) : us_rep =
  (a).item__content

logic price_of_item : us_rep -> int

logic price_of_item__function_guard : int, us_rep -> prop

logic mult : int, int -> int

logic mult__function_guard : int, int, int -> prop

predicate dynamic_invariant(temp___expr_163: int, temp___is_init_159: bool,
  temp___skip_constant_160: bool, temp___do_toplevel_161: bool,
  temp___do_typ_inv_162: bool) = (((temp___is_init_159 = true) or
  (0 <= 10000)) -> in_range3(temp___expr_163))

axiom price_of_item__post_axiom :
  (forall it:us_rep.
  mult__function_guard(mult(to_rep(((it).us_split_fields1).rec__pricing__item__price),
  to_rep(((it).us_split_fields1).rec__pricing__item__number)),
  to_rep(((it).us_split_fields1).rec__pricing__item__price),
  to_rep(((it).us_split_fields1).rec__pricing__item__number)))

axiom price_of_item__post_axiom1 :
  (forall it:us_rep [price_of_item(it)]. (let result = price_of_item(it)
  : int in (price_of_item__function_guard(result, it) ->
  (result = mult(to_rep(((it).us_split_fields1).rec__pricing__item__price),
  to_rep(((it).us_split_fields1).rec__pricing__item__number))))))

axiom price_of_item__post_axiom2 :
  (forall it:us_rep [price_of_item(it)]. (let result = price_of_item(it)
  : int in (price_of_item__function_guard(result, it) ->
  dynamic_invariant(result, true, false, true, true))))

axiom price_of_item__def_axiom :
  (forall it:us_rep.
  mult__function_guard(mult(to_rep(((it).us_split_fields1).rec__pricing__item__price),
  to_rep(((it).us_split_fields1).rec__pricing__item__number)),
  to_rep(((it).us_split_fields1).rec__pricing__item__price),
  to_rep(((it).us_split_fields1).rec__pricing__item__number)))

axiom price_of_item__def_axiom1 :
  (forall it:us_rep [price_of_item(it)].
  (price_of_item(it) = mult(to_rep(((it).us_split_fields1).rec__pricing__item__price),
  to_rep(((it).us_split_fields1).rec__pricing__item__number))))

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq5(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) -> (bool_eq4((a[temp___idx_156]),
  (b[((b__first - a__first) + temp___idx_156)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) -> (bool_eq4((a[temp___idx_156]),
  (b[((b__first - a__first) + temp___idx_156)])) = true))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,us_rep) farray; rt : t
}

function to_array(a: us_t) : (int,us_rep) farray = (a).elts

function of_array(a: (int,us_rep) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size1 : int

logic object__size1 : int

logic component__size : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom1 : (0 <= alignment1)

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : us_t

type basket__ref = { basket__content : us_t
}

function basket__ref_basket__content__projection(a: basket__ref) : us_t =
  (a).basket__content

logic bk : us_t

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic bool_eq7 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq7(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq7(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length1(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

logic add : int, int -> int

logic add__function_guard : int, int, int -> prop

axiom add__post_axiom :
  (forall x:int. forall y:int [add(x, y)]. ((dynamic_invariant(x, true, true,
  true, true) and dynamic_invariant(y, true, true, true, true)) ->
  (let result = add(x, y) : int in (add__function_guard(result, x, y) ->
  (((x + y) <  10000) -> (result = (x + y)))))))

axiom add__post_axiom1 :
  (forall x:int. forall y:int [add(x, y)]. ((dynamic_invariant(x, true, true,
  true, true) and dynamic_invariant(y, true, true, true, true)) ->
  (let result = add(x, y) : int in (add__function_guard(result, x, y) ->
  ((not ((x + y) <  10000)) -> ((10000 <= (x + y)) -> (result = 10000)))))))

axiom add__post_axiom2 :
  (forall x:int. forall y:int [add(x, y)]. ((dynamic_invariant(x, true, true,
  true, true) and dynamic_invariant(y, true, true, true, true)) ->
  (let result = add(x, y) : int in (add__function_guard(result, x, y) ->
  dynamic_invariant(result, true, false, true, true)))))

predicate dynamic_invariant1(temp___expr_183: us_t, temp___is_init_179: bool,
  temp___skip_constant_180: bool, temp___do_toplevel_181: bool,
  temp___do_typ_inv_182: bool) = ((not (temp___skip_constant_180 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_183),
  last1(temp___expr_183)))

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy5 : integer

type t3b__ref = { t3b__content : integer
}

function t3b__ref_t3b__content__projection(a: t3b__ref) : integer =
  (a).t3b__content

predicate dynamic_invariant2(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range2(temp___expr_46))

predicate dynamic_invariant3(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

axiom mult__post_axiom :
  (forall x:int. forall y:int [mult(x, y)]. ((dynamic_invariant(x, true,
  true, true, true) and dynamic_invariant(y, true, true, true, true)) ->
  (let result = mult(x, y) : int in (mult__function_guard(result, x, y) ->
  (((x * y) <  10000) -> (result = (x * y)))))))

axiom mult__post_axiom1 :
  (forall x:int. forall y:int [mult(x, y)]. ((dynamic_invariant(x, true,
  true, true, true) and dynamic_invariant(y, true, true, true, true)) ->
  (let result = mult(x, y) : int in (mult__function_guard(result, x, y) ->
  ((not ((x * y) <  10000)) -> ((10000 <= (x * y)) -> (result = 10000)))))))

axiom mult__post_axiom2 :
  (forall x:int. forall y:int [mult(x, y)]. ((dynamic_invariant(x, true,
  true, true, true) and dynamic_invariant(y, true, true, true, true)) ->
  (let result = mult(x, y) : int in (mult__function_guard(result, x, y) ->
  dynamic_invariant(result, true, false, true, true)))))

 (* File "pricing.ads", line 27, characters 0-0 *)
goal defqtvc : (dynamic_invariant1(bk, true, false, true, true) ->
  (forall total:int. ((total = 0) -> (dynamic_invariant(total, true, false,
  true, true) -> (let temp___203 = first1(bk) : int in
  (forall it:int. ((it = temp___203) ->
  ((andb((if (temp___203 <= it) then true else false),
  (if (it <= last1(bk)) then true else false)) = true) ->
  (forall usf:int. (let o = (it - 1) : int in (in_range1(o) ->
  ((andb((if (first1(bk) <= usf) then true else false),
  (if (usf <= o) then true else false)) = true) -> (first1(bk) <= usf)))))))))))))
