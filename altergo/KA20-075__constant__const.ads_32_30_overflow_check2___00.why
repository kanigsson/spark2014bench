(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

logic a : int

logic attr__ATTRIBUTE_ADDRESS : int

logic b : int

logic attr__ATTRIBUTE_ADDRESS1 : int

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a1:(int,integer) farray.
  (forall first:int [slide(a1, first, first)]. (slide(a1, first,
  first) = a1)))

axiom slide_def :
  (forall a1:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a1, old_first, new_first)[i])]. ((slide(a1,
  old_first, new_first)[i]) = (a1[(i - (new_first - old_first))]))))))

function bool_eq1(a1: (int,integer) farray, a__first: int, a__last: int,
  b1: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a1[temp___idx_154])) = to_rep((b1[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a1:(int,integer) farray. forall b1:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b1, b__first, b__last, a1, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a1:(int,integer) farray. forall b1:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b1, b__first, b__last, a1, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a1:(int,integer) farray. forall b1:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b1, b__first, b__last, a1, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a1:(int,integer) farray. forall b1:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b1, b__first, b__last, a1, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a1[temp___idx_154])) = to_rep((b1[((b__first - a__first) + temp___idx_154)]))))))))

logic c : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS2 : int

logic c2 : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS3 : int

logic d : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS4 : int

logic d2 : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS5 : int

type us_split_fields = { rec__const__te__x : integer; rec__const__te__y :
integer
}

function us_split_fields_rec__const__te__x__projection(a1: us_split_fields) : integer =
  (a1).rec__const__te__x

function us_split_fields_rec__const__te__y__projection(a1: us_split_fields) : integer =
  (a1).rec__const__te__y

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a1: us_split_fields__ref) : us_split_fields =
  (a1).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a1: us_rep) : us_split_fields =
  (a1).us_split_fields1

function bool_eq2(a1: us_rep, b1: us_rep) : bool =
  (if ((to_rep(((a1).us_split_fields1).rec__const__te__x) = to_rep(((b1).us_split_fields1).rec__const__te__x)) and
  (to_rep(((a1).us_split_fields1).rec__const__te__y) = to_rep(((b1).us_split_fields1).rec__const__te__y))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic const__te__x__first__bit : int

logic const__te__x__last__bit : int

logic const__te__x__position : int

axiom const__te__x__first__bit_axiom : (0 <= const__te__x__first__bit)

axiom const__te__x__last__bit_axiom :
  (const__te__x__first__bit <  const__te__x__last__bit)

axiom const__te__x__position_axiom : (0 <= const__te__x__position)

logic const__te__y__first__bit : int

logic const__te__y__last__bit : int

logic const__te__y__position : int

axiom const__te__y__first__bit_axiom : (0 <= const__te__y__first__bit)

axiom const__te__y__last__bit_axiom :
  (const__te__y__first__bit <  const__te__y__last__bit)

axiom const__te__y__position_axiom : (0 <= const__te__y__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type te__ref = { te__content : us_rep
}

function te__ref_te__content__projection(a1: te__ref) : us_rep =
  (a1).te__content

logic e : us_rep

logic attr__ATTRIBUTE_ADDRESS6 : int

logic f : us_rep

logic attr__ATTRIBUTE_ADDRESS7 : int

logic g : us_rep

logic attr__ATTRIBUTE_ADDRESS8 : int

logic fi : unit -> int

logic fi__function_guard : int, unit -> prop

axiom fi__post_axiom :
  (forall us_void_param:unit [fi(us_void_param)]. (let result =
  fi(us_void_param) : int in (fi__function_guard(result, us_void_param) ->
  dynamic_invariant(result, true, false, true, true))))

axiom fi__def_axiom :
  (forall us_void_param:unit [fi(us_void_param)]. (fi(us_void_param) = 1))

logic i : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic j : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic fk : unit -> int

logic fk__function_guard : int, unit -> prop

axiom fk__post_axiom :
  (forall us_void_param:unit [fk(us_void_param)]. (let result =
  fk(us_void_param) : int in (fk__function_guard(result, us_void_param) ->
  dynamic_invariant(result, true, false, true, true))))

axiom fk__def_axiom :
  (forall us_void_param:unit [fk(us_void_param)]. (fk(us_void_param) = 1))

logic k : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic l : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic fm : int -> int

logic fm__function_guard : int, int -> prop

axiom fm__post_axiom :
  (forall x:int [fm(x)]. (dynamic_invariant(x, true, true, true, true) ->
  (let result = fm(x) : int in (fm__function_guard(result, x) ->
  dynamic_invariant(result, true, false, true, true)))))

axiom fm__def_axiom :
  (forall x:int [fm(x)]. (dynamic_invariant(x, true, true, true, true) ->
  (fm(x) = x)))

logic m : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic n : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic attr__ATTRIBUTE_ADDRESS15 : int

logic p : int

logic attr__ATTRIBUTE_ADDRESS16 : int

logic const__c__aggregate_def : int -> (int,integer) farray

logic const__c2__aggregate_def : int -> (int,integer) farray

logic const__d__aggregate_def : int, int -> (int,integer) farray

logic const__d2__aggregate_def : int, int -> (int,integer) farray

axiom a__def_axiom : (a = 1)

axiom b__def_axiom : (b = 1)

axiom c__def_axiom : (c = const__c__aggregate_def(1))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 1)

axiom def_axiom :
  (forall temp___156:int. (dynamic_invariant(temp___156, true, true, true,
  true) ->
  (forall temp___157:int.
  ((const__c__aggregate_def(temp___156)[temp___157]) = rliteral))))

axiom c2__def_axiom : (c2 = const__c2__aggregate_def(1))

axiom def_axiom1 :
  (forall temp___159:int. (dynamic_invariant(temp___159, true, true, true,
  true) ->
  (forall temp___160:int.
  ((const__c2__aggregate_def(temp___159)[temp___160]) = rliteral))))

axiom d__def_axiom : (d = const__d__aggregate_def(1, 1))

axiom def_axiom2 :
  (forall temp___162:int. forall temp___163:int.
  ((dynamic_invariant(temp___162, true, true, true, true) and
  dynamic_invariant(temp___163, true, true, true, true)) ->
  ((const__d__aggregate_def(temp___162, temp___163)[1]) = rliteral)))

axiom def_axiom3 :
  (forall temp___162:int. forall temp___163:int.
  ((dynamic_invariant(temp___162, true, true, true, true) and
  dynamic_invariant(temp___163, true, true, true, true)) ->
  ((const__d__aggregate_def(temp___162, temp___163)[2]) = rliteral)))

axiom d2__def_axiom : (d2 = const__d2__aggregate_def(1, 1))

axiom def_axiom4 :
  (forall temp___166:int. forall temp___167:int.
  ((dynamic_invariant(temp___166, true, true, true, true) and
  dynamic_invariant(temp___167, true, true, true, true)) ->
  ((const__d2__aggregate_def(temp___166, temp___167)[1]) = rliteral)))

axiom def_axiom5 :
  (forall temp___166:int. forall temp___167:int.
  ((dynamic_invariant(temp___166, true, true, true, true) and
  dynamic_invariant(temp___167, true, true, true, true)) ->
  ((const__d2__aggregate_def(temp___166, temp___167)[2]) = rliteral)))

axiom e__def_axiom : (e = { us_split_fields1 = { rec__const__te__x =
  rliteral; rec__const__te__y = rliteral } })

axiom f__def_axiom : (f = { us_split_fields1 = { rec__const__te__x =
  rliteral; rec__const__te__y = rliteral } })

axiom g__def_axiom : (g = { us_split_fields1 = { rec__const__te__x =
  rliteral; rec__const__te__y = rliteral } })

axiom i__def_axiom : fi__function_guard(fi(void), void)

axiom i__def_axiom1 : (i = fi(void))

axiom j__def_axiom : fi__function_guard(fi(void), void)

axiom j__def_axiom1 : (j = ((2 * fi(void)) - 1))

axiom k__def_axiom : fk__function_guard(fk(void), void)

axiom k__def_axiom1 : (k = fk(void))

axiom l__def_axiom : fk__function_guard(fk(void), void)

axiom l__def_axiom1 : (l = ((2 * fk(void)) - 1))

axiom m__def_axiom : fm__function_guard(fm(1), 1)

axiom m__def_axiom1 : (m = fm(1))

axiom n__def_axiom : fm__function_guard(fm(1), 1)

axiom n__def_axiom1 : (n = ((2 * fm(1)) - 1))

 (* File "const.ads", line 1, characters 0-0 *)
goal defqtvc : (dynamic_invariant(a, true, false, true, true) ->
  (dynamic_invariant(b, true, false, true, true) ->
  ((const__c__aggregate_def(1) = c) -> ((const__c2__aggregate_def(1) = c2) ->
  ((const__d__aggregate_def(1, 1) = d) -> ((const__d2__aggregate_def(1,
  1) = d2) -> (({ us_split_fields1 = { rec__const__te__x = rliteral;
  rec__const__te__y = rliteral } } = e) -> (({ us_split_fields1 = {
  rec__const__te__x = rliteral; rec__const__te__y = rliteral } } = f) -> (({
  us_split_fields1 = { rec__const__te__x = rliteral; rec__const__te__y =
  rliteral } } = g) -> (let const__i__assume = fi(void) : int in
  ((fi__function_guard(const__i__assume, void) and
  (dynamic_invariant(const__i__assume, true, false, true, true) and
  (const__i__assume = 1))) -> ((const__i__assume = i) ->
  (dynamic_invariant(i, true, false, true, true) -> (let o = fi(void)
  : int in ((fi__function_guard(o, void) and (dynamic_invariant(o, true,
  false, true, true) and (o = 1))) -> (let o1 = (2 * o) : int in
  (in_range(o1) -> (let o2 = (o1 - 1) : int in (in_range(o2) -> ((o2 = j) ->
  (dynamic_invariant(j, true, false, true, true) -> (let const__k__assume =
  fk(void) : int in ((fk__function_guard(const__k__assume, void) and
  (dynamic_invariant(const__k__assume, true, false, true, true) and
  (const__k__assume = 1))) -> ((const__k__assume = k) ->
  (dynamic_invariant(k, true, false, true, true) -> (let o3 = fk(void)
  : int in ((fk__function_guard(o3, void) and (dynamic_invariant(o3, true,
  false, true, true) and (o3 = 1))) -> (let o4 = (2 * o3) : int in
  (in_range(o4) -> (let o5 = (o4 - 1) : int in (in_range(o5) -> ((o5 = l) ->
  (dynamic_invariant(l, true, false, true, true) -> (let const__m__assume =
  fm(1) : int in ((fm__function_guard(const__m__assume, 1) and
  (dynamic_invariant(const__m__assume, true, false, true, true) and
  (const__m__assume = 1))) -> ((const__m__assume = m) ->
  (dynamic_invariant(m, true, false, true, true) -> (let o6 = fm(1) : int in
  ((fm__function_guard(o6, 1) and (dynamic_invariant(o6, true, false, true,
  true) and (o6 = 1))) ->
  in_range((2 * o6)))))))))))))))))))))))))))))))))))))))))
