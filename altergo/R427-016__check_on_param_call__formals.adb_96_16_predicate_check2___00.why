(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (div(x, y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((-abs_int(y)) <  mod(x,
  y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (mod(x, y) <  abs_int(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <  y) then (x % y) else ((x % y) + y))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq1(a: (int,natural) farray, a__first: int, a__last: int,
  b: (int,natural) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

predicate dynamic_invariant(temp___expr_201: (int,natural) farray,
  temp___is_init_197: bool, temp___skip_constant_198: bool,
  temp___do_toplevel_199: bool, temp___do_typ_inv_200: bool) =
  ((temp___do_toplevel_199 = true) -> ((temp___is_init_197 = true) ->
  (not (to_rep((temp___expr_201[3])) = 0))))

predicate dynamic_predicate(temp___208: (int,natural) farray) =
  (not (to_rep((temp___208[3])) = 0))

predicate dynamic_invariant1(temp___expr_224: (int,natural) farray,
  temp___is_init_220: bool, temp___skip_constant_221: bool,
  temp___do_toplevel_222: bool, temp___do_typ_inv_223: bool) =
  ((temp___do_toplevel_222 = true) -> ((temp___is_init_220 = true) ->
  (not (to_rep((temp___expr_224[3])) = 0))))

predicate dynamic_predicate1(temp___231: (int,natural) farray) =
  (not (to_rep((temp___231[3])) = 0))

type constr_int

logic constr_intqtint : constr_int -> int

axiom constr_intqtaxiom :
  (forall i:constr_int. ((- 10) <= constr_intqtint(i)))

axiom constr_intqtaxiom1 : (forall i:constr_int. (constr_intqtint(i) <= 10))

predicate in_range1(x: int) = (((- 10) <= x) and (x <= 10))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : constr_int, constr_int -> bool

logic dummy1 : constr_int

type constr_int__ref = { constr_int__content : constr_int
}

function constr_int__ref_constr_int__content__projection(a: constr_int__ref) : constr_int =
  (a).constr_int__content

predicate dynamic_invariant2(temp___expr_214: int, temp___is_init_210: bool,
  temp___skip_constant_211: bool, temp___do_toplevel_212: bool,
  temp___do_typ_inv_213: bool) = ((((temp___is_init_210 = true) or
  ((- 10) <= 10)) -> in_range1(temp___expr_214)) and
  ((temp___do_toplevel_212 = true) -> ((temp___is_init_210 = true) ->
  ((((- 10) <= temp___expr_214) and (temp___expr_214 <= (- 1))) or
  ((1 <= temp___expr_214) and (temp___expr_214 <= 10))))))

predicate dynamic_predicate2(temp___218: int) = ((((- 10) <= temp___218) and
  (temp___218 <= (- 1))) or ((1 <= temp___218) and (temp___218 <= 10)))

type constr_int_2

logic constr_int_2qtint : constr_int_2 -> int

axiom constr_int_2qtaxiom :
  (forall i:constr_int_2. ((- 10) <= constr_int_2qtint(i)))

axiom constr_int_2qtaxiom1 :
  (forall i:constr_int_2. (constr_int_2qtint(i) <= 10))

predicate in_range2(x: int) = (((- 10) <= x) and (x <= 10))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : constr_int_2, constr_int_2 -> bool

logic dummy2 : constr_int_2

type constr_int_2__ref = { constr_int_2__content : constr_int_2
}

function constr_int_2__ref_constr_int_2__content__projection(a: constr_int_2__ref) : constr_int_2 =
  (a).constr_int_2__content

predicate dynamic_invariant3(temp___expr_237: int, temp___is_init_233: bool,
  temp___skip_constant_234: bool, temp___do_toplevel_235: bool,
  temp___do_typ_inv_236: bool) = ((((temp___is_init_233 = true) or
  ((- 10) <= 10)) -> in_range2(temp___expr_237)) and
  ((temp___do_toplevel_235 = true) -> ((temp___is_init_233 = true) ->
  ((((- 10) <= temp___expr_237) and (temp___expr_237 <= (- 1))) or
  ((1 <= temp___expr_237) and (temp___expr_237 <= 10))))))

predicate dynamic_predicate3(temp___241: int) = ((((- 10) <= temp___241) and
  (temp___241 <= (- 1))) or ((1 <= temp___241) and (temp___241 <= 10)))

type my_int

logic my_intqtint : my_int -> int

axiom my_intqtaxiom : (forall i:my_int. ((- 10) <= my_intqtint(i)))

axiom my_intqtaxiom1 : (forall i:my_int. (my_intqtint(i) <= 10))

predicate in_range3(x: int) = (((- 10) <= x) and (x <= 10))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : my_int, my_int -> bool

logic dummy3 : my_int

type my_int__ref = { my_int__content : my_int
}

function my_int__ref_my_int__content__projection(a: my_int__ref) : my_int =
  (a).my_int__content

predicate dynamic_invariant4(temp___expr_194: int, temp___is_init_190: bool,
  temp___skip_constant_191: bool, temp___do_toplevel_192: bool,
  temp___do_typ_inv_193: bool) = (((temp___is_init_190 = true) or
  ((- 10) <= 10)) -> in_range3(temp___expr_194))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

function to_rep1(x: my_int) : int = my_intqtint(x)

logic of_rep1 : int -> my_int

axiom inversion_axiom1 :
  (forall x:my_int [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:my_int [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

function to_rep2(x: constr_int) : int = constr_intqtint(x)

logic of_rep2 : int -> constr_int

axiom inversion_axiom2 :
  (forall x:constr_int [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:constr_int [to_rep2(x)]. in_range1(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range1(x) ->
  (to_rep2(of_rep2(x)) = x)))

function to_rep3(x: constr_int_2) : int = constr_int_2qtint(x)

logic of_rep3 : int -> constr_int_2

axiom inversion_axiom3 :
  (forall x:constr_int_2 [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:constr_int_2 [to_rep3(x)]. in_range2(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range2(x) ->
  (to_rep3(of_rep3(x)) = x)))

predicate dynamic_predicate4(temp___243: (int,natural) farray) =
  (not (to_rep((temp___243[3])) = 0))

predicate dynamic_predicate5(temp___245: (int,natural) farray) =
  (not (to_rep((temp___245[3])) = 0))

logic formals__x__aggregate_def : int -> (int,natural) farray

logic formals__y__aggregate_def : int -> (int,natural) farray

logic formals__u__aggregate_def : int -> (int,natural) farray

predicate dynamic_invariant5(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_39))

logic rliteral : natural

axiom rliteral_axiom : (naturalqtint(rliteral) = 1)

axiom def_axiom :
  (forall temp___248:int. (dynamic_invariant5(temp___248, true, true, true,
  true) ->
  (forall temp___249:int.
  ((formals__x__aggregate_def(temp___248)[temp___249]) = rliteral))))

axiom def_axiom1 :
  (forall temp___251:int. (dynamic_invariant5(temp___251, true, true, true,
  true) ->
  (forall temp___252:int.
  ((formals__y__aggregate_def(temp___251)[temp___252]) = rliteral))))

axiom def_axiom2 :
  (forall temp___256:int. (dynamic_invariant5(temp___256, true, true, true,
  true) ->
  (forall temp___257:int.
  ((formals__u__aggregate_def(temp___256)[temp___257]) = rliteral))))

axiom cdiv_cases :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((0 <  d) -> (div(n,
  d) = (n / d)))))

axiom cdiv_cases1 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((0 <  d) -> (div(n,
  d) = (-((-n) / d))))))

axiom cdiv_cases2 :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((d <  0) -> (div(n,
  d) = (-(n / (-d)))))))

axiom cdiv_cases3 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((d <  0) -> (div(n,
  d) = ((-n) / (-d))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))))

axiom cmod_cases1 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))))

axiom cmod_cases2 :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))))

axiom cmod_cases3 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d)))))))

 (* File "formals.adb", line 1, characters 0-0 *)
goal defqtvc :
  (forall x:(int,natural) farray. ((x = formals__x__aggregate_def(1)) ->
  (let temp___253 = formals__y__aggregate_def(1) : (int,natural) farray in
  (dynamic_predicate4(temp___253) -> (dynamic_predicate(temp___253) ->
  (forall y:(int,natural) farray. ((y = temp___253) -> (dynamic_invariant(y,
  true, false, true, true) -> (let temp___258 = formals__u__aggregate_def(1)
  : (int,natural) farray in (dynamic_predicate5(temp___258) ->
  (dynamic_predicate1(temp___258) ->
  (forall u:(int,natural) farray. ((u = temp___258) -> (dynamic_invariant1(u,
  true, false, true, true) ->
  (forall z:int. ((z = 1) -> (dynamic_invariant4(z, true, false, true,
  true) -> (((((- 10) <= 1) and (1 <= (- 1))) or ((1 <= 1) and (1 <= 10))) ->
  (forall w:int. ((w = 1) -> (dynamic_invariant2(w, true, false, true,
  true) -> (((((- 10) <= 1) and (1 <= (- 1))) or ((1 <= 1) and (1 <= 10))) ->
  (forall v:int. ((v = 1) -> (dynamic_invariant3(v, true, false, true,
  true) -> (((((- 10) <= z) and (z <= (- 1))) or ((1 <= z) and (z <= 10))) ->
  (forall formals__p__3__a:int. (dynamic_invariant2(formals__p__3__a, true,
  true, true, true) ->
  (forall z1:int. ((z1 = formals__p__3__a) ->
  (forall z2:int. (dynamic_invariant4(z2, true, true, true, true) ->
  (forall z3:int. (dynamic_invariant4(z3, true, true, true, true) ->
  (((((- 10) <= z3) and (z3 <= (- 1))) or ((1 <= z3) and (z3 <= 10))) ->
  (forall formals__p__3__a1:int. (dynamic_invariant2(formals__p__3__a1, true,
  true, true, true) ->
  (forall z4:int. ((z4 = formals__p__3__a1) ->
  (forall z5:int. (dynamic_invariant4(z5, true, true, true, true) ->
  (((((- 10) <= z5) and (z5 <= (- 1))) or ((1 <= z5) and (z5 <= 10))) ->
  (forall formals__p__3__a2:int. (dynamic_invariant2(formals__p__3__a2, true,
  true, true, true) ->
  (forall o:my_int. ((to_rep1(o) = formals__p__3__a2) ->
  (forall o1:int. ((to_rep1(o) = o1) ->
  (forall z6:int. ((z6 = o1) ->
  (forall w1:int. (dynamic_invariant2(w1, true, true, true, true) ->
  (forall formals__p2__2__a:int. (dynamic_invariant4(formals__p2__2__a, true,
  true, true, true) ->
  (forall temp___270:constr_int.
  ((to_rep2(temp___270) = formals__p2__2__a) -> (let temp___272 =
  to_rep2(temp___270) : int in ((((- 10) <= temp___272) and
  (temp___272 <= (- 1))) or ((1 <= temp___272) and (temp___272 <= 10))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
