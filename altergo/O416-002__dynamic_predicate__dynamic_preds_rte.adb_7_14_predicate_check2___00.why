(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

type small

logic smallqtint : small -> int

axiom smallqtaxiom : (forall i:small. (0 <= smallqtint(i)))

axiom smallqtaxiom1 : (forall i:small. (smallqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : small, small -> bool

logic dummy1 : small

type small__ref = { small__content : small
}

function small__ref_small__content__projection(a: small__ref) : small =
  (a).small__content

function to_rep(x: small) : int = smallqtint(x)

logic of_rep : int -> small

axiom inversion_axiom : (forall x:small [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:small [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type very_small

logic very_smallqtint : very_small -> int

axiom very_smallqtaxiom : (forall i:very_small. (0 <= very_smallqtint(i)))

axiom very_smallqtaxiom1 :
  (forall i:very_small. (very_smallqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : very_small, very_small -> bool

logic dummy2 : very_small

type very_small__ref = { very_small__content : very_small
}

function very_small__ref_very_small__content__projection(a: very_small__ref) : very_small =
  (a).very_small__content

function to_rep1(x: very_small) : int = very_smallqtint(x)

logic of_rep1 : int -> very_small

axiom inversion_axiom1 :
  (forall x:very_small [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:very_small [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__dynamic_preds_rte__small_pair__a : small;
rec__dynamic_preds_rte__small_pair__b : very_small
}

function us_split_fields_rec__dynamic_preds_rte__small_pair__a__projection(a: us_split_fields) : small =
  (a).rec__dynamic_preds_rte__small_pair__a

function us_split_fields_rec__dynamic_preds_rte__small_pair__b__projection(a: us_split_fields) : very_small =
  (a).rec__dynamic_preds_rte__small_pair__b

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_fields1).rec__dynamic_preds_rte__small_pair__a) = to_rep(((b).us_split_fields1).rec__dynamic_preds_rte__small_pair__a)) and
  (to_rep1(((a).us_split_fields1).rec__dynamic_preds_rte__small_pair__b) = to_rep1(((b).us_split_fields1).rec__dynamic_preds_rte__small_pair__b))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic dynamic_preds_rte__small_pair__a__first__bit : int

logic dynamic_preds_rte__small_pair__a__last__bit : int

logic dynamic_preds_rte__small_pair__a__position : int

axiom dynamic_preds_rte__small_pair__a__first__bit_axiom :
  (0 <= dynamic_preds_rte__small_pair__a__first__bit)

axiom dynamic_preds_rte__small_pair__a__last__bit_axiom :
  (dynamic_preds_rte__small_pair__a__first__bit <  dynamic_preds_rte__small_pair__a__last__bit)

axiom dynamic_preds_rte__small_pair__a__position_axiom :
  (0 <= dynamic_preds_rte__small_pair__a__position)

logic dynamic_preds_rte__small_pair__b__first__bit : int

logic dynamic_preds_rte__small_pair__b__last__bit : int

logic dynamic_preds_rte__small_pair__b__position : int

axiom dynamic_preds_rte__small_pair__b__first__bit_axiom :
  (0 <= dynamic_preds_rte__small_pair__b__first__bit)

axiom dynamic_preds_rte__small_pair__b__last__bit_axiom :
  (dynamic_preds_rte__small_pair__b__first__bit <  dynamic_preds_rte__small_pair__b__last__bit)

axiom dynamic_preds_rte__small_pair__b__position_axiom :
  (0 <= dynamic_preds_rte__small_pair__b__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type small_pair__ref = { small_pair__content : us_rep
}

function small_pair__ref_small_pair__content__projection(a: small_pair__ref) : us_rep =
  (a).small_pair__content

logic attr__ATTRIBUTE_ADDRESS : int

predicate dynamic_invariant1(temp___expr_185: us_rep,
  temp___is_init_181: bool, temp___skip_constant_182: bool,
  temp___do_toplevel_183: bool, temp___do_typ_inv_184: bool) =
  (((temp___is_init_181 = true) ->
  ((2 * to_rep(((temp___expr_185).us_split_fields1).rec__dynamic_preds_rte__small_pair__a)) <  100000)) and
  ((temp___is_init_181 = true) -> (let temp___187 =
  ((temp___expr_185).us_split_fields1).rec__dynamic_preds_rte__small_pair__b
  : very_small in ((to_rep1(temp___187) * to_rep1(temp___187)) <  100000))))

logic y : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic i3s : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic i5s : int

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_invariant2(temp___expr_165: int, temp___is_init_161: bool,
  temp___skip_constant_162: bool, temp___do_toplevel_163: bool,
  temp___do_typ_inv_164: bool) = ((((temp___is_init_161 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_165)) and
  ((temp___do_toplevel_163 = true) -> ((temp___is_init_161 = true) ->
  ((2 * temp___expr_165) <  100000))))

predicate dynamic_predicate(temp___169: int) = ((2 * temp___169) <  100000)

predicate dynamic_invariant3(temp___expr_175: int, temp___is_init_171: bool,
  temp___skip_constant_172: bool, temp___do_toplevel_173: bool,
  temp___do_typ_inv_174: bool) = ((((temp___is_init_171 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_175)) and
  ((temp___do_toplevel_173 = true) -> ((temp___is_init_171 = true) ->
  ((temp___expr_175 * temp___expr_175) <  100000))))

predicate dynamic_predicate1(temp___179: int) =
  ((temp___179 * temp___179) <  100000)

 (* File "dynamic_preds_rte.ads", line 21, characters 0-0 *)
goal defqtvc :
  (forall x__split_fields:us_split_fields. (dynamic_invariant2(i3s, true,
  false, true, true) -> (dynamic_invariant3(i5s, true, false, true, true) ->
  (dynamic_invariant2(i3s, true, false, true, true) ->
  (dynamic_invariant3(i5s, true, false, true, true) -> (dynamic_invariant1({
  us_split_fields1 = x__split_fields }, false, false, true, true) ->
  (dynamic_invariant(y, true, false, true, true) -> (let o = y : int in
  (in_range1(o) -> (((2 * o) <  100000) ->
  (forall o1:small. ((to_rep(o1) = o) ->
  (forall x__split_fields1:us_split_fields. ((x__split_fields1 = {
  rec__dynamic_preds_rte__small_pair__a = o1;
  rec__dynamic_preds_rte__small_pair__b =
  (x__split_fields).rec__dynamic_preds_rte__small_pair__b }) -> (let o2 = y
  : int in (in_range2(o2) -> ((o2 * o2) <  100000)))))))))))))))))
