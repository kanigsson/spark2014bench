(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

logic attr__ATTRIBUTE_ADDRESS : int

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic dummy1 : (int,integer) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq1 : (int,integer) farray, (int,integer) farray -> bool

type map__ref1 = { map__content1 : (int,(int,integer) farray) farray
}

logic slide1 : (int,(int,integer) farray) farray, int,
  int -> (int,(int,integer) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,integer) farray) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,(int,integer) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,(int,integer) farray) farray, a__first: int,
  a__last: int, b: (int,(int,integer) farray) farray, b__first: int,
  b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq2((a[temp___idx_155]), 1, 2,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 2) = true)))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,(int,integer) farray) farray.
  forall b:(int,(int,integer) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,(int,integer) farray) farray.
  forall b:(int,(int,integer) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,(int,integer) farray) farray.
  forall b:(int,(int,integer) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,(int,integer) farray) farray.
  forall b:(int,(int,integer) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq2((a[temp___idx_155]), 1, 2,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 2) = true))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic b : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type ta2D1

logic ta2D1qtint : ta2D1 -> int

axiom ta2D1qtaxiom : (forall i:ta2D1. (1 <= ta2D1qtint(i)))

axiom ta2D1qtaxiom1 : (forall i:ta2D1. (ta2D1qtint(i) <= 2))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : ta2D1, ta2D1 -> bool

logic dummy2 : ta2D1

type ta2D1__ref = { ta2D1__content : ta2D1
}

function ta2D1__ref_ta2D1__content__projection(a: ta2D1__ref) : ta2D1 =
  (a).ta2D1__content

logic temp_____aggregate_def_396 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

logic temp_____aggregate_def_401 : int, int -> (int,integer) farray

logic temp_____aggregate_def_406 : int, int -> (int,integer) farray

logic temp_____aggregate_def_411 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

logic temp_____aggregate_def_416 : int -> (int,integer) farray

logic temp_____aggregate_def_420 : int -> (int,integer) farray

logic temp_____aggregate_def_424 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

logic temp_____aggregate_def_429 : int, int -> (int,integer) farray

logic temp_____aggregate_def_434 : int, int -> (int,integer) farray

logic temp_____aggregate_def_439 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

logic temp_____aggregate_def_444 : int, int -> (int,integer) farray

logic temp_____aggregate_def_449 : int, int -> (int,integer) farray

logic temp_____aggregate_def_454 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

logic temp_____aggregate_def_459 : int, int -> (int,integer) farray

logic temp_____aggregate_def_464 : int, int -> (int,integer) farray

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 2)

axiom def_axiom :
  (forall temp___403:int. forall temp___404:int.
  ((dynamic_invariant(temp___403, true, true, true, true) and
  dynamic_invariant(temp___404, true, true, true, true)) ->
  (to_rep((temp_____aggregate_def_401(temp___403,
  temp___404)[1])) = temp___403)))

axiom def_axiom1 :
  (forall temp___403:int. forall temp___404:int.
  ((dynamic_invariant(temp___403, true, true, true, true) and
  dynamic_invariant(temp___404, true, true, true, true)) ->
  ((temp_____aggregate_def_401(temp___403, temp___404)[2]) = rliteral)))

axiom def_axiom2 :
  (forall temp___398:(int,integer) farray.
  forall temp___399:(int,integer) farray.
  ((temp_____aggregate_def_396(temp___398, temp___399)[1]) = temp___398))

axiom def_axiom3 :
  (forall temp___398:(int,integer) farray.
  forall temp___399:(int,integer) farray.
  ((temp_____aggregate_def_396(temp___398, temp___399)[2]) = temp___399))

axiom def_axiom4 :
  (forall temp___408:int. forall temp___409:int.
  ((dynamic_invariant(temp___408, true, true, true, true) and
  dynamic_invariant(temp___409, true, true, true, true)) ->
  (to_rep((temp_____aggregate_def_406(temp___408,
  temp___409)[1])) = temp___408)))

axiom def_axiom5 :
  (forall temp___408:int. forall temp___409:int.
  ((dynamic_invariant(temp___408, true, true, true, true) and
  dynamic_invariant(temp___409, true, true, true, true)) ->
  ((temp_____aggregate_def_406(temp___408, temp___409)[2]) = rliteral)))

axiom def_axiom6 :
  (forall temp___413:(int,integer) farray.
  forall temp___414:(int,integer) farray.
  (forall temp___415:int. ((temp___415 = 2) ->
  ((temp_____aggregate_def_411(temp___413,
  temp___414)[temp___415]) = temp___413))))

axiom def_axiom7 :
  (forall temp___413:(int,integer) farray.
  forall temp___414:(int,integer) farray.
  (forall temp___415:int. ((not (temp___415 = 2)) ->
  ((temp_____aggregate_def_411(temp___413,
  temp___414)[temp___415]) = temp___414))))

axiom def_axiom8 :
  (forall temp___418:int. (dynamic_invariant(temp___418, true, true, true,
  true) ->
  (forall temp___419:int.
  (to_rep((temp_____aggregate_def_416(temp___418)[temp___419])) = temp___418))))

axiom def_axiom9 :
  (forall temp___422:int. (dynamic_invariant(temp___422, true, true, true,
  true) ->
  (forall temp___423:int.
  (to_rep((temp_____aggregate_def_420(temp___422)[temp___423])) = temp___422))))

axiom def_axiom10 :
  (forall temp___431:int. forall temp___432:int.
  ((dynamic_invariant(temp___431, true, true, true, true) and
  dynamic_invariant(temp___432, true, true, true, true)) ->
  (forall temp___433:int. ((temp___433 = 1) ->
  (to_rep((temp_____aggregate_def_429(temp___431,
  temp___432)[temp___433])) = temp___431)))))

axiom def_axiom11 :
  (forall temp___431:int. forall temp___432:int.
  ((dynamic_invariant(temp___431, true, true, true, true) and
  dynamic_invariant(temp___432, true, true, true, true)) ->
  (forall temp___433:int. ((not (temp___433 = 1)) ->
  (to_rep((temp_____aggregate_def_429(temp___431,
  temp___432)[temp___433])) = temp___432)))))

axiom def_axiom12 :
  (forall temp___426:(int,integer) farray.
  forall temp___427:(int,integer) farray.
  ((temp_____aggregate_def_424(temp___426, temp___427)[1]) = temp___426))

axiom def_axiom13 :
  (forall temp___426:(int,integer) farray.
  forall temp___427:(int,integer) farray.
  ((temp_____aggregate_def_424(temp___426, temp___427)[2]) = temp___427))

logic rliteral1 : integer

axiom rliteral_axiom1 : (integerqtint(rliteral1) = 1)

axiom def_axiom14 :
  (forall temp___436:int. forall temp___437:int.
  ((dynamic_invariant(temp___436, true, true, true, true) and
  dynamic_invariant(temp___437, true, true, true, true)) ->
  (forall temp___438:int. ((temp___438 = 1) ->
  ((temp_____aggregate_def_434(temp___436,
  temp___437)[temp___438]) = rliteral1)))))

axiom def_axiom15 :
  (forall temp___436:int. forall temp___437:int.
  ((dynamic_invariant(temp___436, true, true, true, true) and
  dynamic_invariant(temp___437, true, true, true, true)) ->
  (forall temp___438:int. ((not (temp___438 = 1)) ->
  (to_rep((temp_____aggregate_def_434(temp___436,
  temp___437)[temp___438])) = temp___437)))))

axiom def_axiom16 :
  (forall temp___441:(int,integer) farray.
  forall temp___442:(int,integer) farray.
  ((temp_____aggregate_def_439(temp___441, temp___442)[1]) = temp___441))

axiom def_axiom17 :
  (forall temp___441:(int,integer) farray.
  forall temp___442:(int,integer) farray.
  ((temp_____aggregate_def_439(temp___441, temp___442)[2]) = temp___442))

axiom def_axiom18 :
  (forall temp___446:int. forall temp___447:int.
  ((dynamic_invariant(temp___446, true, true, true, true) and
  dynamic_invariant(temp___447, true, true, true, true)) ->
  (forall temp___448:int. ((temp___448 = 1) ->
  ((temp_____aggregate_def_444(temp___446,
  temp___447)[temp___448]) = rliteral)))))

axiom def_axiom19 :
  (forall temp___446:int. forall temp___447:int.
  ((dynamic_invariant(temp___446, true, true, true, true) and
  dynamic_invariant(temp___447, true, true, true, true)) ->
  (forall temp___448:int. ((not (temp___448 = 1)) ->
  (to_rep((temp_____aggregate_def_444(temp___446,
  temp___447)[temp___448])) = temp___447)))))

axiom def_axiom20 :
  (forall temp___451:int. forall temp___452:int.
  ((dynamic_invariant(temp___451, true, true, true, true) and
  dynamic_invariant(temp___452, true, true, true, true)) ->
  (forall temp___453:int. ((temp___453 = 1) ->
  ((temp_____aggregate_def_449(temp___451,
  temp___452)[temp___453]) = rliteral)))))

axiom def_axiom21 :
  (forall temp___451:int. forall temp___452:int.
  ((dynamic_invariant(temp___451, true, true, true, true) and
  dynamic_invariant(temp___452, true, true, true, true)) ->
  (forall temp___453:int. ((not (temp___453 = 1)) ->
  (to_rep((temp_____aggregate_def_449(temp___451,
  temp___452)[temp___453])) = temp___452)))))

axiom def_axiom22 :
  (forall temp___456:(int,integer) farray.
  forall temp___457:(int,integer) farray.
  ((temp_____aggregate_def_454(temp___456, temp___457)[2]) = temp___456))

axiom def_axiom23 :
  (forall temp___456:(int,integer) farray.
  forall temp___457:(int,integer) farray.
  ((temp_____aggregate_def_454(temp___456, temp___457)[1]) = temp___457))

axiom def_axiom24 :
  (forall temp___461:int. forall temp___462:int.
  ((dynamic_invariant(temp___461, true, true, true, true) and
  dynamic_invariant(temp___462, true, true, true, true)) ->
  (forall temp___463:int. ((temp___463 = 1) ->
  ((temp_____aggregate_def_459(temp___461,
  temp___462)[temp___463]) = rliteral)))))

axiom def_axiom25 :
  (forall temp___461:int. forall temp___462:int.
  ((dynamic_invariant(temp___461, true, true, true, true) and
  dynamic_invariant(temp___462, true, true, true, true)) ->
  (forall temp___463:int. ((not (temp___463 = 1)) ->
  (to_rep((temp_____aggregate_def_459(temp___461,
  temp___462)[temp___463])) = temp___462)))))

axiom def_axiom26 :
  (forall temp___466:int. forall temp___467:int.
  ((dynamic_invariant(temp___466, true, true, true, true) and
  dynamic_invariant(temp___467, true, true, true, true)) ->
  (forall temp___468:int. ((temp___468 = 2) ->
  ((temp_____aggregate_def_464(temp___466,
  temp___467)[temp___468]) = rliteral)))))

axiom def_axiom27 :
  (forall temp___466:int. forall temp___467:int.
  ((dynamic_invariant(temp___466, true, true, true, true) and
  dynamic_invariant(temp___467, true, true, true, true)) ->
  (forall temp___468:int. ((not (temp___468 = 2)) ->
  (to_rep((temp_____aggregate_def_464(temp___466,
  temp___467)[temp___468])) = temp___467)))))

 (* File "arr_aggregate.ads", line 22, characters 0-0 *)
goal defqtvc :
  (forall one:int.
  (forall one1:int. ((one1 = one) -> (dynamic_invariant(one, true, false,
  true, true) -> (dynamic_invariant(b, true, false, true, true) ->
  ((one = 1) ->
  (forall a:(int,(int,integer) farray) farray.
  ((exists spark__branch:bool.
   ((spark__branch = (if (b = 1) then true else false)) and
   (if (spark__branch = true) then (a = temp_____aggregate_def_396(temp_____aggregate_def_401(one,
   2), temp_____aggregate_def_406(one,
   2))) else (exists spark__branch1:bool.
             ((spark__branch1 = (if (b = 2) then true else false)) and
             (if (spark__branch1 = true) then (a = temp_____aggregate_def_411(temp_____aggregate_def_416(one),
             temp_____aggregate_def_420(one))) else (exists spark__branch2:bool.
                                                    ((spark__branch2 = (if (b = 3) then true else false)) and
                                                    (if (spark__branch2 = true) then (a = temp_____aggregate_def_424(temp_____aggregate_def_429(one,
                                                    one),
                                                    temp_____aggregate_def_434(1,
                                                    one))) else (exists spark__branch3:bool.
                                                                ((spark__branch3 = (if (b = 4) then true else false)) and
                                                                (if (spark__branch3 = true) then (a = temp_____aggregate_def_439(temp_____aggregate_def_444(2,
                                                                one),
                                                                temp_____aggregate_def_449(2,
                                                                one))) else (a = temp_____aggregate_def_454(temp_____aggregate_def_459(2,
                                                                one),
                                                                temp_____aggregate_def_464(2,
                                                                one))))))))))))))) ->
  ((b = 1) ->
  (forall j:int. (((1 <= j) and (j <= 2)) -> (to_rep(((a[j])[one])) = one))))))))))))
