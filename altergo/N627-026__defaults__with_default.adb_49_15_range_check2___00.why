(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic c : int

logic attr__ATTRIBUTE_ADDRESS : int

type tscalar_with_defaultB

logic tscalar_with_defaultBqtint : tscalar_with_defaultB -> int

axiom tscalar_with_defaultBqtaxiom :
  (forall i:tscalar_with_defaultB.
  ((- 2147483648) <= tscalar_with_defaultBqtint(i)))

axiom tscalar_with_defaultBqtaxiom1 :
  (forall i:tscalar_with_defaultB.
  (tscalar_with_defaultBqtint(i) <= 2147483647))

predicate in_range4(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : tscalar_with_defaultB, tscalar_with_defaultB -> bool

logic dummy3 : tscalar_with_defaultB

type tscalar_with_defaultB__ref = { tscalar_with_defaultB__content :
tscalar_with_defaultB
}

function tscalar_with_defaultB__ref_tscalar_with_defaultB__content__4__projection(a: tscalar_with_defaultB__ref) : tscalar_with_defaultB =
  (a).tscalar_with_defaultB__content

function to_rep2(x: tscalar_with_defaultB) : int =
  tscalar_with_defaultBqtint(x)

logic of_rep2 : int -> tscalar_with_defaultB

axiom inversion_axiom2 :
  (forall x:tscalar_with_defaultB [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:tscalar_with_defaultB [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

logic first : int

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : tscalar_with_defaultB, tscalar_with_defaultB -> bool

logic dummy4 : tscalar_with_defaultB

type scalar_bad_default__ref = { scalar_bad_default__content :
tscalar_with_defaultB
}

function scalar_bad_default__ref_scalar_bad_default__content__4__projection(a: scalar_bad_default__ref) : tscalar_with_defaultB =
  (a).scalar_bad_default__content

type map__ref = { map__content : (int,tscalar_with_defaultB) farray
}

logic slide : (int,tscalar_with_defaultB) farray, int,
  int -> (int,tscalar_with_defaultB) farray

axiom slide_eq :
  (forall a:(int,tscalar_with_defaultB) farray.
  (forall first1:int [slide(a, first1, first1)]. (slide(a, first1,
  first1) = a)))

axiom slide_def :
  (forall a:(int,tscalar_with_defaultB) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq7(a: (int,tscalar_with_defaultB) farray, a__first: int,
  a__last: int, b: (int,tscalar_with_defaultB) farray, b__first: int,
  b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_158:int. (((a__first <= temp___idx_158) and
  (temp___idx_158 <= a__last)) ->
  (to_rep2((a[temp___idx_158])) = to_rep2((b[((b__first - a__first) + temp___idx_158)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,tscalar_with_defaultB) farray.
  forall b:(int,tscalar_with_defaultB) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,tscalar_with_defaultB) farray.
  forall b:(int,tscalar_with_defaultB) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,tscalar_with_defaultB) farray.
  forall b:(int,tscalar_with_defaultB) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,tscalar_with_defaultB) farray.
  forall b:(int,tscalar_with_defaultB) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_158:int. (((a__first <= temp___idx_158) and
  (temp___idx_158 <= a__last)) ->
  (to_rep2((a[temp___idx_158])) = to_rep2((b[((b__first - a__first) + temp___idx_158)]))))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic first1 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy5 : integer

type scalar_no_default__ref = { scalar_no_default__content : integer
}

function scalar_no_default__ref_scalar_no_default__content__3__projection(a: scalar_no_default__ref) : integer =
  (a).scalar_no_default__content

type map__ref1 = { map__content1 : (int,integer) farray
}

logic slide1 : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq1 :
  (forall a:(int,integer) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq9(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_159:int. (((a__first <= temp___idx_159) and
  (temp___idx_159 <= a__last)) ->
  (to_rep1((a[temp___idx_159])) = to_rep1((b[((b__first - a__first) + temp___idx_159)])))))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_159:int. (((a__first <= temp___idx_159) and
  (temp___idx_159 <= a__last)) ->
  (to_rep1((a[temp___idx_159])) = to_rep1((b[((b__first - a__first) + temp___idx_159)]))))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic no_def__first : integer

logic no_def__last : integer

logic attr__ATTRIBUTE_ADDRESS3 : int

type map__ref2 = { map__content2 : (int,natural) farray
}

logic slide2 : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq2 :
  (forall a:(int,natural) farray.
  (forall first2:int [slide2(a, first2, first2)]. (slide2(a, first2,
  first2) = a)))

axiom slide_def2 :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq10(a: (int,natural) farray, a__first: int, a__last: int,
  b: (int,natural) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) ->
  (to_rep((a[temp___idx_157])) = to_rep((b[((b__first - a__first) + temp___idx_157)])))))) then true else false)

axiom bool_eq_rev8 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq10(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev9 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq10(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev10 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq10(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev11 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq10(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) ->
  (to_rep((a[temp___idx_157])) = to_rep((b[((b__first - a__first) + temp___idx_157)]))))))))

logic attr__ATTRIBUTE_ADDRESS4 : int

type scalar_with_default

logic scalar_with_defaultqtint : scalar_with_default -> int

axiom scalar_with_defaultqtaxiom :
  (forall i:scalar_with_default. (0 <= scalar_with_defaultqtint(i)))

axiom scalar_with_defaultqtaxiom1 :
  (forall i:scalar_with_default. (scalar_with_defaultqtint(i) <= 2147483647))

predicate in_range5(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq6 : scalar_with_default, scalar_with_default -> bool

logic dummy6 : scalar_with_default

type scalar_with_default__ref = { scalar_with_default__content :
scalar_with_default
}

function scalar_with_default__ref_scalar_with_default__content__4__projection(a: scalar_with_default__ref) : scalar_with_default =
  (a).scalar_with_default__content

function to_rep3(x: scalar_with_default) : int = scalar_with_defaultqtint(x)

logic of_rep3 : int -> scalar_with_default

axiom inversion_axiom3 :
  (forall x:scalar_with_default [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:scalar_with_default [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

type map__ref3 = { map__content3 : (int,scalar_with_default) farray
}

logic slide3 : (int,scalar_with_default) farray, int,
  int -> (int,scalar_with_default) farray

axiom slide_eq3 :
  (forall a:(int,scalar_with_default) farray.
  (forall first2:int [slide3(a, first2, first2)]. (slide3(a, first2,
  first2) = a)))

axiom slide_def3 :
  (forall a:(int,scalar_with_default) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq12(a: (int,scalar_with_default) farray, a__first: int,
  a__last: int, b: (int,scalar_with_default) farray, b__first: int,
  b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep3((a[temp___idx_156])) = to_rep3((b[((b__first - a__first) + temp___idx_156)])))))) then true else false)

axiom bool_eq_rev12 :
  (forall a:(int,scalar_with_default) farray.
  forall b:(int,scalar_with_default) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev13 :
  (forall a:(int,scalar_with_default) farray.
  forall b:(int,scalar_with_default) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev14 :
  (forall a:(int,scalar_with_default) farray.
  forall b:(int,scalar_with_default) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev15 :
  (forall a:(int,scalar_with_default) farray.
  forall b:(int,scalar_with_default) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep3((a[temp___idx_156])) = to_rep3((b[((b__first - a__first) + temp___idx_156)]))))))))

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

type t

logic first2 : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  (to_rep1(first2(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first3(a: us_t) : int = to_rep1(first2((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length1(a: us_t) : int =
  (if (first3(a) <= last1(a)) then ((last1(a) - first3(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq13(x: us_t, y: us_t) : bool = bool_eq9((x).elts,
  to_rep1(first2((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first2((y).rt)), to_rep1(last((y).rt)))

logic user_eq7 : us_t, us_t -> bool

logic dummy7 : us_t

type array_bad_default2__ref = { array_bad_default2__content : us_t
}

function array_bad_default2__ref_array_bad_default2__content__2__projection(a: array_bad_default2__ref) : us_t =
  (a).array_bad_default2__content

predicate dynamic_invariant1(temp___expr_312: (int,tscalar_with_defaultB) farray,
  temp___is_init_308: bool, temp___skip_constant_309: bool,
  temp___do_toplevel_310: bool, temp___do_typ_inv_311: bool) =
  (forall temp___313:int. (((1 <= temp___313) and (temp___313 <= 0)) ->
  (((temp___is_init_308 = true) or (first <= 2147483647)) ->
  dynamic_property(first, 2147483647,
  to_rep2((temp___expr_312[temp___313]))))))

predicate default_initial_assumption(temp___expr_314: (int,tscalar_with_defaultB) farray,
  temp___skip_top_level_315: bool) =
  (forall temp___316:int. (((1 <= temp___316) and (temp___316 <= 0)) ->
  (to_rep2((temp___expr_314[temp___316])) = 0)))

predicate dynamic_invariant2(temp___expr_322: (int,integer) farray,
  temp___is_init_318: bool, temp___skip_constant_319: bool,
  temp___do_toplevel_320: bool, temp___do_typ_inv_321: bool) =
  (forall temp___323:int. (((1 <= temp___323) and (temp___323 <= 0)) ->
  (((temp___is_init_318 = true) or (first1 <= 2147483647)) ->
  dynamic_property1(first1, 2147483647,
  to_rep1((temp___expr_322[temp___323]))))))

predicate default_initial_assumption1(temp___expr_324: (int,integer) farray,
  temp___skip_top_level_325: bool) =
  (forall temp___326:int. (((1 <= temp___326) and (temp___326 <= 0)) ->
  (to_rep1((temp___expr_324[temp___326])) = 0)))

type t17b

logic t17bqtint : t17b -> int

axiom t17bqtaxiom : (forall i:t17b. (1 <= t17bqtint(i)))

axiom t17bqtaxiom1 : (forall i:t17b. (t17bqtint(i) <= 100))

predicate in_range6(x: int) = ((1 <= x) and (x <= 100))

function bool_eq14(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : t17b, t17b -> bool

logic dummy8 : t17b

type t17b__ref = { t17b__content : t17b
}

function t17b__ref_t17b__content__projection(a: t17b__ref) : t17b =
  (a).t17b__content

type tTall_0SP1

logic tTall_0SP1qtint : tTall_0SP1 -> int

axiom tTall_0SP1qtaxiom : (forall i:tTall_0SP1. (1 <= tTall_0SP1qtint(i)))

axiom tTall_0SP1qtaxiom1 : (forall i:tTall_0SP1. (tTall_0SP1qtint(i) <= 100))

predicate in_range7(x: int) = ((1 <= x) and (x <= 100))

function bool_eq15(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq9 : tTall_0SP1, tTall_0SP1 -> bool

logic dummy9 : tTall_0SP1

type tTall_0SP1__ref = { tTall_0SP1__content : tTall_0SP1
}

function tTall_0SP1__ref_tTall_0SP1__content__projection(a: tTall_0SP1__ref) : tTall_0SP1 =
  (a).tTall_0SP1__content

predicate default_initial_assumption2(temp___expr_343: (int,scalar_with_default) farray,
  temp___skip_top_level_344: bool) =
  (forall temp___345:int. (((1 <= temp___345) and (temp___345 <= 100)) ->
  (to_rep3((temp___expr_343[temp___345])) = 0)))

type tTall_1SP1

logic tTall_1SP1qtint : tTall_1SP1 -> int

axiom tTall_1SP1qtaxiom : (forall i:tTall_1SP1. (1 <= tTall_1SP1qtint(i)))

axiom tTall_1SP1qtaxiom1 : (forall i:tTall_1SP1. (tTall_1SP1qtint(i) <= 100))

predicate in_range8(x: int) = ((1 <= x) and (x <= 100))

function bool_eq16(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq10 : tTall_1SP1, tTall_1SP1 -> bool

logic dummy10 : tTall_1SP1

type tTall_1SP1__ref = { tTall_1SP1__content : tTall_1SP1
}

function tTall_1SP1__ref_tTall_1SP1__content__projection(a: tTall_1SP1__ref) : tTall_1SP1 =
  (a).tTall_1SP1__content

predicate default_initial_assumption3(temp___expr_353: (int,natural) farray,
  temp___skip_top_level_354: bool) =
  (forall temp___355:int. (((1 <= temp___355) and (temp___355 <= 100)) ->
  (to_rep((temp___expr_353[temp___355])) = 1)))

type tTall_2SP1

logic tTall_2SP1qtint : tTall_2SP1 -> int

axiom tTall_2SP1qtaxiom : (forall i:tTall_2SP1. (1 <= tTall_2SP1qtint(i)))

axiom tTall_2SP1qtaxiom1 : (forall i:tTall_2SP1. (tTall_2SP1qtint(i) <= 100))

predicate in_range9(x: int) = ((1 <= x) and (x <= 100))

function bool_eq17(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq11 : tTall_2SP1, tTall_2SP1 -> bool

logic dummy11 : tTall_2SP1

type tTall_2SP1__ref = { tTall_2SP1__content : tTall_2SP1
}

function tTall_2SP1__ref_tTall_2SP1__content__projection(a: tTall_2SP1__ref) : tTall_2SP1 =
  (a).tTall_2SP1__content

predicate dynamic_invariant3(temp___expr_360: (int,tscalar_with_defaultB) farray,
  temp___is_init_356: bool, temp___skip_constant_357: bool,
  temp___do_toplevel_358: bool, temp___do_typ_inv_359: bool) =
  (forall temp___361:int. (((1 <= temp___361) and (temp___361 <= 100)) ->
  (((temp___is_init_356 = true) or (first <= 2147483647)) ->
  dynamic_property(first, 2147483647,
  to_rep2((temp___expr_360[temp___361]))))))

predicate default_initial_assumption4(temp___expr_362: (int,tscalar_with_defaultB) farray,
  temp___skip_top_level_363: bool) =
  (forall temp___364:int. (((1 <= temp___364) and (temp___364 <= 100)) ->
  (to_rep2((temp___expr_362[temp___364])) = 2)))

logic with_default__ok_array__no_def__aggregate_def : int -> (int,integer) farray

predicate dynamic_invariant4(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range2(temp___expr_46))

predicate dynamic_invariant5(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range3(temp___expr_18))

predicate dynamic_invariant6(temp___expr_255: int, temp___is_init_251: bool,
  temp___skip_constant_252: bool, temp___do_toplevel_253: bool,
  temp___do_typ_inv_254: bool) = (((temp___is_init_251 = true) or
  (0 <= 2147483647)) -> in_range5(temp___expr_255))

predicate dynamic_invariant7(temp___expr_262: int, temp___is_init_258: bool,
  temp___skip_constant_259: bool, temp___do_toplevel_260: bool,
  temp___do_typ_inv_261: bool) = (((temp___is_init_258 = true) or
  (first <= 2147483647)) -> dynamic_property(first, 2147483647,
  temp___expr_262))

axiom first__def_axiom : (first = c)

predicate dynamic_invariant8(temp___expr_269: int, temp___is_init_265: bool,
  temp___skip_constant_266: bool, temp___do_toplevel_267: bool,
  temp___do_typ_inv_268: bool) = (((temp___is_init_265 = true) or
  (first1 <= 2147483647)) -> dynamic_property1(first1, 2147483647,
  temp___expr_269))

axiom first__def_axiom1 : (first1 = c)

predicate dynamic_invariant9(temp___expr_306: us_t, temp___is_init_302: bool,
  temp___skip_constant_303: bool, temp___do_toplevel_304: bool,
  temp___do_typ_inv_305: bool) = (((not (temp___skip_constant_303 = true)) ->
  dynamic_property2(1, 2147483647, first3(temp___expr_306),
  last1(temp___expr_306))) and
  (forall temp___307:int. (((first3(temp___expr_306) <= temp___307) and
  (temp___307 <= last1(temp___expr_306))) -> (((temp___is_init_302 = true) or
  (first1 <= 2147483647)) -> dynamic_property1(first1, 2147483647,
  to_rep1((to_array(temp___expr_306)[temp___307])))))))

axiom def_axiom :
  (forall temp___695:int. (dynamic_invariant8(temp___695, true, true, true,
  true) ->
  (forall temp___696:int.
  (to_rep1((with_default__ok_array__no_def__aggregate_def(temp___695)[temp___696])) = temp___695))))

 (* File "with_default.ads", line 11, characters 0-0 *)
goal defqtvc : (dynamic_invariant(c, true, false, true, true) -> ((c <= 2) ->
  ((c <= 2147483647) -> (0 <= c))))
