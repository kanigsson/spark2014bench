(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : count_type, count_type -> bool

logic dummy : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

function to_rep(x: count_type) : int = count_typeqtint(x)

logic of_rep : int -> count_type

axiom inversion_axiom :
  (forall x:count_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:count_type [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__p__my_sets__set__capacity : count_type
}

function us_split_discrs_rec__p__my_sets__set__capacity__projection(a: us_split_discrs) : count_type =
  (a).rec__p__my_sets__set__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__p__my_sets__set : us_main_type
}

function us_split_fields_rec__p__my_sets__set__projection(a: us_split_fields) : us_main_type =
  (a).rec__p__my_sets__set

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__p__my_sets__set__capacity) = to_rep(((b).us_split_discrs1).rec__p__my_sets__set__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__p__my_sets__set,
  ((b).us_split_fields1).rec__p__my_sets__set) = true)) then true else false)

predicate in_range2(rec__p__my_sets__set__capacity1: int,
  a: us_split_discrs) =
  (rec__p__my_sets__set__capacity1 = to_rep((a).rec__p__my_sets__set__capacity))

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic p__my_sets__set__capacity__first__bit : int

logic p__my_sets__set__capacity__last__bit : int

logic p__my_sets__set__capacity__position : int

axiom p__my_sets__set__capacity__first__bit_axiom :
  (0 <= p__my_sets__set__capacity__first__bit)

axiom p__my_sets__set__capacity__last__bit_axiom :
  (p__my_sets__set__capacity__first__bit <  p__my_sets__set__capacity__last__bit)

axiom p__my_sets__set__capacity__position_axiom :
  (0 <= p__my_sets__set__capacity__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type set__ref = { set__content : us_rep
}

function set__ref_set__content__projection(a: set__ref) : us_rep =
  (a).set__content

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep1

logic bool_eq3 : us_rep1, us_rep1 -> bool

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy2 : us_rep1

type map__ref = { map__content : us_rep1
}

function map__ref_map__content__projection(a: map__ref) : us_rep1 =
  (a).map__content

logic oeq : us_rep1, us_rep1 -> bool

logic oeq__function_guard : bool, us_rep1, us_rep1 -> prop

type us_split_fields2 = { rec__p__my_sets__cursor__node : count_type
}

function us_split_fields_rec__p__my_sets__cursor__node__projection(a: us_split_fields2) : count_type =
  (a).rec__p__my_sets__cursor__node

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep2 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__2__projection(a: us_rep2) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq4(a: us_rep2, b: us_rep2) : bool =
  (if (to_rep(((a).us_split_fields3).rec__p__my_sets__cursor__node) = to_rep(((b).us_split_fields3).rec__p__my_sets__cursor__node)) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic p__my_sets__cursor__node__first__bit : int

logic p__my_sets__cursor__node__last__bit : int

logic p__my_sets__cursor__node__position : int

axiom p__my_sets__cursor__node__first__bit_axiom :
  (0 <= p__my_sets__cursor__node__first__bit)

axiom p__my_sets__cursor__node__last__bit_axiom :
  (p__my_sets__cursor__node__first__bit <  p__my_sets__cursor__node__last__bit)

axiom p__my_sets__cursor__node__position_axiom :
  (0 <= p__my_sets__cursor__node__position)

logic user_eq3 : us_rep2, us_rep2 -> bool

logic dummy3 : us_rep2

type cursor__ref = { cursor__content : us_rep2
}

function cursor__ref_cursor__content__projection(a: cursor__ref) : us_rep2 =
  (a).cursor__content

type key_type__ref = { key_type__content : us_rep2
}

function key_type__ref_key_type__content__projection(a: key_type__ref) : us_rep2 =
  (a).key_type__content

logic has_key : us_rep1, us_rep2 -> bool

logic has_key__function_guard : bool, us_rep1, us_rep2 -> prop

logic get : us_rep1, us_rep2 -> int

logic get__function_guard : int, us_rep1, us_rep2 -> prop

logic length : us_rep1 -> int

logic length__function_guard : int, us_rep1 -> prop

logic is_empty : us_rep1 -> bool

logic is_empty__function_guard : bool, us_rep1 -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep1. forall b:us_rep1 [user_eq2(a, b)]. (user_eq2(a,
  b) = oeq(a, b)))

predicate default_initial_assumption(temp___expr_405: us_rep1,
  temp___skip_top_level_406: bool) =
  ((not (temp___skip_top_level_406 = true)) ->
  ((is_empty(temp___expr_405) = true) and (length(temp___expr_405) = 0)))

axiom oeq__post_axiom :
  (forall left:us_rep1. forall right:us_rep1 [oeq(left, right)]. ((oeq(left,
  right) = true) ->
  (forall key:us_rep2. ((has_key(left, key) = true) -> (has_key(right,
  key) = true)))))

axiom oeq__post_axiom1 :
  (forall left:us_rep1. forall right:us_rep1 [oeq(left, right)]. ((oeq(left,
  right) = true) ->
  (forall key:us_rep2. ((has_key(left, key) = true) -> (get(right,
  key) = get(left, key))))))

axiom oeq__post_axiom2 :
  (forall left:us_rep1. forall right:us_rep1 [oeq(left, right)]. ((oeq(left,
  right) = true) ->
  (forall key:us_rep2. ((has_key(right, key) = true) -> (has_key(left,
  key) = true)))))

axiom oeq__post_axiom3 :
  (forall left:us_rep1. forall right:us_rep1 [oeq(left, right)].
  (((forall key:us_rep2. ((has_key(left, key) = true) -> ((has_key(right,
    key) = true) and (get(right, key) = get(left, key))))) and
  (forall key:us_rep2. ((has_key(right, key) = true) -> (has_key(left,
  key) = true)))) -> (oeq(left, right) = true)))

logic positions : us_rep -> us_rep1

logic positions__function_guard : us_rep1, us_rep -> prop

logic no_element : us_rep2

logic attr__ATTRIBUTE_ADDRESS : int

logic length1 : us_rep -> int

logic length__function_guard1 : int, us_rep -> prop

logic oeq1 : us_rep, us_rep -> bool

logic oeq__function_guard1 : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom1 :
  (forall a:us_rep. forall b:us_rep [user_eq1(a, b)]. (user_eq1(a,
  b) = oeq1(a, b)))

axiom positions__post_axiom :
  (forall container:us_rep [positions(container)].
  (not (has_key(positions(container), no_element) = true)))

axiom positions__post_axiom1 :
  (forall container:us_rep [positions(container)]. (let result =
  positions(container) : us_rep1 in
  (forall i:us_rep2. ((has_key(result, i) = true) -> (1 <= get(result, i))))))

axiom positions__post_axiom2 :
  (forall container:us_rep [positions(container)]. (let result =
  positions(container) : us_rep1 in
  (forall i:us_rep2. ((has_key(result, i) = true) -> (get(result,
  i) <= length1(container))))))

axiom positions__post_axiom3 :
  (forall container:us_rep [positions(container)]. (let result =
  positions(container) : us_rep1 in
  (forall i:us_rep2. ((has_key(result, i) = true) ->
  (forall j:us_rep2. ((has_key(result, j) = true) -> ((get(result,
  i) = get(result, j)) -> (bool_eq4(i, j) = true))))))))

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep3

logic bool_eq5 : us_rep3, us_rep3 -> bool

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic user_eq4 : us_rep3, us_rep3 -> bool

logic dummy4 : us_rep3

type sequence__ref = { sequence__content : us_rep3
}

function sequence__ref_sequence__content__projection(a: sequence__ref) : us_rep3 =
  (a).sequence__content

logic bool_eq6 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq6(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq6(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length2(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

logic length3 : us_rep3 -> int

logic length__function_guard2 : int, us_rep3 -> prop

function last(container: us_rep3) : int = (0 + length3(container))

logic last__function_guard : int, us_rep3 -> prop

logic get1 : us_rep3, int -> int

logic get__function_guard1 : int, us_rep3, int -> prop

function oeq2(left: us_rep3, right: us_rep3) : bool =
  andb(bool_eq6(length3(left), length3(right)),
  (if (forall n:int. (((1 <= n) and (n <= last(left))) -> (get1(left,
      n) = get1(right, n)))) then true else false))

logic oeq__function_guard2 : bool, us_rep3, us_rep3 -> prop

logic find : us_rep3, int -> int

logic find__function_guard : int, us_rep3, int -> prop

function e_elements_included(left: us_rep3, right: us_rep3) : bool =
  (if (forall i:int. (((1 <= i) and (i <= length3(left))) ->
      ((0 <  find(right, get1(left, i))) and (get1(right, find(right,
      get1(left, i))) = get1(left, i))))) then true else false)

logic e_elements_included__function_guard : bool, us_rep3, us_rep3 -> prop

logic elements : us_rep -> us_rep3

logic elements__function_guard : us_rep3, us_rep -> prop

axiom oeq__post_axiom4 :
  (forall left:us_rep. forall right:us_rep [oeq1(left, right)]. ((oeq1(left,
  right) = true) -> (oeq2(elements(left), elements(right)) = true)))

axiom oeq__post_axiom5 :
  (forall left:us_rep. forall right:us_rep [oeq1(left, right)].
  ((not (oeq1(left, right) = true)) ->
  ((not (e_elements_included(elements(left), elements(right)) = true)) or
  (not (e_elements_included(elements(right), elements(left)) = true)))))

logic contains : us_rep, int -> bool

logic contains__function_guard : bool, us_rep, int -> prop

type us_main_type3

logic us_main_eq3 : us_main_type3, us_main_type3 -> bool

type us_rep4

logic bool_eq7 : us_rep4, us_rep4 -> bool

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic user_eq5 : us_rep4, us_rep4 -> bool

logic dummy5 : us_rep4

type set__ref1 = { set__content1 : us_rep4
}

function set__ref_set__content__2__projection(a: set__ref1) : us_rep4 =
  (a).set__content1

logic contains1 : us_rep4, int -> bool

logic contains__function_guard1 : bool, us_rep4, int -> prop

logic model : us_rep -> us_rep4

logic model__function_guard : us_rep4, us_rep -> prop

logic key : int -> int

logic key__function_guard : int, int -> prop

logic my_inf : int, int -> bool

logic my_inf__function_guard : bool, int, int -> prop

axiom temp___result_264qtdef :
  (forall left:int. forall right:int. my_inf__function_guard(my_inf(left,
  right), left, right))

axiom temp___result_265qtdef :
  (forall left:int. forall right:int. my_inf__function_guard(my_inf(right,
  left), right, left))

function equivalent_keys(left: int, right: int) : bool =
  andb(notb(my_inf(left, right)), notb(my_inf(right, left)))

logic equivalent_keys__function_guard : bool, int, int -> prop

type element_type

logic element_typeqtint : element_type -> int

axiom element_typeqtaxiom :
  (forall i:element_type. (1 <= element_typeqtint(i)))

axiom element_typeqtaxiom1 :
  (forall i:element_type. (element_typeqtint(i) <= 100))

predicate in_range3(x: int) = ((1 <= x) and (x <= 100))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq6 : element_type, element_type -> bool

logic dummy6 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_element_type__content__3__projection(a: element_type__ref) : element_type =
  (a).element_type__content

type key_type

logic key_typeqtint : key_type -> int

axiom key_typeqtaxiom : (forall i:key_type. (1 <= key_typeqtint(i)))

axiom key_typeqtaxiom1 : (forall i:key_type. (key_typeqtint(i) <= 100))

predicate in_range4(x: int) = ((1 <= x) and (x <= 100))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq7 : key_type, key_type -> bool

logic dummy7 : key_type

type key_type__ref1 = { key_type__content1 : key_type
}

function key_type__ref_key_type__content__3__projection(a: key_type__ref1) : key_type =
  (a).key_type__content1

predicate dynamic_invariant(temp___expr_665: int, temp___is_init_661: bool,
  temp___skip_constant_662: bool, temp___do_toplevel_663: bool,
  temp___do_typ_inv_664: bool) = (((temp___is_init_661 = true) or
  (1 <= 100)) -> in_range4(temp___expr_665))

axiom contains__post_axiom :
  (forall container:us_rep.
  (forall key1:int [contains(container, key1)]. (dynamic_invariant(key1,
  true, true, true, true) -> (forall e:int. key__function_guard(key(e), e)))))

axiom contains__post_axiom1 :
  (forall container:us_rep.
  (forall key1:int [contains(container, key1)]. (dynamic_invariant(key1,
  true, true, true, true) -> ((contains(container, key1) = true) ->
  (exists e:int. ((in_range3(e) and (contains1(model(container),
  e) = true)) and (equivalent_keys(key1, key(e)) = true)))))))

axiom contains__post_axiom2 :
  (forall container:us_rep.
  (forall key1:int [contains(container, key1)]. (dynamic_invariant(key1,
  true, true, true, true) ->
  ((exists e:int. ((in_range3(e) and (contains1(model(container),
   e) = true)) and (equivalent_keys(key1, key(e)) = true))) ->
  (contains(container, key1) = true)))))

function element(container: us_rep, position: us_rep2) : int =
  get1(elements(container), get(positions(container), position))

logic element__function_guard : int, us_rep, us_rep2 -> prop

logic find1 : us_rep, int -> us_rep2

logic find__function_guard1 : us_rep2, us_rep, int -> prop

function element1(container: us_rep, key1: int) : int = element(container,
  find1(container, key1))

logic element__function_guard1 : int, us_rep, int -> prop

type element_type1

logic element_typeqtint1 : element_type1 -> int

axiom element_typeqtaxiom2 :
  (forall i:element_type1. (1 <= element_typeqtint1(i)))

axiom element_typeqtaxiom3 :
  (forall i:element_type1. (element_typeqtint1(i) <= 100))

predicate in_range5(x: int) = ((1 <= x) and (x <= 100))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq8 : element_type1, element_type1 -> bool

logic dummy8 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref_element_type__content__2__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

predicate dynamic_invariant1(temp___expr_293: int, temp___is_init_289: bool,
  temp___skip_constant_290: bool, temp___do_toplevel_291: bool,
  temp___do_typ_inv_292: bool) = (((temp___is_init_289 = true) or
  (1 <= 100)) -> in_range5(temp___expr_293))

logic included_except : us_rep4, us_rep4, int -> bool

logic included_except__function_guard : bool, us_rep4, us_rep4, int -> prop

logic mapping_preserved_except : us_rep3, us_rep3, us_rep1, us_rep1,
  us_rep2 -> bool

logic mapping_preserved_except__function_guard : bool, us_rep3, us_rep3,
  us_rep1, us_rep1, us_rep2 -> prop

logic m_included_except : us_rep4, us_rep4, int -> bool

logic m_included_except__function_guard : bool, us_rep4, us_rep4, int -> prop

logic l__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS1 : int

logic k : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type element_type2

logic element_typeqtint2 : element_type2 -> int

axiom element_typeqtaxiom4 :
  (forall i:element_type2. (1 <= element_typeqtint2(i)))

axiom element_typeqtaxiom5 :
  (forall i:element_type2. (element_typeqtint2(i) <= 100))

predicate in_range6(x: int) = ((1 <= x) and (x <= 100))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq9 : element_type2, element_type2 -> bool

logic dummy9 : element_type2

type element_type__ref2 = { element_type__content2 : element_type2
}

function element_type__ref_element_type__content__projection(a: element_type__ref2) : element_type2 =
  (a).element_type__content2

predicate dynamic_invariant2(temp___expr_286: int, temp___is_init_282: bool,
  temp___skip_constant_283: bool, temp___do_toplevel_284: bool,
  temp___do_typ_inv_285: bool) = (((temp___is_init_282 = true) or
  (1 <= 100)) -> in_range6(temp___expr_286))

type key_type1

logic key_typeqtint1 : key_type1 -> int

axiom key_typeqtaxiom2 : (forall i:key_type1. (1 <= key_typeqtint1(i)))

axiom key_typeqtaxiom3 : (forall i:key_type1. (key_typeqtint1(i) <= 100))

predicate in_range7(x: int) = ((1 <= x) and (x <= 100))

function bool_eq12(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq10 : key_type1, key_type1 -> bool

logic dummy10 : key_type1

type key_type__ref2 = { key_type__content2 : key_type1
}

function key_type__ref_key_type__content__2__projection(a: key_type__ref2) : key_type1 =
  (a).key_type__content2

predicate dynamic_invariant3(temp___expr_658: int, temp___is_init_654: bool,
  temp___skip_constant_655: bool, temp___do_toplevel_656: bool,
  temp___do_typ_inv_657: bool) = (((temp___is_init_654 = true) or
  (1 <= 100)) -> in_range7(temp___expr_658))

axiom my_inf__def_axiom :
  (forall i1:int. forall i2:int [my_inf(i1, i2)]. ((my_inf(i1, i2) = true) ->
  (i1 <  i2)))

axiom my_inf__def_axiom1 :
  (forall i1:int. forall i2:int [my_inf(i1, i2)]. ((i1 <  i2) -> (my_inf(i1,
  i2) = true)))

axiom key__post_axiom :
  (forall i:int [key(i)]. (dynamic_invariant2(i, true, true, true, true) ->
  (let result = key(i) : int in (key__function_guard(result, i) ->
  dynamic_invariant3(result, true, false, true, true)))))

axiom key__def_axiom :
  (forall i:int [key(i)]. (dynamic_invariant2(i, true, true, true, true) ->
  (key(i) = i)))

predicate dynamic_invariant4(temp___expr_304: int, temp___is_init_300: bool,
  temp___skip_constant_301: bool, temp___do_toplevel_302: bool,
  temp___do_typ_inv_303: bool) = (((temp___is_init_300 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_304))

axiom temp___result_157qtdef :
  (forall left:int. forall right:int. my_inf__function_guard(my_inf(left,
  right), left, right))

axiom temp___result_158qtdef :
  (forall left:int. forall right:int. my_inf__function_guard(my_inf(right,
  left), right, left))

function equivalent_elements(left: int, right: int) : bool =
  andb(notb(my_inf(left, right)), notb(my_inf(right, left)))

logic equivalent_elements__function_guard : bool, int, int -> prop

logic rliteral : count_type

axiom rliteral_axiom : (count_typeqtint(rliteral) = 0)

axiom no_element__def_axiom : (no_element = { us_split_fields3 = {
  rec__p__my_sets__cursor__node = rliteral } })

axiom length__post_axiom :
  (forall container:us_rep [length1(container)].
  (length1(container) <= to_rep(((container).us_split_discrs1).rec__p__my_sets__set__capacity)))

axiom length__post_axiom1 :
  (forall container:us_rep [length1(container)].
  dynamic_invariant4(length1(container), true, false, true, true))

axiom temp___result_202qtdef :
  (forall container:us_rep3. forall item:int. forall i:int.
  my_inf__function_guard(my_inf(get1(container, i), item), get1(container,
  i), item))

function e_bigger_than_range(container: us_rep3, fst: int, lst: int,
  item: int) : bool =
  (if (forall i:int. (((fst <= i) and (i <= lst)) -> (my_inf(get1(container,
      i), item) = true))) then true else false)

logic e_bigger_than_range__function_guard : bool, us_rep3, int, int,
  int -> prop

axiom temp___result_204qtdef :
  (forall container:us_rep3. forall item:int. forall i:int.
  my_inf__function_guard(my_inf(item, get1(container, i)), item,
  get1(container, i)))

function e_smaller_than_range(container: us_rep3, fst: int, lst: int,
  item: int) : bool =
  (if (forall i:int. (((fst <= i) and (i <= lst)) -> (my_inf(item,
      get1(container, i)) = true))) then true else false)

logic e_smaller_than_range__function_guard : bool, us_rep3, int, int,
  int -> prop

function e_is_find(container: us_rep3, item: int, position: int) : bool =
  andb((if (0 <  position) then e_bigger_than_range(container, 1,
  (position - 1), item) else of_int(1)),
  (if (position <  length3(container)) then e_smaller_than_range(container,
  (position + 1), length3(container), item) else of_int(1)))

logic e_is_find__function_guard : bool, us_rep3, int, int -> prop

axiom user_eq__def_axiom2 :
  (forall a:us_rep3. forall b:us_rep3 [user_eq4(a, b)]. (user_eq4(a,
  b) = oeq2(a, b)))

predicate default_initial_assumption1(temp___expr_378: us_rep3,
  temp___skip_top_level_379: bool) =
  ((not (temp___skip_top_level_379 = true)) ->
  (length3(temp___expr_378) = 0))

axiom find__post_axiom :
  (forall container:us_rep3.
  (forall item:int [find(container, item)]. (dynamic_invariant1(item, true,
  true, true, true) -> (let result = find(container, item) : int in
  ((0 <  result) -> (result <= length3(container)))))))

axiom find__post_axiom1 :
  (forall container:us_rep3.
  (forall item:int [find(container, item)]. (dynamic_invariant1(item, true,
  true, true, true) -> (let result = find(container, item) : int in
  ((0 <  result) -> (equivalent_elements(item, get1(container,
  result)) = true))))))

axiom find__post_axiom2 :
  (forall container:us_rep3.
  (forall item:int [find(container, item)]. (dynamic_invariant1(item, true,
  true, true, true) -> dynamic_invariant4(find(container, item), true, false,
  true, true))))

logic keys_included : us_rep1, us_rep1 -> bool

logic keys_included__function_guard : bool, us_rep1, us_rep1 -> prop

axiom mapping_preserved_except__post_axiom :
  (forall e_left:us_rep3. forall e_right:us_rep3.
  (forall p_left:us_rep1. forall p_right:us_rep1.
  (forall position:us_rep2 [mapping_preserved_except(e_left, e_right, p_left,
  p_right, position)]. ((mapping_preserved_except(e_left, e_right, p_left,
  p_right, position) = true) -> (keys_included(p_left, p_right) = true)))))

axiom mapping_preserved_except__post_axiom1 :
  (forall e_left:us_rep3. forall e_right:us_rep3.
  (forall p_left:us_rep1. forall p_right:us_rep1.
  (forall position:us_rep2 [mapping_preserved_except(e_left, e_right, p_left,
  p_right, position)]. ((mapping_preserved_except(e_left, e_right, p_left,
  p_right, position) = true) ->
  (forall c:us_rep2. ((has_key(p_left, c) = true) -> ((not (bool_eq4(c,
  position) = true)) -> (get1(e_left, get(p_left, c)) = get1(e_right,
  get(p_right, c))))))))))

logic length4 : us_rep4 -> int

logic length__function_guard3 : int, us_rep4 -> prop

logic oeq3 : us_rep4, us_rep4 -> bool

logic oeq__function_guard3 : bool, us_rep4, us_rep4 -> prop

logic is_empty1 : us_rep4 -> bool

logic is_empty__function_guard1 : bool, us_rep4 -> prop

axiom user_eq__def_axiom3 :
  (forall a:us_rep4. forall b:us_rep4 [user_eq5(a, b)]. (user_eq5(a,
  b) = oeq3(a, b)))

predicate default_initial_assumption2(temp___expr_342: us_rep4,
  temp___skip_top_level_343: bool) =
  ((not (temp___skip_top_level_343 = true)) ->
  (is_empty1(temp___expr_342) = true))

axiom model__post_axiom :
  (forall container:us_rep [model(container)].
  (length4(model(container)) = length1(container)))

function iter_has_element(container: us_rep3, position: int) : bool =
  andb((if (1 <= position) then true else false),
  (if (position <= last(container)) then true else false))

logic iter_has_element__function_guard : bool, us_rep3, int -> prop

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. (0 <= extended_indexqtint(i)))

axiom extended_indexqtaxiom1 :
  (forall i:extended_index. (extended_indexqtint(i) <= 2147483647))

predicate in_range8(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq13(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq11 : extended_index, extended_index -> bool

logic dummy11 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref_extended_index__content__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

axiom elements__post_axiom :
  (forall container:us_rep [elements(container)].
  (length3(elements(container)) = length1(container)))

axiom elements__post_axiom1 :
  (forall container:us_rep [elements(container)]. (let result =
  elements(container) : us_rep3 in
  (forall temp___458:int. ((in_range8(temp___458) and
  (iter_has_element(result, temp___458) = true)) ->
  (contains1(model(container), get1(result, temp___458)) = true)))))

axiom elements__post_axiom2 :
  (forall container:us_rep [elements(container)].
  (forall item:int. ((in_range3(item) and (contains1(model(container),
  item) = true)) -> (0 <  find(elements(container), item)))))

axiom elements__post_axiom3 :
  (forall container:us_rep [elements(container)]. (let result =
  elements(container) : us_rep3 in
  (forall item:int. ((in_range3(item) and (contains1(model(container),
  item) = true)) -> (equivalent_elements(get1(result, find(result, item)),
  item) = true)))))

axiom elements__post_axiom4 :
  (forall container:us_rep [elements(container)]. (let result =
  elements(container) : us_rep3 in
  (forall i:int. (((1 <= i) and (i <= length1(container))) -> (find(result,
  get1(result, i)) = i)))))

axiom elements__post_axiom5 :
  (forall container:us_rep [elements(container)]. (let result =
  elements(container) : us_rep3 in
  (forall i:int. (((1 <= i) and (i <= length1(container))) ->
  (e_is_find(result, get1(result, i), i) = true)))))

function has_element(container: us_rep, position: us_rep2) : bool =
  has_key(positions(container), position)

logic has_element__function_guard : bool, us_rep, us_rep2 -> prop

predicate dynamic_invariant5(temp___expr_334: int, temp___is_init_330: bool,
  temp___skip_constant_331: bool, temp___do_toplevel_332: bool,
  temp___do_typ_inv_333: bool) = (((temp___is_init_330 = true) or
  (1 <= 100)) -> in_range3(temp___expr_334))

axiom contains__post_axiom3 :
  (forall container:us_rep4.
  (forall item:int [contains1(container, item)]. (dynamic_invariant5(item,
  true, true, true, true) -> ((of_int(1) = true) ->
  ((exists e:int. ((in_range3(e) and (contains1(container, e) = true)) and
   (equivalent_elements(e, item) = true))) ->
  (contains1(container, item) = true))))))

axiom length__post_axiom2 :
  (forall container:us_rep4 [length4(container)].
  dynamic_invariant4(length4(container), true, false, true, true))

logic ole : us_rep4, us_rep4 -> bool

logic ole__function_guard : bool, us_rep4, us_rep4 -> prop

axiom ole__post_axiom :
  (forall left:us_rep4. forall right:us_rep4 [ole(left, right)]. ((ole(left,
  right) = true) ->
  (forall item:int. ((in_range3(item) and (contains1(left, item) = true)) ->
  (contains1(right, item) = true)))))

axiom ole__post_axiom1 :
  (forall left:us_rep4. forall right:us_rep4 [ole(left, right)].
  ((forall item:int. ((in_range3(item) and (contains1(left, item) = true)) ->
   (contains1(right, item) = true))) ->
  (ole(left, right) = true)))

axiom oeq__post_axiom6 :
  (forall left:us_rep4. forall right:us_rep4 [oeq3(left, right)].
  ((oeq3(left, right) = true) -> (ole(left, right) = true)))

axiom oeq__post_axiom7 :
  (forall left:us_rep4. forall right:us_rep4 [oeq3(left, right)].
  ((oeq3(left, right) = true) -> (ole(right, left) = true)))

axiom oeq__post_axiom8 :
  (forall left:us_rep4. forall right:us_rep4 [oeq3(left, right)].
  (((ole(left, right) = true) and (ole(right, left) = true)) -> (oeq3(left,
  right) = true)))

axiom is_empty__post_axiom :
  (forall container:us_rep4 [is_empty1(container)].
  ((is_empty1(container) = true) ->
  (forall item:int. (not (in_range3(item) and (contains1(container,
  item) = true))))))

axiom is_empty__post_axiom1 :
  (forall container:us_rep4 [is_empty1(container)].
  ((forall item:int. (not (in_range3(item) and (contains1(container,
   item) = true)))) ->
  (is_empty1(container) = true)))

axiom is_empty__post_axiom2 :
  (forall container:us_rep4 [is_empty1(container)].
  ((is_empty1(container) = true) -> (length4(container) = 0)))

axiom is_empty__post_axiom3 :
  (forall container:us_rep4 [is_empty1(container)].
  ((length4(container) = 0) -> (is_empty1(container) = true)))

axiom included_except__post_axiom :
  (forall left:us_rep4. forall right:us_rep4.
  (forall item:int [included_except(left, right, item)].
  (dynamic_invariant5(item, true, true, true, true) ->
  ((included_except(left, right, item) = true) ->
  (forall e:int. ((in_range3(e) and (contains1(left, e) = true)) ->
  ((contains1(right, e) = true) or (equivalent_elements(e, item) = true))))))))

axiom included_except__post_axiom1 :
  (forall left:us_rep4. forall right:us_rep4.
  (forall item:int [included_except(left, right, item)].
  (dynamic_invariant5(item, true, true, true, true) ->
  ((forall e:int. ((in_range3(e) and (contains1(left, e) = true)) ->
   ((contains1(right, e) = true) or (equivalent_elements(e, item) = true)))) ->
  (included_except(left, right, item) = true)))))

predicate dynamic_invariant6(temp___expr_370: int, temp___is_init_366: bool,
  temp___skip_constant_367: bool, temp___do_toplevel_368: bool,
  temp___do_typ_inv_369: bool) = (((temp___is_init_366 = true) or
  (0 <= 2147483647)) -> in_range8(temp___expr_370))

axiom length__post_axiom3 :
  (forall container:us_rep3 [length3(container)].
  ((0 + length3(container)) <= 2147483647))

axiom length__post_axiom4 :
  (forall container:us_rep3 [length3(container)].
  dynamic_invariant4(length3(container), true, false, true, true))

type element_type3

logic element_typeqtint3 : element_type3 -> int

axiom element_typeqtaxiom6 :
  (forall i:element_type3. (1 <= element_typeqtint3(i)))

axiom element_typeqtaxiom7 :
  (forall i:element_type3. (element_typeqtint3(i) <= 100))

predicate in_range9(x: int) = ((1 <= x) and (x <= 100))

function bool_eq14(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq12 : element_type3, element_type3 -> bool

logic dummy12 : element_type3

type element_type__ref3 = { element_type__content3 : element_type3
}

function element_type__ref_element_type__content__4__projection(a: element_type__ref3) : element_type3 =
  (a).element_type__content3

predicate dynamic_invariant7(temp___expr_363: int, temp___is_init_359: bool,
  temp___skip_constant_360: bool, temp___do_toplevel_361: bool,
  temp___do_typ_inv_362: bool) = (((temp___is_init_359 = true) or
  (1 <= 100)) -> in_range9(temp___expr_363))

axiom get__post_axiom :
  (forall container:us_rep3.
  (forall position:int [get1(container, position)].
  ((dynamic_invariant6(position, true, true, true, true) and
  ((1 <= position) and (position <= last(container)))) ->
  dynamic_invariant7(get1(container, position), true, false, true, true))))

axiom has_key__post_axiom :
  (forall container:us_rep1.
  (forall key1:us_rep2 [has_key(container, key1)]. ((of_int(0) = true) ->
  ((exists k1:us_rep2. ((has_key(container, k1) = true) and (bool_eq4(k1,
   key1) = true))) ->
  (has_key(container, key1) = true)))))

logic witness : us_rep1, us_rep2 -> int

logic witness__function_guard : int, us_rep1, us_rep2 -> prop

logic w_get : us_rep1, int -> int

logic w_get__function_guard : int, us_rep1, int -> prop

type element_type4

logic element_typeqtint4 : element_type4 -> int

axiom element_typeqtaxiom8 :
  (forall i:element_type4. (1 <= element_typeqtint4(i)))

axiom element_typeqtaxiom9 :
  (forall i:element_type4. (element_typeqtint4(i) <= 2147483647))

predicate in_range10(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq15(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq13 : element_type4, element_type4 -> bool

logic dummy13 : element_type4

type element_type__ref4 = { element_type__content4 : element_type4
}

function element_type__ref_element_type__content__5__projection(a: element_type__ref4) : element_type4 =
  (a).element_type__content4

predicate dynamic_invariant8(temp___expr_397: int, temp___is_init_393: bool,
  temp___skip_constant_394: bool, temp___do_toplevel_395: bool,
  temp___do_typ_inv_396: bool) = (((temp___is_init_393 = true) or
  (1 <= 2147483647)) -> in_range10(temp___expr_397))

axiom get__post_axiom1 :
  (forall container:us_rep1.
  (forall key1:us_rep2 [get(container, key1)]. ((has_key(container,
  key1) = true) -> ((of_int(0) = true) -> (get(container,
  key1) = w_get(container, witness(container, key1)))))))

axiom get__post_axiom2 :
  (forall container:us_rep1.
  (forall key1:us_rep2 [get(container, key1)]. ((has_key(container,
  key1) = true) -> ((of_int(0) = true) ->
  (forall k1:us_rep2. ((has_key(container, k1) = true) -> ((bool_eq4(k1,
  key1) = true) -> (witness(container, key1) = witness(container, k1)))))))))

axiom get__post_axiom3 :
  (forall container:us_rep1.
  (forall key1:us_rep2 [get(container, key1)]. ((has_key(container,
  key1) = true) -> ((of_int(0) = true) ->
  (forall k1:us_rep2. ((has_key(container, k1) = true) ->
  ((witness(container, key1) = witness(container, k1)) -> (bool_eq4(k1,
  key1) = true))))))))

axiom get__post_axiom4 :
  (forall container:us_rep1.
  (forall key1:us_rep2 [get(container, key1)]. ((has_key(container,
  key1) = true) -> dynamic_invariant8(get(container, key1), true, false,
  true, true))))

axiom length__post_axiom5 :
  (forall container:us_rep1 [length(container)].
  dynamic_invariant4(length(container), true, false, true, true))

axiom is_empty__post_axiom4 :
  (forall container:us_rep1 [is_empty(container)].
  ((is_empty(container) = true) ->
  (forall key1:us_rep2. (not (has_key(container, key1) = true)))))

axiom is_empty__post_axiom5 :
  (forall container:us_rep1 [is_empty(container)].
  ((forall key1:us_rep2. (not (has_key(container, key1) = true))) ->
  (is_empty(container) = true)))

axiom keys_included__post_axiom :
  (forall left:us_rep1. forall right:us_rep1 [keys_included(left, right)].
  ((keys_included(left, right) = true) ->
  (forall key1:us_rep2. ((has_key(left, key1) = true) -> (has_key(right,
  key1) = true)))))

axiom keys_included__post_axiom1 :
  (forall left:us_rep1. forall right:us_rep1 [keys_included(left, right)].
  ((forall key1:us_rep2. ((has_key(left, key1) = true) -> (has_key(right,
   key1) = true))) ->
  (keys_included(left, right) = true)))

logic has_witness : us_rep1, int -> bool

logic has_witness__function_guard : bool, us_rep1, int -> prop

axiom witness__post_axiom :
  (forall container:us_rep1.
  (forall key1:us_rep2 [witness(container, key1)]. ((has_key(container,
  key1) = true) -> (has_witness(container, witness(container,
  key1)) = true))))

axiom witness__post_axiom1 :
  (forall container:us_rep1.
  (forall key1:us_rep2 [witness(container, key1)]. ((has_key(container,
  key1) = true) -> dynamic_invariant4(witness(container, key1), true, false,
  true, true))))

axiom w_get__post_axiom :
  (forall container:us_rep1.
  (forall witness1:int [w_get(container, witness1)].
  ((dynamic_invariant4(witness1, true, true, true, true) and
  (has_witness(container, witness1) = true)) ->
  dynamic_invariant8(w_get(container, witness1), true, false, true, true))))

axiom temp___result_267qtdef :
  (forall container:us_rep3. forall i:int.
  key__function_guard(key(get1(container, i)), get1(container, i)))

axiom temp___result_267qtdef1 :
  (forall container:us_rep3. forall i:int.
  key__function_guard(key(get1(container, i)), get1(container, i)))

axiom temp___result_268qtdef :
  (forall container:us_rep3. forall key1:int. forall i:int.
  my_inf__function_guard(my_inf(key(get1(container, i)), key1),
  key(get1(container, i)), key1))

function e_bigger_than_range1(container: us_rep3, fst: int, lst: int,
  key1: int) : bool =
  (if (forall i:int. (((fst <= i) and (i <= lst)) ->
      (my_inf(key(get1(container, i)), key1) = true))) then true else false)

logic e_bigger_than_range__function_guard1 : bool, us_rep3, int, int,
  int -> prop

axiom temp___result_270qtdef :
  (forall container:us_rep3. forall i:int.
  key__function_guard(key(get1(container, i)), get1(container, i)))

axiom temp___result_270qtdef1 :
  (forall container:us_rep3. forall i:int.
  key__function_guard(key(get1(container, i)), get1(container, i)))

axiom temp___result_271qtdef :
  (forall container:us_rep3. forall key1:int. forall i:int.
  my_inf__function_guard(my_inf(key1, key(get1(container, i))), key1,
  key(get1(container, i))))

function e_smaller_than_range1(container: us_rep3, fst: int, lst: int,
  key1: int) : bool =
  (if (forall i:int. (((fst <= i) and (i <= lst)) -> (my_inf(key1,
      key(get1(container, i))) = true))) then true else false)

logic e_smaller_than_range__function_guard1 : bool, us_rep3, int, int,
  int -> prop

function e_is_find1(container: us_rep3, key1: int, position: int) : bool =
  andb((if (0 <  position) then e_bigger_than_range1(container, 1,
  (position - 1), key1) else of_int(1)),
  (if (position <  length3(container)) then e_smaller_than_range1(container,
  (position + 1), length3(container), key1) else of_int(1)))

logic e_is_find__function_guard1 : bool, us_rep3, int, int -> prop

logic find2 : us_rep3, int -> int

logic find__function_guard2 : int, us_rep3, int -> prop

axiom find__post_axiom3 :
  (forall container:us_rep3.
  (forall key1:int [find2(container, key1)]. (dynamic_invariant(key1, true,
  true, true, true) ->
  (forall container1:us_rep3. forall result:int.
  key__function_guard(key(get1(container1, result)), get1(container1,
  result))))))

axiom find__post_axiom4 :
  (forall container:us_rep3.
  (forall key1:int [find2(container, key1)]. (dynamic_invariant(key1, true,
  true, true, true) -> (let result = find2(container, key1) : int in
  ((0 <  result) -> (result <= length3(container)))))))

axiom find__post_axiom5 :
  (forall container:us_rep3.
  (forall key1:int [find2(container, key1)]. (dynamic_invariant(key1, true,
  true, true, true) -> (let result = find2(container, key1) : int in
  ((0 <  result) -> (equivalent_keys(key1, key(get1(container,
  result))) = true))))))

axiom find__post_axiom6 :
  (forall container:us_rep3.
  (forall key1:int [find2(container, key1)]. (dynamic_invariant(key1, true,
  true, true, true) -> (let result = find2(container, key1) : int in
  ((0 <  result) -> (e_is_find1(container, key1, result) = true))))))

axiom find__post_axiom7 :
  (forall container:us_rep3.
  (forall key1:int [find2(container, key1)]. (dynamic_invariant(key1, true,
  true, true, true) -> dynamic_invariant4(find2(container, key1), true,
  false, true, true))))

axiom m_included_except__post_axiom :
  (forall left:us_rep4. forall right:us_rep4.
  (forall key1:int [m_included_except(left, right, key1)].
  (dynamic_invariant(key1, true, true, true, true) ->
  (forall e:int. key__function_guard(key(e), e)))))

axiom m_included_except__post_axiom1 :
  (forall left:us_rep4. forall right:us_rep4.
  (forall key1:int [m_included_except(left, right, key1)].
  (dynamic_invariant(key1, true, true, true, true) ->
  ((m_included_except(left, right, key1) = true) ->
  (forall e:int. ((in_range3(e) and (contains1(left, e) = true)) ->
  ((contains1(right, e) = true) or (equivalent_keys(key(e), key1) = true))))))))

axiom m_included_except__post_axiom2 :
  (forall left:us_rep4. forall right:us_rep4.
  (forall key1:int [m_included_except(left, right, key1)].
  (dynamic_invariant(key1, true, true, true, true) ->
  ((forall e:int. ((in_range3(e) and (contains1(left, e) = true)) ->
   ((contains1(right, e) = true) or (equivalent_keys(key(e), key1) = true)))) ->
  (m_included_except(left, right, key1) = true)))))

axiom find__post_axiom8 :
  (forall container:us_rep.
  (forall key1:int [find1(container, key1)]. (dynamic_invariant(key1, true,
  true, true, true) -> (forall e:int. key__function_guard(key(e), e)))))

axiom find__post_axiom9 :
  (forall container:us_rep.
  (forall key1:int [find1(container, key1)]. (dynamic_invariant(key1, true,
  true, true, true) ->
  (forall container1:us_rep. forall result:us_rep2.
  key__function_guard(key(element(container1, result)), element(container1,
  result))))))

axiom find__post_axiom10 :
  (forall container:us_rep.
  (forall key1:int [find1(container, key1)]. (dynamic_invariant(key1, true,
  true, true, true) ->
  ((forall e:int. ((in_range3(e) and (contains1(model(container),
   e) = true)) -> (not (equivalent_keys(key1, key(e)) = true)))) ->
  (not (has_key(positions(container), find1(container, key1)) = true))))))

axiom find__post_axiom11 :
  (forall container:us_rep.
  (forall key1:int [find1(container, key1)]. (dynamic_invariant(key1, true,
  true, true, true) ->
  ((forall e:int. ((in_range3(e) and (contains1(model(container),
   e) = true)) -> (not (equivalent_keys(key1, key(e)) = true)))) ->
  (bool_eq4(find1(container, key1), no_element) = true)))))

axiom find__post_axiom12 :
  (forall container:us_rep.
  (forall key1:int [find1(container, key1)]. (dynamic_invariant(key1, true,
  true, true, true) ->
  ((not (forall e:int. ((in_range3(e) and (contains1(model(container),
        e) = true)) -> (not (equivalent_keys(key1, key(e)) = true))))) ->
  (has_key(positions(container), find1(container, key1)) = true)))))

axiom find__post_axiom13 :
  (forall container:us_rep.
  (forall key1:int [find1(container, key1)]. (dynamic_invariant(key1, true,
  true, true, true) ->
  ((not (forall e:int. ((in_range3(e) and (contains1(model(container),
        e) = true)) -> (not (equivalent_keys(key1, key(e)) = true))))) ->
  (get(positions(container), find1(container,
  key1)) = find2(elements(container), key1))))))

axiom find__post_axiom14 :
  (forall container:us_rep.
  (forall key1:int [find1(container, key1)]. (dynamic_invariant(key1, true,
  true, true, true) ->
  ((not (forall e:int. ((in_range3(e) and (contains1(model(container),
        e) = true)) -> (not (equivalent_keys(key1, key(e)) = true))))) ->
  (equivalent_keys(key(element(container, find1(container, key1))),
  key1) = true)))))

 (* File "p.ads", line 25, characters 0-0 *)
goal defqtvc :
  (forall l__split_fields:us_main_type. (dynamic_invariant3(k, true, false,
  true, true) -> ((contains({ us_split_discrs1 = l__split_discrs;
  us_split_fields1 = { rec__p__my_sets__set = l__split_fields } },
  k) = true) -> (let o = k : int in (let o1 = { us_split_discrs1 =
  l__split_discrs; us_split_fields1 = { rec__p__my_sets__set =
  l__split_fields } } : us_rep in (let o2 = element1(o1, o) : int in
  ((dynamic_invariant1(o2, true, false, true, true) and (o2 = element(o1,
  find1(o1, o)))) ->
  (forall e:int. ((e = o2) -> (dynamic_invariant2(e, true, false, true,
  true) -> (contains({ us_split_discrs1 = l__split_discrs; us_split_fields1 =
  { rec__p__my_sets__set = l__split_fields } }, k) = true)))))))))))
