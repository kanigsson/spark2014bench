(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type id_type

logic id_typeqtint : id_type -> int

axiom id_typeqtaxiom : (forall i:id_type. (0 <= id_typeqtint(i)))

axiom id_typeqtaxiom1 : (forall i:id_type. (id_typeqtint(i) <= 1))

predicate in_range1(x: int) = ((0 <= x) and (x <= 1))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : id_type, id_type -> bool

logic dummy : id_type

type id_type__ref = { id_type__content : id_type
}

function id_type__ref_id_type__content__projection(a: id_type__ref) : id_type =
  (a).id_type__content

function to_rep(x: id_type) : int = id_typeqtint(x)

logic of_rep : int -> id_type

axiom inversion_axiom :
  (forall x:id_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:id_type [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,id_type) farray
}

logic slide : (int,id_type) farray, int, int -> (int,id_type) farray

axiom slide_eq :
  (forall a:(int,id_type) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,id_type) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,id_type) farray, a__first: int, a__last: int,
  b: (int,id_type) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,id_type) farray. forall b:(int,id_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,id_type) farray. forall b:(int,id_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,id_type) farray. forall b:(int,id_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,id_type) farray. forall b:(int,id_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic map : (int,id_type) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic id : int

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant(temp___expr_188: int, temp___is_init_184: bool,
  temp___skip_constant_185: bool, temp___do_toplevel_186: bool,
  temp___do_typ_inv_187: bool) = (((temp___is_init_184 = true) or
  (0 <= 1)) -> in_range1(temp___expr_188))

logic main__map__aggregate_def : int, int -> (int,id_type) farray

axiom map__def_axiom : (map = main__map__aggregate_def(1, 0))

logic rliteral : id_type

axiom rliteral_axiom : (id_typeqtint(rliteral) = 1)

logic rliteral1 : id_type

axiom rliteral_axiom1 : (id_typeqtint(rliteral1) = 0)

axiom def_axiom :
  (forall temp___156:int. forall temp___157:int.
  ((dynamic_invariant(temp___156, true, true, true, true) and
  dynamic_invariant(temp___157, true, true, true, true)) ->
  ((main__map__aggregate_def(temp___156, temp___157)[0]) = rliteral)))

axiom def_axiom1 :
  (forall temp___156:int. forall temp___157:int.
  ((dynamic_invariant(temp___156, true, true, true, true) and
  dynamic_invariant(temp___157, true, true, true, true)) ->
  ((main__map__aggregate_def(temp___156, temp___157)[1]) = rliteral1)))

 (* File "main.adb", line 35, characters 0-0 *)
goal defqtvc : ((main__map__aggregate_def(1, 0) = map) ->
  (dynamic_invariant(id, true, false, true, true) -> (to_rep((map[0])) = 1)))
